
0004_Alarm_Keypad.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007234  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000f2c  08007404  08007404  00017404  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008330  08008330  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  08008330  08008330  00018330  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008338  08008338  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008338  08008338  00018338  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800833c  0800833c  0001833c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08008340  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005074  20000068  080083a8  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200050dc  080083a8  000250dc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001c72c  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003c3f  00000000  00000000  0003c807  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001858  00000000  00000000  00040448  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001313  00000000  00000000  00041ca0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002475c  00000000  00000000  00042fb3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001d80b  00000000  00000000  0006770f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000de664  00000000  00000000  00084f1a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006aec  00000000  00000000  00163580  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  0016a06c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000068 	.word	0x20000068
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080073ec 	.word	0x080073ec

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000006c 	.word	0x2000006c
 800020c:	080073ec 	.word	0x080073ec

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr

08000234 <__aeabi_uldivmod>:
 8000234:	b953      	cbnz	r3, 800024c <__aeabi_uldivmod+0x18>
 8000236:	b94a      	cbnz	r2, 800024c <__aeabi_uldivmod+0x18>
 8000238:	2900      	cmp	r1, #0
 800023a:	bf08      	it	eq
 800023c:	2800      	cmpeq	r0, #0
 800023e:	bf1c      	itt	ne
 8000240:	f04f 31ff 	movne.w	r1, #4294967295
 8000244:	f04f 30ff 	movne.w	r0, #4294967295
 8000248:	f000 b970 	b.w	800052c <__aeabi_idiv0>
 800024c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000250:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000254:	f000 f806 	bl	8000264 <__udivmoddi4>
 8000258:	f8dd e004 	ldr.w	lr, [sp, #4]
 800025c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000260:	b004      	add	sp, #16
 8000262:	4770      	bx	lr

08000264 <__udivmoddi4>:
 8000264:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000268:	9e08      	ldr	r6, [sp, #32]
 800026a:	460d      	mov	r5, r1
 800026c:	4604      	mov	r4, r0
 800026e:	460f      	mov	r7, r1
 8000270:	2b00      	cmp	r3, #0
 8000272:	d14a      	bne.n	800030a <__udivmoddi4+0xa6>
 8000274:	428a      	cmp	r2, r1
 8000276:	4694      	mov	ip, r2
 8000278:	d965      	bls.n	8000346 <__udivmoddi4+0xe2>
 800027a:	fab2 f382 	clz	r3, r2
 800027e:	b143      	cbz	r3, 8000292 <__udivmoddi4+0x2e>
 8000280:	fa02 fc03 	lsl.w	ip, r2, r3
 8000284:	f1c3 0220 	rsb	r2, r3, #32
 8000288:	409f      	lsls	r7, r3
 800028a:	fa20 f202 	lsr.w	r2, r0, r2
 800028e:	4317      	orrs	r7, r2
 8000290:	409c      	lsls	r4, r3
 8000292:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000296:	fa1f f58c 	uxth.w	r5, ip
 800029a:	fbb7 f1fe 	udiv	r1, r7, lr
 800029e:	0c22      	lsrs	r2, r4, #16
 80002a0:	fb0e 7711 	mls	r7, lr, r1, r7
 80002a4:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002a8:	fb01 f005 	mul.w	r0, r1, r5
 80002ac:	4290      	cmp	r0, r2
 80002ae:	d90a      	bls.n	80002c6 <__udivmoddi4+0x62>
 80002b0:	eb1c 0202 	adds.w	r2, ip, r2
 80002b4:	f101 37ff 	add.w	r7, r1, #4294967295
 80002b8:	f080 811c 	bcs.w	80004f4 <__udivmoddi4+0x290>
 80002bc:	4290      	cmp	r0, r2
 80002be:	f240 8119 	bls.w	80004f4 <__udivmoddi4+0x290>
 80002c2:	3902      	subs	r1, #2
 80002c4:	4462      	add	r2, ip
 80002c6:	1a12      	subs	r2, r2, r0
 80002c8:	b2a4      	uxth	r4, r4
 80002ca:	fbb2 f0fe 	udiv	r0, r2, lr
 80002ce:	fb0e 2210 	mls	r2, lr, r0, r2
 80002d2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002d6:	fb00 f505 	mul.w	r5, r0, r5
 80002da:	42a5      	cmp	r5, r4
 80002dc:	d90a      	bls.n	80002f4 <__udivmoddi4+0x90>
 80002de:	eb1c 0404 	adds.w	r4, ip, r4
 80002e2:	f100 32ff 	add.w	r2, r0, #4294967295
 80002e6:	f080 8107 	bcs.w	80004f8 <__udivmoddi4+0x294>
 80002ea:	42a5      	cmp	r5, r4
 80002ec:	f240 8104 	bls.w	80004f8 <__udivmoddi4+0x294>
 80002f0:	4464      	add	r4, ip
 80002f2:	3802      	subs	r0, #2
 80002f4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002f8:	1b64      	subs	r4, r4, r5
 80002fa:	2100      	movs	r1, #0
 80002fc:	b11e      	cbz	r6, 8000306 <__udivmoddi4+0xa2>
 80002fe:	40dc      	lsrs	r4, r3
 8000300:	2300      	movs	r3, #0
 8000302:	e9c6 4300 	strd	r4, r3, [r6]
 8000306:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030a:	428b      	cmp	r3, r1
 800030c:	d908      	bls.n	8000320 <__udivmoddi4+0xbc>
 800030e:	2e00      	cmp	r6, #0
 8000310:	f000 80ed 	beq.w	80004ee <__udivmoddi4+0x28a>
 8000314:	2100      	movs	r1, #0
 8000316:	e9c6 0500 	strd	r0, r5, [r6]
 800031a:	4608      	mov	r0, r1
 800031c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000320:	fab3 f183 	clz	r1, r3
 8000324:	2900      	cmp	r1, #0
 8000326:	d149      	bne.n	80003bc <__udivmoddi4+0x158>
 8000328:	42ab      	cmp	r3, r5
 800032a:	d302      	bcc.n	8000332 <__udivmoddi4+0xce>
 800032c:	4282      	cmp	r2, r0
 800032e:	f200 80f8 	bhi.w	8000522 <__udivmoddi4+0x2be>
 8000332:	1a84      	subs	r4, r0, r2
 8000334:	eb65 0203 	sbc.w	r2, r5, r3
 8000338:	2001      	movs	r0, #1
 800033a:	4617      	mov	r7, r2
 800033c:	2e00      	cmp	r6, #0
 800033e:	d0e2      	beq.n	8000306 <__udivmoddi4+0xa2>
 8000340:	e9c6 4700 	strd	r4, r7, [r6]
 8000344:	e7df      	b.n	8000306 <__udivmoddi4+0xa2>
 8000346:	b902      	cbnz	r2, 800034a <__udivmoddi4+0xe6>
 8000348:	deff      	udf	#255	; 0xff
 800034a:	fab2 f382 	clz	r3, r2
 800034e:	2b00      	cmp	r3, #0
 8000350:	f040 8090 	bne.w	8000474 <__udivmoddi4+0x210>
 8000354:	1a8a      	subs	r2, r1, r2
 8000356:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800035a:	fa1f fe8c 	uxth.w	lr, ip
 800035e:	2101      	movs	r1, #1
 8000360:	fbb2 f5f7 	udiv	r5, r2, r7
 8000364:	fb07 2015 	mls	r0, r7, r5, r2
 8000368:	0c22      	lsrs	r2, r4, #16
 800036a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800036e:	fb0e f005 	mul.w	r0, lr, r5
 8000372:	4290      	cmp	r0, r2
 8000374:	d908      	bls.n	8000388 <__udivmoddi4+0x124>
 8000376:	eb1c 0202 	adds.w	r2, ip, r2
 800037a:	f105 38ff 	add.w	r8, r5, #4294967295
 800037e:	d202      	bcs.n	8000386 <__udivmoddi4+0x122>
 8000380:	4290      	cmp	r0, r2
 8000382:	f200 80cb 	bhi.w	800051c <__udivmoddi4+0x2b8>
 8000386:	4645      	mov	r5, r8
 8000388:	1a12      	subs	r2, r2, r0
 800038a:	b2a4      	uxth	r4, r4
 800038c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000390:	fb07 2210 	mls	r2, r7, r0, r2
 8000394:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000398:	fb0e fe00 	mul.w	lr, lr, r0
 800039c:	45a6      	cmp	lr, r4
 800039e:	d908      	bls.n	80003b2 <__udivmoddi4+0x14e>
 80003a0:	eb1c 0404 	adds.w	r4, ip, r4
 80003a4:	f100 32ff 	add.w	r2, r0, #4294967295
 80003a8:	d202      	bcs.n	80003b0 <__udivmoddi4+0x14c>
 80003aa:	45a6      	cmp	lr, r4
 80003ac:	f200 80bb 	bhi.w	8000526 <__udivmoddi4+0x2c2>
 80003b0:	4610      	mov	r0, r2
 80003b2:	eba4 040e 	sub.w	r4, r4, lr
 80003b6:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003ba:	e79f      	b.n	80002fc <__udivmoddi4+0x98>
 80003bc:	f1c1 0720 	rsb	r7, r1, #32
 80003c0:	408b      	lsls	r3, r1
 80003c2:	fa22 fc07 	lsr.w	ip, r2, r7
 80003c6:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ca:	fa05 f401 	lsl.w	r4, r5, r1
 80003ce:	fa20 f307 	lsr.w	r3, r0, r7
 80003d2:	40fd      	lsrs	r5, r7
 80003d4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003d8:	4323      	orrs	r3, r4
 80003da:	fbb5 f8f9 	udiv	r8, r5, r9
 80003de:	fa1f fe8c 	uxth.w	lr, ip
 80003e2:	fb09 5518 	mls	r5, r9, r8, r5
 80003e6:	0c1c      	lsrs	r4, r3, #16
 80003e8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003ec:	fb08 f50e 	mul.w	r5, r8, lr
 80003f0:	42a5      	cmp	r5, r4
 80003f2:	fa02 f201 	lsl.w	r2, r2, r1
 80003f6:	fa00 f001 	lsl.w	r0, r0, r1
 80003fa:	d90b      	bls.n	8000414 <__udivmoddi4+0x1b0>
 80003fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000400:	f108 3aff 	add.w	sl, r8, #4294967295
 8000404:	f080 8088 	bcs.w	8000518 <__udivmoddi4+0x2b4>
 8000408:	42a5      	cmp	r5, r4
 800040a:	f240 8085 	bls.w	8000518 <__udivmoddi4+0x2b4>
 800040e:	f1a8 0802 	sub.w	r8, r8, #2
 8000412:	4464      	add	r4, ip
 8000414:	1b64      	subs	r4, r4, r5
 8000416:	b29d      	uxth	r5, r3
 8000418:	fbb4 f3f9 	udiv	r3, r4, r9
 800041c:	fb09 4413 	mls	r4, r9, r3, r4
 8000420:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000424:	fb03 fe0e 	mul.w	lr, r3, lr
 8000428:	45a6      	cmp	lr, r4
 800042a:	d908      	bls.n	800043e <__udivmoddi4+0x1da>
 800042c:	eb1c 0404 	adds.w	r4, ip, r4
 8000430:	f103 35ff 	add.w	r5, r3, #4294967295
 8000434:	d26c      	bcs.n	8000510 <__udivmoddi4+0x2ac>
 8000436:	45a6      	cmp	lr, r4
 8000438:	d96a      	bls.n	8000510 <__udivmoddi4+0x2ac>
 800043a:	3b02      	subs	r3, #2
 800043c:	4464      	add	r4, ip
 800043e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000442:	fba3 9502 	umull	r9, r5, r3, r2
 8000446:	eba4 040e 	sub.w	r4, r4, lr
 800044a:	42ac      	cmp	r4, r5
 800044c:	46c8      	mov	r8, r9
 800044e:	46ae      	mov	lr, r5
 8000450:	d356      	bcc.n	8000500 <__udivmoddi4+0x29c>
 8000452:	d053      	beq.n	80004fc <__udivmoddi4+0x298>
 8000454:	b156      	cbz	r6, 800046c <__udivmoddi4+0x208>
 8000456:	ebb0 0208 	subs.w	r2, r0, r8
 800045a:	eb64 040e 	sbc.w	r4, r4, lr
 800045e:	fa04 f707 	lsl.w	r7, r4, r7
 8000462:	40ca      	lsrs	r2, r1
 8000464:	40cc      	lsrs	r4, r1
 8000466:	4317      	orrs	r7, r2
 8000468:	e9c6 7400 	strd	r7, r4, [r6]
 800046c:	4618      	mov	r0, r3
 800046e:	2100      	movs	r1, #0
 8000470:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000474:	f1c3 0120 	rsb	r1, r3, #32
 8000478:	fa02 fc03 	lsl.w	ip, r2, r3
 800047c:	fa20 f201 	lsr.w	r2, r0, r1
 8000480:	fa25 f101 	lsr.w	r1, r5, r1
 8000484:	409d      	lsls	r5, r3
 8000486:	432a      	orrs	r2, r5
 8000488:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800048c:	fa1f fe8c 	uxth.w	lr, ip
 8000490:	fbb1 f0f7 	udiv	r0, r1, r7
 8000494:	fb07 1510 	mls	r5, r7, r0, r1
 8000498:	0c11      	lsrs	r1, r2, #16
 800049a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800049e:	fb00 f50e 	mul.w	r5, r0, lr
 80004a2:	428d      	cmp	r5, r1
 80004a4:	fa04 f403 	lsl.w	r4, r4, r3
 80004a8:	d908      	bls.n	80004bc <__udivmoddi4+0x258>
 80004aa:	eb1c 0101 	adds.w	r1, ip, r1
 80004ae:	f100 38ff 	add.w	r8, r0, #4294967295
 80004b2:	d22f      	bcs.n	8000514 <__udivmoddi4+0x2b0>
 80004b4:	428d      	cmp	r5, r1
 80004b6:	d92d      	bls.n	8000514 <__udivmoddi4+0x2b0>
 80004b8:	3802      	subs	r0, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	1b49      	subs	r1, r1, r5
 80004be:	b292      	uxth	r2, r2
 80004c0:	fbb1 f5f7 	udiv	r5, r1, r7
 80004c4:	fb07 1115 	mls	r1, r7, r5, r1
 80004c8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004cc:	fb05 f10e 	mul.w	r1, r5, lr
 80004d0:	4291      	cmp	r1, r2
 80004d2:	d908      	bls.n	80004e6 <__udivmoddi4+0x282>
 80004d4:	eb1c 0202 	adds.w	r2, ip, r2
 80004d8:	f105 38ff 	add.w	r8, r5, #4294967295
 80004dc:	d216      	bcs.n	800050c <__udivmoddi4+0x2a8>
 80004de:	4291      	cmp	r1, r2
 80004e0:	d914      	bls.n	800050c <__udivmoddi4+0x2a8>
 80004e2:	3d02      	subs	r5, #2
 80004e4:	4462      	add	r2, ip
 80004e6:	1a52      	subs	r2, r2, r1
 80004e8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004ec:	e738      	b.n	8000360 <__udivmoddi4+0xfc>
 80004ee:	4631      	mov	r1, r6
 80004f0:	4630      	mov	r0, r6
 80004f2:	e708      	b.n	8000306 <__udivmoddi4+0xa2>
 80004f4:	4639      	mov	r1, r7
 80004f6:	e6e6      	b.n	80002c6 <__udivmoddi4+0x62>
 80004f8:	4610      	mov	r0, r2
 80004fa:	e6fb      	b.n	80002f4 <__udivmoddi4+0x90>
 80004fc:	4548      	cmp	r0, r9
 80004fe:	d2a9      	bcs.n	8000454 <__udivmoddi4+0x1f0>
 8000500:	ebb9 0802 	subs.w	r8, r9, r2
 8000504:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000508:	3b01      	subs	r3, #1
 800050a:	e7a3      	b.n	8000454 <__udivmoddi4+0x1f0>
 800050c:	4645      	mov	r5, r8
 800050e:	e7ea      	b.n	80004e6 <__udivmoddi4+0x282>
 8000510:	462b      	mov	r3, r5
 8000512:	e794      	b.n	800043e <__udivmoddi4+0x1da>
 8000514:	4640      	mov	r0, r8
 8000516:	e7d1      	b.n	80004bc <__udivmoddi4+0x258>
 8000518:	46d0      	mov	r8, sl
 800051a:	e77b      	b.n	8000414 <__udivmoddi4+0x1b0>
 800051c:	3d02      	subs	r5, #2
 800051e:	4462      	add	r2, ip
 8000520:	e732      	b.n	8000388 <__udivmoddi4+0x124>
 8000522:	4608      	mov	r0, r1
 8000524:	e70a      	b.n	800033c <__udivmoddi4+0xd8>
 8000526:	4464      	add	r4, ip
 8000528:	3802      	subs	r0, #2
 800052a:	e742      	b.n	80003b2 <__udivmoddi4+0x14e>

0800052c <__aeabi_idiv0>:
 800052c:	4770      	bx	lr
 800052e:	bf00      	nop

08000530 <Get_Key>:
*/

#include "Keypad4X4.h"
char key;
char Get_Key(void)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b082      	sub	sp, #8
 8000534:	af00      	add	r7, sp, #0
	int done=1;
 8000536:	2301      	movs	r3, #1
 8000538:	607b      	str	r3, [r7, #4]
	while(done)
 800053a:	e19b      	b.n	8000874 <Get_Key+0x344>
	{
	//COLUMN 3
	HAL_GPIO_WritePin (KC0_GPIO_Port, KC0_Pin, GPIO_PIN_SET);     // Pull the C0 HIGH
 800053c:	2201      	movs	r2, #1
 800053e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000542:	48b3      	ldr	r0, [pc, #716]	; (8000810 <Get_Key+0x2e0>)
 8000544:	f001 fd16 	bl	8001f74 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC1_GPIO_Port, KC1_Pin, GPIO_PIN_RESET);   // Pull the C1 LOW
 8000548:	2200      	movs	r2, #0
 800054a:	2110      	movs	r1, #16
 800054c:	48b0      	ldr	r0, [pc, #704]	; (8000810 <Get_Key+0x2e0>)
 800054e:	f001 fd11 	bl	8001f74 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC2_GPIO_Port, KC2_Pin, GPIO_PIN_RESET);   // Pull the C2 LOW
 8000552:	2200      	movs	r2, #0
 8000554:	2120      	movs	r1, #32
 8000556:	48ae      	ldr	r0, [pc, #696]	; (8000810 <Get_Key+0x2e0>)
 8000558:	f001 fd0c 	bl	8001f74 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC3_GPIO_Port, KC3_Pin, GPIO_PIN_RESET);   // Pull the C3 LOW
 800055c:	2200      	movs	r2, #0
 800055e:	2108      	movs	r1, #8
 8000560:	48ab      	ldr	r0, [pc, #684]	; (8000810 <Get_Key+0x2e0>)
 8000562:	f001 fd07 	bl	8001f74 <HAL_GPIO_WritePin>

	if ((HAL_GPIO_ReadPin (KR0_GPIO_Port, KR0_Pin)))   // if R0 is HIGH
 8000566:	2140      	movs	r1, #64	; 0x40
 8000568:	48a9      	ldr	r0, [pc, #676]	; (8000810 <Get_Key+0x2e0>)
 800056a:	f001 fceb 	bl	8001f44 <HAL_GPIO_ReadPin>
 800056e:	4603      	mov	r3, r0
 8000570:	2b00      	cmp	r3, #0
 8000572:	d00b      	beq.n	800058c <Get_Key+0x5c>
	{
		while ((HAL_GPIO_ReadPin (KR0_GPIO_Port, KR0_Pin)));   // wait till the button is pressed
 8000574:	bf00      	nop
 8000576:	2140      	movs	r1, #64	; 0x40
 8000578:	48a5      	ldr	r0, [pc, #660]	; (8000810 <Get_Key+0x2e0>)
 800057a:	f001 fce3 	bl	8001f44 <HAL_GPIO_ReadPin>
 800057e:	4603      	mov	r3, r0
 8000580:	2b00      	cmp	r3, #0
 8000582:	d1f8      	bne.n	8000576 <Get_Key+0x46>
		key='1';
 8000584:	4ba3      	ldr	r3, [pc, #652]	; (8000814 <Get_Key+0x2e4>)
 8000586:	2231      	movs	r2, #49	; 0x31
 8000588:	701a      	strb	r2, [r3, #0]
		break;
 800058a:	e177      	b.n	800087c <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR1_GPIO_Port, KR1_Pin)))   // if  R1 is HIGH
 800058c:	2180      	movs	r1, #128	; 0x80
 800058e:	48a2      	ldr	r0, [pc, #648]	; (8000818 <Get_Key+0x2e8>)
 8000590:	f001 fcd8 	bl	8001f44 <HAL_GPIO_ReadPin>
 8000594:	4603      	mov	r3, r0
 8000596:	2b00      	cmp	r3, #0
 8000598:	d00b      	beq.n	80005b2 <Get_Key+0x82>
	{
		while ((HAL_GPIO_ReadPin (KR1_GPIO_Port, KR1_Pin)));   // wait till the button is pressed
 800059a:	bf00      	nop
 800059c:	2180      	movs	r1, #128	; 0x80
 800059e:	489e      	ldr	r0, [pc, #632]	; (8000818 <Get_Key+0x2e8>)
 80005a0:	f001 fcd0 	bl	8001f44 <HAL_GPIO_ReadPin>
 80005a4:	4603      	mov	r3, r0
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	d1f8      	bne.n	800059c <Get_Key+0x6c>
		key='4';
 80005aa:	4b9a      	ldr	r3, [pc, #616]	; (8000814 <Get_Key+0x2e4>)
 80005ac:	2234      	movs	r2, #52	; 0x34
 80005ae:	701a      	strb	r2, [r3, #0]
		break;
 80005b0:	e164      	b.n	800087c <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR2_GPIO_Port, KR2_Pin)))   // if R2 is HIGH
 80005b2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005b6:	4899      	ldr	r0, [pc, #612]	; (800081c <Get_Key+0x2ec>)
 80005b8:	f001 fcc4 	bl	8001f44 <HAL_GPIO_ReadPin>
 80005bc:	4603      	mov	r3, r0
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d00c      	beq.n	80005dc <Get_Key+0xac>
	{
		while ((HAL_GPIO_ReadPin (KR2_GPIO_Port, KR2_Pin)));   // wait till the button is pressed
 80005c2:	bf00      	nop
 80005c4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005c8:	4894      	ldr	r0, [pc, #592]	; (800081c <Get_Key+0x2ec>)
 80005ca:	f001 fcbb 	bl	8001f44 <HAL_GPIO_ReadPin>
 80005ce:	4603      	mov	r3, r0
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d1f7      	bne.n	80005c4 <Get_Key+0x94>
		key='7';
 80005d4:	4b8f      	ldr	r3, [pc, #572]	; (8000814 <Get_Key+0x2e4>)
 80005d6:	2237      	movs	r2, #55	; 0x37
 80005d8:	701a      	strb	r2, [r3, #0]
		break;
 80005da:	e14f      	b.n	800087c <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR3_GPIO_Port, KR3_Pin)))   // if R3 is HIGH
 80005dc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005e0:	488e      	ldr	r0, [pc, #568]	; (800081c <Get_Key+0x2ec>)
 80005e2:	f001 fcaf 	bl	8001f44 <HAL_GPIO_ReadPin>
 80005e6:	4603      	mov	r3, r0
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d00c      	beq.n	8000606 <Get_Key+0xd6>
	{
		while ((HAL_GPIO_ReadPin (KR3_GPIO_Port, KR3_Pin)));   // wait till the button is pressed
 80005ec:	bf00      	nop
 80005ee:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005f2:	488a      	ldr	r0, [pc, #552]	; (800081c <Get_Key+0x2ec>)
 80005f4:	f001 fca6 	bl	8001f44 <HAL_GPIO_ReadPin>
 80005f8:	4603      	mov	r3, r0
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d1f7      	bne.n	80005ee <Get_Key+0xbe>
		key='*';
 80005fe:	4b85      	ldr	r3, [pc, #532]	; (8000814 <Get_Key+0x2e4>)
 8000600:	222a      	movs	r2, #42	; 0x2a
 8000602:	701a      	strb	r2, [r3, #0]
		break;
 8000604:	e13a      	b.n	800087c <Get_Key+0x34c>
	}

	//COLUMN 2
	HAL_GPIO_WritePin (KC0_GPIO_Port, KC0_Pin, GPIO_PIN_RESET);   // Pull the C0 LOW  
 8000606:	2200      	movs	r2, #0
 8000608:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800060c:	4880      	ldr	r0, [pc, #512]	; (8000810 <Get_Key+0x2e0>)
 800060e:	f001 fcb1 	bl	8001f74 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC1_GPIO_Port, KC1_Pin, GPIO_PIN_SET);     // Pull the C1 HIGH
 8000612:	2201      	movs	r2, #1
 8000614:	2110      	movs	r1, #16
 8000616:	487e      	ldr	r0, [pc, #504]	; (8000810 <Get_Key+0x2e0>)
 8000618:	f001 fcac 	bl	8001f74 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC2_GPIO_Port, KC2_Pin, GPIO_PIN_RESET);   // Pull the C2 LOW
 800061c:	2200      	movs	r2, #0
 800061e:	2120      	movs	r1, #32
 8000620:	487b      	ldr	r0, [pc, #492]	; (8000810 <Get_Key+0x2e0>)
 8000622:	f001 fca7 	bl	8001f74 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC3_GPIO_Port, KC3_Pin, GPIO_PIN_RESET);   // Pull the C3 LOW
 8000626:	2200      	movs	r2, #0
 8000628:	2108      	movs	r1, #8
 800062a:	4879      	ldr	r0, [pc, #484]	; (8000810 <Get_Key+0x2e0>)
 800062c:	f001 fca2 	bl	8001f74 <HAL_GPIO_WritePin>
	if ((HAL_GPIO_ReadPin (KR0_GPIO_Port, KR0_Pin)))   // if R0 is HIGH
 8000630:	2140      	movs	r1, #64	; 0x40
 8000632:	4877      	ldr	r0, [pc, #476]	; (8000810 <Get_Key+0x2e0>)
 8000634:	f001 fc86 	bl	8001f44 <HAL_GPIO_ReadPin>
 8000638:	4603      	mov	r3, r0
 800063a:	2b00      	cmp	r3, #0
 800063c:	d00b      	beq.n	8000656 <Get_Key+0x126>
	{
		while ((HAL_GPIO_ReadPin (KR0_GPIO_Port, KR0_Pin)));   // wait till the button is pressed
 800063e:	bf00      	nop
 8000640:	2140      	movs	r1, #64	; 0x40
 8000642:	4873      	ldr	r0, [pc, #460]	; (8000810 <Get_Key+0x2e0>)
 8000644:	f001 fc7e 	bl	8001f44 <HAL_GPIO_ReadPin>
 8000648:	4603      	mov	r3, r0
 800064a:	2b00      	cmp	r3, #0
 800064c:	d1f8      	bne.n	8000640 <Get_Key+0x110>
		key='2';
 800064e:	4b71      	ldr	r3, [pc, #452]	; (8000814 <Get_Key+0x2e4>)
 8000650:	2232      	movs	r2, #50	; 0x32
 8000652:	701a      	strb	r2, [r3, #0]
		break;
 8000654:	e112      	b.n	800087c <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR1_GPIO_Port, KR1_Pin)))   // if  R1 is HIGH
 8000656:	2180      	movs	r1, #128	; 0x80
 8000658:	486f      	ldr	r0, [pc, #444]	; (8000818 <Get_Key+0x2e8>)
 800065a:	f001 fc73 	bl	8001f44 <HAL_GPIO_ReadPin>
 800065e:	4603      	mov	r3, r0
 8000660:	2b00      	cmp	r3, #0
 8000662:	d00b      	beq.n	800067c <Get_Key+0x14c>
	{
		while ((HAL_GPIO_ReadPin (KR1_GPIO_Port, KR1_Pin)));   // wait till the button is pressed
 8000664:	bf00      	nop
 8000666:	2180      	movs	r1, #128	; 0x80
 8000668:	486b      	ldr	r0, [pc, #428]	; (8000818 <Get_Key+0x2e8>)
 800066a:	f001 fc6b 	bl	8001f44 <HAL_GPIO_ReadPin>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d1f8      	bne.n	8000666 <Get_Key+0x136>
		key='5';
 8000674:	4b67      	ldr	r3, [pc, #412]	; (8000814 <Get_Key+0x2e4>)
 8000676:	2235      	movs	r2, #53	; 0x35
 8000678:	701a      	strb	r2, [r3, #0]
		break;
 800067a:	e0ff      	b.n	800087c <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR2_GPIO_Port, KR2_Pin)))   // if R2 is HIGH
 800067c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000680:	4866      	ldr	r0, [pc, #408]	; (800081c <Get_Key+0x2ec>)
 8000682:	f001 fc5f 	bl	8001f44 <HAL_GPIO_ReadPin>
 8000686:	4603      	mov	r3, r0
 8000688:	2b00      	cmp	r3, #0
 800068a:	d00c      	beq.n	80006a6 <Get_Key+0x176>
	{
		while ((HAL_GPIO_ReadPin (KR2_GPIO_Port, KR2_Pin)));   // wait till the button is pressed
 800068c:	bf00      	nop
 800068e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000692:	4862      	ldr	r0, [pc, #392]	; (800081c <Get_Key+0x2ec>)
 8000694:	f001 fc56 	bl	8001f44 <HAL_GPIO_ReadPin>
 8000698:	4603      	mov	r3, r0
 800069a:	2b00      	cmp	r3, #0
 800069c:	d1f7      	bne.n	800068e <Get_Key+0x15e>
		key='8';
 800069e:	4b5d      	ldr	r3, [pc, #372]	; (8000814 <Get_Key+0x2e4>)
 80006a0:	2238      	movs	r2, #56	; 0x38
 80006a2:	701a      	strb	r2, [r3, #0]
		break;
 80006a4:	e0ea      	b.n	800087c <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR3_GPIO_Port, KR3_Pin)))   // if R3 is HIGH
 80006a6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006aa:	485c      	ldr	r0, [pc, #368]	; (800081c <Get_Key+0x2ec>)
 80006ac:	f001 fc4a 	bl	8001f44 <HAL_GPIO_ReadPin>
 80006b0:	4603      	mov	r3, r0
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d00c      	beq.n	80006d0 <Get_Key+0x1a0>
	{
		while ((HAL_GPIO_ReadPin (KR3_GPIO_Port, KR3_Pin)));   // wait till the button is pressed
 80006b6:	bf00      	nop
 80006b8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006bc:	4857      	ldr	r0, [pc, #348]	; (800081c <Get_Key+0x2ec>)
 80006be:	f001 fc41 	bl	8001f44 <HAL_GPIO_ReadPin>
 80006c2:	4603      	mov	r3, r0
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d1f7      	bne.n	80006b8 <Get_Key+0x188>
		key='0';
 80006c8:	4b52      	ldr	r3, [pc, #328]	; (8000814 <Get_Key+0x2e4>)
 80006ca:	2230      	movs	r2, #48	; 0x30
 80006cc:	701a      	strb	r2, [r3, #0]
		break;
 80006ce:	e0d5      	b.n	800087c <Get_Key+0x34c>
	}
	//COLUMN 1
	HAL_GPIO_WritePin (KC0_GPIO_Port, KC0_Pin, GPIO_PIN_RESET);  // Pull the C0 LOW  
 80006d0:	2200      	movs	r2, #0
 80006d2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006d6:	484e      	ldr	r0, [pc, #312]	; (8000810 <Get_Key+0x2e0>)
 80006d8:	f001 fc4c 	bl	8001f74 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC1_GPIO_Port, KC1_Pin, GPIO_PIN_RESET);  // Pull the C1 LOW
 80006dc:	2200      	movs	r2, #0
 80006de:	2110      	movs	r1, #16
 80006e0:	484b      	ldr	r0, [pc, #300]	; (8000810 <Get_Key+0x2e0>)
 80006e2:	f001 fc47 	bl	8001f74 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC2_GPIO_Port, KC2_Pin, GPIO_PIN_SET);    // Pull the C2 HIGH
 80006e6:	2201      	movs	r2, #1
 80006e8:	2120      	movs	r1, #32
 80006ea:	4849      	ldr	r0, [pc, #292]	; (8000810 <Get_Key+0x2e0>)
 80006ec:	f001 fc42 	bl	8001f74 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC3_GPIO_Port, KC3_Pin, GPIO_PIN_RESET);  // Pull the C3 LOW
 80006f0:	2200      	movs	r2, #0
 80006f2:	2108      	movs	r1, #8
 80006f4:	4846      	ldr	r0, [pc, #280]	; (8000810 <Get_Key+0x2e0>)
 80006f6:	f001 fc3d 	bl	8001f74 <HAL_GPIO_WritePin>

	if ((HAL_GPIO_ReadPin (KR0_GPIO_Port, KR0_Pin)))   // if R0 is HIGH
 80006fa:	2140      	movs	r1, #64	; 0x40
 80006fc:	4844      	ldr	r0, [pc, #272]	; (8000810 <Get_Key+0x2e0>)
 80006fe:	f001 fc21 	bl	8001f44 <HAL_GPIO_ReadPin>
 8000702:	4603      	mov	r3, r0
 8000704:	2b00      	cmp	r3, #0
 8000706:	d00b      	beq.n	8000720 <Get_Key+0x1f0>
	{
		while ((HAL_GPIO_ReadPin (KR0_GPIO_Port, KR0_Pin)));   // wait till the button is pressed
 8000708:	bf00      	nop
 800070a:	2140      	movs	r1, #64	; 0x40
 800070c:	4840      	ldr	r0, [pc, #256]	; (8000810 <Get_Key+0x2e0>)
 800070e:	f001 fc19 	bl	8001f44 <HAL_GPIO_ReadPin>
 8000712:	4603      	mov	r3, r0
 8000714:	2b00      	cmp	r3, #0
 8000716:	d1f8      	bne.n	800070a <Get_Key+0x1da>
		key='3';
 8000718:	4b3e      	ldr	r3, [pc, #248]	; (8000814 <Get_Key+0x2e4>)
 800071a:	2233      	movs	r2, #51	; 0x33
 800071c:	701a      	strb	r2, [r3, #0]
		break;
 800071e:	e0ad      	b.n	800087c <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR1_GPIO_Port, KR1_Pin)))   // if  R1 is HIGH
 8000720:	2180      	movs	r1, #128	; 0x80
 8000722:	483d      	ldr	r0, [pc, #244]	; (8000818 <Get_Key+0x2e8>)
 8000724:	f001 fc0e 	bl	8001f44 <HAL_GPIO_ReadPin>
 8000728:	4603      	mov	r3, r0
 800072a:	2b00      	cmp	r3, #0
 800072c:	d00b      	beq.n	8000746 <Get_Key+0x216>
	{
		while ((HAL_GPIO_ReadPin (KR1_GPIO_Port, KR1_Pin)));   // wait till the button is pressed
 800072e:	bf00      	nop
 8000730:	2180      	movs	r1, #128	; 0x80
 8000732:	4839      	ldr	r0, [pc, #228]	; (8000818 <Get_Key+0x2e8>)
 8000734:	f001 fc06 	bl	8001f44 <HAL_GPIO_ReadPin>
 8000738:	4603      	mov	r3, r0
 800073a:	2b00      	cmp	r3, #0
 800073c:	d1f8      	bne.n	8000730 <Get_Key+0x200>
		key='6';
 800073e:	4b35      	ldr	r3, [pc, #212]	; (8000814 <Get_Key+0x2e4>)
 8000740:	2236      	movs	r2, #54	; 0x36
 8000742:	701a      	strb	r2, [r3, #0]
		break;
 8000744:	e09a      	b.n	800087c <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR2_GPIO_Port, KR2_Pin)))   // if R2 is HIGH
 8000746:	f44f 7100 	mov.w	r1, #512	; 0x200
 800074a:	4834      	ldr	r0, [pc, #208]	; (800081c <Get_Key+0x2ec>)
 800074c:	f001 fbfa 	bl	8001f44 <HAL_GPIO_ReadPin>
 8000750:	4603      	mov	r3, r0
 8000752:	2b00      	cmp	r3, #0
 8000754:	d00c      	beq.n	8000770 <Get_Key+0x240>
	{
		while ((HAL_GPIO_ReadPin (KR2_GPIO_Port, KR2_Pin)));   // wait till the button is pressed
 8000756:	bf00      	nop
 8000758:	f44f 7100 	mov.w	r1, #512	; 0x200
 800075c:	482f      	ldr	r0, [pc, #188]	; (800081c <Get_Key+0x2ec>)
 800075e:	f001 fbf1 	bl	8001f44 <HAL_GPIO_ReadPin>
 8000762:	4603      	mov	r3, r0
 8000764:	2b00      	cmp	r3, #0
 8000766:	d1f7      	bne.n	8000758 <Get_Key+0x228>
		key='9';
 8000768:	4b2a      	ldr	r3, [pc, #168]	; (8000814 <Get_Key+0x2e4>)
 800076a:	2239      	movs	r2, #57	; 0x39
 800076c:	701a      	strb	r2, [r3, #0]
		break;
 800076e:	e085      	b.n	800087c <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR3_GPIO_Port, KR3_Pin)))   // if R3 is HIGH
 8000770:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000774:	4829      	ldr	r0, [pc, #164]	; (800081c <Get_Key+0x2ec>)
 8000776:	f001 fbe5 	bl	8001f44 <HAL_GPIO_ReadPin>
 800077a:	4603      	mov	r3, r0
 800077c:	2b00      	cmp	r3, #0
 800077e:	d00c      	beq.n	800079a <Get_Key+0x26a>
	{
		while ((HAL_GPIO_ReadPin (KR3_GPIO_Port, KR3_Pin)));   // wait till the button is pressed
 8000780:	bf00      	nop
 8000782:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000786:	4825      	ldr	r0, [pc, #148]	; (800081c <Get_Key+0x2ec>)
 8000788:	f001 fbdc 	bl	8001f44 <HAL_GPIO_ReadPin>
 800078c:	4603      	mov	r3, r0
 800078e:	2b00      	cmp	r3, #0
 8000790:	d1f7      	bne.n	8000782 <Get_Key+0x252>
		key='#';
 8000792:	4b20      	ldr	r3, [pc, #128]	; (8000814 <Get_Key+0x2e4>)
 8000794:	2223      	movs	r2, #35	; 0x23
 8000796:	701a      	strb	r2, [r3, #0]
		break;
 8000798:	e070      	b.n	800087c <Get_Key+0x34c>
	}
	//COLUMN 0
	HAL_GPIO_WritePin (KC0_GPIO_Port, KC0_Pin, GPIO_PIN_RESET);   // Pull the C0 LOW  
 800079a:	2200      	movs	r2, #0
 800079c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80007a0:	481b      	ldr	r0, [pc, #108]	; (8000810 <Get_Key+0x2e0>)
 80007a2:	f001 fbe7 	bl	8001f74 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC1_GPIO_Port, KC1_Pin, GPIO_PIN_RESET);   // Pull the C1 LOW
 80007a6:	2200      	movs	r2, #0
 80007a8:	2110      	movs	r1, #16
 80007aa:	4819      	ldr	r0, [pc, #100]	; (8000810 <Get_Key+0x2e0>)
 80007ac:	f001 fbe2 	bl	8001f74 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC2_GPIO_Port, KC2_Pin, GPIO_PIN_RESET);   // Pull the C2 LOW
 80007b0:	2200      	movs	r2, #0
 80007b2:	2120      	movs	r1, #32
 80007b4:	4816      	ldr	r0, [pc, #88]	; (8000810 <Get_Key+0x2e0>)
 80007b6:	f001 fbdd 	bl	8001f74 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC3_GPIO_Port, KC3_Pin, GPIO_PIN_SET);     // Pull the C3 HIGH
 80007ba:	2201      	movs	r2, #1
 80007bc:	2108      	movs	r1, #8
 80007be:	4814      	ldr	r0, [pc, #80]	; (8000810 <Get_Key+0x2e0>)
 80007c0:	f001 fbd8 	bl	8001f74 <HAL_GPIO_WritePin>

	if ((HAL_GPIO_ReadPin (KR0_GPIO_Port, KR0_Pin)))   // if R0 is HIGH
 80007c4:	2140      	movs	r1, #64	; 0x40
 80007c6:	4812      	ldr	r0, [pc, #72]	; (8000810 <Get_Key+0x2e0>)
 80007c8:	f001 fbbc 	bl	8001f44 <HAL_GPIO_ReadPin>
 80007cc:	4603      	mov	r3, r0
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d00b      	beq.n	80007ea <Get_Key+0x2ba>
	{
		while ((HAL_GPIO_ReadPin (KR0_GPIO_Port, KR0_Pin)));   // wait till the button is pressed
 80007d2:	bf00      	nop
 80007d4:	2140      	movs	r1, #64	; 0x40
 80007d6:	480e      	ldr	r0, [pc, #56]	; (8000810 <Get_Key+0x2e0>)
 80007d8:	f001 fbb4 	bl	8001f44 <HAL_GPIO_ReadPin>
 80007dc:	4603      	mov	r3, r0
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d1f8      	bne.n	80007d4 <Get_Key+0x2a4>
		key='A';
 80007e2:	4b0c      	ldr	r3, [pc, #48]	; (8000814 <Get_Key+0x2e4>)
 80007e4:	2241      	movs	r2, #65	; 0x41
 80007e6:	701a      	strb	r2, [r3, #0]
		break;
 80007e8:	e048      	b.n	800087c <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR1_GPIO_Port, KR1_Pin)))   // if  R1 is HIGH
 80007ea:	2180      	movs	r1, #128	; 0x80
 80007ec:	480a      	ldr	r0, [pc, #40]	; (8000818 <Get_Key+0x2e8>)
 80007ee:	f001 fba9 	bl	8001f44 <HAL_GPIO_ReadPin>
 80007f2:	4603      	mov	r3, r0
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d013      	beq.n	8000820 <Get_Key+0x2f0>
	{
		while ((HAL_GPIO_ReadPin (KR1_GPIO_Port, KR1_Pin)));   // wait till the button is pressed
 80007f8:	bf00      	nop
 80007fa:	2180      	movs	r1, #128	; 0x80
 80007fc:	4806      	ldr	r0, [pc, #24]	; (8000818 <Get_Key+0x2e8>)
 80007fe:	f001 fba1 	bl	8001f44 <HAL_GPIO_ReadPin>
 8000802:	4603      	mov	r3, r0
 8000804:	2b00      	cmp	r3, #0
 8000806:	d1f8      	bne.n	80007fa <Get_Key+0x2ca>
		key='B';
 8000808:	4b02      	ldr	r3, [pc, #8]	; (8000814 <Get_Key+0x2e4>)
 800080a:	2242      	movs	r2, #66	; 0x42
 800080c:	701a      	strb	r2, [r3, #0]
		break;
 800080e:	e035      	b.n	800087c <Get_Key+0x34c>
 8000810:	40020400 	.word	0x40020400
 8000814:	20000084 	.word	0x20000084
 8000818:	40020800 	.word	0x40020800
 800081c:	40020000 	.word	0x40020000
	}

	if ((HAL_GPIO_ReadPin (KR2_GPIO_Port, KR2_Pin)))   // if R2 is HIGH
 8000820:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000824:	481a      	ldr	r0, [pc, #104]	; (8000890 <Get_Key+0x360>)
 8000826:	f001 fb8d 	bl	8001f44 <HAL_GPIO_ReadPin>
 800082a:	4603      	mov	r3, r0
 800082c:	2b00      	cmp	r3, #0
 800082e:	d00c      	beq.n	800084a <Get_Key+0x31a>
	{
		while ((HAL_GPIO_ReadPin (KR2_GPIO_Port, KR2_Pin)));   // wait till the button is pressed
 8000830:	bf00      	nop
 8000832:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000836:	4816      	ldr	r0, [pc, #88]	; (8000890 <Get_Key+0x360>)
 8000838:	f001 fb84 	bl	8001f44 <HAL_GPIO_ReadPin>
 800083c:	4603      	mov	r3, r0
 800083e:	2b00      	cmp	r3, #0
 8000840:	d1f7      	bne.n	8000832 <Get_Key+0x302>
		key='C';
 8000842:	4b14      	ldr	r3, [pc, #80]	; (8000894 <Get_Key+0x364>)
 8000844:	2243      	movs	r2, #67	; 0x43
 8000846:	701a      	strb	r2, [r3, #0]
		break;
 8000848:	e018      	b.n	800087c <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR3_GPIO_Port, KR3_Pin)))   // if R3 is HIGH
 800084a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800084e:	4810      	ldr	r0, [pc, #64]	; (8000890 <Get_Key+0x360>)
 8000850:	f001 fb78 	bl	8001f44 <HAL_GPIO_ReadPin>
 8000854:	4603      	mov	r3, r0
 8000856:	2b00      	cmp	r3, #0
 8000858:	d00c      	beq.n	8000874 <Get_Key+0x344>
	{
		while ((HAL_GPIO_ReadPin (KR3_GPIO_Port, KR3_Pin)));   // wait till the button is pressed
 800085a:	bf00      	nop
 800085c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000860:	480b      	ldr	r0, [pc, #44]	; (8000890 <Get_Key+0x360>)
 8000862:	f001 fb6f 	bl	8001f44 <HAL_GPIO_ReadPin>
 8000866:	4603      	mov	r3, r0
 8000868:	2b00      	cmp	r3, #0
 800086a:	d1f7      	bne.n	800085c <Get_Key+0x32c>
		key='D';
 800086c:	4b09      	ldr	r3, [pc, #36]	; (8000894 <Get_Key+0x364>)
 800086e:	2244      	movs	r2, #68	; 0x44
 8000870:	701a      	strb	r2, [r3, #0]
		break;
 8000872:	e003      	b.n	800087c <Get_Key+0x34c>
	while(done)
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	2b00      	cmp	r3, #0
 8000878:	f47f ae60 	bne.w	800053c <Get_Key+0xc>
	}
}
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 800087c:	2120      	movs	r1, #32
 800087e:	4804      	ldr	r0, [pc, #16]	; (8000890 <Get_Key+0x360>)
 8000880:	f001 fb91 	bl	8001fa6 <HAL_GPIO_TogglePin>
	return(key);
 8000884:	4b03      	ldr	r3, [pc, #12]	; (8000894 <Get_Key+0x364>)
 8000886:	781b      	ldrb	r3, [r3, #0]
}
 8000888:	4618      	mov	r0, r3
 800088a:	3708      	adds	r7, #8
 800088c:	46bd      	mov	sp, r7
 800088e:	bd80      	pop	{r7, pc}
 8000890:	40020000 	.word	0x40020000
 8000894:	20000084 	.word	0x20000084

08000898 <replaceCharsWithAsterisks>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
char* replaceCharsWithAsterisks(const char* input, int size) {
 8000898:	b580      	push	{r7, lr}
 800089a:	b084      	sub	sp, #16
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]
 80008a0:	6039      	str	r1, [r7, #0]
   // Allocate memory for the new array (+1 for the null terminator)
   char* result = (char*)malloc((size + 1) * sizeof(char));
 80008a2:	683b      	ldr	r3, [r7, #0]
 80008a4:	3301      	adds	r3, #1
 80008a6:	4618      	mov	r0, r3
 80008a8:	f006 fbe8 	bl	800707c <malloc>
 80008ac:	4603      	mov	r3, r0
 80008ae:	60bb      	str	r3, [r7, #8]
   // Replace each char with an asterisk
   for (int i = 0; i < size; i++) {
 80008b0:	2300      	movs	r3, #0
 80008b2:	60fb      	str	r3, [r7, #12]
 80008b4:	e007      	b.n	80008c6 <replaceCharsWithAsterisks+0x2e>
       result[i] = '*';
 80008b6:	68fb      	ldr	r3, [r7, #12]
 80008b8:	68ba      	ldr	r2, [r7, #8]
 80008ba:	4413      	add	r3, r2
 80008bc:	222a      	movs	r2, #42	; 0x2a
 80008be:	701a      	strb	r2, [r3, #0]
   for (int i = 0; i < size; i++) {
 80008c0:	68fb      	ldr	r3, [r7, #12]
 80008c2:	3301      	adds	r3, #1
 80008c4:	60fb      	str	r3, [r7, #12]
 80008c6:	68fa      	ldr	r2, [r7, #12]
 80008c8:	683b      	ldr	r3, [r7, #0]
 80008ca:	429a      	cmp	r2, r3
 80008cc:	dbf3      	blt.n	80008b6 <replaceCharsWithAsterisks+0x1e>
   }

   // Add null terminator at the end
   result[size] = '\0';
 80008ce:	683b      	ldr	r3, [r7, #0]
 80008d0:	68ba      	ldr	r2, [r7, #8]
 80008d2:	4413      	add	r3, r2
 80008d4:	2200      	movs	r2, #0
 80008d6:	701a      	strb	r2, [r3, #0]

   return result;
 80008d8:	68bb      	ldr	r3, [r7, #8]
}
 80008da:	4618      	mov	r0, r3
 80008dc:	3710      	adds	r7, #16
 80008de:	46bd      	mov	sp, r7
 80008e0:	bd80      	pop	{r7, pc}
	...

080008e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008e8:	f001 f850 	bl	800198c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008ec:	f000 f87a 	bl	80009e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008f0:	f000 f93e 	bl	8000b70 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80008f4:	f000 f912 	bl	8000b1c <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80008f8:	f000 f8e2 	bl	8000ac0 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  /* USER CODE BEGIN 2 */
  SSD1306_Init();
 80008fc:	f000 fbb4 	bl	8001068 <SSD1306_Init>
  SSD1306_GotoXY(0, 0);
 8000900:	2100      	movs	r1, #0
 8000902:	2000      	movs	r0, #0
 8000904:	f000 fd1a 	bl	800133c <SSD1306_GotoXY>
  // SSD1306_Puts ("Voltage:", &Font_11x18, 1);
  SSD1306_Puts("Enter Code:", &Font_11x18, 1);
 8000908:	2201      	movs	r2, #1
 800090a:	4922      	ldr	r1, [pc, #136]	; (8000994 <main+0xb0>)
 800090c:	4822      	ldr	r0, [pc, #136]	; (8000998 <main+0xb4>)
 800090e:	f000 fdab 	bl	8001468 <SSD1306_Puts>
  SSD1306_GotoXY(0, 30);
 8000912:	211e      	movs	r1, #30
 8000914:	2000      	movs	r0, #0
 8000916:	f000 fd11 	bl	800133c <SSD1306_GotoXY>
  SSD1306_UpdateScreen();
 800091a:	f000 fc69 	bl	80011f0 <SSD1306_UpdateScreen>
  SSD1306_UpdateScreen();
 800091e:	f000 fc67 	bl	80011f0 <SSD1306_UpdateScreen>
  HAL_Delay(500);
 8000922:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000926:	f001 f873 	bl	8001a10 <HAL_Delay>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800092a:	f003 fe2f 	bl	800458c <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800092e:	4a1b      	ldr	r2, [pc, #108]	; (800099c <main+0xb8>)
 8000930:	2100      	movs	r1, #0
 8000932:	481b      	ldr	r0, [pc, #108]	; (80009a0 <main+0xbc>)
 8000934:	f003 fe74 	bl	8004620 <osThreadNew>
 8000938:	4603      	mov	r3, r0
 800093a:	4a1a      	ldr	r2, [pc, #104]	; (80009a4 <main+0xc0>)
 800093c:	6013      	str	r3, [r2, #0]

  /* creation of TaskKeypad */
  TaskKeypadHandle = osThreadNew(StartTaskKeypad, NULL, &TaskKeypad_attributes);
 800093e:	4a1a      	ldr	r2, [pc, #104]	; (80009a8 <main+0xc4>)
 8000940:	2100      	movs	r1, #0
 8000942:	481a      	ldr	r0, [pc, #104]	; (80009ac <main+0xc8>)
 8000944:	f003 fe6c 	bl	8004620 <osThreadNew>
 8000948:	4603      	mov	r3, r0
 800094a:	4a19      	ldr	r2, [pc, #100]	; (80009b0 <main+0xcc>)
 800094c:	6013      	str	r3, [r2, #0]

  /* creation of TaskDisplay */
  TaskDisplayHandle = osThreadNew(StartTaskDisplay, NULL, &TaskDisplay_attributes);
 800094e:	4a19      	ldr	r2, [pc, #100]	; (80009b4 <main+0xd0>)
 8000950:	2100      	movs	r1, #0
 8000952:	4819      	ldr	r0, [pc, #100]	; (80009b8 <main+0xd4>)
 8000954:	f003 fe64 	bl	8004620 <osThreadNew>
 8000958:	4603      	mov	r3, r0
 800095a:	4a18      	ldr	r2, [pc, #96]	; (80009bc <main+0xd8>)
 800095c:	6013      	str	r3, [r2, #0]

  /* creation of TaskLED */
  TaskLEDHandle = osThreadNew(StartTaskLED, NULL, &TaskLED_attributes);
 800095e:	4a18      	ldr	r2, [pc, #96]	; (80009c0 <main+0xdc>)
 8000960:	2100      	movs	r1, #0
 8000962:	4818      	ldr	r0, [pc, #96]	; (80009c4 <main+0xe0>)
 8000964:	f003 fe5c 	bl	8004620 <osThreadNew>
 8000968:	4603      	mov	r3, r0
 800096a:	4a17      	ldr	r2, [pc, #92]	; (80009c8 <main+0xe4>)
 800096c:	6013      	str	r3, [r2, #0]

  /* creation of TaskBuzzer */
  TaskBuzzerHandle = osThreadNew(StartTaskBuzzer, NULL, &TaskBuzzer_attributes);
 800096e:	4a17      	ldr	r2, [pc, #92]	; (80009cc <main+0xe8>)
 8000970:	2100      	movs	r1, #0
 8000972:	4817      	ldr	r0, [pc, #92]	; (80009d0 <main+0xec>)
 8000974:	f003 fe54 	bl	8004620 <osThreadNew>
 8000978:	4603      	mov	r3, r0
 800097a:	4a16      	ldr	r2, [pc, #88]	; (80009d4 <main+0xf0>)
 800097c:	6013      	str	r3, [r2, #0]

  /* creation of TaskPIR */
  TaskPIRHandle = osThreadNew(StartTaskPIR, NULL, &TaskPIR_attributes);
 800097e:	4a16      	ldr	r2, [pc, #88]	; (80009d8 <main+0xf4>)
 8000980:	2100      	movs	r1, #0
 8000982:	4816      	ldr	r0, [pc, #88]	; (80009dc <main+0xf8>)
 8000984:	f003 fe4c 	bl	8004620 <osThreadNew>
 8000988:	4603      	mov	r3, r0
 800098a:	4a15      	ldr	r2, [pc, #84]	; (80009e0 <main+0xfc>)
 800098c:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800098e:	f003 fe21 	bl	80045d4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000992:	e7fe      	b.n	8000992 <main+0xae>
 8000994:	20000000 	.word	0x20000000
 8000998:	08007444 	.word	0x08007444
 800099c:	08008240 	.word	0x08008240
 80009a0:	08000cc5 	.word	0x08000cc5
 80009a4:	20000124 	.word	0x20000124
 80009a8:	08008264 	.word	0x08008264
 80009ac:	08000cd5 	.word	0x08000cd5
 80009b0:	20000128 	.word	0x20000128
 80009b4:	08008288 	.word	0x08008288
 80009b8:	08000dcd 	.word	0x08000dcd
 80009bc:	2000012c 	.word	0x2000012c
 80009c0:	080082ac 	.word	0x080082ac
 80009c4:	08000e49 	.word	0x08000e49
 80009c8:	20000130 	.word	0x20000130
 80009cc:	080082d0 	.word	0x080082d0
 80009d0:	08000e9d 	.word	0x08000e9d
 80009d4:	20000134 	.word	0x20000134
 80009d8:	080082f4 	.word	0x080082f4
 80009dc:	08000f41 	.word	0x08000f41
 80009e0:	20000138 	.word	0x20000138

080009e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b094      	sub	sp, #80	; 0x50
 80009e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009ea:	f107 031c 	add.w	r3, r7, #28
 80009ee:	2234      	movs	r2, #52	; 0x34
 80009f0:	2100      	movs	r1, #0
 80009f2:	4618      	mov	r0, r3
 80009f4:	f006 fbf6 	bl	80071e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009f8:	f107 0308 	add.w	r3, r7, #8
 80009fc:	2200      	movs	r2, #0
 80009fe:	601a      	str	r2, [r3, #0]
 8000a00:	605a      	str	r2, [r3, #4]
 8000a02:	609a      	str	r2, [r3, #8]
 8000a04:	60da      	str	r2, [r3, #12]
 8000a06:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a08:	2300      	movs	r3, #0
 8000a0a:	607b      	str	r3, [r7, #4]
 8000a0c:	4b2a      	ldr	r3, [pc, #168]	; (8000ab8 <SystemClock_Config+0xd4>)
 8000a0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a10:	4a29      	ldr	r2, [pc, #164]	; (8000ab8 <SystemClock_Config+0xd4>)
 8000a12:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a16:	6413      	str	r3, [r2, #64]	; 0x40
 8000a18:	4b27      	ldr	r3, [pc, #156]	; (8000ab8 <SystemClock_Config+0xd4>)
 8000a1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a20:	607b      	str	r3, [r7, #4]
 8000a22:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000a24:	2300      	movs	r3, #0
 8000a26:	603b      	str	r3, [r7, #0]
 8000a28:	4b24      	ldr	r3, [pc, #144]	; (8000abc <SystemClock_Config+0xd8>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000a30:	4a22      	ldr	r2, [pc, #136]	; (8000abc <SystemClock_Config+0xd8>)
 8000a32:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a36:	6013      	str	r3, [r2, #0]
 8000a38:	4b20      	ldr	r3, [pc, #128]	; (8000abc <SystemClock_Config+0xd8>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a40:	603b      	str	r3, [r7, #0]
 8000a42:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a44:	2302      	movs	r3, #2
 8000a46:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a48:	2301      	movs	r3, #1
 8000a4a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a4c:	2310      	movs	r3, #16
 8000a4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a50:	2302      	movs	r3, #2
 8000a52:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a54:	2300      	movs	r3, #0
 8000a56:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000a58:	2310      	movs	r3, #16
 8000a5a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000a5c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000a60:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000a62:	2304      	movs	r3, #4
 8000a64:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000a66:	2302      	movs	r3, #2
 8000a68:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000a6a:	2302      	movs	r3, #2
 8000a6c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a6e:	f107 031c 	add.w	r3, r7, #28
 8000a72:	4618      	mov	r0, r3
 8000a74:	f002 fbfa 	bl	800326c <HAL_RCC_OscConfig>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d001      	beq.n	8000a82 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000a7e:	f000 faed 	bl	800105c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a82:	230f      	movs	r3, #15
 8000a84:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a86:	2302      	movs	r3, #2
 8000a88:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000a8e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a92:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a94:	2300      	movs	r3, #0
 8000a96:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000a98:	f107 0308 	add.w	r3, r7, #8
 8000a9c:	2102      	movs	r1, #2
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	f002 f868 	bl	8002b74 <HAL_RCC_ClockConfig>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d001      	beq.n	8000aae <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000aaa:	f000 fad7 	bl	800105c <Error_Handler>
  }
}
 8000aae:	bf00      	nop
 8000ab0:	3750      	adds	r7, #80	; 0x50
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	bf00      	nop
 8000ab8:	40023800 	.word	0x40023800
 8000abc:	40007000 	.word	0x40007000

08000ac0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000ac4:	4b12      	ldr	r3, [pc, #72]	; (8000b10 <MX_I2C1_Init+0x50>)
 8000ac6:	4a13      	ldr	r2, [pc, #76]	; (8000b14 <MX_I2C1_Init+0x54>)
 8000ac8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000aca:	4b11      	ldr	r3, [pc, #68]	; (8000b10 <MX_I2C1_Init+0x50>)
 8000acc:	4a12      	ldr	r2, [pc, #72]	; (8000b18 <MX_I2C1_Init+0x58>)
 8000ace:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000ad0:	4b0f      	ldr	r3, [pc, #60]	; (8000b10 <MX_I2C1_Init+0x50>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000ad6:	4b0e      	ldr	r3, [pc, #56]	; (8000b10 <MX_I2C1_Init+0x50>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000adc:	4b0c      	ldr	r3, [pc, #48]	; (8000b10 <MX_I2C1_Init+0x50>)
 8000ade:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000ae2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ae4:	4b0a      	ldr	r3, [pc, #40]	; (8000b10 <MX_I2C1_Init+0x50>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000aea:	4b09      	ldr	r3, [pc, #36]	; (8000b10 <MX_I2C1_Init+0x50>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000af0:	4b07      	ldr	r3, [pc, #28]	; (8000b10 <MX_I2C1_Init+0x50>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000af6:	4b06      	ldr	r3, [pc, #24]	; (8000b10 <MX_I2C1_Init+0x50>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000afc:	4804      	ldr	r0, [pc, #16]	; (8000b10 <MX_I2C1_Init+0x50>)
 8000afe:	f001 fa6d 	bl	8001fdc <HAL_I2C_Init>
 8000b02:	4603      	mov	r3, r0
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d001      	beq.n	8000b0c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000b08:	f000 faa8 	bl	800105c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000b0c:	bf00      	nop
 8000b0e:	bd80      	pop	{r7, pc}
 8000b10:	20000088 	.word	0x20000088
 8000b14:	40005400 	.word	0x40005400
 8000b18:	00061a80 	.word	0x00061a80

08000b1c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b20:	4b11      	ldr	r3, [pc, #68]	; (8000b68 <MX_USART2_UART_Init+0x4c>)
 8000b22:	4a12      	ldr	r2, [pc, #72]	; (8000b6c <MX_USART2_UART_Init+0x50>)
 8000b24:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000b26:	4b10      	ldr	r3, [pc, #64]	; (8000b68 <MX_USART2_UART_Init+0x4c>)
 8000b28:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000b2c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b2e:	4b0e      	ldr	r3, [pc, #56]	; (8000b68 <MX_USART2_UART_Init+0x4c>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b34:	4b0c      	ldr	r3, [pc, #48]	; (8000b68 <MX_USART2_UART_Init+0x4c>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b3a:	4b0b      	ldr	r3, [pc, #44]	; (8000b68 <MX_USART2_UART_Init+0x4c>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b40:	4b09      	ldr	r3, [pc, #36]	; (8000b68 <MX_USART2_UART_Init+0x4c>)
 8000b42:	220c      	movs	r2, #12
 8000b44:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b46:	4b08      	ldr	r3, [pc, #32]	; (8000b68 <MX_USART2_UART_Init+0x4c>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b4c:	4b06      	ldr	r3, [pc, #24]	; (8000b68 <MX_USART2_UART_Init+0x4c>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b52:	4805      	ldr	r0, [pc, #20]	; (8000b68 <MX_USART2_UART_Init+0x4c>)
 8000b54:	f003 f8ca 	bl	8003cec <HAL_UART_Init>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d001      	beq.n	8000b62 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000b5e:	f000 fa7d 	bl	800105c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b62:	bf00      	nop
 8000b64:	bd80      	pop	{r7, pc}
 8000b66:	bf00      	nop
 8000b68:	200000dc 	.word	0x200000dc
 8000b6c:	40004400 	.word	0x40004400

08000b70 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b08a      	sub	sp, #40	; 0x28
 8000b74:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b76:	f107 0314 	add.w	r3, r7, #20
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	601a      	str	r2, [r3, #0]
 8000b7e:	605a      	str	r2, [r3, #4]
 8000b80:	609a      	str	r2, [r3, #8]
 8000b82:	60da      	str	r2, [r3, #12]
 8000b84:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b86:	2300      	movs	r3, #0
 8000b88:	613b      	str	r3, [r7, #16]
 8000b8a:	4b4a      	ldr	r3, [pc, #296]	; (8000cb4 <MX_GPIO_Init+0x144>)
 8000b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8e:	4a49      	ldr	r2, [pc, #292]	; (8000cb4 <MX_GPIO_Init+0x144>)
 8000b90:	f043 0304 	orr.w	r3, r3, #4
 8000b94:	6313      	str	r3, [r2, #48]	; 0x30
 8000b96:	4b47      	ldr	r3, [pc, #284]	; (8000cb4 <MX_GPIO_Init+0x144>)
 8000b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9a:	f003 0304 	and.w	r3, r3, #4
 8000b9e:	613b      	str	r3, [r7, #16]
 8000ba0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	60fb      	str	r3, [r7, #12]
 8000ba6:	4b43      	ldr	r3, [pc, #268]	; (8000cb4 <MX_GPIO_Init+0x144>)
 8000ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000baa:	4a42      	ldr	r2, [pc, #264]	; (8000cb4 <MX_GPIO_Init+0x144>)
 8000bac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000bb0:	6313      	str	r3, [r2, #48]	; 0x30
 8000bb2:	4b40      	ldr	r3, [pc, #256]	; (8000cb4 <MX_GPIO_Init+0x144>)
 8000bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000bba:	60fb      	str	r3, [r7, #12]
 8000bbc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	60bb      	str	r3, [r7, #8]
 8000bc2:	4b3c      	ldr	r3, [pc, #240]	; (8000cb4 <MX_GPIO_Init+0x144>)
 8000bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc6:	4a3b      	ldr	r2, [pc, #236]	; (8000cb4 <MX_GPIO_Init+0x144>)
 8000bc8:	f043 0301 	orr.w	r3, r3, #1
 8000bcc:	6313      	str	r3, [r2, #48]	; 0x30
 8000bce:	4b39      	ldr	r3, [pc, #228]	; (8000cb4 <MX_GPIO_Init+0x144>)
 8000bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd2:	f003 0301 	and.w	r3, r3, #1
 8000bd6:	60bb      	str	r3, [r7, #8]
 8000bd8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bda:	2300      	movs	r3, #0
 8000bdc:	607b      	str	r3, [r7, #4]
 8000bde:	4b35      	ldr	r3, [pc, #212]	; (8000cb4 <MX_GPIO_Init+0x144>)
 8000be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be2:	4a34      	ldr	r2, [pc, #208]	; (8000cb4 <MX_GPIO_Init+0x144>)
 8000be4:	f043 0302 	orr.w	r3, r3, #2
 8000be8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bea:	4b32      	ldr	r3, [pc, #200]	; (8000cb4 <MX_GPIO_Init+0x144>)
 8000bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bee:	f003 0302 	and.w	r3, r3, #2
 8000bf2:	607b      	str	r3, [r7, #4]
 8000bf4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	2160      	movs	r1, #96	; 0x60
 8000bfa:	482f      	ldr	r0, [pc, #188]	; (8000cb8 <MX_GPIO_Init+0x148>)
 8000bfc:	f001 f9ba 	bl	8001f74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, KC0_Pin|GPIO_PIN_13|GPIO_PIN_14|KC3_Pin
 8000c00:	2200      	movs	r2, #0
 8000c02:	f246 4138 	movw	r1, #25656	; 0x6438
 8000c06:	482d      	ldr	r0, [pc, #180]	; (8000cbc <MX_GPIO_Init+0x14c>)
 8000c08:	f001 f9b4 	bl	8001f74 <HAL_GPIO_WritePin>
                          |KC1_Pin|KC2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PA5 PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8000c0c:	2360      	movs	r3, #96	; 0x60
 8000c0e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c10:	2301      	movs	r3, #1
 8000c12:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c14:	2300      	movs	r3, #0
 8000c16:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c1c:	f107 0314 	add.w	r3, r7, #20
 8000c20:	4619      	mov	r1, r3
 8000c22:	4825      	ldr	r0, [pc, #148]	; (8000cb8 <MX_GPIO_Init+0x148>)
 8000c24:	f000 fffa 	bl	8001c1c <HAL_GPIO_Init>

  /*Configure GPIO pins : KC0_Pin PB13 PB14 KC3_Pin
                           KC1_Pin KC2_Pin */
  GPIO_InitStruct.Pin = KC0_Pin|GPIO_PIN_13|GPIO_PIN_14|KC3_Pin
 8000c28:	f246 4338 	movw	r3, #25656	; 0x6438
 8000c2c:	617b      	str	r3, [r7, #20]
                          |KC1_Pin|KC2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c2e:	2301      	movs	r3, #1
 8000c30:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c32:	2300      	movs	r3, #0
 8000c34:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c36:	2300      	movs	r3, #0
 8000c38:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c3a:	f107 0314 	add.w	r3, r7, #20
 8000c3e:	4619      	mov	r1, r3
 8000c40:	481e      	ldr	r0, [pc, #120]	; (8000cbc <MX_GPIO_Init+0x14c>)
 8000c42:	f000 ffeb 	bl	8001c1c <HAL_GPIO_Init>

  /*Configure GPIO pin : KR1_Pin */
  GPIO_InitStruct.Pin = KR1_Pin;
 8000c46:	2380      	movs	r3, #128	; 0x80
 8000c48:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000c4e:	2302      	movs	r3, #2
 8000c50:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(KR1_GPIO_Port, &GPIO_InitStruct);
 8000c52:	f107 0314 	add.w	r3, r7, #20
 8000c56:	4619      	mov	r1, r3
 8000c58:	4819      	ldr	r0, [pc, #100]	; (8000cc0 <MX_GPIO_Init+0x150>)
 8000c5a:	f000 ffdf 	bl	8001c1c <HAL_GPIO_Init>

  /*Configure GPIO pins : KR3_Pin KR2_Pin */
  GPIO_InitStruct.Pin = KR3_Pin|KR2_Pin;
 8000c5e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000c62:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c64:	2300      	movs	r3, #0
 8000c66:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000c68:	2302      	movs	r3, #2
 8000c6a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c6c:	f107 0314 	add.w	r3, r7, #20
 8000c70:	4619      	mov	r1, r3
 8000c72:	4811      	ldr	r0, [pc, #68]	; (8000cb8 <MX_GPIO_Init+0x148>)
 8000c74:	f000 ffd2 	bl	8001c1c <HAL_GPIO_Init>

  /*Configure GPIO pin : KR0_Pin */
  GPIO_InitStruct.Pin = KR0_Pin;
 8000c78:	2340      	movs	r3, #64	; 0x40
 8000c7a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000c80:	2302      	movs	r3, #2
 8000c82:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(KR0_GPIO_Port, &GPIO_InitStruct);
 8000c84:	f107 0314 	add.w	r3, r7, #20
 8000c88:	4619      	mov	r1, r3
 8000c8a:	480c      	ldr	r0, [pc, #48]	; (8000cbc <MX_GPIO_Init+0x14c>)
 8000c8c:	f000 ffc6 	bl	8001c1c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000c90:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000c94:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c96:	2300      	movs	r3, #0
 8000c98:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c9e:	f107 0314 	add.w	r3, r7, #20
 8000ca2:	4619      	mov	r1, r3
 8000ca4:	4805      	ldr	r0, [pc, #20]	; (8000cbc <MX_GPIO_Init+0x14c>)
 8000ca6:	f000 ffb9 	bl	8001c1c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000caa:	bf00      	nop
 8000cac:	3728      	adds	r7, #40	; 0x28
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	bf00      	nop
 8000cb4:	40023800 	.word	0x40023800
 8000cb8:	40020000 	.word	0x40020000
 8000cbc:	40020400 	.word	0x40020400
 8000cc0:	40020800 	.word	0x40020800

08000cc4 <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b082      	sub	sp, #8
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for (;;)
  {
    osDelay(1);
 8000ccc:	2001      	movs	r0, #1
 8000cce:	f003 fd39 	bl	8004744 <osDelay>
 8000cd2:	e7fb      	b.n	8000ccc <StartDefaultTask+0x8>

08000cd4 <StartTaskKeypad>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartTaskKeypad */
void StartTaskKeypad(void *argument)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b082      	sub	sp, #8
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskKeypad */
  /* Infinite loop */
  for (;;)
  {
	 if(codeSet == false){
 8000cdc:	4b35      	ldr	r3, [pc, #212]	; (8000db4 <StartTaskKeypad+0xe0>)
 8000cde:	781b      	ldrb	r3, [r3, #0]
 8000ce0:	f083 0301 	eor.w	r3, r3, #1
 8000ce4:	b2db      	uxtb	r3, r3
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d032      	beq.n	8000d50 <StartTaskKeypad+0x7c>
	   key = Get_Key();
 8000cea:	f7ff fc21 	bl	8000530 <Get_Key>
 8000cee:	4603      	mov	r3, r0
 8000cf0:	461a      	mov	r2, r3
 8000cf2:	4b31      	ldr	r3, [pc, #196]	; (8000db8 <StartTaskKeypad+0xe4>)
 8000cf4:	701a      	strb	r2, [r3, #0]
	   length++;
 8000cf6:	4b31      	ldr	r3, [pc, #196]	; (8000dbc <StartTaskKeypad+0xe8>)
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	3301      	adds	r3, #1
 8000cfc:	4a2f      	ldr	r2, [pc, #188]	; (8000dbc <StartTaskKeypad+0xe8>)
 8000cfe:	6013      	str	r3, [r2, #0]
	   if (key == '#' && (strlen(temp) == 4 || strlen(temp) == 6))
 8000d00:	4b2d      	ldr	r3, [pc, #180]	; (8000db8 <StartTaskKeypad+0xe4>)
 8000d02:	781b      	ldrb	r3, [r3, #0]
 8000d04:	2b23      	cmp	r3, #35	; 0x23
 8000d06:	d11e      	bne.n	8000d46 <StartTaskKeypad+0x72>
 8000d08:	482d      	ldr	r0, [pc, #180]	; (8000dc0 <StartTaskKeypad+0xec>)
 8000d0a:	f7ff fa8b 	bl	8000224 <strlen>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	2b04      	cmp	r3, #4
 8000d12:	d005      	beq.n	8000d20 <StartTaskKeypad+0x4c>
 8000d14:	482a      	ldr	r0, [pc, #168]	; (8000dc0 <StartTaskKeypad+0xec>)
 8000d16:	f7ff fa85 	bl	8000224 <strlen>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	2b06      	cmp	r3, #6
 8000d1e:	d112      	bne.n	8000d46 <StartTaskKeypad+0x72>
	   {
		 strcat(code, temp);
 8000d20:	4927      	ldr	r1, [pc, #156]	; (8000dc0 <StartTaskKeypad+0xec>)
 8000d22:	4828      	ldr	r0, [pc, #160]	; (8000dc4 <StartTaskKeypad+0xf0>)
 8000d24:	f006 fa66 	bl	80071f4 <strcat>
		 armed = true;
 8000d28:	4b27      	ldr	r3, [pc, #156]	; (8000dc8 <StartTaskKeypad+0xf4>)
 8000d2a:	2201      	movs	r2, #1
 8000d2c:	701a      	strb	r2, [r3, #0]
		 codeSet = true;
 8000d2e:	4b21      	ldr	r3, [pc, #132]	; (8000db4 <StartTaskKeypad+0xe0>)
 8000d30:	2201      	movs	r2, #1
 8000d32:	701a      	strb	r2, [r3, #0]
		 memset(temp, '\0', sizeof(temp));
 8000d34:	2206      	movs	r2, #6
 8000d36:	2100      	movs	r1, #0
 8000d38:	4821      	ldr	r0, [pc, #132]	; (8000dc0 <StartTaskKeypad+0xec>)
 8000d3a:	f006 fa53 	bl	80071e4 <memset>
		 length = 0;
 8000d3e:	4b1f      	ldr	r3, [pc, #124]	; (8000dbc <StartTaskKeypad+0xe8>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	601a      	str	r2, [r3, #0]
 8000d44:	e032      	b.n	8000dac <StartTaskKeypad+0xd8>
	   } else
	   {
		 strcat(temp, &key);
 8000d46:	491c      	ldr	r1, [pc, #112]	; (8000db8 <StartTaskKeypad+0xe4>)
 8000d48:	481d      	ldr	r0, [pc, #116]	; (8000dc0 <StartTaskKeypad+0xec>)
 8000d4a:	f006 fa53 	bl	80071f4 <strcat>
 8000d4e:	e02d      	b.n	8000dac <StartTaskKeypad+0xd8>
	   }
	 } else {
		key = Get_Key();
 8000d50:	f7ff fbee 	bl	8000530 <Get_Key>
 8000d54:	4603      	mov	r3, r0
 8000d56:	461a      	mov	r2, r3
 8000d58:	4b17      	ldr	r3, [pc, #92]	; (8000db8 <StartTaskKeypad+0xe4>)
 8000d5a:	701a      	strb	r2, [r3, #0]
		length++;
 8000d5c:	4b17      	ldr	r3, [pc, #92]	; (8000dbc <StartTaskKeypad+0xe8>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	3301      	adds	r3, #1
 8000d62:	4a16      	ldr	r2, [pc, #88]	; (8000dbc <StartTaskKeypad+0xe8>)
 8000d64:	6013      	str	r3, [r2, #0]
		if (key == '#'){
 8000d66:	4b14      	ldr	r3, [pc, #80]	; (8000db8 <StartTaskKeypad+0xe4>)
 8000d68:	781b      	ldrb	r3, [r3, #0]
 8000d6a:	2b23      	cmp	r3, #35	; 0x23
 8000d6c:	d11a      	bne.n	8000da4 <StartTaskKeypad+0xd0>
		  if (0 == strcmp(code, temp))
 8000d6e:	4914      	ldr	r1, [pc, #80]	; (8000dc0 <StartTaskKeypad+0xec>)
 8000d70:	4814      	ldr	r0, [pc, #80]	; (8000dc4 <StartTaskKeypad+0xf0>)
 8000d72:	f7ff fa4d 	bl	8000210 <strcmp>
 8000d76:	4603      	mov	r3, r0
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d10a      	bne.n	8000d92 <StartTaskKeypad+0xbe>
		  {
			if (armed == true){
 8000d7c:	4b12      	ldr	r3, [pc, #72]	; (8000dc8 <StartTaskKeypad+0xf4>)
 8000d7e:	781b      	ldrb	r3, [r3, #0]
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d003      	beq.n	8000d8c <StartTaskKeypad+0xb8>
				armed = false;
 8000d84:	4b10      	ldr	r3, [pc, #64]	; (8000dc8 <StartTaskKeypad+0xf4>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	701a      	strb	r2, [r3, #0]
 8000d8a:	e002      	b.n	8000d92 <StartTaskKeypad+0xbe>
			} else {
				armed = true;
 8000d8c:	4b0e      	ldr	r3, [pc, #56]	; (8000dc8 <StartTaskKeypad+0xf4>)
 8000d8e:	2201      	movs	r2, #1
 8000d90:	701a      	strb	r2, [r3, #0]
			}
		  }
		  memset(temp, '\0', sizeof(temp));
 8000d92:	2206      	movs	r2, #6
 8000d94:	2100      	movs	r1, #0
 8000d96:	480a      	ldr	r0, [pc, #40]	; (8000dc0 <StartTaskKeypad+0xec>)
 8000d98:	f006 fa24 	bl	80071e4 <memset>
          length = 0;
 8000d9c:	4b07      	ldr	r3, [pc, #28]	; (8000dbc <StartTaskKeypad+0xe8>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	601a      	str	r2, [r3, #0]
 8000da2:	e003      	b.n	8000dac <StartTaskKeypad+0xd8>
		}
		else
		{
		  strcat(temp, &key);
 8000da4:	4904      	ldr	r1, [pc, #16]	; (8000db8 <StartTaskKeypad+0xe4>)
 8000da6:	4806      	ldr	r0, [pc, #24]	; (8000dc0 <StartTaskKeypad+0xec>)
 8000da8:	f006 fa24 	bl	80071f4 <strcat>
		}
	  }
	 osDelay(100);
 8000dac:	2064      	movs	r0, #100	; 0x64
 8000dae:	f003 fcc9 	bl	8004744 <osDelay>
	 if(codeSet == false){
 8000db2:	e793      	b.n	8000cdc <StartTaskKeypad+0x8>
 8000db4:	2000014a 	.word	0x2000014a
 8000db8:	20000084 	.word	0x20000084
 8000dbc:	20000150 	.word	0x20000150
 8000dc0:	2000013c 	.word	0x2000013c
 8000dc4:	20000144 	.word	0x20000144
 8000dc8:	2000014b 	.word	0x2000014b

08000dcc <StartTaskDisplay>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartTaskDisplay */
void StartTaskDisplay(void *argument)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b084      	sub	sp, #16
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskDisplay */
  /* Infinite loop */
  for (;;)
  {
	SSD1306_Clear();
 8000dd4:	f000 fb6d 	bl	80014b2 <SSD1306_Clear>
    SSD1306_GotoXY (0,0);
 8000dd8:	2100      	movs	r1, #0
 8000dda:	2000      	movs	r0, #0
 8000ddc:	f000 faae 	bl	800133c <SSD1306_GotoXY>
	 if (armed)
 8000de0:	4b13      	ldr	r3, [pc, #76]	; (8000e30 <StartTaskDisplay+0x64>)
 8000de2:	781b      	ldrb	r3, [r3, #0]
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d005      	beq.n	8000df4 <StartTaskDisplay+0x28>
	{
	  SSD1306_Puts ("ARMED:", &Font_11x18, 1);
 8000de8:	2201      	movs	r2, #1
 8000dea:	4912      	ldr	r1, [pc, #72]	; (8000e34 <StartTaskDisplay+0x68>)
 8000dec:	4812      	ldr	r0, [pc, #72]	; (8000e38 <StartTaskDisplay+0x6c>)
 8000dee:	f000 fb3b 	bl	8001468 <SSD1306_Puts>
 8000df2:	e004      	b.n	8000dfe <StartTaskDisplay+0x32>
	}
	else
	{
	  SSD1306_Puts ("NOT ARMED:", &Font_11x18, 1);
 8000df4:	2201      	movs	r2, #1
 8000df6:	490f      	ldr	r1, [pc, #60]	; (8000e34 <StartTaskDisplay+0x68>)
 8000df8:	4810      	ldr	r0, [pc, #64]	; (8000e3c <StartTaskDisplay+0x70>)
 8000dfa:	f000 fb35 	bl	8001468 <SSD1306_Puts>
	}
	SSD1306_UpdateScreen();
 8000dfe:	f000 f9f7 	bl	80011f0 <SSD1306_UpdateScreen>
	SSD1306_GotoXY (0, 30);
 8000e02:	211e      	movs	r1, #30
 8000e04:	2000      	movs	r0, #0
 8000e06:	f000 fa99 	bl	800133c <SSD1306_GotoXY>
	char *result = replaceCharsWithAsterisks(temp, length);
 8000e0a:	4b0d      	ldr	r3, [pc, #52]	; (8000e40 <StartTaskDisplay+0x74>)
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	4619      	mov	r1, r3
 8000e10:	480c      	ldr	r0, [pc, #48]	; (8000e44 <StartTaskDisplay+0x78>)
 8000e12:	f7ff fd41 	bl	8000898 <replaceCharsWithAsterisks>
 8000e16:	60f8      	str	r0, [r7, #12]
	SSD1306_Puts (result, &Font_11x18, 1);
 8000e18:	2201      	movs	r2, #1
 8000e1a:	4906      	ldr	r1, [pc, #24]	; (8000e34 <StartTaskDisplay+0x68>)
 8000e1c:	68f8      	ldr	r0, [r7, #12]
 8000e1e:	f000 fb23 	bl	8001468 <SSD1306_Puts>
	SSD1306_UpdateScreen();            // Update the screen to show the masked password
 8000e22:	f000 f9e5 	bl	80011f0 <SSD1306_UpdateScreen>
    osDelay(1000);                      // Delay
 8000e26:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e2a:	f003 fc8b 	bl	8004744 <osDelay>
  {
 8000e2e:	e7d1      	b.n	8000dd4 <StartTaskDisplay+0x8>
 8000e30:	2000014b 	.word	0x2000014b
 8000e34:	20000000 	.word	0x20000000
 8000e38:	08007450 	.word	0x08007450
 8000e3c:	08007458 	.word	0x08007458
 8000e40:	20000150 	.word	0x20000150
 8000e44:	2000013c 	.word	0x2000013c

08000e48 <StartTaskLED>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartTaskLED */
void StartTaskLED(void *argument)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b082      	sub	sp, #8
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskLED */
  /* Infinite loop */
  for (;;)
  {
	  if (armed == true)
 8000e50:	4b10      	ldr	r3, [pc, #64]	; (8000e94 <StartTaskLED+0x4c>)
 8000e52:	781b      	ldrb	r3, [r3, #0]
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d00c      	beq.n	8000e72 <StartTaskLED+0x2a>
		{
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8000e58:	2201      	movs	r2, #1
 8000e5a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e5e:	480e      	ldr	r0, [pc, #56]	; (8000e98 <StartTaskLED+0x50>)
 8000e60:	f001 f888 	bl	8001f74 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 8000e64:	2200      	movs	r2, #0
 8000e66:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e6a:	480b      	ldr	r0, [pc, #44]	; (8000e98 <StartTaskLED+0x50>)
 8000e6c:	f001 f882 	bl	8001f74 <HAL_GPIO_WritePin>
 8000e70:	e00b      	b.n	8000e8a <StartTaskLED+0x42>
		}
		else
		{
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 8000e72:	2200      	movs	r2, #0
 8000e74:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e78:	4807      	ldr	r0, [pc, #28]	; (8000e98 <StartTaskLED+0x50>)
 8000e7a:	f001 f87b 	bl	8001f74 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 8000e7e:	2201      	movs	r2, #1
 8000e80:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e84:	4804      	ldr	r0, [pc, #16]	; (8000e98 <StartTaskLED+0x50>)
 8000e86:	f001 f875 	bl	8001f74 <HAL_GPIO_WritePin>
		}
	  osDelay(1000);
 8000e8a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e8e:	f003 fc59 	bl	8004744 <osDelay>
	  if (armed == true)
 8000e92:	e7dd      	b.n	8000e50 <StartTaskLED+0x8>
 8000e94:	2000014b 	.word	0x2000014b
 8000e98:	40020400 	.word	0x40020400

08000e9c <StartTaskBuzzer>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskBuzzer */
void StartTaskBuzzer(void *argument)
{
 8000e9c:	b5b0      	push	{r4, r5, r7, lr}
 8000e9e:	b08c      	sub	sp, #48	; 0x30
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskBuzzer */
  /* Infinite loop */
  for(;;)
  {
    if(motion == true){
 8000ea4:	4b21      	ldr	r3, [pc, #132]	; (8000f2c <StartTaskBuzzer+0x90>)
 8000ea6:	781b      	ldrb	r3, [r3, #0]
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d035      	beq.n	8000f18 <StartTaskBuzzer+0x7c>
    	uint8_t str1[] = "Alarm turned on\r\n";
 8000eac:	4b20      	ldr	r3, [pc, #128]	; (8000f30 <StartTaskBuzzer+0x94>)
 8000eae:	f107 041c 	add.w	r4, r7, #28
 8000eb2:	461d      	mov	r5, r3
 8000eb4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000eb6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000eb8:	682b      	ldr	r3, [r5, #0]
 8000eba:	8023      	strh	r3, [r4, #0]
    	HAL_UART_Transmit(&huart2, str1, sizeof(str1), 1000);
 8000ebc:	f107 011c 	add.w	r1, r7, #28
 8000ec0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ec4:	2212      	movs	r2, #18
 8000ec6:	481b      	ldr	r0, [pc, #108]	; (8000f34 <StartTaskBuzzer+0x98>)
 8000ec8:	f002 ff60 	bl	8003d8c <HAL_UART_Transmit>
    	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6,GPIO_PIN_SET);
 8000ecc:	2201      	movs	r2, #1
 8000ece:	2140      	movs	r1, #64	; 0x40
 8000ed0:	4819      	ldr	r0, [pc, #100]	; (8000f38 <StartTaskBuzzer+0x9c>)
 8000ed2:	f001 f84f 	bl	8001f74 <HAL_GPIO_WritePin>
    	osDelay(1000);
 8000ed6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000eda:	f003 fc33 	bl	8004744 <osDelay>
    	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6,GPIO_PIN_RESET);
 8000ede:	2200      	movs	r2, #0
 8000ee0:	2140      	movs	r1, #64	; 0x40
 8000ee2:	4815      	ldr	r0, [pc, #84]	; (8000f38 <StartTaskBuzzer+0x9c>)
 8000ee4:	f001 f846 	bl	8001f74 <HAL_GPIO_WritePin>
    	uint8_t str2[] = "Alarm turned off\r\n";
 8000ee8:	4b14      	ldr	r3, [pc, #80]	; (8000f3c <StartTaskBuzzer+0xa0>)
 8000eea:	f107 0408 	add.w	r4, r7, #8
 8000eee:	461d      	mov	r5, r3
 8000ef0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ef2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ef4:	682b      	ldr	r3, [r5, #0]
 8000ef6:	461a      	mov	r2, r3
 8000ef8:	8022      	strh	r2, [r4, #0]
 8000efa:	3402      	adds	r4, #2
 8000efc:	0c1b      	lsrs	r3, r3, #16
 8000efe:	7023      	strb	r3, [r4, #0]
    	HAL_UART_Transmit(&huart2, str2, sizeof(str2), 1000);
 8000f00:	f107 0108 	add.w	r1, r7, #8
 8000f04:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f08:	2213      	movs	r2, #19
 8000f0a:	480a      	ldr	r0, [pc, #40]	; (8000f34 <StartTaskBuzzer+0x98>)
 8000f0c:	f002 ff3e 	bl	8003d8c <HAL_UART_Transmit>
    	motion = false;
 8000f10:	4b06      	ldr	r3, [pc, #24]	; (8000f2c <StartTaskBuzzer+0x90>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	701a      	strb	r2, [r3, #0]
 8000f16:	e004      	b.n	8000f22 <StartTaskBuzzer+0x86>
    } else {
    	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6,GPIO_PIN_RESET);
 8000f18:	2200      	movs	r2, #0
 8000f1a:	2140      	movs	r1, #64	; 0x40
 8000f1c:	4806      	ldr	r0, [pc, #24]	; (8000f38 <StartTaskBuzzer+0x9c>)
 8000f1e:	f001 f829 	bl	8001f74 <HAL_GPIO_WritePin>
    }
    osDelay(100);
 8000f22:	2064      	movs	r0, #100	; 0x64
 8000f24:	f003 fc0e 	bl	8004744 <osDelay>
    if(motion == true){
 8000f28:	e7bc      	b.n	8000ea4 <StartTaskBuzzer+0x8>
 8000f2a:	bf00      	nop
 8000f2c:	2000014c 	.word	0x2000014c
 8000f30:	08007464 	.word	0x08007464
 8000f34:	200000dc 	.word	0x200000dc
 8000f38:	40020000 	.word	0x40020000
 8000f3c:	08007478 	.word	0x08007478

08000f40 <StartTaskPIR>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskPIR */
void StartTaskPIR(void *argument)
{
 8000f40:	b5b0      	push	{r4, r5, r7, lr}
 8000f42:	b092      	sub	sp, #72	; 0x48
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskPIR */
  /* Infinite loop */
  for(;;)
  {
	  if(armed == true){
 8000f48:	4b34      	ldr	r3, [pc, #208]	; (800101c <StartTaskPIR+0xdc>)
 8000f4a:	781b      	ldrb	r3, [r3, #0]
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d05e      	beq.n	800100e <StartTaskPIR+0xce>
		  osDelay(10000);
 8000f50:	f242 7010 	movw	r0, #10000	; 0x2710
 8000f54:	f003 fbf6 	bl	8004744 <osDelay>
		  while(armed){
 8000f58:	e054      	b.n	8001004 <StartTaskPIR+0xc4>
			  uint8_t str1[] = "I am waiting for motion\r\n";
 8000f5a:	4b31      	ldr	r3, [pc, #196]	; (8001020 <StartTaskPIR+0xe0>)
 8000f5c:	f107 042c 	add.w	r4, r7, #44	; 0x2c
 8000f60:	461d      	mov	r5, r3
 8000f62:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f64:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f66:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000f6a:	c403      	stmia	r4!, {r0, r1}
 8000f6c:	8022      	strh	r2, [r4, #0]
			  HAL_UART_Transmit(&huart2, str1, sizeof(str1), 1000);
 8000f6e:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8000f72:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f76:	221a      	movs	r2, #26
 8000f78:	482a      	ldr	r0, [pc, #168]	; (8001024 <StartTaskPIR+0xe4>)
 8000f7a:	f002 ff07 	bl	8003d8c <HAL_UART_Transmit>
			  bool temp = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_9);
 8000f7e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f82:	4829      	ldr	r0, [pc, #164]	; (8001028 <StartTaskPIR+0xe8>)
 8000f84:	f000 ffde 	bl	8001f44 <HAL_GPIO_ReadPin>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	bf14      	ite	ne
 8000f8e:	2301      	movne	r3, #1
 8000f90:	2300      	moveq	r3, #0
 8000f92:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			  if (temp == GPIO_PIN_SET){
 8000f96:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d01b      	beq.n	8000fd6 <StartTaskPIR+0x96>
				  if (motion == false){
 8000f9e:	4b23      	ldr	r3, [pc, #140]	; (800102c <StartTaskPIR+0xec>)
 8000fa0:	781b      	ldrb	r3, [r3, #0]
 8000fa2:	f083 0301 	eor.w	r3, r3, #1
 8000fa6:	b2db      	uxtb	r3, r3
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d02b      	beq.n	8001004 <StartTaskPIR+0xc4>
					  uint8_t str2[] = "I got motion\r\n";
 8000fac:	4b20      	ldr	r3, [pc, #128]	; (8001030 <StartTaskPIR+0xf0>)
 8000fae:	f107 041c 	add.w	r4, r7, #28
 8000fb2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000fb4:	c407      	stmia	r4!, {r0, r1, r2}
 8000fb6:	8023      	strh	r3, [r4, #0]
 8000fb8:	3402      	adds	r4, #2
 8000fba:	0c1b      	lsrs	r3, r3, #16
 8000fbc:	7023      	strb	r3, [r4, #0]
					  HAL_UART_Transmit(&huart2, str2, sizeof(str2), 1000);
 8000fbe:	f107 011c 	add.w	r1, r7, #28
 8000fc2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fc6:	220f      	movs	r2, #15
 8000fc8:	4816      	ldr	r0, [pc, #88]	; (8001024 <StartTaskPIR+0xe4>)
 8000fca:	f002 fedf 	bl	8003d8c <HAL_UART_Transmit>
					  motion = true;
 8000fce:	4b17      	ldr	r3, [pc, #92]	; (800102c <StartTaskPIR+0xec>)
 8000fd0:	2201      	movs	r2, #1
 8000fd2:	701a      	strb	r2, [r3, #0]
 8000fd4:	e016      	b.n	8001004 <StartTaskPIR+0xc4>
				  }
			  } else {
				  if (motion == true) {
 8000fd6:	4b15      	ldr	r3, [pc, #84]	; (800102c <StartTaskPIR+0xec>)
 8000fd8:	781b      	ldrb	r3, [r3, #0]
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d012      	beq.n	8001004 <StartTaskPIR+0xc4>
					  uint8_t str2[] = "Motion Stopped\r\n";
 8000fde:	4b15      	ldr	r3, [pc, #84]	; (8001034 <StartTaskPIR+0xf4>)
 8000fe0:	f107 0408 	add.w	r4, r7, #8
 8000fe4:	461d      	mov	r5, r3
 8000fe6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000fe8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000fea:	682b      	ldr	r3, [r5, #0]
 8000fec:	7023      	strb	r3, [r4, #0]
					  HAL_UART_Transmit(&huart2, str2, sizeof(str2), 1000);
 8000fee:	f107 0108 	add.w	r1, r7, #8
 8000ff2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ff6:	2211      	movs	r2, #17
 8000ff8:	480a      	ldr	r0, [pc, #40]	; (8001024 <StartTaskPIR+0xe4>)
 8000ffa:	f002 fec7 	bl	8003d8c <HAL_UART_Transmit>
					  motion = false;
 8000ffe:	4b0b      	ldr	r3, [pc, #44]	; (800102c <StartTaskPIR+0xec>)
 8001000:	2200      	movs	r2, #0
 8001002:	701a      	strb	r2, [r3, #0]
		  while(armed){
 8001004:	4b05      	ldr	r3, [pc, #20]	; (800101c <StartTaskPIR+0xdc>)
 8001006:	781b      	ldrb	r3, [r3, #0]
 8001008:	2b00      	cmp	r3, #0
 800100a:	d1a6      	bne.n	8000f5a <StartTaskPIR+0x1a>
 800100c:	e002      	b.n	8001014 <StartTaskPIR+0xd4>
				  }
			  }
		  }
	  }else {
		  motion = false;
 800100e:	4b07      	ldr	r3, [pc, #28]	; (800102c <StartTaskPIR+0xec>)
 8001010:	2200      	movs	r2, #0
 8001012:	701a      	strb	r2, [r3, #0]
	  }
	  osDelay(200);
 8001014:	20c8      	movs	r0, #200	; 0xc8
 8001016:	f003 fb95 	bl	8004744 <osDelay>
	  if(armed == true){
 800101a:	e795      	b.n	8000f48 <StartTaskPIR+0x8>
 800101c:	2000014b 	.word	0x2000014b
 8001020:	0800748c 	.word	0x0800748c
 8001024:	200000dc 	.word	0x200000dc
 8001028:	40020400 	.word	0x40020400
 800102c:	2000014c 	.word	0x2000014c
 8001030:	080074a8 	.word	0x080074a8
 8001034:	080074b8 	.word	0x080074b8

08001038 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b082      	sub	sp, #8
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	4a04      	ldr	r2, [pc, #16]	; (8001058 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001046:	4293      	cmp	r3, r2
 8001048:	d101      	bne.n	800104e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800104a:	f000 fcc1 	bl	80019d0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800104e:	bf00      	nop
 8001050:	3708      	adds	r7, #8
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	40001000 	.word	0x40001000

0800105c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800105c:	b480      	push	{r7}
 800105e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001060:	b672      	cpsid	i
}
 8001062:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001064:	e7fe      	b.n	8001064 <Error_Handler+0x8>
	...

08001068 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 8001068:	b580      	push	{r7, lr}
 800106a:	b082      	sub	sp, #8
 800106c:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 800106e:	f000 fa29 	bl	80014c4 <ssd1306_I2C_Init>

	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8001072:	f644 6320 	movw	r3, #20000	; 0x4e20
 8001076:	2201      	movs	r2, #1
 8001078:	2178      	movs	r1, #120	; 0x78
 800107a:	485b      	ldr	r0, [pc, #364]	; (80011e8 <SSD1306_Init+0x180>)
 800107c:	f001 f9f0 	bl	8002460 <HAL_I2C_IsDeviceReady>
 8001080:	4603      	mov	r3, r0
 8001082:	2b00      	cmp	r3, #0
 8001084:	d001      	beq.n	800108a <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 8001086:	2300      	movs	r3, #0
 8001088:	e0a9      	b.n	80011de <SSD1306_Init+0x176>
	}

	/* A little delay */
	uint32_t p = 2500;
 800108a:	f640 13c4 	movw	r3, #2500	; 0x9c4
 800108e:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001090:	e002      	b.n	8001098 <SSD1306_Init+0x30>
		p--;
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	3b01      	subs	r3, #1
 8001096:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	2b00      	cmp	r3, #0
 800109c:	d1f9      	bne.n	8001092 <SSD1306_Init+0x2a>

	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 800109e:	22ae      	movs	r2, #174	; 0xae
 80010a0:	2100      	movs	r1, #0
 80010a2:	2078      	movs	r0, #120	; 0x78
 80010a4:	f000 fa8a 	bl	80015bc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode
 80010a8:	2220      	movs	r2, #32
 80010aa:	2100      	movs	r1, #0
 80010ac:	2078      	movs	r0, #120	; 0x78
 80010ae:	f000 fa85 	bl	80015bc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 80010b2:	2210      	movs	r2, #16
 80010b4:	2100      	movs	r1, #0
 80010b6:	2078      	movs	r0, #120	; 0x78
 80010b8:	f000 fa80 	bl	80015bc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80010bc:	22b0      	movs	r2, #176	; 0xb0
 80010be:	2100      	movs	r1, #0
 80010c0:	2078      	movs	r0, #120	; 0x78
 80010c2:	f000 fa7b 	bl	80015bc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 80010c6:	22c8      	movs	r2, #200	; 0xc8
 80010c8:	2100      	movs	r1, #0
 80010ca:	2078      	movs	r0, #120	; 0x78
 80010cc:	f000 fa76 	bl	80015bc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 80010d0:	2200      	movs	r2, #0
 80010d2:	2100      	movs	r1, #0
 80010d4:	2078      	movs	r0, #120	; 0x78
 80010d6:	f000 fa71 	bl	80015bc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 80010da:	2210      	movs	r2, #16
 80010dc:	2100      	movs	r1, #0
 80010de:	2078      	movs	r0, #120	; 0x78
 80010e0:	f000 fa6c 	bl	80015bc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 80010e4:	2240      	movs	r2, #64	; 0x40
 80010e6:	2100      	movs	r1, #0
 80010e8:	2078      	movs	r0, #120	; 0x78
 80010ea:	f000 fa67 	bl	80015bc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 80010ee:	2281      	movs	r2, #129	; 0x81
 80010f0:	2100      	movs	r1, #0
 80010f2:	2078      	movs	r0, #120	; 0x78
 80010f4:	f000 fa62 	bl	80015bc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 80010f8:	22ff      	movs	r2, #255	; 0xff
 80010fa:	2100      	movs	r1, #0
 80010fc:	2078      	movs	r0, #120	; 0x78
 80010fe:	f000 fa5d 	bl	80015bc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8001102:	22a1      	movs	r2, #161	; 0xa1
 8001104:	2100      	movs	r1, #0
 8001106:	2078      	movs	r0, #120	; 0x78
 8001108:	f000 fa58 	bl	80015bc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 800110c:	22a6      	movs	r2, #166	; 0xa6
 800110e:	2100      	movs	r1, #0
 8001110:	2078      	movs	r0, #120	; 0x78
 8001112:	f000 fa53 	bl	80015bc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8001116:	22a8      	movs	r2, #168	; 0xa8
 8001118:	2100      	movs	r1, #0
 800111a:	2078      	movs	r0, #120	; 0x78
 800111c:	f000 fa4e 	bl	80015bc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8001120:	223f      	movs	r2, #63	; 0x3f
 8001122:	2100      	movs	r1, #0
 8001124:	2078      	movs	r0, #120	; 0x78
 8001126:	f000 fa49 	bl	80015bc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 800112a:	22a4      	movs	r2, #164	; 0xa4
 800112c:	2100      	movs	r1, #0
 800112e:	2078      	movs	r0, #120	; 0x78
 8001130:	f000 fa44 	bl	80015bc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8001134:	22d3      	movs	r2, #211	; 0xd3
 8001136:	2100      	movs	r1, #0
 8001138:	2078      	movs	r0, #120	; 0x78
 800113a:	f000 fa3f 	bl	80015bc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 800113e:	2200      	movs	r2, #0
 8001140:	2100      	movs	r1, #0
 8001142:	2078      	movs	r0, #120	; 0x78
 8001144:	f000 fa3a 	bl	80015bc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8001148:	22d5      	movs	r2, #213	; 0xd5
 800114a:	2100      	movs	r1, #0
 800114c:	2078      	movs	r0, #120	; 0x78
 800114e:	f000 fa35 	bl	80015bc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8001152:	22f0      	movs	r2, #240	; 0xf0
 8001154:	2100      	movs	r1, #0
 8001156:	2078      	movs	r0, #120	; 0x78
 8001158:	f000 fa30 	bl	80015bc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 800115c:	22d9      	movs	r2, #217	; 0xd9
 800115e:	2100      	movs	r1, #0
 8001160:	2078      	movs	r0, #120	; 0x78
 8001162:	f000 fa2b 	bl	80015bc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8001166:	2222      	movs	r2, #34	; 0x22
 8001168:	2100      	movs	r1, #0
 800116a:	2078      	movs	r0, #120	; 0x78
 800116c:	f000 fa26 	bl	80015bc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8001170:	22da      	movs	r2, #218	; 0xda
 8001172:	2100      	movs	r1, #0
 8001174:	2078      	movs	r0, #120	; 0x78
 8001176:	f000 fa21 	bl	80015bc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 800117a:	2212      	movs	r2, #18
 800117c:	2100      	movs	r1, #0
 800117e:	2078      	movs	r0, #120	; 0x78
 8001180:	f000 fa1c 	bl	80015bc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8001184:	22db      	movs	r2, #219	; 0xdb
 8001186:	2100      	movs	r1, #0
 8001188:	2078      	movs	r0, #120	; 0x78
 800118a:	f000 fa17 	bl	80015bc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 800118e:	2220      	movs	r2, #32
 8001190:	2100      	movs	r1, #0
 8001192:	2078      	movs	r0, #120	; 0x78
 8001194:	f000 fa12 	bl	80015bc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8001198:	228d      	movs	r2, #141	; 0x8d
 800119a:	2100      	movs	r1, #0
 800119c:	2078      	movs	r0, #120	; 0x78
 800119e:	f000 fa0d 	bl	80015bc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 80011a2:	2214      	movs	r2, #20
 80011a4:	2100      	movs	r1, #0
 80011a6:	2078      	movs	r0, #120	; 0x78
 80011a8:	f000 fa08 	bl	80015bc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 80011ac:	22af      	movs	r2, #175	; 0xaf
 80011ae:	2100      	movs	r1, #0
 80011b0:	2078      	movs	r0, #120	; 0x78
 80011b2:	f000 fa03 	bl	80015bc <ssd1306_I2C_Write>


	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 80011b6:	222e      	movs	r2, #46	; 0x2e
 80011b8:	2100      	movs	r1, #0
 80011ba:	2078      	movs	r0, #120	; 0x78
 80011bc:	f000 f9fe 	bl	80015bc <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 80011c0:	2000      	movs	r0, #0
 80011c2:	f000 f843 	bl	800124c <SSD1306_Fill>

	/* Update screen */
	SSD1306_UpdateScreen();
 80011c6:	f000 f813 	bl	80011f0 <SSD1306_UpdateScreen>

	/* Set default values */
	SSD1306.CurrentX = 0;
 80011ca:	4b08      	ldr	r3, [pc, #32]	; (80011ec <SSD1306_Init+0x184>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 80011d0:	4b06      	ldr	r3, [pc, #24]	; (80011ec <SSD1306_Init+0x184>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	805a      	strh	r2, [r3, #2]

	/* Initialized OK */
	SSD1306.Initialized = 1;
 80011d6:	4b05      	ldr	r3, [pc, #20]	; (80011ec <SSD1306_Init+0x184>)
 80011d8:	2201      	movs	r2, #1
 80011da:	715a      	strb	r2, [r3, #5]

	/* Return OK */
	return 1;
 80011dc:	2301      	movs	r3, #1
}
 80011de:	4618      	mov	r0, r3
 80011e0:	3708      	adds	r7, #8
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}
 80011e6:	bf00      	nop
 80011e8:	20000088 	.word	0x20000088
 80011ec:	20000554 	.word	0x20000554

080011f0 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b082      	sub	sp, #8
 80011f4:	af00      	add	r7, sp, #0
	uint8_t m;

	for (m = 0; m < 8; m++) {
 80011f6:	2300      	movs	r3, #0
 80011f8:	71fb      	strb	r3, [r7, #7]
 80011fa:	e01d      	b.n	8001238 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 80011fc:	79fb      	ldrb	r3, [r7, #7]
 80011fe:	3b50      	subs	r3, #80	; 0x50
 8001200:	b2db      	uxtb	r3, r3
 8001202:	461a      	mov	r2, r3
 8001204:	2100      	movs	r1, #0
 8001206:	2078      	movs	r0, #120	; 0x78
 8001208:	f000 f9d8 	bl	80015bc <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 800120c:	2200      	movs	r2, #0
 800120e:	2100      	movs	r1, #0
 8001210:	2078      	movs	r0, #120	; 0x78
 8001212:	f000 f9d3 	bl	80015bc <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8001216:	2210      	movs	r2, #16
 8001218:	2100      	movs	r1, #0
 800121a:	2078      	movs	r0, #120	; 0x78
 800121c:	f000 f9ce 	bl	80015bc <ssd1306_I2C_Write>

		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8001220:	79fb      	ldrb	r3, [r7, #7]
 8001222:	01db      	lsls	r3, r3, #7
 8001224:	4a08      	ldr	r2, [pc, #32]	; (8001248 <SSD1306_UpdateScreen+0x58>)
 8001226:	441a      	add	r2, r3
 8001228:	2380      	movs	r3, #128	; 0x80
 800122a:	2140      	movs	r1, #64	; 0x40
 800122c:	2078      	movs	r0, #120	; 0x78
 800122e:	f000 f95f 	bl	80014f0 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8001232:	79fb      	ldrb	r3, [r7, #7]
 8001234:	3301      	adds	r3, #1
 8001236:	71fb      	strb	r3, [r7, #7]
 8001238:	79fb      	ldrb	r3, [r7, #7]
 800123a:	2b07      	cmp	r3, #7
 800123c:	d9de      	bls.n	80011fc <SSD1306_UpdateScreen+0xc>
	}
}
 800123e:	bf00      	nop
 8001240:	bf00      	nop
 8001242:	3708      	adds	r7, #8
 8001244:	46bd      	mov	sp, r7
 8001246:	bd80      	pop	{r7, pc}
 8001248:	20000154 	.word	0x20000154

0800124c <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 800124c:	b580      	push	{r7, lr}
 800124e:	b082      	sub	sp, #8
 8001250:	af00      	add	r7, sp, #0
 8001252:	4603      	mov	r3, r0
 8001254:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8001256:	79fb      	ldrb	r3, [r7, #7]
 8001258:	2b00      	cmp	r3, #0
 800125a:	d101      	bne.n	8001260 <SSD1306_Fill+0x14>
 800125c:	2300      	movs	r3, #0
 800125e:	e000      	b.n	8001262 <SSD1306_Fill+0x16>
 8001260:	23ff      	movs	r3, #255	; 0xff
 8001262:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001266:	4619      	mov	r1, r3
 8001268:	4803      	ldr	r0, [pc, #12]	; (8001278 <SSD1306_Fill+0x2c>)
 800126a:	f005 ffbb 	bl	80071e4 <memset>
}
 800126e:	bf00      	nop
 8001270:	3708      	adds	r7, #8
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}
 8001276:	bf00      	nop
 8001278:	20000154 	.word	0x20000154

0800127c <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 800127c:	b480      	push	{r7}
 800127e:	b083      	sub	sp, #12
 8001280:	af00      	add	r7, sp, #0
 8001282:	4603      	mov	r3, r0
 8001284:	80fb      	strh	r3, [r7, #6]
 8001286:	460b      	mov	r3, r1
 8001288:	80bb      	strh	r3, [r7, #4]
 800128a:	4613      	mov	r3, r2
 800128c:	70fb      	strb	r3, [r7, #3]
	if (
 800128e:	88fb      	ldrh	r3, [r7, #6]
 8001290:	2b7f      	cmp	r3, #127	; 0x7f
 8001292:	d848      	bhi.n	8001326 <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8001294:	88bb      	ldrh	r3, [r7, #4]
 8001296:	2b3f      	cmp	r3, #63	; 0x3f
 8001298:	d845      	bhi.n	8001326 <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}

	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 800129a:	4b26      	ldr	r3, [pc, #152]	; (8001334 <SSD1306_DrawPixel+0xb8>)
 800129c:	791b      	ldrb	r3, [r3, #4]
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d006      	beq.n	80012b0 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 80012a2:	78fb      	ldrb	r3, [r7, #3]
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	bf0c      	ite	eq
 80012a8:	2301      	moveq	r3, #1
 80012aa:	2300      	movne	r3, #0
 80012ac:	b2db      	uxtb	r3, r3
 80012ae:	70fb      	strb	r3, [r7, #3]
	}

	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 80012b0:	78fb      	ldrb	r3, [r7, #3]
 80012b2:	2b01      	cmp	r3, #1
 80012b4:	d11a      	bne.n	80012ec <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80012b6:	88fa      	ldrh	r2, [r7, #6]
 80012b8:	88bb      	ldrh	r3, [r7, #4]
 80012ba:	08db      	lsrs	r3, r3, #3
 80012bc:	b298      	uxth	r0, r3
 80012be:	4603      	mov	r3, r0
 80012c0:	01db      	lsls	r3, r3, #7
 80012c2:	4413      	add	r3, r2
 80012c4:	4a1c      	ldr	r2, [pc, #112]	; (8001338 <SSD1306_DrawPixel+0xbc>)
 80012c6:	5cd3      	ldrb	r3, [r2, r3]
 80012c8:	b25a      	sxtb	r2, r3
 80012ca:	88bb      	ldrh	r3, [r7, #4]
 80012cc:	f003 0307 	and.w	r3, r3, #7
 80012d0:	2101      	movs	r1, #1
 80012d2:	fa01 f303 	lsl.w	r3, r1, r3
 80012d6:	b25b      	sxtb	r3, r3
 80012d8:	4313      	orrs	r3, r2
 80012da:	b259      	sxtb	r1, r3
 80012dc:	88fa      	ldrh	r2, [r7, #6]
 80012de:	4603      	mov	r3, r0
 80012e0:	01db      	lsls	r3, r3, #7
 80012e2:	4413      	add	r3, r2
 80012e4:	b2c9      	uxtb	r1, r1
 80012e6:	4a14      	ldr	r2, [pc, #80]	; (8001338 <SSD1306_DrawPixel+0xbc>)
 80012e8:	54d1      	strb	r1, [r2, r3]
 80012ea:	e01d      	b.n	8001328 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80012ec:	88fa      	ldrh	r2, [r7, #6]
 80012ee:	88bb      	ldrh	r3, [r7, #4]
 80012f0:	08db      	lsrs	r3, r3, #3
 80012f2:	b298      	uxth	r0, r3
 80012f4:	4603      	mov	r3, r0
 80012f6:	01db      	lsls	r3, r3, #7
 80012f8:	4413      	add	r3, r2
 80012fa:	4a0f      	ldr	r2, [pc, #60]	; (8001338 <SSD1306_DrawPixel+0xbc>)
 80012fc:	5cd3      	ldrb	r3, [r2, r3]
 80012fe:	b25a      	sxtb	r2, r3
 8001300:	88bb      	ldrh	r3, [r7, #4]
 8001302:	f003 0307 	and.w	r3, r3, #7
 8001306:	2101      	movs	r1, #1
 8001308:	fa01 f303 	lsl.w	r3, r1, r3
 800130c:	b25b      	sxtb	r3, r3
 800130e:	43db      	mvns	r3, r3
 8001310:	b25b      	sxtb	r3, r3
 8001312:	4013      	ands	r3, r2
 8001314:	b259      	sxtb	r1, r3
 8001316:	88fa      	ldrh	r2, [r7, #6]
 8001318:	4603      	mov	r3, r0
 800131a:	01db      	lsls	r3, r3, #7
 800131c:	4413      	add	r3, r2
 800131e:	b2c9      	uxtb	r1, r1
 8001320:	4a05      	ldr	r2, [pc, #20]	; (8001338 <SSD1306_DrawPixel+0xbc>)
 8001322:	54d1      	strb	r1, [r2, r3]
 8001324:	e000      	b.n	8001328 <SSD1306_DrawPixel+0xac>
		return;
 8001326:	bf00      	nop
	}
}
 8001328:	370c      	adds	r7, #12
 800132a:	46bd      	mov	sp, r7
 800132c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001330:	4770      	bx	lr
 8001332:	bf00      	nop
 8001334:	20000554 	.word	0x20000554
 8001338:	20000154 	.word	0x20000154

0800133c <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 800133c:	b480      	push	{r7}
 800133e:	b083      	sub	sp, #12
 8001340:	af00      	add	r7, sp, #0
 8001342:	4603      	mov	r3, r0
 8001344:	460a      	mov	r2, r1
 8001346:	80fb      	strh	r3, [r7, #6]
 8001348:	4613      	mov	r3, r2
 800134a:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 800134c:	4a05      	ldr	r2, [pc, #20]	; (8001364 <SSD1306_GotoXY+0x28>)
 800134e:	88fb      	ldrh	r3, [r7, #6]
 8001350:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8001352:	4a04      	ldr	r2, [pc, #16]	; (8001364 <SSD1306_GotoXY+0x28>)
 8001354:	88bb      	ldrh	r3, [r7, #4]
 8001356:	8053      	strh	r3, [r2, #2]
}
 8001358:	bf00      	nop
 800135a:	370c      	adds	r7, #12
 800135c:	46bd      	mov	sp, r7
 800135e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001362:	4770      	bx	lr
 8001364:	20000554 	.word	0x20000554

08001368 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001368:	b580      	push	{r7, lr}
 800136a:	b086      	sub	sp, #24
 800136c:	af00      	add	r7, sp, #0
 800136e:	4603      	mov	r3, r0
 8001370:	6039      	str	r1, [r7, #0]
 8001372:	71fb      	strb	r3, [r7, #7]
 8001374:	4613      	mov	r3, r2
 8001376:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;

	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001378:	4b3a      	ldr	r3, [pc, #232]	; (8001464 <SSD1306_Putc+0xfc>)
 800137a:	881b      	ldrh	r3, [r3, #0]
 800137c:	461a      	mov	r2, r3
 800137e:	683b      	ldr	r3, [r7, #0]
 8001380:	781b      	ldrb	r3, [r3, #0]
 8001382:	4413      	add	r3, r2
	if (
 8001384:	2b7f      	cmp	r3, #127	; 0x7f
 8001386:	dc07      	bgt.n	8001398 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8001388:	4b36      	ldr	r3, [pc, #216]	; (8001464 <SSD1306_Putc+0xfc>)
 800138a:	885b      	ldrh	r3, [r3, #2]
 800138c:	461a      	mov	r2, r3
 800138e:	683b      	ldr	r3, [r7, #0]
 8001390:	785b      	ldrb	r3, [r3, #1]
 8001392:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001394:	2b3f      	cmp	r3, #63	; 0x3f
 8001396:	dd01      	ble.n	800139c <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8001398:	2300      	movs	r3, #0
 800139a:	e05e      	b.n	800145a <SSD1306_Putc+0xf2>
	}

	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 800139c:	2300      	movs	r3, #0
 800139e:	617b      	str	r3, [r7, #20]
 80013a0:	e04b      	b.n	800143a <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 80013a2:	683b      	ldr	r3, [r7, #0]
 80013a4:	685a      	ldr	r2, [r3, #4]
 80013a6:	79fb      	ldrb	r3, [r7, #7]
 80013a8:	3b20      	subs	r3, #32
 80013aa:	6839      	ldr	r1, [r7, #0]
 80013ac:	7849      	ldrb	r1, [r1, #1]
 80013ae:	fb01 f303 	mul.w	r3, r1, r3
 80013b2:	4619      	mov	r1, r3
 80013b4:	697b      	ldr	r3, [r7, #20]
 80013b6:	440b      	add	r3, r1
 80013b8:	005b      	lsls	r3, r3, #1
 80013ba:	4413      	add	r3, r2
 80013bc:	881b      	ldrh	r3, [r3, #0]
 80013be:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 80013c0:	2300      	movs	r3, #0
 80013c2:	613b      	str	r3, [r7, #16]
 80013c4:	e030      	b.n	8001428 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 80013c6:	68fa      	ldr	r2, [r7, #12]
 80013c8:	693b      	ldr	r3, [r7, #16]
 80013ca:	fa02 f303 	lsl.w	r3, r2, r3
 80013ce:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d010      	beq.n	80013f8 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 80013d6:	4b23      	ldr	r3, [pc, #140]	; (8001464 <SSD1306_Putc+0xfc>)
 80013d8:	881a      	ldrh	r2, [r3, #0]
 80013da:	693b      	ldr	r3, [r7, #16]
 80013dc:	b29b      	uxth	r3, r3
 80013de:	4413      	add	r3, r2
 80013e0:	b298      	uxth	r0, r3
 80013e2:	4b20      	ldr	r3, [pc, #128]	; (8001464 <SSD1306_Putc+0xfc>)
 80013e4:	885a      	ldrh	r2, [r3, #2]
 80013e6:	697b      	ldr	r3, [r7, #20]
 80013e8:	b29b      	uxth	r3, r3
 80013ea:	4413      	add	r3, r2
 80013ec:	b29b      	uxth	r3, r3
 80013ee:	79ba      	ldrb	r2, [r7, #6]
 80013f0:	4619      	mov	r1, r3
 80013f2:	f7ff ff43 	bl	800127c <SSD1306_DrawPixel>
 80013f6:	e014      	b.n	8001422 <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 80013f8:	4b1a      	ldr	r3, [pc, #104]	; (8001464 <SSD1306_Putc+0xfc>)
 80013fa:	881a      	ldrh	r2, [r3, #0]
 80013fc:	693b      	ldr	r3, [r7, #16]
 80013fe:	b29b      	uxth	r3, r3
 8001400:	4413      	add	r3, r2
 8001402:	b298      	uxth	r0, r3
 8001404:	4b17      	ldr	r3, [pc, #92]	; (8001464 <SSD1306_Putc+0xfc>)
 8001406:	885a      	ldrh	r2, [r3, #2]
 8001408:	697b      	ldr	r3, [r7, #20]
 800140a:	b29b      	uxth	r3, r3
 800140c:	4413      	add	r3, r2
 800140e:	b299      	uxth	r1, r3
 8001410:	79bb      	ldrb	r3, [r7, #6]
 8001412:	2b00      	cmp	r3, #0
 8001414:	bf0c      	ite	eq
 8001416:	2301      	moveq	r3, #1
 8001418:	2300      	movne	r3, #0
 800141a:	b2db      	uxtb	r3, r3
 800141c:	461a      	mov	r2, r3
 800141e:	f7ff ff2d 	bl	800127c <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8001422:	693b      	ldr	r3, [r7, #16]
 8001424:	3301      	adds	r3, #1
 8001426:	613b      	str	r3, [r7, #16]
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	781b      	ldrb	r3, [r3, #0]
 800142c:	461a      	mov	r2, r3
 800142e:	693b      	ldr	r3, [r7, #16]
 8001430:	4293      	cmp	r3, r2
 8001432:	d3c8      	bcc.n	80013c6 <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8001434:	697b      	ldr	r3, [r7, #20]
 8001436:	3301      	adds	r3, #1
 8001438:	617b      	str	r3, [r7, #20]
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	785b      	ldrb	r3, [r3, #1]
 800143e:	461a      	mov	r2, r3
 8001440:	697b      	ldr	r3, [r7, #20]
 8001442:	4293      	cmp	r3, r2
 8001444:	d3ad      	bcc.n	80013a2 <SSD1306_Putc+0x3a>
			}
		}
	}

	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8001446:	4b07      	ldr	r3, [pc, #28]	; (8001464 <SSD1306_Putc+0xfc>)
 8001448:	881a      	ldrh	r2, [r3, #0]
 800144a:	683b      	ldr	r3, [r7, #0]
 800144c:	781b      	ldrb	r3, [r3, #0]
 800144e:	b29b      	uxth	r3, r3
 8001450:	4413      	add	r3, r2
 8001452:	b29a      	uxth	r2, r3
 8001454:	4b03      	ldr	r3, [pc, #12]	; (8001464 <SSD1306_Putc+0xfc>)
 8001456:	801a      	strh	r2, [r3, #0]

	/* Return character written */
	return ch;
 8001458:	79fb      	ldrb	r3, [r7, #7]
}
 800145a:	4618      	mov	r0, r3
 800145c:	3718      	adds	r7, #24
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}
 8001462:	bf00      	nop
 8001464:	20000554 	.word	0x20000554

08001468 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001468:	b580      	push	{r7, lr}
 800146a:	b084      	sub	sp, #16
 800146c:	af00      	add	r7, sp, #0
 800146e:	60f8      	str	r0, [r7, #12]
 8001470:	60b9      	str	r1, [r7, #8]
 8001472:	4613      	mov	r3, r2
 8001474:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8001476:	e012      	b.n	800149e <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	781b      	ldrb	r3, [r3, #0]
 800147c:	79fa      	ldrb	r2, [r7, #7]
 800147e:	68b9      	ldr	r1, [r7, #8]
 8001480:	4618      	mov	r0, r3
 8001482:	f7ff ff71 	bl	8001368 <SSD1306_Putc>
 8001486:	4603      	mov	r3, r0
 8001488:	461a      	mov	r2, r3
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	781b      	ldrb	r3, [r3, #0]
 800148e:	429a      	cmp	r2, r3
 8001490:	d002      	beq.n	8001498 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	781b      	ldrb	r3, [r3, #0]
 8001496:	e008      	b.n	80014aa <SSD1306_Puts+0x42>
		}

		/* Increase string pointer */
		str++;
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	3301      	adds	r3, #1
 800149c:	60fb      	str	r3, [r7, #12]
	while (*str) {
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	781b      	ldrb	r3, [r3, #0]
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d1e8      	bne.n	8001478 <SSD1306_Puts+0x10>
	}

	/* Everything OK, zero should be returned */
	return *str;
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	781b      	ldrb	r3, [r3, #0]
}
 80014aa:	4618      	mov	r0, r3
 80014ac:	3710      	adds	r7, #16
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}

080014b2 <SSD1306_Clear>:
}



void SSD1306_Clear (void)
{
 80014b2:	b580      	push	{r7, lr}
 80014b4:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 80014b6:	2000      	movs	r0, #0
 80014b8:	f7ff fec8 	bl	800124c <SSD1306_Fill>
    SSD1306_UpdateScreen();
 80014bc:	f7ff fe98 	bl	80011f0 <SSD1306_UpdateScreen>
}
 80014c0:	bf00      	nop
 80014c2:	bd80      	pop	{r7, pc}

080014c4 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 80014c4:	b480      	push	{r7}
 80014c6:	b083      	sub	sp, #12
 80014c8:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 80014ca:	4b08      	ldr	r3, [pc, #32]	; (80014ec <ssd1306_I2C_Init+0x28>)
 80014cc:	607b      	str	r3, [r7, #4]
	while(p>0)
 80014ce:	e002      	b.n	80014d6 <ssd1306_I2C_Init+0x12>
		p--;
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	3b01      	subs	r3, #1
 80014d4:	607b      	str	r3, [r7, #4]
	while(p>0)
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d1f9      	bne.n	80014d0 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 80014dc:	bf00      	nop
 80014de:	bf00      	nop
 80014e0:	370c      	adds	r7, #12
 80014e2:	46bd      	mov	sp, r7
 80014e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e8:	4770      	bx	lr
 80014ea:	bf00      	nop
 80014ec:	0003d090 	.word	0x0003d090

080014f0 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 80014f0:	b590      	push	{r4, r7, lr}
 80014f2:	b0c7      	sub	sp, #284	; 0x11c
 80014f4:	af02      	add	r7, sp, #8
 80014f6:	4604      	mov	r4, r0
 80014f8:	4608      	mov	r0, r1
 80014fa:	f507 7188 	add.w	r1, r7, #272	; 0x110
 80014fe:	f5a1 7188 	sub.w	r1, r1, #272	; 0x110
 8001502:	600a      	str	r2, [r1, #0]
 8001504:	4619      	mov	r1, r3
 8001506:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800150a:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 800150e:	4622      	mov	r2, r4
 8001510:	701a      	strb	r2, [r3, #0]
 8001512:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001516:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 800151a:	4602      	mov	r2, r0
 800151c:	701a      	strb	r2, [r3, #0]
 800151e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001522:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001526:	460a      	mov	r2, r1
 8001528:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 800152a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800152e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001532:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001536:	f5a2 7285 	sub.w	r2, r2, #266	; 0x10a
 800153a:	7812      	ldrb	r2, [r2, #0]
 800153c:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 800153e:	2300      	movs	r3, #0
 8001540:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8001544:	e015      	b.n	8001572 <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 8001546:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800154a:	f507 7288 	add.w	r2, r7, #272	; 0x110
 800154e:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8001552:	6812      	ldr	r2, [r2, #0]
 8001554:	441a      	add	r2, r3
 8001556:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800155a:	3301      	adds	r3, #1
 800155c:	7811      	ldrb	r1, [r2, #0]
 800155e:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001562:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 8001566:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8001568:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800156c:	3301      	adds	r3, #1
 800156e:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8001572:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001576:	b29b      	uxth	r3, r3
 8001578:	f507 7288 	add.w	r2, r7, #272	; 0x110
 800157c:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8001580:	8812      	ldrh	r2, [r2, #0]
 8001582:	429a      	cmp	r2, r3
 8001584:	d8df      	bhi.n	8001546 <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 8001586:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800158a:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 800158e:	781b      	ldrb	r3, [r3, #0]
 8001590:	b299      	uxth	r1, r3
 8001592:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001596:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800159a:	881b      	ldrh	r3, [r3, #0]
 800159c:	3301      	adds	r3, #1
 800159e:	b29b      	uxth	r3, r3
 80015a0:	f107 020c 	add.w	r2, r7, #12
 80015a4:	200a      	movs	r0, #10
 80015a6:	9000      	str	r0, [sp, #0]
 80015a8:	4803      	ldr	r0, [pc, #12]	; (80015b8 <ssd1306_I2C_WriteMulti+0xc8>)
 80015aa:	f000 fe5b 	bl	8002264 <HAL_I2C_Master_Transmit>
}
 80015ae:	bf00      	nop
 80015b0:	f507 778a 	add.w	r7, r7, #276	; 0x114
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bd90      	pop	{r4, r7, pc}
 80015b8:	20000088 	.word	0x20000088

080015bc <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 80015bc:	b580      	push	{r7, lr}
 80015be:	b086      	sub	sp, #24
 80015c0:	af02      	add	r7, sp, #8
 80015c2:	4603      	mov	r3, r0
 80015c4:	71fb      	strb	r3, [r7, #7]
 80015c6:	460b      	mov	r3, r1
 80015c8:	71bb      	strb	r3, [r7, #6]
 80015ca:	4613      	mov	r3, r2
 80015cc:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 80015ce:	79bb      	ldrb	r3, [r7, #6]
 80015d0:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 80015d2:	797b      	ldrb	r3, [r7, #5]
 80015d4:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 80015d6:	79fb      	ldrb	r3, [r7, #7]
 80015d8:	b299      	uxth	r1, r3
 80015da:	f107 020c 	add.w	r2, r7, #12
 80015de:	230a      	movs	r3, #10
 80015e0:	9300      	str	r3, [sp, #0]
 80015e2:	2302      	movs	r3, #2
 80015e4:	4803      	ldr	r0, [pc, #12]	; (80015f4 <ssd1306_I2C_Write+0x38>)
 80015e6:	f000 fe3d 	bl	8002264 <HAL_I2C_Master_Transmit>
}
 80015ea:	bf00      	nop
 80015ec:	3710      	adds	r7, #16
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd80      	pop	{r7, pc}
 80015f2:	bf00      	nop
 80015f4:	20000088 	.word	0x20000088

080015f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b082      	sub	sp, #8
 80015fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015fe:	2300      	movs	r3, #0
 8001600:	607b      	str	r3, [r7, #4]
 8001602:	4b12      	ldr	r3, [pc, #72]	; (800164c <HAL_MspInit+0x54>)
 8001604:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001606:	4a11      	ldr	r2, [pc, #68]	; (800164c <HAL_MspInit+0x54>)
 8001608:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800160c:	6453      	str	r3, [r2, #68]	; 0x44
 800160e:	4b0f      	ldr	r3, [pc, #60]	; (800164c <HAL_MspInit+0x54>)
 8001610:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001612:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001616:	607b      	str	r3, [r7, #4]
 8001618:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800161a:	2300      	movs	r3, #0
 800161c:	603b      	str	r3, [r7, #0]
 800161e:	4b0b      	ldr	r3, [pc, #44]	; (800164c <HAL_MspInit+0x54>)
 8001620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001622:	4a0a      	ldr	r2, [pc, #40]	; (800164c <HAL_MspInit+0x54>)
 8001624:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001628:	6413      	str	r3, [r2, #64]	; 0x40
 800162a:	4b08      	ldr	r3, [pc, #32]	; (800164c <HAL_MspInit+0x54>)
 800162c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800162e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001632:	603b      	str	r3, [r7, #0]
 8001634:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001636:	2200      	movs	r2, #0
 8001638:	210f      	movs	r1, #15
 800163a:	f06f 0001 	mvn.w	r0, #1
 800163e:	f000 fac3 	bl	8001bc8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001642:	bf00      	nop
 8001644:	3708      	adds	r7, #8
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}
 800164a:	bf00      	nop
 800164c:	40023800 	.word	0x40023800

08001650 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b08a      	sub	sp, #40	; 0x28
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001658:	f107 0314 	add.w	r3, r7, #20
 800165c:	2200      	movs	r2, #0
 800165e:	601a      	str	r2, [r3, #0]
 8001660:	605a      	str	r2, [r3, #4]
 8001662:	609a      	str	r2, [r3, #8]
 8001664:	60da      	str	r2, [r3, #12]
 8001666:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	4a19      	ldr	r2, [pc, #100]	; (80016d4 <HAL_I2C_MspInit+0x84>)
 800166e:	4293      	cmp	r3, r2
 8001670:	d12c      	bne.n	80016cc <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001672:	2300      	movs	r3, #0
 8001674:	613b      	str	r3, [r7, #16]
 8001676:	4b18      	ldr	r3, [pc, #96]	; (80016d8 <HAL_I2C_MspInit+0x88>)
 8001678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800167a:	4a17      	ldr	r2, [pc, #92]	; (80016d8 <HAL_I2C_MspInit+0x88>)
 800167c:	f043 0302 	orr.w	r3, r3, #2
 8001680:	6313      	str	r3, [r2, #48]	; 0x30
 8001682:	4b15      	ldr	r3, [pc, #84]	; (80016d8 <HAL_I2C_MspInit+0x88>)
 8001684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001686:	f003 0302 	and.w	r3, r3, #2
 800168a:	613b      	str	r3, [r7, #16]
 800168c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 800168e:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001692:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001694:	2312      	movs	r3, #18
 8001696:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001698:	2300      	movs	r3, #0
 800169a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800169c:	2303      	movs	r3, #3
 800169e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80016a0:	2304      	movs	r3, #4
 80016a2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016a4:	f107 0314 	add.w	r3, r7, #20
 80016a8:	4619      	mov	r1, r3
 80016aa:	480c      	ldr	r0, [pc, #48]	; (80016dc <HAL_I2C_MspInit+0x8c>)
 80016ac:	f000 fab6 	bl	8001c1c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80016b0:	2300      	movs	r3, #0
 80016b2:	60fb      	str	r3, [r7, #12]
 80016b4:	4b08      	ldr	r3, [pc, #32]	; (80016d8 <HAL_I2C_MspInit+0x88>)
 80016b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016b8:	4a07      	ldr	r2, [pc, #28]	; (80016d8 <HAL_I2C_MspInit+0x88>)
 80016ba:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80016be:	6413      	str	r3, [r2, #64]	; 0x40
 80016c0:	4b05      	ldr	r3, [pc, #20]	; (80016d8 <HAL_I2C_MspInit+0x88>)
 80016c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016c8:	60fb      	str	r3, [r7, #12]
 80016ca:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80016cc:	bf00      	nop
 80016ce:	3728      	adds	r7, #40	; 0x28
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bd80      	pop	{r7, pc}
 80016d4:	40005400 	.word	0x40005400
 80016d8:	40023800 	.word	0x40023800
 80016dc:	40020400 	.word	0x40020400

080016e0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b08a      	sub	sp, #40	; 0x28
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016e8:	f107 0314 	add.w	r3, r7, #20
 80016ec:	2200      	movs	r2, #0
 80016ee:	601a      	str	r2, [r3, #0]
 80016f0:	605a      	str	r2, [r3, #4]
 80016f2:	609a      	str	r2, [r3, #8]
 80016f4:	60da      	str	r2, [r3, #12]
 80016f6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	4a19      	ldr	r2, [pc, #100]	; (8001764 <HAL_UART_MspInit+0x84>)
 80016fe:	4293      	cmp	r3, r2
 8001700:	d12b      	bne.n	800175a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001702:	2300      	movs	r3, #0
 8001704:	613b      	str	r3, [r7, #16]
 8001706:	4b18      	ldr	r3, [pc, #96]	; (8001768 <HAL_UART_MspInit+0x88>)
 8001708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800170a:	4a17      	ldr	r2, [pc, #92]	; (8001768 <HAL_UART_MspInit+0x88>)
 800170c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001710:	6413      	str	r3, [r2, #64]	; 0x40
 8001712:	4b15      	ldr	r3, [pc, #84]	; (8001768 <HAL_UART_MspInit+0x88>)
 8001714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001716:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800171a:	613b      	str	r3, [r7, #16]
 800171c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800171e:	2300      	movs	r3, #0
 8001720:	60fb      	str	r3, [r7, #12]
 8001722:	4b11      	ldr	r3, [pc, #68]	; (8001768 <HAL_UART_MspInit+0x88>)
 8001724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001726:	4a10      	ldr	r2, [pc, #64]	; (8001768 <HAL_UART_MspInit+0x88>)
 8001728:	f043 0301 	orr.w	r3, r3, #1
 800172c:	6313      	str	r3, [r2, #48]	; 0x30
 800172e:	4b0e      	ldr	r3, [pc, #56]	; (8001768 <HAL_UART_MspInit+0x88>)
 8001730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001732:	f003 0301 	and.w	r3, r3, #1
 8001736:	60fb      	str	r3, [r7, #12]
 8001738:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800173a:	230c      	movs	r3, #12
 800173c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800173e:	2302      	movs	r3, #2
 8001740:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001742:	2300      	movs	r3, #0
 8001744:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001746:	2303      	movs	r3, #3
 8001748:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800174a:	2307      	movs	r3, #7
 800174c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800174e:	f107 0314 	add.w	r3, r7, #20
 8001752:	4619      	mov	r1, r3
 8001754:	4805      	ldr	r0, [pc, #20]	; (800176c <HAL_UART_MspInit+0x8c>)
 8001756:	f000 fa61 	bl	8001c1c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800175a:	bf00      	nop
 800175c:	3728      	adds	r7, #40	; 0x28
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}
 8001762:	bf00      	nop
 8001764:	40004400 	.word	0x40004400
 8001768:	40023800 	.word	0x40023800
 800176c:	40020000 	.word	0x40020000

08001770 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b08e      	sub	sp, #56	; 0x38
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001778:	2300      	movs	r3, #0
 800177a:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 800177c:	2300      	movs	r3, #0
 800177e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001780:	2300      	movs	r3, #0
 8001782:	60fb      	str	r3, [r7, #12]
 8001784:	4b33      	ldr	r3, [pc, #204]	; (8001854 <HAL_InitTick+0xe4>)
 8001786:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001788:	4a32      	ldr	r2, [pc, #200]	; (8001854 <HAL_InitTick+0xe4>)
 800178a:	f043 0310 	orr.w	r3, r3, #16
 800178e:	6413      	str	r3, [r2, #64]	; 0x40
 8001790:	4b30      	ldr	r3, [pc, #192]	; (8001854 <HAL_InitTick+0xe4>)
 8001792:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001794:	f003 0310 	and.w	r3, r3, #16
 8001798:	60fb      	str	r3, [r7, #12]
 800179a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800179c:	f107 0210 	add.w	r2, r7, #16
 80017a0:	f107 0314 	add.w	r3, r7, #20
 80017a4:	4611      	mov	r1, r2
 80017a6:	4618      	mov	r0, r3
 80017a8:	f001 fafe 	bl	8002da8 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80017ac:	6a3b      	ldr	r3, [r7, #32]
 80017ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80017b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d103      	bne.n	80017be <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80017b6:	f001 facf 	bl	8002d58 <HAL_RCC_GetPCLK1Freq>
 80017ba:	6378      	str	r0, [r7, #52]	; 0x34
 80017bc:	e004      	b.n	80017c8 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80017be:	f001 facb 	bl	8002d58 <HAL_RCC_GetPCLK1Freq>
 80017c2:	4603      	mov	r3, r0
 80017c4:	005b      	lsls	r3, r3, #1
 80017c6:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80017c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80017ca:	4a23      	ldr	r2, [pc, #140]	; (8001858 <HAL_InitTick+0xe8>)
 80017cc:	fba2 2303 	umull	r2, r3, r2, r3
 80017d0:	0c9b      	lsrs	r3, r3, #18
 80017d2:	3b01      	subs	r3, #1
 80017d4:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80017d6:	4b21      	ldr	r3, [pc, #132]	; (800185c <HAL_InitTick+0xec>)
 80017d8:	4a21      	ldr	r2, [pc, #132]	; (8001860 <HAL_InitTick+0xf0>)
 80017da:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80017dc:	4b1f      	ldr	r3, [pc, #124]	; (800185c <HAL_InitTick+0xec>)
 80017de:	f240 32e7 	movw	r2, #999	; 0x3e7
 80017e2:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80017e4:	4a1d      	ldr	r2, [pc, #116]	; (800185c <HAL_InitTick+0xec>)
 80017e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017e8:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80017ea:	4b1c      	ldr	r3, [pc, #112]	; (800185c <HAL_InitTick+0xec>)
 80017ec:	2200      	movs	r2, #0
 80017ee:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017f0:	4b1a      	ldr	r3, [pc, #104]	; (800185c <HAL_InitTick+0xec>)
 80017f2:	2200      	movs	r2, #0
 80017f4:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017f6:	4b19      	ldr	r3, [pc, #100]	; (800185c <HAL_InitTick+0xec>)
 80017f8:	2200      	movs	r2, #0
 80017fa:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80017fc:	4817      	ldr	r0, [pc, #92]	; (800185c <HAL_InitTick+0xec>)
 80017fe:	f001 ffd3 	bl	80037a8 <HAL_TIM_Base_Init>
 8001802:	4603      	mov	r3, r0
 8001804:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001808:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800180c:	2b00      	cmp	r3, #0
 800180e:	d11b      	bne.n	8001848 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001810:	4812      	ldr	r0, [pc, #72]	; (800185c <HAL_InitTick+0xec>)
 8001812:	f002 f823 	bl	800385c <HAL_TIM_Base_Start_IT>
 8001816:	4603      	mov	r3, r0
 8001818:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 800181c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001820:	2b00      	cmp	r3, #0
 8001822:	d111      	bne.n	8001848 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001824:	2036      	movs	r0, #54	; 0x36
 8001826:	f000 f9eb 	bl	8001c00 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	2b0f      	cmp	r3, #15
 800182e:	d808      	bhi.n	8001842 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001830:	2200      	movs	r2, #0
 8001832:	6879      	ldr	r1, [r7, #4]
 8001834:	2036      	movs	r0, #54	; 0x36
 8001836:	f000 f9c7 	bl	8001bc8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800183a:	4a0a      	ldr	r2, [pc, #40]	; (8001864 <HAL_InitTick+0xf4>)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	6013      	str	r3, [r2, #0]
 8001840:	e002      	b.n	8001848 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8001842:	2301      	movs	r3, #1
 8001844:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001848:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 800184c:	4618      	mov	r0, r3
 800184e:	3738      	adds	r7, #56	; 0x38
 8001850:	46bd      	mov	sp, r7
 8001852:	bd80      	pop	{r7, pc}
 8001854:	40023800 	.word	0x40023800
 8001858:	431bde83 	.word	0x431bde83
 800185c:	2000055c 	.word	0x2000055c
 8001860:	40001000 	.word	0x40001000
 8001864:	2000000c 	.word	0x2000000c

08001868 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001868:	b480      	push	{r7}
 800186a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800186c:	e7fe      	b.n	800186c <NMI_Handler+0x4>

0800186e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800186e:	b480      	push	{r7}
 8001870:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001872:	e7fe      	b.n	8001872 <HardFault_Handler+0x4>

08001874 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001874:	b480      	push	{r7}
 8001876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001878:	e7fe      	b.n	8001878 <MemManage_Handler+0x4>

0800187a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800187a:	b480      	push	{r7}
 800187c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800187e:	e7fe      	b.n	800187e <BusFault_Handler+0x4>

08001880 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001880:	b480      	push	{r7}
 8001882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001884:	e7fe      	b.n	8001884 <UsageFault_Handler+0x4>

08001886 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001886:	b480      	push	{r7}
 8001888:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800188a:	bf00      	nop
 800188c:	46bd      	mov	sp, r7
 800188e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001892:	4770      	bx	lr

08001894 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001898:	4802      	ldr	r0, [pc, #8]	; (80018a4 <TIM6_DAC_IRQHandler+0x10>)
 800189a:	f002 f84f 	bl	800393c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800189e:	bf00      	nop
 80018a0:	bd80      	pop	{r7, pc}
 80018a2:	bf00      	nop
 80018a4:	2000055c 	.word	0x2000055c

080018a8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b086      	sub	sp, #24
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80018b0:	4a14      	ldr	r2, [pc, #80]	; (8001904 <_sbrk+0x5c>)
 80018b2:	4b15      	ldr	r3, [pc, #84]	; (8001908 <_sbrk+0x60>)
 80018b4:	1ad3      	subs	r3, r2, r3
 80018b6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80018b8:	697b      	ldr	r3, [r7, #20]
 80018ba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80018bc:	4b13      	ldr	r3, [pc, #76]	; (800190c <_sbrk+0x64>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d102      	bne.n	80018ca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80018c4:	4b11      	ldr	r3, [pc, #68]	; (800190c <_sbrk+0x64>)
 80018c6:	4a12      	ldr	r2, [pc, #72]	; (8001910 <_sbrk+0x68>)
 80018c8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80018ca:	4b10      	ldr	r3, [pc, #64]	; (800190c <_sbrk+0x64>)
 80018cc:	681a      	ldr	r2, [r3, #0]
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	4413      	add	r3, r2
 80018d2:	693a      	ldr	r2, [r7, #16]
 80018d4:	429a      	cmp	r2, r3
 80018d6:	d207      	bcs.n	80018e8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80018d8:	f005 fd02 	bl	80072e0 <__errno>
 80018dc:	4603      	mov	r3, r0
 80018de:	220c      	movs	r2, #12
 80018e0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80018e2:	f04f 33ff 	mov.w	r3, #4294967295
 80018e6:	e009      	b.n	80018fc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80018e8:	4b08      	ldr	r3, [pc, #32]	; (800190c <_sbrk+0x64>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80018ee:	4b07      	ldr	r3, [pc, #28]	; (800190c <_sbrk+0x64>)
 80018f0:	681a      	ldr	r2, [r3, #0]
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	4413      	add	r3, r2
 80018f6:	4a05      	ldr	r2, [pc, #20]	; (800190c <_sbrk+0x64>)
 80018f8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80018fa:	68fb      	ldr	r3, [r7, #12]
}
 80018fc:	4618      	mov	r0, r3
 80018fe:	3718      	adds	r7, #24
 8001900:	46bd      	mov	sp, r7
 8001902:	bd80      	pop	{r7, pc}
 8001904:	20020000 	.word	0x20020000
 8001908:	00000400 	.word	0x00000400
 800190c:	200005a4 	.word	0x200005a4
 8001910:	200050e0 	.word	0x200050e0

08001914 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001914:	b480      	push	{r7}
 8001916:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001918:	4b06      	ldr	r3, [pc, #24]	; (8001934 <SystemInit+0x20>)
 800191a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800191e:	4a05      	ldr	r2, [pc, #20]	; (8001934 <SystemInit+0x20>)
 8001920:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001924:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001928:	bf00      	nop
 800192a:	46bd      	mov	sp, r7
 800192c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001930:	4770      	bx	lr
 8001932:	bf00      	nop
 8001934:	e000ed00 	.word	0xe000ed00

08001938 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001938:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001970 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800193c:	f7ff ffea 	bl	8001914 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001940:	480c      	ldr	r0, [pc, #48]	; (8001974 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001942:	490d      	ldr	r1, [pc, #52]	; (8001978 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001944:	4a0d      	ldr	r2, [pc, #52]	; (800197c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001946:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001948:	e002      	b.n	8001950 <LoopCopyDataInit>

0800194a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800194a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800194c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800194e:	3304      	adds	r3, #4

08001950 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001950:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001952:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001954:	d3f9      	bcc.n	800194a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001956:	4a0a      	ldr	r2, [pc, #40]	; (8001980 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001958:	4c0a      	ldr	r4, [pc, #40]	; (8001984 <LoopFillZerobss+0x22>)
  movs r3, #0
 800195a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800195c:	e001      	b.n	8001962 <LoopFillZerobss>

0800195e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800195e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001960:	3204      	adds	r2, #4

08001962 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001962:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001964:	d3fb      	bcc.n	800195e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001966:	f005 fcc1 	bl	80072ec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800196a:	f7fe ffbb 	bl	80008e4 <main>
  bx  lr    
 800196e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001970:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001974:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001978:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 800197c:	08008340 	.word	0x08008340
  ldr r2, =_sbss
 8001980:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001984:	200050dc 	.word	0x200050dc

08001988 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001988:	e7fe      	b.n	8001988 <ADC_IRQHandler>
	...

0800198c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001990:	4b0e      	ldr	r3, [pc, #56]	; (80019cc <HAL_Init+0x40>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	4a0d      	ldr	r2, [pc, #52]	; (80019cc <HAL_Init+0x40>)
 8001996:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800199a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800199c:	4b0b      	ldr	r3, [pc, #44]	; (80019cc <HAL_Init+0x40>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	4a0a      	ldr	r2, [pc, #40]	; (80019cc <HAL_Init+0x40>)
 80019a2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80019a6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80019a8:	4b08      	ldr	r3, [pc, #32]	; (80019cc <HAL_Init+0x40>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	4a07      	ldr	r2, [pc, #28]	; (80019cc <HAL_Init+0x40>)
 80019ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019b2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019b4:	2003      	movs	r0, #3
 80019b6:	f000 f8fc 	bl	8001bb2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80019ba:	200f      	movs	r0, #15
 80019bc:	f7ff fed8 	bl	8001770 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80019c0:	f7ff fe1a 	bl	80015f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80019c4:	2300      	movs	r3, #0
}
 80019c6:	4618      	mov	r0, r3
 80019c8:	bd80      	pop	{r7, pc}
 80019ca:	bf00      	nop
 80019cc:	40023c00 	.word	0x40023c00

080019d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019d0:	b480      	push	{r7}
 80019d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80019d4:	4b06      	ldr	r3, [pc, #24]	; (80019f0 <HAL_IncTick+0x20>)
 80019d6:	781b      	ldrb	r3, [r3, #0]
 80019d8:	461a      	mov	r2, r3
 80019da:	4b06      	ldr	r3, [pc, #24]	; (80019f4 <HAL_IncTick+0x24>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	4413      	add	r3, r2
 80019e0:	4a04      	ldr	r2, [pc, #16]	; (80019f4 <HAL_IncTick+0x24>)
 80019e2:	6013      	str	r3, [r2, #0]
}
 80019e4:	bf00      	nop
 80019e6:	46bd      	mov	sp, r7
 80019e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ec:	4770      	bx	lr
 80019ee:	bf00      	nop
 80019f0:	20000010 	.word	0x20000010
 80019f4:	200005a8 	.word	0x200005a8

080019f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019f8:	b480      	push	{r7}
 80019fa:	af00      	add	r7, sp, #0
  return uwTick;
 80019fc:	4b03      	ldr	r3, [pc, #12]	; (8001a0c <HAL_GetTick+0x14>)
 80019fe:	681b      	ldr	r3, [r3, #0]
}
 8001a00:	4618      	mov	r0, r3
 8001a02:	46bd      	mov	sp, r7
 8001a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a08:	4770      	bx	lr
 8001a0a:	bf00      	nop
 8001a0c:	200005a8 	.word	0x200005a8

08001a10 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b084      	sub	sp, #16
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a18:	f7ff ffee 	bl	80019f8 <HAL_GetTick>
 8001a1c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a28:	d005      	beq.n	8001a36 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a2a:	4b0a      	ldr	r3, [pc, #40]	; (8001a54 <HAL_Delay+0x44>)
 8001a2c:	781b      	ldrb	r3, [r3, #0]
 8001a2e:	461a      	mov	r2, r3
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	4413      	add	r3, r2
 8001a34:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001a36:	bf00      	nop
 8001a38:	f7ff ffde 	bl	80019f8 <HAL_GetTick>
 8001a3c:	4602      	mov	r2, r0
 8001a3e:	68bb      	ldr	r3, [r7, #8]
 8001a40:	1ad3      	subs	r3, r2, r3
 8001a42:	68fa      	ldr	r2, [r7, #12]
 8001a44:	429a      	cmp	r2, r3
 8001a46:	d8f7      	bhi.n	8001a38 <HAL_Delay+0x28>
  {
  }
}
 8001a48:	bf00      	nop
 8001a4a:	bf00      	nop
 8001a4c:	3710      	adds	r7, #16
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}
 8001a52:	bf00      	nop
 8001a54:	20000010 	.word	0x20000010

08001a58 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	b085      	sub	sp, #20
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	f003 0307 	and.w	r3, r3, #7
 8001a66:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a68:	4b0c      	ldr	r3, [pc, #48]	; (8001a9c <__NVIC_SetPriorityGrouping+0x44>)
 8001a6a:	68db      	ldr	r3, [r3, #12]
 8001a6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a6e:	68ba      	ldr	r2, [r7, #8]
 8001a70:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a74:	4013      	ands	r3, r2
 8001a76:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a7c:	68bb      	ldr	r3, [r7, #8]
 8001a7e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a80:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a88:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a8a:	4a04      	ldr	r2, [pc, #16]	; (8001a9c <__NVIC_SetPriorityGrouping+0x44>)
 8001a8c:	68bb      	ldr	r3, [r7, #8]
 8001a8e:	60d3      	str	r3, [r2, #12]
}
 8001a90:	bf00      	nop
 8001a92:	3714      	adds	r7, #20
 8001a94:	46bd      	mov	sp, r7
 8001a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9a:	4770      	bx	lr
 8001a9c:	e000ed00 	.word	0xe000ed00

08001aa0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001aa4:	4b04      	ldr	r3, [pc, #16]	; (8001ab8 <__NVIC_GetPriorityGrouping+0x18>)
 8001aa6:	68db      	ldr	r3, [r3, #12]
 8001aa8:	0a1b      	lsrs	r3, r3, #8
 8001aaa:	f003 0307 	and.w	r3, r3, #7
}
 8001aae:	4618      	mov	r0, r3
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab6:	4770      	bx	lr
 8001ab8:	e000ed00 	.word	0xe000ed00

08001abc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001abc:	b480      	push	{r7}
 8001abe:	b083      	sub	sp, #12
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ac6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	db0b      	blt.n	8001ae6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ace:	79fb      	ldrb	r3, [r7, #7]
 8001ad0:	f003 021f 	and.w	r2, r3, #31
 8001ad4:	4907      	ldr	r1, [pc, #28]	; (8001af4 <__NVIC_EnableIRQ+0x38>)
 8001ad6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ada:	095b      	lsrs	r3, r3, #5
 8001adc:	2001      	movs	r0, #1
 8001ade:	fa00 f202 	lsl.w	r2, r0, r2
 8001ae2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001ae6:	bf00      	nop
 8001ae8:	370c      	adds	r7, #12
 8001aea:	46bd      	mov	sp, r7
 8001aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af0:	4770      	bx	lr
 8001af2:	bf00      	nop
 8001af4:	e000e100 	.word	0xe000e100

08001af8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001af8:	b480      	push	{r7}
 8001afa:	b083      	sub	sp, #12
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	4603      	mov	r3, r0
 8001b00:	6039      	str	r1, [r7, #0]
 8001b02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	db0a      	blt.n	8001b22 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	b2da      	uxtb	r2, r3
 8001b10:	490c      	ldr	r1, [pc, #48]	; (8001b44 <__NVIC_SetPriority+0x4c>)
 8001b12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b16:	0112      	lsls	r2, r2, #4
 8001b18:	b2d2      	uxtb	r2, r2
 8001b1a:	440b      	add	r3, r1
 8001b1c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b20:	e00a      	b.n	8001b38 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	b2da      	uxtb	r2, r3
 8001b26:	4908      	ldr	r1, [pc, #32]	; (8001b48 <__NVIC_SetPriority+0x50>)
 8001b28:	79fb      	ldrb	r3, [r7, #7]
 8001b2a:	f003 030f 	and.w	r3, r3, #15
 8001b2e:	3b04      	subs	r3, #4
 8001b30:	0112      	lsls	r2, r2, #4
 8001b32:	b2d2      	uxtb	r2, r2
 8001b34:	440b      	add	r3, r1
 8001b36:	761a      	strb	r2, [r3, #24]
}
 8001b38:	bf00      	nop
 8001b3a:	370c      	adds	r7, #12
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b42:	4770      	bx	lr
 8001b44:	e000e100 	.word	0xe000e100
 8001b48:	e000ed00 	.word	0xe000ed00

08001b4c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	b089      	sub	sp, #36	; 0x24
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	60f8      	str	r0, [r7, #12]
 8001b54:	60b9      	str	r1, [r7, #8]
 8001b56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	f003 0307 	and.w	r3, r3, #7
 8001b5e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b60:	69fb      	ldr	r3, [r7, #28]
 8001b62:	f1c3 0307 	rsb	r3, r3, #7
 8001b66:	2b04      	cmp	r3, #4
 8001b68:	bf28      	it	cs
 8001b6a:	2304      	movcs	r3, #4
 8001b6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b6e:	69fb      	ldr	r3, [r7, #28]
 8001b70:	3304      	adds	r3, #4
 8001b72:	2b06      	cmp	r3, #6
 8001b74:	d902      	bls.n	8001b7c <NVIC_EncodePriority+0x30>
 8001b76:	69fb      	ldr	r3, [r7, #28]
 8001b78:	3b03      	subs	r3, #3
 8001b7a:	e000      	b.n	8001b7e <NVIC_EncodePriority+0x32>
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b80:	f04f 32ff 	mov.w	r2, #4294967295
 8001b84:	69bb      	ldr	r3, [r7, #24]
 8001b86:	fa02 f303 	lsl.w	r3, r2, r3
 8001b8a:	43da      	mvns	r2, r3
 8001b8c:	68bb      	ldr	r3, [r7, #8]
 8001b8e:	401a      	ands	r2, r3
 8001b90:	697b      	ldr	r3, [r7, #20]
 8001b92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b94:	f04f 31ff 	mov.w	r1, #4294967295
 8001b98:	697b      	ldr	r3, [r7, #20]
 8001b9a:	fa01 f303 	lsl.w	r3, r1, r3
 8001b9e:	43d9      	mvns	r1, r3
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ba4:	4313      	orrs	r3, r2
         );
}
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	3724      	adds	r7, #36	; 0x24
 8001baa:	46bd      	mov	sp, r7
 8001bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb0:	4770      	bx	lr

08001bb2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bb2:	b580      	push	{r7, lr}
 8001bb4:	b082      	sub	sp, #8
 8001bb6:	af00      	add	r7, sp, #0
 8001bb8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001bba:	6878      	ldr	r0, [r7, #4]
 8001bbc:	f7ff ff4c 	bl	8001a58 <__NVIC_SetPriorityGrouping>
}
 8001bc0:	bf00      	nop
 8001bc2:	3708      	adds	r7, #8
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	bd80      	pop	{r7, pc}

08001bc8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b086      	sub	sp, #24
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	4603      	mov	r3, r0
 8001bd0:	60b9      	str	r1, [r7, #8]
 8001bd2:	607a      	str	r2, [r7, #4]
 8001bd4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001bda:	f7ff ff61 	bl	8001aa0 <__NVIC_GetPriorityGrouping>
 8001bde:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001be0:	687a      	ldr	r2, [r7, #4]
 8001be2:	68b9      	ldr	r1, [r7, #8]
 8001be4:	6978      	ldr	r0, [r7, #20]
 8001be6:	f7ff ffb1 	bl	8001b4c <NVIC_EncodePriority>
 8001bea:	4602      	mov	r2, r0
 8001bec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001bf0:	4611      	mov	r1, r2
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	f7ff ff80 	bl	8001af8 <__NVIC_SetPriority>
}
 8001bf8:	bf00      	nop
 8001bfa:	3718      	adds	r7, #24
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	bd80      	pop	{r7, pc}

08001c00 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b082      	sub	sp, #8
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	4603      	mov	r3, r0
 8001c08:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c0e:	4618      	mov	r0, r3
 8001c10:	f7ff ff54 	bl	8001abc <__NVIC_EnableIRQ>
}
 8001c14:	bf00      	nop
 8001c16:	3708      	adds	r7, #8
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	bd80      	pop	{r7, pc}

08001c1c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	b089      	sub	sp, #36	; 0x24
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
 8001c24:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001c26:	2300      	movs	r3, #0
 8001c28:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c32:	2300      	movs	r3, #0
 8001c34:	61fb      	str	r3, [r7, #28]
 8001c36:	e165      	b.n	8001f04 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001c38:	2201      	movs	r2, #1
 8001c3a:	69fb      	ldr	r3, [r7, #28]
 8001c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c40:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	697a      	ldr	r2, [r7, #20]
 8001c48:	4013      	ands	r3, r2
 8001c4a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001c4c:	693a      	ldr	r2, [r7, #16]
 8001c4e:	697b      	ldr	r3, [r7, #20]
 8001c50:	429a      	cmp	r2, r3
 8001c52:	f040 8154 	bne.w	8001efe <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	685b      	ldr	r3, [r3, #4]
 8001c5a:	f003 0303 	and.w	r3, r3, #3
 8001c5e:	2b01      	cmp	r3, #1
 8001c60:	d005      	beq.n	8001c6e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	685b      	ldr	r3, [r3, #4]
 8001c66:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c6a:	2b02      	cmp	r3, #2
 8001c6c:	d130      	bne.n	8001cd0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	689b      	ldr	r3, [r3, #8]
 8001c72:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001c74:	69fb      	ldr	r3, [r7, #28]
 8001c76:	005b      	lsls	r3, r3, #1
 8001c78:	2203      	movs	r2, #3
 8001c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c7e:	43db      	mvns	r3, r3
 8001c80:	69ba      	ldr	r2, [r7, #24]
 8001c82:	4013      	ands	r3, r2
 8001c84:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	68da      	ldr	r2, [r3, #12]
 8001c8a:	69fb      	ldr	r3, [r7, #28]
 8001c8c:	005b      	lsls	r3, r3, #1
 8001c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c92:	69ba      	ldr	r2, [r7, #24]
 8001c94:	4313      	orrs	r3, r2
 8001c96:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	69ba      	ldr	r2, [r7, #24]
 8001c9c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	685b      	ldr	r3, [r3, #4]
 8001ca2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ca4:	2201      	movs	r2, #1
 8001ca6:	69fb      	ldr	r3, [r7, #28]
 8001ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cac:	43db      	mvns	r3, r3
 8001cae:	69ba      	ldr	r2, [r7, #24]
 8001cb0:	4013      	ands	r3, r2
 8001cb2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	685b      	ldr	r3, [r3, #4]
 8001cb8:	091b      	lsrs	r3, r3, #4
 8001cba:	f003 0201 	and.w	r2, r3, #1
 8001cbe:	69fb      	ldr	r3, [r7, #28]
 8001cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc4:	69ba      	ldr	r2, [r7, #24]
 8001cc6:	4313      	orrs	r3, r2
 8001cc8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	69ba      	ldr	r2, [r7, #24]
 8001cce:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	685b      	ldr	r3, [r3, #4]
 8001cd4:	f003 0303 	and.w	r3, r3, #3
 8001cd8:	2b03      	cmp	r3, #3
 8001cda:	d017      	beq.n	8001d0c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	68db      	ldr	r3, [r3, #12]
 8001ce0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001ce2:	69fb      	ldr	r3, [r7, #28]
 8001ce4:	005b      	lsls	r3, r3, #1
 8001ce6:	2203      	movs	r2, #3
 8001ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cec:	43db      	mvns	r3, r3
 8001cee:	69ba      	ldr	r2, [r7, #24]
 8001cf0:	4013      	ands	r3, r2
 8001cf2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	689a      	ldr	r2, [r3, #8]
 8001cf8:	69fb      	ldr	r3, [r7, #28]
 8001cfa:	005b      	lsls	r3, r3, #1
 8001cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8001d00:	69ba      	ldr	r2, [r7, #24]
 8001d02:	4313      	orrs	r3, r2
 8001d04:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	69ba      	ldr	r2, [r7, #24]
 8001d0a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	f003 0303 	and.w	r3, r3, #3
 8001d14:	2b02      	cmp	r3, #2
 8001d16:	d123      	bne.n	8001d60 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001d18:	69fb      	ldr	r3, [r7, #28]
 8001d1a:	08da      	lsrs	r2, r3, #3
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	3208      	adds	r2, #8
 8001d20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d24:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001d26:	69fb      	ldr	r3, [r7, #28]
 8001d28:	f003 0307 	and.w	r3, r3, #7
 8001d2c:	009b      	lsls	r3, r3, #2
 8001d2e:	220f      	movs	r2, #15
 8001d30:	fa02 f303 	lsl.w	r3, r2, r3
 8001d34:	43db      	mvns	r3, r3
 8001d36:	69ba      	ldr	r2, [r7, #24]
 8001d38:	4013      	ands	r3, r2
 8001d3a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	691a      	ldr	r2, [r3, #16]
 8001d40:	69fb      	ldr	r3, [r7, #28]
 8001d42:	f003 0307 	and.w	r3, r3, #7
 8001d46:	009b      	lsls	r3, r3, #2
 8001d48:	fa02 f303 	lsl.w	r3, r2, r3
 8001d4c:	69ba      	ldr	r2, [r7, #24]
 8001d4e:	4313      	orrs	r3, r2
 8001d50:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001d52:	69fb      	ldr	r3, [r7, #28]
 8001d54:	08da      	lsrs	r2, r3, #3
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	3208      	adds	r2, #8
 8001d5a:	69b9      	ldr	r1, [r7, #24]
 8001d5c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001d66:	69fb      	ldr	r3, [r7, #28]
 8001d68:	005b      	lsls	r3, r3, #1
 8001d6a:	2203      	movs	r2, #3
 8001d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d70:	43db      	mvns	r3, r3
 8001d72:	69ba      	ldr	r2, [r7, #24]
 8001d74:	4013      	ands	r3, r2
 8001d76:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	685b      	ldr	r3, [r3, #4]
 8001d7c:	f003 0203 	and.w	r2, r3, #3
 8001d80:	69fb      	ldr	r3, [r7, #28]
 8001d82:	005b      	lsls	r3, r3, #1
 8001d84:	fa02 f303 	lsl.w	r3, r2, r3
 8001d88:	69ba      	ldr	r2, [r7, #24]
 8001d8a:	4313      	orrs	r3, r2
 8001d8c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	69ba      	ldr	r2, [r7, #24]
 8001d92:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	685b      	ldr	r3, [r3, #4]
 8001d98:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	f000 80ae 	beq.w	8001efe <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001da2:	2300      	movs	r3, #0
 8001da4:	60fb      	str	r3, [r7, #12]
 8001da6:	4b5d      	ldr	r3, [pc, #372]	; (8001f1c <HAL_GPIO_Init+0x300>)
 8001da8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001daa:	4a5c      	ldr	r2, [pc, #368]	; (8001f1c <HAL_GPIO_Init+0x300>)
 8001dac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001db0:	6453      	str	r3, [r2, #68]	; 0x44
 8001db2:	4b5a      	ldr	r3, [pc, #360]	; (8001f1c <HAL_GPIO_Init+0x300>)
 8001db4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001db6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001dba:	60fb      	str	r3, [r7, #12]
 8001dbc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001dbe:	4a58      	ldr	r2, [pc, #352]	; (8001f20 <HAL_GPIO_Init+0x304>)
 8001dc0:	69fb      	ldr	r3, [r7, #28]
 8001dc2:	089b      	lsrs	r3, r3, #2
 8001dc4:	3302      	adds	r3, #2
 8001dc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001dcc:	69fb      	ldr	r3, [r7, #28]
 8001dce:	f003 0303 	and.w	r3, r3, #3
 8001dd2:	009b      	lsls	r3, r3, #2
 8001dd4:	220f      	movs	r2, #15
 8001dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dda:	43db      	mvns	r3, r3
 8001ddc:	69ba      	ldr	r2, [r7, #24]
 8001dde:	4013      	ands	r3, r2
 8001de0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	4a4f      	ldr	r2, [pc, #316]	; (8001f24 <HAL_GPIO_Init+0x308>)
 8001de6:	4293      	cmp	r3, r2
 8001de8:	d025      	beq.n	8001e36 <HAL_GPIO_Init+0x21a>
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	4a4e      	ldr	r2, [pc, #312]	; (8001f28 <HAL_GPIO_Init+0x30c>)
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d01f      	beq.n	8001e32 <HAL_GPIO_Init+0x216>
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	4a4d      	ldr	r2, [pc, #308]	; (8001f2c <HAL_GPIO_Init+0x310>)
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d019      	beq.n	8001e2e <HAL_GPIO_Init+0x212>
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	4a4c      	ldr	r2, [pc, #304]	; (8001f30 <HAL_GPIO_Init+0x314>)
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d013      	beq.n	8001e2a <HAL_GPIO_Init+0x20e>
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	4a4b      	ldr	r2, [pc, #300]	; (8001f34 <HAL_GPIO_Init+0x318>)
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d00d      	beq.n	8001e26 <HAL_GPIO_Init+0x20a>
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	4a4a      	ldr	r2, [pc, #296]	; (8001f38 <HAL_GPIO_Init+0x31c>)
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d007      	beq.n	8001e22 <HAL_GPIO_Init+0x206>
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	4a49      	ldr	r2, [pc, #292]	; (8001f3c <HAL_GPIO_Init+0x320>)
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d101      	bne.n	8001e1e <HAL_GPIO_Init+0x202>
 8001e1a:	2306      	movs	r3, #6
 8001e1c:	e00c      	b.n	8001e38 <HAL_GPIO_Init+0x21c>
 8001e1e:	2307      	movs	r3, #7
 8001e20:	e00a      	b.n	8001e38 <HAL_GPIO_Init+0x21c>
 8001e22:	2305      	movs	r3, #5
 8001e24:	e008      	b.n	8001e38 <HAL_GPIO_Init+0x21c>
 8001e26:	2304      	movs	r3, #4
 8001e28:	e006      	b.n	8001e38 <HAL_GPIO_Init+0x21c>
 8001e2a:	2303      	movs	r3, #3
 8001e2c:	e004      	b.n	8001e38 <HAL_GPIO_Init+0x21c>
 8001e2e:	2302      	movs	r3, #2
 8001e30:	e002      	b.n	8001e38 <HAL_GPIO_Init+0x21c>
 8001e32:	2301      	movs	r3, #1
 8001e34:	e000      	b.n	8001e38 <HAL_GPIO_Init+0x21c>
 8001e36:	2300      	movs	r3, #0
 8001e38:	69fa      	ldr	r2, [r7, #28]
 8001e3a:	f002 0203 	and.w	r2, r2, #3
 8001e3e:	0092      	lsls	r2, r2, #2
 8001e40:	4093      	lsls	r3, r2
 8001e42:	69ba      	ldr	r2, [r7, #24]
 8001e44:	4313      	orrs	r3, r2
 8001e46:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001e48:	4935      	ldr	r1, [pc, #212]	; (8001f20 <HAL_GPIO_Init+0x304>)
 8001e4a:	69fb      	ldr	r3, [r7, #28]
 8001e4c:	089b      	lsrs	r3, r3, #2
 8001e4e:	3302      	adds	r3, #2
 8001e50:	69ba      	ldr	r2, [r7, #24]
 8001e52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001e56:	4b3a      	ldr	r3, [pc, #232]	; (8001f40 <HAL_GPIO_Init+0x324>)
 8001e58:	689b      	ldr	r3, [r3, #8]
 8001e5a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e5c:	693b      	ldr	r3, [r7, #16]
 8001e5e:	43db      	mvns	r3, r3
 8001e60:	69ba      	ldr	r2, [r7, #24]
 8001e62:	4013      	ands	r3, r2
 8001e64:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	685b      	ldr	r3, [r3, #4]
 8001e6a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d003      	beq.n	8001e7a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001e72:	69ba      	ldr	r2, [r7, #24]
 8001e74:	693b      	ldr	r3, [r7, #16]
 8001e76:	4313      	orrs	r3, r2
 8001e78:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001e7a:	4a31      	ldr	r2, [pc, #196]	; (8001f40 <HAL_GPIO_Init+0x324>)
 8001e7c:	69bb      	ldr	r3, [r7, #24]
 8001e7e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001e80:	4b2f      	ldr	r3, [pc, #188]	; (8001f40 <HAL_GPIO_Init+0x324>)
 8001e82:	68db      	ldr	r3, [r3, #12]
 8001e84:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e86:	693b      	ldr	r3, [r7, #16]
 8001e88:	43db      	mvns	r3, r3
 8001e8a:	69ba      	ldr	r2, [r7, #24]
 8001e8c:	4013      	ands	r3, r2
 8001e8e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	685b      	ldr	r3, [r3, #4]
 8001e94:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d003      	beq.n	8001ea4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001e9c:	69ba      	ldr	r2, [r7, #24]
 8001e9e:	693b      	ldr	r3, [r7, #16]
 8001ea0:	4313      	orrs	r3, r2
 8001ea2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001ea4:	4a26      	ldr	r2, [pc, #152]	; (8001f40 <HAL_GPIO_Init+0x324>)
 8001ea6:	69bb      	ldr	r3, [r7, #24]
 8001ea8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001eaa:	4b25      	ldr	r3, [pc, #148]	; (8001f40 <HAL_GPIO_Init+0x324>)
 8001eac:	685b      	ldr	r3, [r3, #4]
 8001eae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001eb0:	693b      	ldr	r3, [r7, #16]
 8001eb2:	43db      	mvns	r3, r3
 8001eb4:	69ba      	ldr	r2, [r7, #24]
 8001eb6:	4013      	ands	r3, r2
 8001eb8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	685b      	ldr	r3, [r3, #4]
 8001ebe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d003      	beq.n	8001ece <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001ec6:	69ba      	ldr	r2, [r7, #24]
 8001ec8:	693b      	ldr	r3, [r7, #16]
 8001eca:	4313      	orrs	r3, r2
 8001ecc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001ece:	4a1c      	ldr	r2, [pc, #112]	; (8001f40 <HAL_GPIO_Init+0x324>)
 8001ed0:	69bb      	ldr	r3, [r7, #24]
 8001ed2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001ed4:	4b1a      	ldr	r3, [pc, #104]	; (8001f40 <HAL_GPIO_Init+0x324>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001eda:	693b      	ldr	r3, [r7, #16]
 8001edc:	43db      	mvns	r3, r3
 8001ede:	69ba      	ldr	r2, [r7, #24]
 8001ee0:	4013      	ands	r3, r2
 8001ee2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	685b      	ldr	r3, [r3, #4]
 8001ee8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d003      	beq.n	8001ef8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001ef0:	69ba      	ldr	r2, [r7, #24]
 8001ef2:	693b      	ldr	r3, [r7, #16]
 8001ef4:	4313      	orrs	r3, r2
 8001ef6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001ef8:	4a11      	ldr	r2, [pc, #68]	; (8001f40 <HAL_GPIO_Init+0x324>)
 8001efa:	69bb      	ldr	r3, [r7, #24]
 8001efc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001efe:	69fb      	ldr	r3, [r7, #28]
 8001f00:	3301      	adds	r3, #1
 8001f02:	61fb      	str	r3, [r7, #28]
 8001f04:	69fb      	ldr	r3, [r7, #28]
 8001f06:	2b0f      	cmp	r3, #15
 8001f08:	f67f ae96 	bls.w	8001c38 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001f0c:	bf00      	nop
 8001f0e:	bf00      	nop
 8001f10:	3724      	adds	r7, #36	; 0x24
 8001f12:	46bd      	mov	sp, r7
 8001f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f18:	4770      	bx	lr
 8001f1a:	bf00      	nop
 8001f1c:	40023800 	.word	0x40023800
 8001f20:	40013800 	.word	0x40013800
 8001f24:	40020000 	.word	0x40020000
 8001f28:	40020400 	.word	0x40020400
 8001f2c:	40020800 	.word	0x40020800
 8001f30:	40020c00 	.word	0x40020c00
 8001f34:	40021000 	.word	0x40021000
 8001f38:	40021400 	.word	0x40021400
 8001f3c:	40021800 	.word	0x40021800
 8001f40:	40013c00 	.word	0x40013c00

08001f44 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001f44:	b480      	push	{r7}
 8001f46:	b085      	sub	sp, #20
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
 8001f4c:	460b      	mov	r3, r1
 8001f4e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	691a      	ldr	r2, [r3, #16]
 8001f54:	887b      	ldrh	r3, [r7, #2]
 8001f56:	4013      	ands	r3, r2
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d002      	beq.n	8001f62 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001f5c:	2301      	movs	r3, #1
 8001f5e:	73fb      	strb	r3, [r7, #15]
 8001f60:	e001      	b.n	8001f66 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001f62:	2300      	movs	r3, #0
 8001f64:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001f66:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f68:	4618      	mov	r0, r3
 8001f6a:	3714      	adds	r7, #20
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f72:	4770      	bx	lr

08001f74 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f74:	b480      	push	{r7}
 8001f76:	b083      	sub	sp, #12
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
 8001f7c:	460b      	mov	r3, r1
 8001f7e:	807b      	strh	r3, [r7, #2]
 8001f80:	4613      	mov	r3, r2
 8001f82:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f84:	787b      	ldrb	r3, [r7, #1]
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d003      	beq.n	8001f92 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f8a:	887a      	ldrh	r2, [r7, #2]
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001f90:	e003      	b.n	8001f9a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001f92:	887b      	ldrh	r3, [r7, #2]
 8001f94:	041a      	lsls	r2, r3, #16
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	619a      	str	r2, [r3, #24]
}
 8001f9a:	bf00      	nop
 8001f9c:	370c      	adds	r7, #12
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa4:	4770      	bx	lr

08001fa6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001fa6:	b480      	push	{r7}
 8001fa8:	b085      	sub	sp, #20
 8001faa:	af00      	add	r7, sp, #0
 8001fac:	6078      	str	r0, [r7, #4]
 8001fae:	460b      	mov	r3, r1
 8001fb0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	695b      	ldr	r3, [r3, #20]
 8001fb6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001fb8:	887a      	ldrh	r2, [r7, #2]
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	4013      	ands	r3, r2
 8001fbe:	041a      	lsls	r2, r3, #16
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	43d9      	mvns	r1, r3
 8001fc4:	887b      	ldrh	r3, [r7, #2]
 8001fc6:	400b      	ands	r3, r1
 8001fc8:	431a      	orrs	r2, r3
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	619a      	str	r2, [r3, #24]
}
 8001fce:	bf00      	nop
 8001fd0:	3714      	adds	r7, #20
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd8:	4770      	bx	lr
	...

08001fdc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b084      	sub	sp, #16
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d101      	bne.n	8001fee <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001fea:	2301      	movs	r3, #1
 8001fec:	e12b      	b.n	8002246 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ff4:	b2db      	uxtb	r3, r3
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d106      	bne.n	8002008 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002002:	6878      	ldr	r0, [r7, #4]
 8002004:	f7ff fb24 	bl	8001650 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	2224      	movs	r2, #36	; 0x24
 800200c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	681a      	ldr	r2, [r3, #0]
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f022 0201 	bic.w	r2, r2, #1
 800201e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	681a      	ldr	r2, [r3, #0]
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800202e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	681a      	ldr	r2, [r3, #0]
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800203e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002040:	f000 fe8a 	bl	8002d58 <HAL_RCC_GetPCLK1Freq>
 8002044:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	685b      	ldr	r3, [r3, #4]
 800204a:	4a81      	ldr	r2, [pc, #516]	; (8002250 <HAL_I2C_Init+0x274>)
 800204c:	4293      	cmp	r3, r2
 800204e:	d807      	bhi.n	8002060 <HAL_I2C_Init+0x84>
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	4a80      	ldr	r2, [pc, #512]	; (8002254 <HAL_I2C_Init+0x278>)
 8002054:	4293      	cmp	r3, r2
 8002056:	bf94      	ite	ls
 8002058:	2301      	movls	r3, #1
 800205a:	2300      	movhi	r3, #0
 800205c:	b2db      	uxtb	r3, r3
 800205e:	e006      	b.n	800206e <HAL_I2C_Init+0x92>
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	4a7d      	ldr	r2, [pc, #500]	; (8002258 <HAL_I2C_Init+0x27c>)
 8002064:	4293      	cmp	r3, r2
 8002066:	bf94      	ite	ls
 8002068:	2301      	movls	r3, #1
 800206a:	2300      	movhi	r3, #0
 800206c:	b2db      	uxtb	r3, r3
 800206e:	2b00      	cmp	r3, #0
 8002070:	d001      	beq.n	8002076 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002072:	2301      	movs	r3, #1
 8002074:	e0e7      	b.n	8002246 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	4a78      	ldr	r2, [pc, #480]	; (800225c <HAL_I2C_Init+0x280>)
 800207a:	fba2 2303 	umull	r2, r3, r2, r3
 800207e:	0c9b      	lsrs	r3, r3, #18
 8002080:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	68ba      	ldr	r2, [r7, #8]
 8002092:	430a      	orrs	r2, r1
 8002094:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	6a1b      	ldr	r3, [r3, #32]
 800209c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	4a6a      	ldr	r2, [pc, #424]	; (8002250 <HAL_I2C_Init+0x274>)
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d802      	bhi.n	80020b0 <HAL_I2C_Init+0xd4>
 80020aa:	68bb      	ldr	r3, [r7, #8]
 80020ac:	3301      	adds	r3, #1
 80020ae:	e009      	b.n	80020c4 <HAL_I2C_Init+0xe8>
 80020b0:	68bb      	ldr	r3, [r7, #8]
 80020b2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80020b6:	fb02 f303 	mul.w	r3, r2, r3
 80020ba:	4a69      	ldr	r2, [pc, #420]	; (8002260 <HAL_I2C_Init+0x284>)
 80020bc:	fba2 2303 	umull	r2, r3, r2, r3
 80020c0:	099b      	lsrs	r3, r3, #6
 80020c2:	3301      	adds	r3, #1
 80020c4:	687a      	ldr	r2, [r7, #4]
 80020c6:	6812      	ldr	r2, [r2, #0]
 80020c8:	430b      	orrs	r3, r1
 80020ca:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	69db      	ldr	r3, [r3, #28]
 80020d2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80020d6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	685b      	ldr	r3, [r3, #4]
 80020de:	495c      	ldr	r1, [pc, #368]	; (8002250 <HAL_I2C_Init+0x274>)
 80020e0:	428b      	cmp	r3, r1
 80020e2:	d819      	bhi.n	8002118 <HAL_I2C_Init+0x13c>
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	1e59      	subs	r1, r3, #1
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	005b      	lsls	r3, r3, #1
 80020ee:	fbb1 f3f3 	udiv	r3, r1, r3
 80020f2:	1c59      	adds	r1, r3, #1
 80020f4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80020f8:	400b      	ands	r3, r1
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d00a      	beq.n	8002114 <HAL_I2C_Init+0x138>
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	1e59      	subs	r1, r3, #1
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	685b      	ldr	r3, [r3, #4]
 8002106:	005b      	lsls	r3, r3, #1
 8002108:	fbb1 f3f3 	udiv	r3, r1, r3
 800210c:	3301      	adds	r3, #1
 800210e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002112:	e051      	b.n	80021b8 <HAL_I2C_Init+0x1dc>
 8002114:	2304      	movs	r3, #4
 8002116:	e04f      	b.n	80021b8 <HAL_I2C_Init+0x1dc>
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	689b      	ldr	r3, [r3, #8]
 800211c:	2b00      	cmp	r3, #0
 800211e:	d111      	bne.n	8002144 <HAL_I2C_Init+0x168>
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	1e58      	subs	r0, r3, #1
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6859      	ldr	r1, [r3, #4]
 8002128:	460b      	mov	r3, r1
 800212a:	005b      	lsls	r3, r3, #1
 800212c:	440b      	add	r3, r1
 800212e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002132:	3301      	adds	r3, #1
 8002134:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002138:	2b00      	cmp	r3, #0
 800213a:	bf0c      	ite	eq
 800213c:	2301      	moveq	r3, #1
 800213e:	2300      	movne	r3, #0
 8002140:	b2db      	uxtb	r3, r3
 8002142:	e012      	b.n	800216a <HAL_I2C_Init+0x18e>
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	1e58      	subs	r0, r3, #1
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6859      	ldr	r1, [r3, #4]
 800214c:	460b      	mov	r3, r1
 800214e:	009b      	lsls	r3, r3, #2
 8002150:	440b      	add	r3, r1
 8002152:	0099      	lsls	r1, r3, #2
 8002154:	440b      	add	r3, r1
 8002156:	fbb0 f3f3 	udiv	r3, r0, r3
 800215a:	3301      	adds	r3, #1
 800215c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002160:	2b00      	cmp	r3, #0
 8002162:	bf0c      	ite	eq
 8002164:	2301      	moveq	r3, #1
 8002166:	2300      	movne	r3, #0
 8002168:	b2db      	uxtb	r3, r3
 800216a:	2b00      	cmp	r3, #0
 800216c:	d001      	beq.n	8002172 <HAL_I2C_Init+0x196>
 800216e:	2301      	movs	r3, #1
 8002170:	e022      	b.n	80021b8 <HAL_I2C_Init+0x1dc>
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	689b      	ldr	r3, [r3, #8]
 8002176:	2b00      	cmp	r3, #0
 8002178:	d10e      	bne.n	8002198 <HAL_I2C_Init+0x1bc>
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	1e58      	subs	r0, r3, #1
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6859      	ldr	r1, [r3, #4]
 8002182:	460b      	mov	r3, r1
 8002184:	005b      	lsls	r3, r3, #1
 8002186:	440b      	add	r3, r1
 8002188:	fbb0 f3f3 	udiv	r3, r0, r3
 800218c:	3301      	adds	r3, #1
 800218e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002192:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002196:	e00f      	b.n	80021b8 <HAL_I2C_Init+0x1dc>
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	1e58      	subs	r0, r3, #1
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6859      	ldr	r1, [r3, #4]
 80021a0:	460b      	mov	r3, r1
 80021a2:	009b      	lsls	r3, r3, #2
 80021a4:	440b      	add	r3, r1
 80021a6:	0099      	lsls	r1, r3, #2
 80021a8:	440b      	add	r3, r1
 80021aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80021ae:	3301      	adds	r3, #1
 80021b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021b4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80021b8:	6879      	ldr	r1, [r7, #4]
 80021ba:	6809      	ldr	r1, [r1, #0]
 80021bc:	4313      	orrs	r3, r2
 80021be:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	69da      	ldr	r2, [r3, #28]
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6a1b      	ldr	r3, [r3, #32]
 80021d2:	431a      	orrs	r2, r3
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	430a      	orrs	r2, r1
 80021da:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	689b      	ldr	r3, [r3, #8]
 80021e2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80021e6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80021ea:	687a      	ldr	r2, [r7, #4]
 80021ec:	6911      	ldr	r1, [r2, #16]
 80021ee:	687a      	ldr	r2, [r7, #4]
 80021f0:	68d2      	ldr	r2, [r2, #12]
 80021f2:	4311      	orrs	r1, r2
 80021f4:	687a      	ldr	r2, [r7, #4]
 80021f6:	6812      	ldr	r2, [r2, #0]
 80021f8:	430b      	orrs	r3, r1
 80021fa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	68db      	ldr	r3, [r3, #12]
 8002202:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	695a      	ldr	r2, [r3, #20]
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	699b      	ldr	r3, [r3, #24]
 800220e:	431a      	orrs	r2, r3
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	430a      	orrs	r2, r1
 8002216:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	681a      	ldr	r2, [r3, #0]
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f042 0201 	orr.w	r2, r2, #1
 8002226:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	2200      	movs	r2, #0
 800222c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	2220      	movs	r2, #32
 8002232:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	2200      	movs	r2, #0
 800223a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2200      	movs	r2, #0
 8002240:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002244:	2300      	movs	r3, #0
}
 8002246:	4618      	mov	r0, r3
 8002248:	3710      	adds	r7, #16
 800224a:	46bd      	mov	sp, r7
 800224c:	bd80      	pop	{r7, pc}
 800224e:	bf00      	nop
 8002250:	000186a0 	.word	0x000186a0
 8002254:	001e847f 	.word	0x001e847f
 8002258:	003d08ff 	.word	0x003d08ff
 800225c:	431bde83 	.word	0x431bde83
 8002260:	10624dd3 	.word	0x10624dd3

08002264 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b088      	sub	sp, #32
 8002268:	af02      	add	r7, sp, #8
 800226a:	60f8      	str	r0, [r7, #12]
 800226c:	607a      	str	r2, [r7, #4]
 800226e:	461a      	mov	r2, r3
 8002270:	460b      	mov	r3, r1
 8002272:	817b      	strh	r3, [r7, #10]
 8002274:	4613      	mov	r3, r2
 8002276:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002278:	f7ff fbbe 	bl	80019f8 <HAL_GetTick>
 800227c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002284:	b2db      	uxtb	r3, r3
 8002286:	2b20      	cmp	r3, #32
 8002288:	f040 80e0 	bne.w	800244c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800228c:	697b      	ldr	r3, [r7, #20]
 800228e:	9300      	str	r3, [sp, #0]
 8002290:	2319      	movs	r3, #25
 8002292:	2201      	movs	r2, #1
 8002294:	4970      	ldr	r1, [pc, #448]	; (8002458 <HAL_I2C_Master_Transmit+0x1f4>)
 8002296:	68f8      	ldr	r0, [r7, #12]
 8002298:	f000 fa92 	bl	80027c0 <I2C_WaitOnFlagUntilTimeout>
 800229c:	4603      	mov	r3, r0
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d001      	beq.n	80022a6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80022a2:	2302      	movs	r3, #2
 80022a4:	e0d3      	b.n	800244e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80022ac:	2b01      	cmp	r3, #1
 80022ae:	d101      	bne.n	80022b4 <HAL_I2C_Master_Transmit+0x50>
 80022b0:	2302      	movs	r3, #2
 80022b2:	e0cc      	b.n	800244e <HAL_I2C_Master_Transmit+0x1ea>
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	2201      	movs	r2, #1
 80022b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f003 0301 	and.w	r3, r3, #1
 80022c6:	2b01      	cmp	r3, #1
 80022c8:	d007      	beq.n	80022da <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	681a      	ldr	r2, [r3, #0]
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f042 0201 	orr.w	r2, r2, #1
 80022d8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	681a      	ldr	r2, [r3, #0]
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80022e8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	2221      	movs	r2, #33	; 0x21
 80022ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	2210      	movs	r2, #16
 80022f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	2200      	movs	r2, #0
 80022fe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	687a      	ldr	r2, [r7, #4]
 8002304:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	893a      	ldrh	r2, [r7, #8]
 800230a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002310:	b29a      	uxth	r2, r3
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	4a50      	ldr	r2, [pc, #320]	; (800245c <HAL_I2C_Master_Transmit+0x1f8>)
 800231a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800231c:	8979      	ldrh	r1, [r7, #10]
 800231e:	697b      	ldr	r3, [r7, #20]
 8002320:	6a3a      	ldr	r2, [r7, #32]
 8002322:	68f8      	ldr	r0, [r7, #12]
 8002324:	f000 f9ca 	bl	80026bc <I2C_MasterRequestWrite>
 8002328:	4603      	mov	r3, r0
 800232a:	2b00      	cmp	r3, #0
 800232c:	d001      	beq.n	8002332 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800232e:	2301      	movs	r3, #1
 8002330:	e08d      	b.n	800244e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002332:	2300      	movs	r3, #0
 8002334:	613b      	str	r3, [r7, #16]
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	695b      	ldr	r3, [r3, #20]
 800233c:	613b      	str	r3, [r7, #16]
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	699b      	ldr	r3, [r3, #24]
 8002344:	613b      	str	r3, [r7, #16]
 8002346:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002348:	e066      	b.n	8002418 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800234a:	697a      	ldr	r2, [r7, #20]
 800234c:	6a39      	ldr	r1, [r7, #32]
 800234e:	68f8      	ldr	r0, [r7, #12]
 8002350:	f000 fb50 	bl	80029f4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002354:	4603      	mov	r3, r0
 8002356:	2b00      	cmp	r3, #0
 8002358:	d00d      	beq.n	8002376 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800235e:	2b04      	cmp	r3, #4
 8002360:	d107      	bne.n	8002372 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	681a      	ldr	r2, [r3, #0]
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002370:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002372:	2301      	movs	r3, #1
 8002374:	e06b      	b.n	800244e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800237a:	781a      	ldrb	r2, [r3, #0]
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002386:	1c5a      	adds	r2, r3, #1
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002390:	b29b      	uxth	r3, r3
 8002392:	3b01      	subs	r3, #1
 8002394:	b29a      	uxth	r2, r3
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800239e:	3b01      	subs	r3, #1
 80023a0:	b29a      	uxth	r2, r3
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	695b      	ldr	r3, [r3, #20]
 80023ac:	f003 0304 	and.w	r3, r3, #4
 80023b0:	2b04      	cmp	r3, #4
 80023b2:	d11b      	bne.n	80023ec <HAL_I2C_Master_Transmit+0x188>
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d017      	beq.n	80023ec <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023c0:	781a      	ldrb	r2, [r3, #0]
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023cc:	1c5a      	adds	r2, r3, #1
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023d6:	b29b      	uxth	r3, r3
 80023d8:	3b01      	subs	r3, #1
 80023da:	b29a      	uxth	r2, r3
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023e4:	3b01      	subs	r3, #1
 80023e6:	b29a      	uxth	r2, r3
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80023ec:	697a      	ldr	r2, [r7, #20]
 80023ee:	6a39      	ldr	r1, [r7, #32]
 80023f0:	68f8      	ldr	r0, [r7, #12]
 80023f2:	f000 fb47 	bl	8002a84 <I2C_WaitOnBTFFlagUntilTimeout>
 80023f6:	4603      	mov	r3, r0
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d00d      	beq.n	8002418 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002400:	2b04      	cmp	r3, #4
 8002402:	d107      	bne.n	8002414 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	681a      	ldr	r2, [r3, #0]
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002412:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002414:	2301      	movs	r3, #1
 8002416:	e01a      	b.n	800244e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800241c:	2b00      	cmp	r3, #0
 800241e:	d194      	bne.n	800234a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	681a      	ldr	r2, [r3, #0]
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800242e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	2220      	movs	r2, #32
 8002434:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	2200      	movs	r2, #0
 800243c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	2200      	movs	r2, #0
 8002444:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002448:	2300      	movs	r3, #0
 800244a:	e000      	b.n	800244e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800244c:	2302      	movs	r3, #2
  }
}
 800244e:	4618      	mov	r0, r3
 8002450:	3718      	adds	r7, #24
 8002452:	46bd      	mov	sp, r7
 8002454:	bd80      	pop	{r7, pc}
 8002456:	bf00      	nop
 8002458:	00100002 	.word	0x00100002
 800245c:	ffff0000 	.word	0xffff0000

08002460 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b08a      	sub	sp, #40	; 0x28
 8002464:	af02      	add	r7, sp, #8
 8002466:	60f8      	str	r0, [r7, #12]
 8002468:	607a      	str	r2, [r7, #4]
 800246a:	603b      	str	r3, [r7, #0]
 800246c:	460b      	mov	r3, r1
 800246e:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002470:	f7ff fac2 	bl	80019f8 <HAL_GetTick>
 8002474:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8002476:	2300      	movs	r3, #0
 8002478:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002480:	b2db      	uxtb	r3, r3
 8002482:	2b20      	cmp	r3, #32
 8002484:	f040 8111 	bne.w	80026aa <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002488:	69fb      	ldr	r3, [r7, #28]
 800248a:	9300      	str	r3, [sp, #0]
 800248c:	2319      	movs	r3, #25
 800248e:	2201      	movs	r2, #1
 8002490:	4988      	ldr	r1, [pc, #544]	; (80026b4 <HAL_I2C_IsDeviceReady+0x254>)
 8002492:	68f8      	ldr	r0, [r7, #12]
 8002494:	f000 f994 	bl	80027c0 <I2C_WaitOnFlagUntilTimeout>
 8002498:	4603      	mov	r3, r0
 800249a:	2b00      	cmp	r3, #0
 800249c:	d001      	beq.n	80024a2 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800249e:	2302      	movs	r3, #2
 80024a0:	e104      	b.n	80026ac <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80024a8:	2b01      	cmp	r3, #1
 80024aa:	d101      	bne.n	80024b0 <HAL_I2C_IsDeviceReady+0x50>
 80024ac:	2302      	movs	r3, #2
 80024ae:	e0fd      	b.n	80026ac <HAL_I2C_IsDeviceReady+0x24c>
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	2201      	movs	r2, #1
 80024b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f003 0301 	and.w	r3, r3, #1
 80024c2:	2b01      	cmp	r3, #1
 80024c4:	d007      	beq.n	80024d6 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	681a      	ldr	r2, [r3, #0]
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f042 0201 	orr.w	r2, r2, #1
 80024d4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	681a      	ldr	r2, [r3, #0]
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80024e4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	2224      	movs	r2, #36	; 0x24
 80024ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	2200      	movs	r2, #0
 80024f2:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	4a70      	ldr	r2, [pc, #448]	; (80026b8 <HAL_I2C_IsDeviceReady+0x258>)
 80024f8:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	681a      	ldr	r2, [r3, #0]
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002508:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800250a:	69fb      	ldr	r3, [r7, #28]
 800250c:	9300      	str	r3, [sp, #0]
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	2200      	movs	r2, #0
 8002512:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002516:	68f8      	ldr	r0, [r7, #12]
 8002518:	f000 f952 	bl	80027c0 <I2C_WaitOnFlagUntilTimeout>
 800251c:	4603      	mov	r3, r0
 800251e:	2b00      	cmp	r3, #0
 8002520:	d00d      	beq.n	800253e <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800252c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002530:	d103      	bne.n	800253a <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002538:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 800253a:	2303      	movs	r3, #3
 800253c:	e0b6      	b.n	80026ac <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800253e:	897b      	ldrh	r3, [r7, #10]
 8002540:	b2db      	uxtb	r3, r3
 8002542:	461a      	mov	r2, r3
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800254c:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800254e:	f7ff fa53 	bl	80019f8 <HAL_GetTick>
 8002552:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	695b      	ldr	r3, [r3, #20]
 800255a:	f003 0302 	and.w	r3, r3, #2
 800255e:	2b02      	cmp	r3, #2
 8002560:	bf0c      	ite	eq
 8002562:	2301      	moveq	r3, #1
 8002564:	2300      	movne	r3, #0
 8002566:	b2db      	uxtb	r3, r3
 8002568:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	695b      	ldr	r3, [r3, #20]
 8002570:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002574:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002578:	bf0c      	ite	eq
 800257a:	2301      	moveq	r3, #1
 800257c:	2300      	movne	r3, #0
 800257e:	b2db      	uxtb	r3, r3
 8002580:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002582:	e025      	b.n	80025d0 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002584:	f7ff fa38 	bl	80019f8 <HAL_GetTick>
 8002588:	4602      	mov	r2, r0
 800258a:	69fb      	ldr	r3, [r7, #28]
 800258c:	1ad3      	subs	r3, r2, r3
 800258e:	683a      	ldr	r2, [r7, #0]
 8002590:	429a      	cmp	r2, r3
 8002592:	d302      	bcc.n	800259a <HAL_I2C_IsDeviceReady+0x13a>
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	2b00      	cmp	r3, #0
 8002598:	d103      	bne.n	80025a2 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	22a0      	movs	r2, #160	; 0xa0
 800259e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	695b      	ldr	r3, [r3, #20]
 80025a8:	f003 0302 	and.w	r3, r3, #2
 80025ac:	2b02      	cmp	r3, #2
 80025ae:	bf0c      	ite	eq
 80025b0:	2301      	moveq	r3, #1
 80025b2:	2300      	movne	r3, #0
 80025b4:	b2db      	uxtb	r3, r3
 80025b6:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	695b      	ldr	r3, [r3, #20]
 80025be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80025c6:	bf0c      	ite	eq
 80025c8:	2301      	moveq	r3, #1
 80025ca:	2300      	movne	r3, #0
 80025cc:	b2db      	uxtb	r3, r3
 80025ce:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025d6:	b2db      	uxtb	r3, r3
 80025d8:	2ba0      	cmp	r3, #160	; 0xa0
 80025da:	d005      	beq.n	80025e8 <HAL_I2C_IsDeviceReady+0x188>
 80025dc:	7dfb      	ldrb	r3, [r7, #23]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d102      	bne.n	80025e8 <HAL_I2C_IsDeviceReady+0x188>
 80025e2:	7dbb      	ldrb	r3, [r7, #22]
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d0cd      	beq.n	8002584 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	2220      	movs	r2, #32
 80025ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	695b      	ldr	r3, [r3, #20]
 80025f6:	f003 0302 	and.w	r3, r3, #2
 80025fa:	2b02      	cmp	r3, #2
 80025fc:	d129      	bne.n	8002652 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	681a      	ldr	r2, [r3, #0]
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800260c:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800260e:	2300      	movs	r3, #0
 8002610:	613b      	str	r3, [r7, #16]
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	695b      	ldr	r3, [r3, #20]
 8002618:	613b      	str	r3, [r7, #16]
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	699b      	ldr	r3, [r3, #24]
 8002620:	613b      	str	r3, [r7, #16]
 8002622:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002624:	69fb      	ldr	r3, [r7, #28]
 8002626:	9300      	str	r3, [sp, #0]
 8002628:	2319      	movs	r3, #25
 800262a:	2201      	movs	r2, #1
 800262c:	4921      	ldr	r1, [pc, #132]	; (80026b4 <HAL_I2C_IsDeviceReady+0x254>)
 800262e:	68f8      	ldr	r0, [r7, #12]
 8002630:	f000 f8c6 	bl	80027c0 <I2C_WaitOnFlagUntilTimeout>
 8002634:	4603      	mov	r3, r0
 8002636:	2b00      	cmp	r3, #0
 8002638:	d001      	beq.n	800263e <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800263a:	2301      	movs	r3, #1
 800263c:	e036      	b.n	80026ac <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	2220      	movs	r2, #32
 8002642:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	2200      	movs	r2, #0
 800264a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 800264e:	2300      	movs	r3, #0
 8002650:	e02c      	b.n	80026ac <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	681a      	ldr	r2, [r3, #0]
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002660:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800266a:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800266c:	69fb      	ldr	r3, [r7, #28]
 800266e:	9300      	str	r3, [sp, #0]
 8002670:	2319      	movs	r3, #25
 8002672:	2201      	movs	r2, #1
 8002674:	490f      	ldr	r1, [pc, #60]	; (80026b4 <HAL_I2C_IsDeviceReady+0x254>)
 8002676:	68f8      	ldr	r0, [r7, #12]
 8002678:	f000 f8a2 	bl	80027c0 <I2C_WaitOnFlagUntilTimeout>
 800267c:	4603      	mov	r3, r0
 800267e:	2b00      	cmp	r3, #0
 8002680:	d001      	beq.n	8002686 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8002682:	2301      	movs	r3, #1
 8002684:	e012      	b.n	80026ac <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8002686:	69bb      	ldr	r3, [r7, #24]
 8002688:	3301      	adds	r3, #1
 800268a:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 800268c:	69ba      	ldr	r2, [r7, #24]
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	429a      	cmp	r2, r3
 8002692:	f4ff af32 	bcc.w	80024fa <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	2220      	movs	r2, #32
 800269a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	2200      	movs	r2, #0
 80026a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80026a6:	2301      	movs	r3, #1
 80026a8:	e000      	b.n	80026ac <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80026aa:	2302      	movs	r3, #2
  }
}
 80026ac:	4618      	mov	r0, r3
 80026ae:	3720      	adds	r7, #32
 80026b0:	46bd      	mov	sp, r7
 80026b2:	bd80      	pop	{r7, pc}
 80026b4:	00100002 	.word	0x00100002
 80026b8:	ffff0000 	.word	0xffff0000

080026bc <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b088      	sub	sp, #32
 80026c0:	af02      	add	r7, sp, #8
 80026c2:	60f8      	str	r0, [r7, #12]
 80026c4:	607a      	str	r2, [r7, #4]
 80026c6:	603b      	str	r3, [r7, #0]
 80026c8:	460b      	mov	r3, r1
 80026ca:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026d0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80026d2:	697b      	ldr	r3, [r7, #20]
 80026d4:	2b08      	cmp	r3, #8
 80026d6:	d006      	beq.n	80026e6 <I2C_MasterRequestWrite+0x2a>
 80026d8:	697b      	ldr	r3, [r7, #20]
 80026da:	2b01      	cmp	r3, #1
 80026dc:	d003      	beq.n	80026e6 <I2C_MasterRequestWrite+0x2a>
 80026de:	697b      	ldr	r3, [r7, #20]
 80026e0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80026e4:	d108      	bne.n	80026f8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	681a      	ldr	r2, [r3, #0]
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80026f4:	601a      	str	r2, [r3, #0]
 80026f6:	e00b      	b.n	8002710 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026fc:	2b12      	cmp	r3, #18
 80026fe:	d107      	bne.n	8002710 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	681a      	ldr	r2, [r3, #0]
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800270e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	9300      	str	r3, [sp, #0]
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	2200      	movs	r2, #0
 8002718:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800271c:	68f8      	ldr	r0, [r7, #12]
 800271e:	f000 f84f 	bl	80027c0 <I2C_WaitOnFlagUntilTimeout>
 8002722:	4603      	mov	r3, r0
 8002724:	2b00      	cmp	r3, #0
 8002726:	d00d      	beq.n	8002744 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002732:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002736:	d103      	bne.n	8002740 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800273e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002740:	2303      	movs	r3, #3
 8002742:	e035      	b.n	80027b0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	691b      	ldr	r3, [r3, #16]
 8002748:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800274c:	d108      	bne.n	8002760 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800274e:	897b      	ldrh	r3, [r7, #10]
 8002750:	b2db      	uxtb	r3, r3
 8002752:	461a      	mov	r2, r3
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800275c:	611a      	str	r2, [r3, #16]
 800275e:	e01b      	b.n	8002798 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002760:	897b      	ldrh	r3, [r7, #10]
 8002762:	11db      	asrs	r3, r3, #7
 8002764:	b2db      	uxtb	r3, r3
 8002766:	f003 0306 	and.w	r3, r3, #6
 800276a:	b2db      	uxtb	r3, r3
 800276c:	f063 030f 	orn	r3, r3, #15
 8002770:	b2da      	uxtb	r2, r3
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	687a      	ldr	r2, [r7, #4]
 800277c:	490e      	ldr	r1, [pc, #56]	; (80027b8 <I2C_MasterRequestWrite+0xfc>)
 800277e:	68f8      	ldr	r0, [r7, #12]
 8002780:	f000 f898 	bl	80028b4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002784:	4603      	mov	r3, r0
 8002786:	2b00      	cmp	r3, #0
 8002788:	d001      	beq.n	800278e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800278a:	2301      	movs	r3, #1
 800278c:	e010      	b.n	80027b0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800278e:	897b      	ldrh	r3, [r7, #10]
 8002790:	b2da      	uxtb	r2, r3
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	687a      	ldr	r2, [r7, #4]
 800279c:	4907      	ldr	r1, [pc, #28]	; (80027bc <I2C_MasterRequestWrite+0x100>)
 800279e:	68f8      	ldr	r0, [r7, #12]
 80027a0:	f000 f888 	bl	80028b4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80027a4:	4603      	mov	r3, r0
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d001      	beq.n	80027ae <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80027aa:	2301      	movs	r3, #1
 80027ac:	e000      	b.n	80027b0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80027ae:	2300      	movs	r3, #0
}
 80027b0:	4618      	mov	r0, r3
 80027b2:	3718      	adds	r7, #24
 80027b4:	46bd      	mov	sp, r7
 80027b6:	bd80      	pop	{r7, pc}
 80027b8:	00010008 	.word	0x00010008
 80027bc:	00010002 	.word	0x00010002

080027c0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b084      	sub	sp, #16
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	60f8      	str	r0, [r7, #12]
 80027c8:	60b9      	str	r1, [r7, #8]
 80027ca:	603b      	str	r3, [r7, #0]
 80027cc:	4613      	mov	r3, r2
 80027ce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80027d0:	e048      	b.n	8002864 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027d8:	d044      	beq.n	8002864 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80027da:	f7ff f90d 	bl	80019f8 <HAL_GetTick>
 80027de:	4602      	mov	r2, r0
 80027e0:	69bb      	ldr	r3, [r7, #24]
 80027e2:	1ad3      	subs	r3, r2, r3
 80027e4:	683a      	ldr	r2, [r7, #0]
 80027e6:	429a      	cmp	r2, r3
 80027e8:	d302      	bcc.n	80027f0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d139      	bne.n	8002864 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80027f0:	68bb      	ldr	r3, [r7, #8]
 80027f2:	0c1b      	lsrs	r3, r3, #16
 80027f4:	b2db      	uxtb	r3, r3
 80027f6:	2b01      	cmp	r3, #1
 80027f8:	d10d      	bne.n	8002816 <I2C_WaitOnFlagUntilTimeout+0x56>
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	695b      	ldr	r3, [r3, #20]
 8002800:	43da      	mvns	r2, r3
 8002802:	68bb      	ldr	r3, [r7, #8]
 8002804:	4013      	ands	r3, r2
 8002806:	b29b      	uxth	r3, r3
 8002808:	2b00      	cmp	r3, #0
 800280a:	bf0c      	ite	eq
 800280c:	2301      	moveq	r3, #1
 800280e:	2300      	movne	r3, #0
 8002810:	b2db      	uxtb	r3, r3
 8002812:	461a      	mov	r2, r3
 8002814:	e00c      	b.n	8002830 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	699b      	ldr	r3, [r3, #24]
 800281c:	43da      	mvns	r2, r3
 800281e:	68bb      	ldr	r3, [r7, #8]
 8002820:	4013      	ands	r3, r2
 8002822:	b29b      	uxth	r3, r3
 8002824:	2b00      	cmp	r3, #0
 8002826:	bf0c      	ite	eq
 8002828:	2301      	moveq	r3, #1
 800282a:	2300      	movne	r3, #0
 800282c:	b2db      	uxtb	r3, r3
 800282e:	461a      	mov	r2, r3
 8002830:	79fb      	ldrb	r3, [r7, #7]
 8002832:	429a      	cmp	r2, r3
 8002834:	d116      	bne.n	8002864 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	2200      	movs	r2, #0
 800283a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	2220      	movs	r2, #32
 8002840:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	2200      	movs	r2, #0
 8002848:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002850:	f043 0220 	orr.w	r2, r3, #32
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	2200      	movs	r2, #0
 800285c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002860:	2301      	movs	r3, #1
 8002862:	e023      	b.n	80028ac <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002864:	68bb      	ldr	r3, [r7, #8]
 8002866:	0c1b      	lsrs	r3, r3, #16
 8002868:	b2db      	uxtb	r3, r3
 800286a:	2b01      	cmp	r3, #1
 800286c:	d10d      	bne.n	800288a <I2C_WaitOnFlagUntilTimeout+0xca>
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	695b      	ldr	r3, [r3, #20]
 8002874:	43da      	mvns	r2, r3
 8002876:	68bb      	ldr	r3, [r7, #8]
 8002878:	4013      	ands	r3, r2
 800287a:	b29b      	uxth	r3, r3
 800287c:	2b00      	cmp	r3, #0
 800287e:	bf0c      	ite	eq
 8002880:	2301      	moveq	r3, #1
 8002882:	2300      	movne	r3, #0
 8002884:	b2db      	uxtb	r3, r3
 8002886:	461a      	mov	r2, r3
 8002888:	e00c      	b.n	80028a4 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	699b      	ldr	r3, [r3, #24]
 8002890:	43da      	mvns	r2, r3
 8002892:	68bb      	ldr	r3, [r7, #8]
 8002894:	4013      	ands	r3, r2
 8002896:	b29b      	uxth	r3, r3
 8002898:	2b00      	cmp	r3, #0
 800289a:	bf0c      	ite	eq
 800289c:	2301      	moveq	r3, #1
 800289e:	2300      	movne	r3, #0
 80028a0:	b2db      	uxtb	r3, r3
 80028a2:	461a      	mov	r2, r3
 80028a4:	79fb      	ldrb	r3, [r7, #7]
 80028a6:	429a      	cmp	r2, r3
 80028a8:	d093      	beq.n	80027d2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80028aa:	2300      	movs	r3, #0
}
 80028ac:	4618      	mov	r0, r3
 80028ae:	3710      	adds	r7, #16
 80028b0:	46bd      	mov	sp, r7
 80028b2:	bd80      	pop	{r7, pc}

080028b4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b084      	sub	sp, #16
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	60f8      	str	r0, [r7, #12]
 80028bc:	60b9      	str	r1, [r7, #8]
 80028be:	607a      	str	r2, [r7, #4]
 80028c0:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80028c2:	e071      	b.n	80029a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	695b      	ldr	r3, [r3, #20]
 80028ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80028d2:	d123      	bne.n	800291c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	681a      	ldr	r2, [r3, #0]
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028e2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80028ec:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	2200      	movs	r2, #0
 80028f2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	2220      	movs	r2, #32
 80028f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	2200      	movs	r2, #0
 8002900:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002908:	f043 0204 	orr.w	r2, r3, #4
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	2200      	movs	r2, #0
 8002914:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002918:	2301      	movs	r3, #1
 800291a:	e067      	b.n	80029ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002922:	d041      	beq.n	80029a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002924:	f7ff f868 	bl	80019f8 <HAL_GetTick>
 8002928:	4602      	mov	r2, r0
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	1ad3      	subs	r3, r2, r3
 800292e:	687a      	ldr	r2, [r7, #4]
 8002930:	429a      	cmp	r2, r3
 8002932:	d302      	bcc.n	800293a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2b00      	cmp	r3, #0
 8002938:	d136      	bne.n	80029a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800293a:	68bb      	ldr	r3, [r7, #8]
 800293c:	0c1b      	lsrs	r3, r3, #16
 800293e:	b2db      	uxtb	r3, r3
 8002940:	2b01      	cmp	r3, #1
 8002942:	d10c      	bne.n	800295e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	695b      	ldr	r3, [r3, #20]
 800294a:	43da      	mvns	r2, r3
 800294c:	68bb      	ldr	r3, [r7, #8]
 800294e:	4013      	ands	r3, r2
 8002950:	b29b      	uxth	r3, r3
 8002952:	2b00      	cmp	r3, #0
 8002954:	bf14      	ite	ne
 8002956:	2301      	movne	r3, #1
 8002958:	2300      	moveq	r3, #0
 800295a:	b2db      	uxtb	r3, r3
 800295c:	e00b      	b.n	8002976 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	699b      	ldr	r3, [r3, #24]
 8002964:	43da      	mvns	r2, r3
 8002966:	68bb      	ldr	r3, [r7, #8]
 8002968:	4013      	ands	r3, r2
 800296a:	b29b      	uxth	r3, r3
 800296c:	2b00      	cmp	r3, #0
 800296e:	bf14      	ite	ne
 8002970:	2301      	movne	r3, #1
 8002972:	2300      	moveq	r3, #0
 8002974:	b2db      	uxtb	r3, r3
 8002976:	2b00      	cmp	r3, #0
 8002978:	d016      	beq.n	80029a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	2200      	movs	r2, #0
 800297e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	2220      	movs	r2, #32
 8002984:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	2200      	movs	r2, #0
 800298c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002994:	f043 0220 	orr.w	r2, r3, #32
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	2200      	movs	r2, #0
 80029a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80029a4:	2301      	movs	r3, #1
 80029a6:	e021      	b.n	80029ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80029a8:	68bb      	ldr	r3, [r7, #8]
 80029aa:	0c1b      	lsrs	r3, r3, #16
 80029ac:	b2db      	uxtb	r3, r3
 80029ae:	2b01      	cmp	r3, #1
 80029b0:	d10c      	bne.n	80029cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	695b      	ldr	r3, [r3, #20]
 80029b8:	43da      	mvns	r2, r3
 80029ba:	68bb      	ldr	r3, [r7, #8]
 80029bc:	4013      	ands	r3, r2
 80029be:	b29b      	uxth	r3, r3
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	bf14      	ite	ne
 80029c4:	2301      	movne	r3, #1
 80029c6:	2300      	moveq	r3, #0
 80029c8:	b2db      	uxtb	r3, r3
 80029ca:	e00b      	b.n	80029e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	699b      	ldr	r3, [r3, #24]
 80029d2:	43da      	mvns	r2, r3
 80029d4:	68bb      	ldr	r3, [r7, #8]
 80029d6:	4013      	ands	r3, r2
 80029d8:	b29b      	uxth	r3, r3
 80029da:	2b00      	cmp	r3, #0
 80029dc:	bf14      	ite	ne
 80029de:	2301      	movne	r3, #1
 80029e0:	2300      	moveq	r3, #0
 80029e2:	b2db      	uxtb	r3, r3
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	f47f af6d 	bne.w	80028c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80029ea:	2300      	movs	r3, #0
}
 80029ec:	4618      	mov	r0, r3
 80029ee:	3710      	adds	r7, #16
 80029f0:	46bd      	mov	sp, r7
 80029f2:	bd80      	pop	{r7, pc}

080029f4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b084      	sub	sp, #16
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	60f8      	str	r0, [r7, #12]
 80029fc:	60b9      	str	r1, [r7, #8]
 80029fe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002a00:	e034      	b.n	8002a6c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002a02:	68f8      	ldr	r0, [r7, #12]
 8002a04:	f000 f886 	bl	8002b14 <I2C_IsAcknowledgeFailed>
 8002a08:	4603      	mov	r3, r0
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d001      	beq.n	8002a12 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002a0e:	2301      	movs	r3, #1
 8002a10:	e034      	b.n	8002a7c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a12:	68bb      	ldr	r3, [r7, #8]
 8002a14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a18:	d028      	beq.n	8002a6c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a1a:	f7fe ffed 	bl	80019f8 <HAL_GetTick>
 8002a1e:	4602      	mov	r2, r0
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	1ad3      	subs	r3, r2, r3
 8002a24:	68ba      	ldr	r2, [r7, #8]
 8002a26:	429a      	cmp	r2, r3
 8002a28:	d302      	bcc.n	8002a30 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002a2a:	68bb      	ldr	r3, [r7, #8]
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d11d      	bne.n	8002a6c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	695b      	ldr	r3, [r3, #20]
 8002a36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a3a:	2b80      	cmp	r3, #128	; 0x80
 8002a3c:	d016      	beq.n	8002a6c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	2200      	movs	r2, #0
 8002a42:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	2220      	movs	r2, #32
 8002a48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	2200      	movs	r2, #0
 8002a50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a58:	f043 0220 	orr.w	r2, r3, #32
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	2200      	movs	r2, #0
 8002a64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002a68:	2301      	movs	r3, #1
 8002a6a:	e007      	b.n	8002a7c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	695b      	ldr	r3, [r3, #20]
 8002a72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a76:	2b80      	cmp	r3, #128	; 0x80
 8002a78:	d1c3      	bne.n	8002a02 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002a7a:	2300      	movs	r3, #0
}
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	3710      	adds	r7, #16
 8002a80:	46bd      	mov	sp, r7
 8002a82:	bd80      	pop	{r7, pc}

08002a84 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b084      	sub	sp, #16
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	60f8      	str	r0, [r7, #12]
 8002a8c:	60b9      	str	r1, [r7, #8]
 8002a8e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002a90:	e034      	b.n	8002afc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002a92:	68f8      	ldr	r0, [r7, #12]
 8002a94:	f000 f83e 	bl	8002b14 <I2C_IsAcknowledgeFailed>
 8002a98:	4603      	mov	r3, r0
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d001      	beq.n	8002aa2 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	e034      	b.n	8002b0c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002aa2:	68bb      	ldr	r3, [r7, #8]
 8002aa4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002aa8:	d028      	beq.n	8002afc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002aaa:	f7fe ffa5 	bl	80019f8 <HAL_GetTick>
 8002aae:	4602      	mov	r2, r0
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	1ad3      	subs	r3, r2, r3
 8002ab4:	68ba      	ldr	r2, [r7, #8]
 8002ab6:	429a      	cmp	r2, r3
 8002ab8:	d302      	bcc.n	8002ac0 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002aba:	68bb      	ldr	r3, [r7, #8]
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d11d      	bne.n	8002afc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	695b      	ldr	r3, [r3, #20]
 8002ac6:	f003 0304 	and.w	r3, r3, #4
 8002aca:	2b04      	cmp	r3, #4
 8002acc:	d016      	beq.n	8002afc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	2220      	movs	r2, #32
 8002ad8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	2200      	movs	r2, #0
 8002ae0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ae8:	f043 0220 	orr.w	r2, r3, #32
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	2200      	movs	r2, #0
 8002af4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002af8:	2301      	movs	r3, #1
 8002afa:	e007      	b.n	8002b0c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	695b      	ldr	r3, [r3, #20]
 8002b02:	f003 0304 	and.w	r3, r3, #4
 8002b06:	2b04      	cmp	r3, #4
 8002b08:	d1c3      	bne.n	8002a92 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002b0a:	2300      	movs	r3, #0
}
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	3710      	adds	r7, #16
 8002b10:	46bd      	mov	sp, r7
 8002b12:	bd80      	pop	{r7, pc}

08002b14 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002b14:	b480      	push	{r7}
 8002b16:	b083      	sub	sp, #12
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	695b      	ldr	r3, [r3, #20]
 8002b22:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b26:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b2a:	d11b      	bne.n	8002b64 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002b34:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	2200      	movs	r2, #0
 8002b3a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2220      	movs	r2, #32
 8002b40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2200      	movs	r2, #0
 8002b48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b50:	f043 0204 	orr.w	r2, r3, #4
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002b60:	2301      	movs	r3, #1
 8002b62:	e000      	b.n	8002b66 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002b64:	2300      	movs	r3, #0
}
 8002b66:	4618      	mov	r0, r3
 8002b68:	370c      	adds	r7, #12
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b70:	4770      	bx	lr
	...

08002b74 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b084      	sub	sp, #16
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
 8002b7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d101      	bne.n	8002b88 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b84:	2301      	movs	r3, #1
 8002b86:	e0cc      	b.n	8002d22 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002b88:	4b68      	ldr	r3, [pc, #416]	; (8002d2c <HAL_RCC_ClockConfig+0x1b8>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f003 030f 	and.w	r3, r3, #15
 8002b90:	683a      	ldr	r2, [r7, #0]
 8002b92:	429a      	cmp	r2, r3
 8002b94:	d90c      	bls.n	8002bb0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b96:	4b65      	ldr	r3, [pc, #404]	; (8002d2c <HAL_RCC_ClockConfig+0x1b8>)
 8002b98:	683a      	ldr	r2, [r7, #0]
 8002b9a:	b2d2      	uxtb	r2, r2
 8002b9c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b9e:	4b63      	ldr	r3, [pc, #396]	; (8002d2c <HAL_RCC_ClockConfig+0x1b8>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f003 030f 	and.w	r3, r3, #15
 8002ba6:	683a      	ldr	r2, [r7, #0]
 8002ba8:	429a      	cmp	r2, r3
 8002baa:	d001      	beq.n	8002bb0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002bac:	2301      	movs	r3, #1
 8002bae:	e0b8      	b.n	8002d22 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f003 0302 	and.w	r3, r3, #2
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d020      	beq.n	8002bfe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f003 0304 	and.w	r3, r3, #4
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d005      	beq.n	8002bd4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002bc8:	4b59      	ldr	r3, [pc, #356]	; (8002d30 <HAL_RCC_ClockConfig+0x1bc>)
 8002bca:	689b      	ldr	r3, [r3, #8]
 8002bcc:	4a58      	ldr	r2, [pc, #352]	; (8002d30 <HAL_RCC_ClockConfig+0x1bc>)
 8002bce:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002bd2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f003 0308 	and.w	r3, r3, #8
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d005      	beq.n	8002bec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002be0:	4b53      	ldr	r3, [pc, #332]	; (8002d30 <HAL_RCC_ClockConfig+0x1bc>)
 8002be2:	689b      	ldr	r3, [r3, #8]
 8002be4:	4a52      	ldr	r2, [pc, #328]	; (8002d30 <HAL_RCC_ClockConfig+0x1bc>)
 8002be6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002bea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002bec:	4b50      	ldr	r3, [pc, #320]	; (8002d30 <HAL_RCC_ClockConfig+0x1bc>)
 8002bee:	689b      	ldr	r3, [r3, #8]
 8002bf0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	689b      	ldr	r3, [r3, #8]
 8002bf8:	494d      	ldr	r1, [pc, #308]	; (8002d30 <HAL_RCC_ClockConfig+0x1bc>)
 8002bfa:	4313      	orrs	r3, r2
 8002bfc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f003 0301 	and.w	r3, r3, #1
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d044      	beq.n	8002c94 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	685b      	ldr	r3, [r3, #4]
 8002c0e:	2b01      	cmp	r3, #1
 8002c10:	d107      	bne.n	8002c22 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c12:	4b47      	ldr	r3, [pc, #284]	; (8002d30 <HAL_RCC_ClockConfig+0x1bc>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d119      	bne.n	8002c52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c1e:	2301      	movs	r3, #1
 8002c20:	e07f      	b.n	8002d22 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	685b      	ldr	r3, [r3, #4]
 8002c26:	2b02      	cmp	r3, #2
 8002c28:	d003      	beq.n	8002c32 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c2e:	2b03      	cmp	r3, #3
 8002c30:	d107      	bne.n	8002c42 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c32:	4b3f      	ldr	r3, [pc, #252]	; (8002d30 <HAL_RCC_ClockConfig+0x1bc>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d109      	bne.n	8002c52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c3e:	2301      	movs	r3, #1
 8002c40:	e06f      	b.n	8002d22 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c42:	4b3b      	ldr	r3, [pc, #236]	; (8002d30 <HAL_RCC_ClockConfig+0x1bc>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f003 0302 	and.w	r3, r3, #2
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d101      	bne.n	8002c52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c4e:	2301      	movs	r3, #1
 8002c50:	e067      	b.n	8002d22 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c52:	4b37      	ldr	r3, [pc, #220]	; (8002d30 <HAL_RCC_ClockConfig+0x1bc>)
 8002c54:	689b      	ldr	r3, [r3, #8]
 8002c56:	f023 0203 	bic.w	r2, r3, #3
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	685b      	ldr	r3, [r3, #4]
 8002c5e:	4934      	ldr	r1, [pc, #208]	; (8002d30 <HAL_RCC_ClockConfig+0x1bc>)
 8002c60:	4313      	orrs	r3, r2
 8002c62:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002c64:	f7fe fec8 	bl	80019f8 <HAL_GetTick>
 8002c68:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c6a:	e00a      	b.n	8002c82 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c6c:	f7fe fec4 	bl	80019f8 <HAL_GetTick>
 8002c70:	4602      	mov	r2, r0
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	1ad3      	subs	r3, r2, r3
 8002c76:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d901      	bls.n	8002c82 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002c7e:	2303      	movs	r3, #3
 8002c80:	e04f      	b.n	8002d22 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c82:	4b2b      	ldr	r3, [pc, #172]	; (8002d30 <HAL_RCC_ClockConfig+0x1bc>)
 8002c84:	689b      	ldr	r3, [r3, #8]
 8002c86:	f003 020c 	and.w	r2, r3, #12
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	685b      	ldr	r3, [r3, #4]
 8002c8e:	009b      	lsls	r3, r3, #2
 8002c90:	429a      	cmp	r2, r3
 8002c92:	d1eb      	bne.n	8002c6c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002c94:	4b25      	ldr	r3, [pc, #148]	; (8002d2c <HAL_RCC_ClockConfig+0x1b8>)
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f003 030f 	and.w	r3, r3, #15
 8002c9c:	683a      	ldr	r2, [r7, #0]
 8002c9e:	429a      	cmp	r2, r3
 8002ca0:	d20c      	bcs.n	8002cbc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ca2:	4b22      	ldr	r3, [pc, #136]	; (8002d2c <HAL_RCC_ClockConfig+0x1b8>)
 8002ca4:	683a      	ldr	r2, [r7, #0]
 8002ca6:	b2d2      	uxtb	r2, r2
 8002ca8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002caa:	4b20      	ldr	r3, [pc, #128]	; (8002d2c <HAL_RCC_ClockConfig+0x1b8>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f003 030f 	and.w	r3, r3, #15
 8002cb2:	683a      	ldr	r2, [r7, #0]
 8002cb4:	429a      	cmp	r2, r3
 8002cb6:	d001      	beq.n	8002cbc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002cb8:	2301      	movs	r3, #1
 8002cba:	e032      	b.n	8002d22 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f003 0304 	and.w	r3, r3, #4
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d008      	beq.n	8002cda <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002cc8:	4b19      	ldr	r3, [pc, #100]	; (8002d30 <HAL_RCC_ClockConfig+0x1bc>)
 8002cca:	689b      	ldr	r3, [r3, #8]
 8002ccc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	68db      	ldr	r3, [r3, #12]
 8002cd4:	4916      	ldr	r1, [pc, #88]	; (8002d30 <HAL_RCC_ClockConfig+0x1bc>)
 8002cd6:	4313      	orrs	r3, r2
 8002cd8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f003 0308 	and.w	r3, r3, #8
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d009      	beq.n	8002cfa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002ce6:	4b12      	ldr	r3, [pc, #72]	; (8002d30 <HAL_RCC_ClockConfig+0x1bc>)
 8002ce8:	689b      	ldr	r3, [r3, #8]
 8002cea:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	691b      	ldr	r3, [r3, #16]
 8002cf2:	00db      	lsls	r3, r3, #3
 8002cf4:	490e      	ldr	r1, [pc, #56]	; (8002d30 <HAL_RCC_ClockConfig+0x1bc>)
 8002cf6:	4313      	orrs	r3, r2
 8002cf8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002cfa:	f000 f887 	bl	8002e0c <HAL_RCC_GetSysClockFreq>
 8002cfe:	4602      	mov	r2, r0
 8002d00:	4b0b      	ldr	r3, [pc, #44]	; (8002d30 <HAL_RCC_ClockConfig+0x1bc>)
 8002d02:	689b      	ldr	r3, [r3, #8]
 8002d04:	091b      	lsrs	r3, r3, #4
 8002d06:	f003 030f 	and.w	r3, r3, #15
 8002d0a:	490a      	ldr	r1, [pc, #40]	; (8002d34 <HAL_RCC_ClockConfig+0x1c0>)
 8002d0c:	5ccb      	ldrb	r3, [r1, r3]
 8002d0e:	fa22 f303 	lsr.w	r3, r2, r3
 8002d12:	4a09      	ldr	r2, [pc, #36]	; (8002d38 <HAL_RCC_ClockConfig+0x1c4>)
 8002d14:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002d16:	4b09      	ldr	r3, [pc, #36]	; (8002d3c <HAL_RCC_ClockConfig+0x1c8>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	f7fe fd28 	bl	8001770 <HAL_InitTick>

  return HAL_OK;
 8002d20:	2300      	movs	r3, #0
}
 8002d22:	4618      	mov	r0, r3
 8002d24:	3710      	adds	r7, #16
 8002d26:	46bd      	mov	sp, r7
 8002d28:	bd80      	pop	{r7, pc}
 8002d2a:	bf00      	nop
 8002d2c:	40023c00 	.word	0x40023c00
 8002d30:	40023800 	.word	0x40023800
 8002d34:	08008318 	.word	0x08008318
 8002d38:	20000008 	.word	0x20000008
 8002d3c:	2000000c 	.word	0x2000000c

08002d40 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d40:	b480      	push	{r7}
 8002d42:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d44:	4b03      	ldr	r3, [pc, #12]	; (8002d54 <HAL_RCC_GetHCLKFreq+0x14>)
 8002d46:	681b      	ldr	r3, [r3, #0]
}
 8002d48:	4618      	mov	r0, r3
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d50:	4770      	bx	lr
 8002d52:	bf00      	nop
 8002d54:	20000008 	.word	0x20000008

08002d58 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002d5c:	f7ff fff0 	bl	8002d40 <HAL_RCC_GetHCLKFreq>
 8002d60:	4602      	mov	r2, r0
 8002d62:	4b05      	ldr	r3, [pc, #20]	; (8002d78 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002d64:	689b      	ldr	r3, [r3, #8]
 8002d66:	0a9b      	lsrs	r3, r3, #10
 8002d68:	f003 0307 	and.w	r3, r3, #7
 8002d6c:	4903      	ldr	r1, [pc, #12]	; (8002d7c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d6e:	5ccb      	ldrb	r3, [r1, r3]
 8002d70:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d74:	4618      	mov	r0, r3
 8002d76:	bd80      	pop	{r7, pc}
 8002d78:	40023800 	.word	0x40023800
 8002d7c:	08008328 	.word	0x08008328

08002d80 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002d84:	f7ff ffdc 	bl	8002d40 <HAL_RCC_GetHCLKFreq>
 8002d88:	4602      	mov	r2, r0
 8002d8a:	4b05      	ldr	r3, [pc, #20]	; (8002da0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002d8c:	689b      	ldr	r3, [r3, #8]
 8002d8e:	0b5b      	lsrs	r3, r3, #13
 8002d90:	f003 0307 	and.w	r3, r3, #7
 8002d94:	4903      	ldr	r1, [pc, #12]	; (8002da4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002d96:	5ccb      	ldrb	r3, [r1, r3]
 8002d98:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	bd80      	pop	{r7, pc}
 8002da0:	40023800 	.word	0x40023800
 8002da4:	08008328 	.word	0x08008328

08002da8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002da8:	b480      	push	{r7}
 8002daa:	b083      	sub	sp, #12
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
 8002db0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	220f      	movs	r2, #15
 8002db6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002db8:	4b12      	ldr	r3, [pc, #72]	; (8002e04 <HAL_RCC_GetClockConfig+0x5c>)
 8002dba:	689b      	ldr	r3, [r3, #8]
 8002dbc:	f003 0203 	and.w	r2, r3, #3
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002dc4:	4b0f      	ldr	r3, [pc, #60]	; (8002e04 <HAL_RCC_GetClockConfig+0x5c>)
 8002dc6:	689b      	ldr	r3, [r3, #8]
 8002dc8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002dd0:	4b0c      	ldr	r3, [pc, #48]	; (8002e04 <HAL_RCC_GetClockConfig+0x5c>)
 8002dd2:	689b      	ldr	r3, [r3, #8]
 8002dd4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002ddc:	4b09      	ldr	r3, [pc, #36]	; (8002e04 <HAL_RCC_GetClockConfig+0x5c>)
 8002dde:	689b      	ldr	r3, [r3, #8]
 8002de0:	08db      	lsrs	r3, r3, #3
 8002de2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002dea:	4b07      	ldr	r3, [pc, #28]	; (8002e08 <HAL_RCC_GetClockConfig+0x60>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f003 020f 	and.w	r2, r3, #15
 8002df2:	683b      	ldr	r3, [r7, #0]
 8002df4:	601a      	str	r2, [r3, #0]
}
 8002df6:	bf00      	nop
 8002df8:	370c      	adds	r7, #12
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e00:	4770      	bx	lr
 8002e02:	bf00      	nop
 8002e04:	40023800 	.word	0x40023800
 8002e08:	40023c00 	.word	0x40023c00

08002e0c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e0c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e10:	b0ae      	sub	sp, #184	; 0xb8
 8002e12:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002e14:	2300      	movs	r3, #0
 8002e16:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8002e20:	2300      	movs	r3, #0
 8002e22:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8002e26:	2300      	movs	r3, #0
 8002e28:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002e32:	4bcb      	ldr	r3, [pc, #812]	; (8003160 <HAL_RCC_GetSysClockFreq+0x354>)
 8002e34:	689b      	ldr	r3, [r3, #8]
 8002e36:	f003 030c 	and.w	r3, r3, #12
 8002e3a:	2b0c      	cmp	r3, #12
 8002e3c:	f200 8206 	bhi.w	800324c <HAL_RCC_GetSysClockFreq+0x440>
 8002e40:	a201      	add	r2, pc, #4	; (adr r2, 8002e48 <HAL_RCC_GetSysClockFreq+0x3c>)
 8002e42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e46:	bf00      	nop
 8002e48:	08002e7d 	.word	0x08002e7d
 8002e4c:	0800324d 	.word	0x0800324d
 8002e50:	0800324d 	.word	0x0800324d
 8002e54:	0800324d 	.word	0x0800324d
 8002e58:	08002e85 	.word	0x08002e85
 8002e5c:	0800324d 	.word	0x0800324d
 8002e60:	0800324d 	.word	0x0800324d
 8002e64:	0800324d 	.word	0x0800324d
 8002e68:	08002e8d 	.word	0x08002e8d
 8002e6c:	0800324d 	.word	0x0800324d
 8002e70:	0800324d 	.word	0x0800324d
 8002e74:	0800324d 	.word	0x0800324d
 8002e78:	0800307d 	.word	0x0800307d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002e7c:	4bb9      	ldr	r3, [pc, #740]	; (8003164 <HAL_RCC_GetSysClockFreq+0x358>)
 8002e7e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8002e82:	e1e7      	b.n	8003254 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002e84:	4bb8      	ldr	r3, [pc, #736]	; (8003168 <HAL_RCC_GetSysClockFreq+0x35c>)
 8002e86:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002e8a:	e1e3      	b.n	8003254 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002e8c:	4bb4      	ldr	r3, [pc, #720]	; (8003160 <HAL_RCC_GetSysClockFreq+0x354>)
 8002e8e:	685b      	ldr	r3, [r3, #4]
 8002e90:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002e94:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002e98:	4bb1      	ldr	r3, [pc, #708]	; (8003160 <HAL_RCC_GetSysClockFreq+0x354>)
 8002e9a:	685b      	ldr	r3, [r3, #4]
 8002e9c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d071      	beq.n	8002f88 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ea4:	4bae      	ldr	r3, [pc, #696]	; (8003160 <HAL_RCC_GetSysClockFreq+0x354>)
 8002ea6:	685b      	ldr	r3, [r3, #4]
 8002ea8:	099b      	lsrs	r3, r3, #6
 8002eaa:	2200      	movs	r2, #0
 8002eac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002eb0:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8002eb4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002eb8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ebc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002ec6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002eca:	4622      	mov	r2, r4
 8002ecc:	462b      	mov	r3, r5
 8002ece:	f04f 0000 	mov.w	r0, #0
 8002ed2:	f04f 0100 	mov.w	r1, #0
 8002ed6:	0159      	lsls	r1, r3, #5
 8002ed8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002edc:	0150      	lsls	r0, r2, #5
 8002ede:	4602      	mov	r2, r0
 8002ee0:	460b      	mov	r3, r1
 8002ee2:	4621      	mov	r1, r4
 8002ee4:	1a51      	subs	r1, r2, r1
 8002ee6:	6439      	str	r1, [r7, #64]	; 0x40
 8002ee8:	4629      	mov	r1, r5
 8002eea:	eb63 0301 	sbc.w	r3, r3, r1
 8002eee:	647b      	str	r3, [r7, #68]	; 0x44
 8002ef0:	f04f 0200 	mov.w	r2, #0
 8002ef4:	f04f 0300 	mov.w	r3, #0
 8002ef8:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8002efc:	4649      	mov	r1, r9
 8002efe:	018b      	lsls	r3, r1, #6
 8002f00:	4641      	mov	r1, r8
 8002f02:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002f06:	4641      	mov	r1, r8
 8002f08:	018a      	lsls	r2, r1, #6
 8002f0a:	4641      	mov	r1, r8
 8002f0c:	1a51      	subs	r1, r2, r1
 8002f0e:	63b9      	str	r1, [r7, #56]	; 0x38
 8002f10:	4649      	mov	r1, r9
 8002f12:	eb63 0301 	sbc.w	r3, r3, r1
 8002f16:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002f18:	f04f 0200 	mov.w	r2, #0
 8002f1c:	f04f 0300 	mov.w	r3, #0
 8002f20:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8002f24:	4649      	mov	r1, r9
 8002f26:	00cb      	lsls	r3, r1, #3
 8002f28:	4641      	mov	r1, r8
 8002f2a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002f2e:	4641      	mov	r1, r8
 8002f30:	00ca      	lsls	r2, r1, #3
 8002f32:	4610      	mov	r0, r2
 8002f34:	4619      	mov	r1, r3
 8002f36:	4603      	mov	r3, r0
 8002f38:	4622      	mov	r2, r4
 8002f3a:	189b      	adds	r3, r3, r2
 8002f3c:	633b      	str	r3, [r7, #48]	; 0x30
 8002f3e:	462b      	mov	r3, r5
 8002f40:	460a      	mov	r2, r1
 8002f42:	eb42 0303 	adc.w	r3, r2, r3
 8002f46:	637b      	str	r3, [r7, #52]	; 0x34
 8002f48:	f04f 0200 	mov.w	r2, #0
 8002f4c:	f04f 0300 	mov.w	r3, #0
 8002f50:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002f54:	4629      	mov	r1, r5
 8002f56:	024b      	lsls	r3, r1, #9
 8002f58:	4621      	mov	r1, r4
 8002f5a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002f5e:	4621      	mov	r1, r4
 8002f60:	024a      	lsls	r2, r1, #9
 8002f62:	4610      	mov	r0, r2
 8002f64:	4619      	mov	r1, r3
 8002f66:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002f70:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002f74:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8002f78:	f7fd f95c 	bl	8000234 <__aeabi_uldivmod>
 8002f7c:	4602      	mov	r2, r0
 8002f7e:	460b      	mov	r3, r1
 8002f80:	4613      	mov	r3, r2
 8002f82:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002f86:	e067      	b.n	8003058 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f88:	4b75      	ldr	r3, [pc, #468]	; (8003160 <HAL_RCC_GetSysClockFreq+0x354>)
 8002f8a:	685b      	ldr	r3, [r3, #4]
 8002f8c:	099b      	lsrs	r3, r3, #6
 8002f8e:	2200      	movs	r2, #0
 8002f90:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002f94:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8002f98:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002f9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002fa0:	67bb      	str	r3, [r7, #120]	; 0x78
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002fa6:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8002faa:	4622      	mov	r2, r4
 8002fac:	462b      	mov	r3, r5
 8002fae:	f04f 0000 	mov.w	r0, #0
 8002fb2:	f04f 0100 	mov.w	r1, #0
 8002fb6:	0159      	lsls	r1, r3, #5
 8002fb8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002fbc:	0150      	lsls	r0, r2, #5
 8002fbe:	4602      	mov	r2, r0
 8002fc0:	460b      	mov	r3, r1
 8002fc2:	4621      	mov	r1, r4
 8002fc4:	1a51      	subs	r1, r2, r1
 8002fc6:	62b9      	str	r1, [r7, #40]	; 0x28
 8002fc8:	4629      	mov	r1, r5
 8002fca:	eb63 0301 	sbc.w	r3, r3, r1
 8002fce:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002fd0:	f04f 0200 	mov.w	r2, #0
 8002fd4:	f04f 0300 	mov.w	r3, #0
 8002fd8:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8002fdc:	4649      	mov	r1, r9
 8002fde:	018b      	lsls	r3, r1, #6
 8002fe0:	4641      	mov	r1, r8
 8002fe2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002fe6:	4641      	mov	r1, r8
 8002fe8:	018a      	lsls	r2, r1, #6
 8002fea:	4641      	mov	r1, r8
 8002fec:	ebb2 0a01 	subs.w	sl, r2, r1
 8002ff0:	4649      	mov	r1, r9
 8002ff2:	eb63 0b01 	sbc.w	fp, r3, r1
 8002ff6:	f04f 0200 	mov.w	r2, #0
 8002ffa:	f04f 0300 	mov.w	r3, #0
 8002ffe:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003002:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003006:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800300a:	4692      	mov	sl, r2
 800300c:	469b      	mov	fp, r3
 800300e:	4623      	mov	r3, r4
 8003010:	eb1a 0303 	adds.w	r3, sl, r3
 8003014:	623b      	str	r3, [r7, #32]
 8003016:	462b      	mov	r3, r5
 8003018:	eb4b 0303 	adc.w	r3, fp, r3
 800301c:	627b      	str	r3, [r7, #36]	; 0x24
 800301e:	f04f 0200 	mov.w	r2, #0
 8003022:	f04f 0300 	mov.w	r3, #0
 8003026:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800302a:	4629      	mov	r1, r5
 800302c:	028b      	lsls	r3, r1, #10
 800302e:	4621      	mov	r1, r4
 8003030:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003034:	4621      	mov	r1, r4
 8003036:	028a      	lsls	r2, r1, #10
 8003038:	4610      	mov	r0, r2
 800303a:	4619      	mov	r1, r3
 800303c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003040:	2200      	movs	r2, #0
 8003042:	673b      	str	r3, [r7, #112]	; 0x70
 8003044:	677a      	str	r2, [r7, #116]	; 0x74
 8003046:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800304a:	f7fd f8f3 	bl	8000234 <__aeabi_uldivmod>
 800304e:	4602      	mov	r2, r0
 8003050:	460b      	mov	r3, r1
 8003052:	4613      	mov	r3, r2
 8003054:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003058:	4b41      	ldr	r3, [pc, #260]	; (8003160 <HAL_RCC_GetSysClockFreq+0x354>)
 800305a:	685b      	ldr	r3, [r3, #4]
 800305c:	0c1b      	lsrs	r3, r3, #16
 800305e:	f003 0303 	and.w	r3, r3, #3
 8003062:	3301      	adds	r3, #1
 8003064:	005b      	lsls	r3, r3, #1
 8003066:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 800306a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800306e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003072:	fbb2 f3f3 	udiv	r3, r2, r3
 8003076:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800307a:	e0eb      	b.n	8003254 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800307c:	4b38      	ldr	r3, [pc, #224]	; (8003160 <HAL_RCC_GetSysClockFreq+0x354>)
 800307e:	685b      	ldr	r3, [r3, #4]
 8003080:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003084:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003088:	4b35      	ldr	r3, [pc, #212]	; (8003160 <HAL_RCC_GetSysClockFreq+0x354>)
 800308a:	685b      	ldr	r3, [r3, #4]
 800308c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003090:	2b00      	cmp	r3, #0
 8003092:	d06b      	beq.n	800316c <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003094:	4b32      	ldr	r3, [pc, #200]	; (8003160 <HAL_RCC_GetSysClockFreq+0x354>)
 8003096:	685b      	ldr	r3, [r3, #4]
 8003098:	099b      	lsrs	r3, r3, #6
 800309a:	2200      	movs	r2, #0
 800309c:	66bb      	str	r3, [r7, #104]	; 0x68
 800309e:	66fa      	str	r2, [r7, #108]	; 0x6c
 80030a0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80030a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80030a6:	663b      	str	r3, [r7, #96]	; 0x60
 80030a8:	2300      	movs	r3, #0
 80030aa:	667b      	str	r3, [r7, #100]	; 0x64
 80030ac:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80030b0:	4622      	mov	r2, r4
 80030b2:	462b      	mov	r3, r5
 80030b4:	f04f 0000 	mov.w	r0, #0
 80030b8:	f04f 0100 	mov.w	r1, #0
 80030bc:	0159      	lsls	r1, r3, #5
 80030be:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80030c2:	0150      	lsls	r0, r2, #5
 80030c4:	4602      	mov	r2, r0
 80030c6:	460b      	mov	r3, r1
 80030c8:	4621      	mov	r1, r4
 80030ca:	1a51      	subs	r1, r2, r1
 80030cc:	61b9      	str	r1, [r7, #24]
 80030ce:	4629      	mov	r1, r5
 80030d0:	eb63 0301 	sbc.w	r3, r3, r1
 80030d4:	61fb      	str	r3, [r7, #28]
 80030d6:	f04f 0200 	mov.w	r2, #0
 80030da:	f04f 0300 	mov.w	r3, #0
 80030de:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80030e2:	4659      	mov	r1, fp
 80030e4:	018b      	lsls	r3, r1, #6
 80030e6:	4651      	mov	r1, sl
 80030e8:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80030ec:	4651      	mov	r1, sl
 80030ee:	018a      	lsls	r2, r1, #6
 80030f0:	4651      	mov	r1, sl
 80030f2:	ebb2 0801 	subs.w	r8, r2, r1
 80030f6:	4659      	mov	r1, fp
 80030f8:	eb63 0901 	sbc.w	r9, r3, r1
 80030fc:	f04f 0200 	mov.w	r2, #0
 8003100:	f04f 0300 	mov.w	r3, #0
 8003104:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003108:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800310c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003110:	4690      	mov	r8, r2
 8003112:	4699      	mov	r9, r3
 8003114:	4623      	mov	r3, r4
 8003116:	eb18 0303 	adds.w	r3, r8, r3
 800311a:	613b      	str	r3, [r7, #16]
 800311c:	462b      	mov	r3, r5
 800311e:	eb49 0303 	adc.w	r3, r9, r3
 8003122:	617b      	str	r3, [r7, #20]
 8003124:	f04f 0200 	mov.w	r2, #0
 8003128:	f04f 0300 	mov.w	r3, #0
 800312c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8003130:	4629      	mov	r1, r5
 8003132:	024b      	lsls	r3, r1, #9
 8003134:	4621      	mov	r1, r4
 8003136:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800313a:	4621      	mov	r1, r4
 800313c:	024a      	lsls	r2, r1, #9
 800313e:	4610      	mov	r0, r2
 8003140:	4619      	mov	r1, r3
 8003142:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003146:	2200      	movs	r2, #0
 8003148:	65bb      	str	r3, [r7, #88]	; 0x58
 800314a:	65fa      	str	r2, [r7, #92]	; 0x5c
 800314c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003150:	f7fd f870 	bl	8000234 <__aeabi_uldivmod>
 8003154:	4602      	mov	r2, r0
 8003156:	460b      	mov	r3, r1
 8003158:	4613      	mov	r3, r2
 800315a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800315e:	e065      	b.n	800322c <HAL_RCC_GetSysClockFreq+0x420>
 8003160:	40023800 	.word	0x40023800
 8003164:	00f42400 	.word	0x00f42400
 8003168:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800316c:	4b3d      	ldr	r3, [pc, #244]	; (8003264 <HAL_RCC_GetSysClockFreq+0x458>)
 800316e:	685b      	ldr	r3, [r3, #4]
 8003170:	099b      	lsrs	r3, r3, #6
 8003172:	2200      	movs	r2, #0
 8003174:	4618      	mov	r0, r3
 8003176:	4611      	mov	r1, r2
 8003178:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800317c:	653b      	str	r3, [r7, #80]	; 0x50
 800317e:	2300      	movs	r3, #0
 8003180:	657b      	str	r3, [r7, #84]	; 0x54
 8003182:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8003186:	4642      	mov	r2, r8
 8003188:	464b      	mov	r3, r9
 800318a:	f04f 0000 	mov.w	r0, #0
 800318e:	f04f 0100 	mov.w	r1, #0
 8003192:	0159      	lsls	r1, r3, #5
 8003194:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003198:	0150      	lsls	r0, r2, #5
 800319a:	4602      	mov	r2, r0
 800319c:	460b      	mov	r3, r1
 800319e:	4641      	mov	r1, r8
 80031a0:	1a51      	subs	r1, r2, r1
 80031a2:	60b9      	str	r1, [r7, #8]
 80031a4:	4649      	mov	r1, r9
 80031a6:	eb63 0301 	sbc.w	r3, r3, r1
 80031aa:	60fb      	str	r3, [r7, #12]
 80031ac:	f04f 0200 	mov.w	r2, #0
 80031b0:	f04f 0300 	mov.w	r3, #0
 80031b4:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80031b8:	4659      	mov	r1, fp
 80031ba:	018b      	lsls	r3, r1, #6
 80031bc:	4651      	mov	r1, sl
 80031be:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80031c2:	4651      	mov	r1, sl
 80031c4:	018a      	lsls	r2, r1, #6
 80031c6:	4651      	mov	r1, sl
 80031c8:	1a54      	subs	r4, r2, r1
 80031ca:	4659      	mov	r1, fp
 80031cc:	eb63 0501 	sbc.w	r5, r3, r1
 80031d0:	f04f 0200 	mov.w	r2, #0
 80031d4:	f04f 0300 	mov.w	r3, #0
 80031d8:	00eb      	lsls	r3, r5, #3
 80031da:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80031de:	00e2      	lsls	r2, r4, #3
 80031e0:	4614      	mov	r4, r2
 80031e2:	461d      	mov	r5, r3
 80031e4:	4643      	mov	r3, r8
 80031e6:	18e3      	adds	r3, r4, r3
 80031e8:	603b      	str	r3, [r7, #0]
 80031ea:	464b      	mov	r3, r9
 80031ec:	eb45 0303 	adc.w	r3, r5, r3
 80031f0:	607b      	str	r3, [r7, #4]
 80031f2:	f04f 0200 	mov.w	r2, #0
 80031f6:	f04f 0300 	mov.w	r3, #0
 80031fa:	e9d7 4500 	ldrd	r4, r5, [r7]
 80031fe:	4629      	mov	r1, r5
 8003200:	028b      	lsls	r3, r1, #10
 8003202:	4621      	mov	r1, r4
 8003204:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003208:	4621      	mov	r1, r4
 800320a:	028a      	lsls	r2, r1, #10
 800320c:	4610      	mov	r0, r2
 800320e:	4619      	mov	r1, r3
 8003210:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003214:	2200      	movs	r2, #0
 8003216:	64bb      	str	r3, [r7, #72]	; 0x48
 8003218:	64fa      	str	r2, [r7, #76]	; 0x4c
 800321a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800321e:	f7fd f809 	bl	8000234 <__aeabi_uldivmod>
 8003222:	4602      	mov	r2, r0
 8003224:	460b      	mov	r3, r1
 8003226:	4613      	mov	r3, r2
 8003228:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800322c:	4b0d      	ldr	r3, [pc, #52]	; (8003264 <HAL_RCC_GetSysClockFreq+0x458>)
 800322e:	685b      	ldr	r3, [r3, #4]
 8003230:	0f1b      	lsrs	r3, r3, #28
 8003232:	f003 0307 	and.w	r3, r3, #7
 8003236:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 800323a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800323e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003242:	fbb2 f3f3 	udiv	r3, r2, r3
 8003246:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800324a:	e003      	b.n	8003254 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800324c:	4b06      	ldr	r3, [pc, #24]	; (8003268 <HAL_RCC_GetSysClockFreq+0x45c>)
 800324e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003252:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003254:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8003258:	4618      	mov	r0, r3
 800325a:	37b8      	adds	r7, #184	; 0xb8
 800325c:	46bd      	mov	sp, r7
 800325e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003262:	bf00      	nop
 8003264:	40023800 	.word	0x40023800
 8003268:	00f42400 	.word	0x00f42400

0800326c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	b086      	sub	sp, #24
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2b00      	cmp	r3, #0
 8003278:	d101      	bne.n	800327e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800327a:	2301      	movs	r3, #1
 800327c:	e28d      	b.n	800379a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f003 0301 	and.w	r3, r3, #1
 8003286:	2b00      	cmp	r3, #0
 8003288:	f000 8083 	beq.w	8003392 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800328c:	4b94      	ldr	r3, [pc, #592]	; (80034e0 <HAL_RCC_OscConfig+0x274>)
 800328e:	689b      	ldr	r3, [r3, #8]
 8003290:	f003 030c 	and.w	r3, r3, #12
 8003294:	2b04      	cmp	r3, #4
 8003296:	d019      	beq.n	80032cc <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003298:	4b91      	ldr	r3, [pc, #580]	; (80034e0 <HAL_RCC_OscConfig+0x274>)
 800329a:	689b      	ldr	r3, [r3, #8]
 800329c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80032a0:	2b08      	cmp	r3, #8
 80032a2:	d106      	bne.n	80032b2 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80032a4:	4b8e      	ldr	r3, [pc, #568]	; (80034e0 <HAL_RCC_OscConfig+0x274>)
 80032a6:	685b      	ldr	r3, [r3, #4]
 80032a8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032ac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80032b0:	d00c      	beq.n	80032cc <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80032b2:	4b8b      	ldr	r3, [pc, #556]	; (80034e0 <HAL_RCC_OscConfig+0x274>)
 80032b4:	689b      	ldr	r3, [r3, #8]
 80032b6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80032ba:	2b0c      	cmp	r3, #12
 80032bc:	d112      	bne.n	80032e4 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80032be:	4b88      	ldr	r3, [pc, #544]	; (80034e0 <HAL_RCC_OscConfig+0x274>)
 80032c0:	685b      	ldr	r3, [r3, #4]
 80032c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032c6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80032ca:	d10b      	bne.n	80032e4 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032cc:	4b84      	ldr	r3, [pc, #528]	; (80034e0 <HAL_RCC_OscConfig+0x274>)
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d05b      	beq.n	8003390 <HAL_RCC_OscConfig+0x124>
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	685b      	ldr	r3, [r3, #4]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d157      	bne.n	8003390 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80032e0:	2301      	movs	r3, #1
 80032e2:	e25a      	b.n	800379a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	685b      	ldr	r3, [r3, #4]
 80032e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032ec:	d106      	bne.n	80032fc <HAL_RCC_OscConfig+0x90>
 80032ee:	4b7c      	ldr	r3, [pc, #496]	; (80034e0 <HAL_RCC_OscConfig+0x274>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	4a7b      	ldr	r2, [pc, #492]	; (80034e0 <HAL_RCC_OscConfig+0x274>)
 80032f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032f8:	6013      	str	r3, [r2, #0]
 80032fa:	e01d      	b.n	8003338 <HAL_RCC_OscConfig+0xcc>
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	685b      	ldr	r3, [r3, #4]
 8003300:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003304:	d10c      	bne.n	8003320 <HAL_RCC_OscConfig+0xb4>
 8003306:	4b76      	ldr	r3, [pc, #472]	; (80034e0 <HAL_RCC_OscConfig+0x274>)
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	4a75      	ldr	r2, [pc, #468]	; (80034e0 <HAL_RCC_OscConfig+0x274>)
 800330c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003310:	6013      	str	r3, [r2, #0]
 8003312:	4b73      	ldr	r3, [pc, #460]	; (80034e0 <HAL_RCC_OscConfig+0x274>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	4a72      	ldr	r2, [pc, #456]	; (80034e0 <HAL_RCC_OscConfig+0x274>)
 8003318:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800331c:	6013      	str	r3, [r2, #0]
 800331e:	e00b      	b.n	8003338 <HAL_RCC_OscConfig+0xcc>
 8003320:	4b6f      	ldr	r3, [pc, #444]	; (80034e0 <HAL_RCC_OscConfig+0x274>)
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	4a6e      	ldr	r2, [pc, #440]	; (80034e0 <HAL_RCC_OscConfig+0x274>)
 8003326:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800332a:	6013      	str	r3, [r2, #0]
 800332c:	4b6c      	ldr	r3, [pc, #432]	; (80034e0 <HAL_RCC_OscConfig+0x274>)
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4a6b      	ldr	r2, [pc, #428]	; (80034e0 <HAL_RCC_OscConfig+0x274>)
 8003332:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003336:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	685b      	ldr	r3, [r3, #4]
 800333c:	2b00      	cmp	r3, #0
 800333e:	d013      	beq.n	8003368 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003340:	f7fe fb5a 	bl	80019f8 <HAL_GetTick>
 8003344:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003346:	e008      	b.n	800335a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003348:	f7fe fb56 	bl	80019f8 <HAL_GetTick>
 800334c:	4602      	mov	r2, r0
 800334e:	693b      	ldr	r3, [r7, #16]
 8003350:	1ad3      	subs	r3, r2, r3
 8003352:	2b64      	cmp	r3, #100	; 0x64
 8003354:	d901      	bls.n	800335a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003356:	2303      	movs	r3, #3
 8003358:	e21f      	b.n	800379a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800335a:	4b61      	ldr	r3, [pc, #388]	; (80034e0 <HAL_RCC_OscConfig+0x274>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003362:	2b00      	cmp	r3, #0
 8003364:	d0f0      	beq.n	8003348 <HAL_RCC_OscConfig+0xdc>
 8003366:	e014      	b.n	8003392 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003368:	f7fe fb46 	bl	80019f8 <HAL_GetTick>
 800336c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800336e:	e008      	b.n	8003382 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003370:	f7fe fb42 	bl	80019f8 <HAL_GetTick>
 8003374:	4602      	mov	r2, r0
 8003376:	693b      	ldr	r3, [r7, #16]
 8003378:	1ad3      	subs	r3, r2, r3
 800337a:	2b64      	cmp	r3, #100	; 0x64
 800337c:	d901      	bls.n	8003382 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800337e:	2303      	movs	r3, #3
 8003380:	e20b      	b.n	800379a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003382:	4b57      	ldr	r3, [pc, #348]	; (80034e0 <HAL_RCC_OscConfig+0x274>)
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800338a:	2b00      	cmp	r3, #0
 800338c:	d1f0      	bne.n	8003370 <HAL_RCC_OscConfig+0x104>
 800338e:	e000      	b.n	8003392 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003390:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f003 0302 	and.w	r3, r3, #2
 800339a:	2b00      	cmp	r3, #0
 800339c:	d06f      	beq.n	800347e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800339e:	4b50      	ldr	r3, [pc, #320]	; (80034e0 <HAL_RCC_OscConfig+0x274>)
 80033a0:	689b      	ldr	r3, [r3, #8]
 80033a2:	f003 030c 	and.w	r3, r3, #12
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d017      	beq.n	80033da <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80033aa:	4b4d      	ldr	r3, [pc, #308]	; (80034e0 <HAL_RCC_OscConfig+0x274>)
 80033ac:	689b      	ldr	r3, [r3, #8]
 80033ae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80033b2:	2b08      	cmp	r3, #8
 80033b4:	d105      	bne.n	80033c2 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80033b6:	4b4a      	ldr	r3, [pc, #296]	; (80034e0 <HAL_RCC_OscConfig+0x274>)
 80033b8:	685b      	ldr	r3, [r3, #4]
 80033ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d00b      	beq.n	80033da <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80033c2:	4b47      	ldr	r3, [pc, #284]	; (80034e0 <HAL_RCC_OscConfig+0x274>)
 80033c4:	689b      	ldr	r3, [r3, #8]
 80033c6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80033ca:	2b0c      	cmp	r3, #12
 80033cc:	d11c      	bne.n	8003408 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80033ce:	4b44      	ldr	r3, [pc, #272]	; (80034e0 <HAL_RCC_OscConfig+0x274>)
 80033d0:	685b      	ldr	r3, [r3, #4]
 80033d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d116      	bne.n	8003408 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033da:	4b41      	ldr	r3, [pc, #260]	; (80034e0 <HAL_RCC_OscConfig+0x274>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f003 0302 	and.w	r3, r3, #2
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d005      	beq.n	80033f2 <HAL_RCC_OscConfig+0x186>
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	68db      	ldr	r3, [r3, #12]
 80033ea:	2b01      	cmp	r3, #1
 80033ec:	d001      	beq.n	80033f2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80033ee:	2301      	movs	r3, #1
 80033f0:	e1d3      	b.n	800379a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033f2:	4b3b      	ldr	r3, [pc, #236]	; (80034e0 <HAL_RCC_OscConfig+0x274>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	691b      	ldr	r3, [r3, #16]
 80033fe:	00db      	lsls	r3, r3, #3
 8003400:	4937      	ldr	r1, [pc, #220]	; (80034e0 <HAL_RCC_OscConfig+0x274>)
 8003402:	4313      	orrs	r3, r2
 8003404:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003406:	e03a      	b.n	800347e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	68db      	ldr	r3, [r3, #12]
 800340c:	2b00      	cmp	r3, #0
 800340e:	d020      	beq.n	8003452 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003410:	4b34      	ldr	r3, [pc, #208]	; (80034e4 <HAL_RCC_OscConfig+0x278>)
 8003412:	2201      	movs	r2, #1
 8003414:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003416:	f7fe faef 	bl	80019f8 <HAL_GetTick>
 800341a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800341c:	e008      	b.n	8003430 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800341e:	f7fe faeb 	bl	80019f8 <HAL_GetTick>
 8003422:	4602      	mov	r2, r0
 8003424:	693b      	ldr	r3, [r7, #16]
 8003426:	1ad3      	subs	r3, r2, r3
 8003428:	2b02      	cmp	r3, #2
 800342a:	d901      	bls.n	8003430 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800342c:	2303      	movs	r3, #3
 800342e:	e1b4      	b.n	800379a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003430:	4b2b      	ldr	r3, [pc, #172]	; (80034e0 <HAL_RCC_OscConfig+0x274>)
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f003 0302 	and.w	r3, r3, #2
 8003438:	2b00      	cmp	r3, #0
 800343a:	d0f0      	beq.n	800341e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800343c:	4b28      	ldr	r3, [pc, #160]	; (80034e0 <HAL_RCC_OscConfig+0x274>)
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	691b      	ldr	r3, [r3, #16]
 8003448:	00db      	lsls	r3, r3, #3
 800344a:	4925      	ldr	r1, [pc, #148]	; (80034e0 <HAL_RCC_OscConfig+0x274>)
 800344c:	4313      	orrs	r3, r2
 800344e:	600b      	str	r3, [r1, #0]
 8003450:	e015      	b.n	800347e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003452:	4b24      	ldr	r3, [pc, #144]	; (80034e4 <HAL_RCC_OscConfig+0x278>)
 8003454:	2200      	movs	r2, #0
 8003456:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003458:	f7fe face 	bl	80019f8 <HAL_GetTick>
 800345c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800345e:	e008      	b.n	8003472 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003460:	f7fe faca 	bl	80019f8 <HAL_GetTick>
 8003464:	4602      	mov	r2, r0
 8003466:	693b      	ldr	r3, [r7, #16]
 8003468:	1ad3      	subs	r3, r2, r3
 800346a:	2b02      	cmp	r3, #2
 800346c:	d901      	bls.n	8003472 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800346e:	2303      	movs	r3, #3
 8003470:	e193      	b.n	800379a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003472:	4b1b      	ldr	r3, [pc, #108]	; (80034e0 <HAL_RCC_OscConfig+0x274>)
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f003 0302 	and.w	r3, r3, #2
 800347a:	2b00      	cmp	r3, #0
 800347c:	d1f0      	bne.n	8003460 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f003 0308 	and.w	r3, r3, #8
 8003486:	2b00      	cmp	r3, #0
 8003488:	d036      	beq.n	80034f8 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	695b      	ldr	r3, [r3, #20]
 800348e:	2b00      	cmp	r3, #0
 8003490:	d016      	beq.n	80034c0 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003492:	4b15      	ldr	r3, [pc, #84]	; (80034e8 <HAL_RCC_OscConfig+0x27c>)
 8003494:	2201      	movs	r2, #1
 8003496:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003498:	f7fe faae 	bl	80019f8 <HAL_GetTick>
 800349c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800349e:	e008      	b.n	80034b2 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80034a0:	f7fe faaa 	bl	80019f8 <HAL_GetTick>
 80034a4:	4602      	mov	r2, r0
 80034a6:	693b      	ldr	r3, [r7, #16]
 80034a8:	1ad3      	subs	r3, r2, r3
 80034aa:	2b02      	cmp	r3, #2
 80034ac:	d901      	bls.n	80034b2 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80034ae:	2303      	movs	r3, #3
 80034b0:	e173      	b.n	800379a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034b2:	4b0b      	ldr	r3, [pc, #44]	; (80034e0 <HAL_RCC_OscConfig+0x274>)
 80034b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034b6:	f003 0302 	and.w	r3, r3, #2
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d0f0      	beq.n	80034a0 <HAL_RCC_OscConfig+0x234>
 80034be:	e01b      	b.n	80034f8 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80034c0:	4b09      	ldr	r3, [pc, #36]	; (80034e8 <HAL_RCC_OscConfig+0x27c>)
 80034c2:	2200      	movs	r2, #0
 80034c4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034c6:	f7fe fa97 	bl	80019f8 <HAL_GetTick>
 80034ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034cc:	e00e      	b.n	80034ec <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80034ce:	f7fe fa93 	bl	80019f8 <HAL_GetTick>
 80034d2:	4602      	mov	r2, r0
 80034d4:	693b      	ldr	r3, [r7, #16]
 80034d6:	1ad3      	subs	r3, r2, r3
 80034d8:	2b02      	cmp	r3, #2
 80034da:	d907      	bls.n	80034ec <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80034dc:	2303      	movs	r3, #3
 80034de:	e15c      	b.n	800379a <HAL_RCC_OscConfig+0x52e>
 80034e0:	40023800 	.word	0x40023800
 80034e4:	42470000 	.word	0x42470000
 80034e8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034ec:	4b8a      	ldr	r3, [pc, #552]	; (8003718 <HAL_RCC_OscConfig+0x4ac>)
 80034ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034f0:	f003 0302 	and.w	r3, r3, #2
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d1ea      	bne.n	80034ce <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f003 0304 	and.w	r3, r3, #4
 8003500:	2b00      	cmp	r3, #0
 8003502:	f000 8097 	beq.w	8003634 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003506:	2300      	movs	r3, #0
 8003508:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800350a:	4b83      	ldr	r3, [pc, #524]	; (8003718 <HAL_RCC_OscConfig+0x4ac>)
 800350c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800350e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003512:	2b00      	cmp	r3, #0
 8003514:	d10f      	bne.n	8003536 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003516:	2300      	movs	r3, #0
 8003518:	60bb      	str	r3, [r7, #8]
 800351a:	4b7f      	ldr	r3, [pc, #508]	; (8003718 <HAL_RCC_OscConfig+0x4ac>)
 800351c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800351e:	4a7e      	ldr	r2, [pc, #504]	; (8003718 <HAL_RCC_OscConfig+0x4ac>)
 8003520:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003524:	6413      	str	r3, [r2, #64]	; 0x40
 8003526:	4b7c      	ldr	r3, [pc, #496]	; (8003718 <HAL_RCC_OscConfig+0x4ac>)
 8003528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800352a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800352e:	60bb      	str	r3, [r7, #8]
 8003530:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003532:	2301      	movs	r3, #1
 8003534:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003536:	4b79      	ldr	r3, [pc, #484]	; (800371c <HAL_RCC_OscConfig+0x4b0>)
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800353e:	2b00      	cmp	r3, #0
 8003540:	d118      	bne.n	8003574 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003542:	4b76      	ldr	r3, [pc, #472]	; (800371c <HAL_RCC_OscConfig+0x4b0>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	4a75      	ldr	r2, [pc, #468]	; (800371c <HAL_RCC_OscConfig+0x4b0>)
 8003548:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800354c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800354e:	f7fe fa53 	bl	80019f8 <HAL_GetTick>
 8003552:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003554:	e008      	b.n	8003568 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003556:	f7fe fa4f 	bl	80019f8 <HAL_GetTick>
 800355a:	4602      	mov	r2, r0
 800355c:	693b      	ldr	r3, [r7, #16]
 800355e:	1ad3      	subs	r3, r2, r3
 8003560:	2b02      	cmp	r3, #2
 8003562:	d901      	bls.n	8003568 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003564:	2303      	movs	r3, #3
 8003566:	e118      	b.n	800379a <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003568:	4b6c      	ldr	r3, [pc, #432]	; (800371c <HAL_RCC_OscConfig+0x4b0>)
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003570:	2b00      	cmp	r3, #0
 8003572:	d0f0      	beq.n	8003556 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	689b      	ldr	r3, [r3, #8]
 8003578:	2b01      	cmp	r3, #1
 800357a:	d106      	bne.n	800358a <HAL_RCC_OscConfig+0x31e>
 800357c:	4b66      	ldr	r3, [pc, #408]	; (8003718 <HAL_RCC_OscConfig+0x4ac>)
 800357e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003580:	4a65      	ldr	r2, [pc, #404]	; (8003718 <HAL_RCC_OscConfig+0x4ac>)
 8003582:	f043 0301 	orr.w	r3, r3, #1
 8003586:	6713      	str	r3, [r2, #112]	; 0x70
 8003588:	e01c      	b.n	80035c4 <HAL_RCC_OscConfig+0x358>
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	689b      	ldr	r3, [r3, #8]
 800358e:	2b05      	cmp	r3, #5
 8003590:	d10c      	bne.n	80035ac <HAL_RCC_OscConfig+0x340>
 8003592:	4b61      	ldr	r3, [pc, #388]	; (8003718 <HAL_RCC_OscConfig+0x4ac>)
 8003594:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003596:	4a60      	ldr	r2, [pc, #384]	; (8003718 <HAL_RCC_OscConfig+0x4ac>)
 8003598:	f043 0304 	orr.w	r3, r3, #4
 800359c:	6713      	str	r3, [r2, #112]	; 0x70
 800359e:	4b5e      	ldr	r3, [pc, #376]	; (8003718 <HAL_RCC_OscConfig+0x4ac>)
 80035a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035a2:	4a5d      	ldr	r2, [pc, #372]	; (8003718 <HAL_RCC_OscConfig+0x4ac>)
 80035a4:	f043 0301 	orr.w	r3, r3, #1
 80035a8:	6713      	str	r3, [r2, #112]	; 0x70
 80035aa:	e00b      	b.n	80035c4 <HAL_RCC_OscConfig+0x358>
 80035ac:	4b5a      	ldr	r3, [pc, #360]	; (8003718 <HAL_RCC_OscConfig+0x4ac>)
 80035ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035b0:	4a59      	ldr	r2, [pc, #356]	; (8003718 <HAL_RCC_OscConfig+0x4ac>)
 80035b2:	f023 0301 	bic.w	r3, r3, #1
 80035b6:	6713      	str	r3, [r2, #112]	; 0x70
 80035b8:	4b57      	ldr	r3, [pc, #348]	; (8003718 <HAL_RCC_OscConfig+0x4ac>)
 80035ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035bc:	4a56      	ldr	r2, [pc, #344]	; (8003718 <HAL_RCC_OscConfig+0x4ac>)
 80035be:	f023 0304 	bic.w	r3, r3, #4
 80035c2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	689b      	ldr	r3, [r3, #8]
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d015      	beq.n	80035f8 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035cc:	f7fe fa14 	bl	80019f8 <HAL_GetTick>
 80035d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035d2:	e00a      	b.n	80035ea <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80035d4:	f7fe fa10 	bl	80019f8 <HAL_GetTick>
 80035d8:	4602      	mov	r2, r0
 80035da:	693b      	ldr	r3, [r7, #16]
 80035dc:	1ad3      	subs	r3, r2, r3
 80035de:	f241 3288 	movw	r2, #5000	; 0x1388
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d901      	bls.n	80035ea <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80035e6:	2303      	movs	r3, #3
 80035e8:	e0d7      	b.n	800379a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035ea:	4b4b      	ldr	r3, [pc, #300]	; (8003718 <HAL_RCC_OscConfig+0x4ac>)
 80035ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035ee:	f003 0302 	and.w	r3, r3, #2
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d0ee      	beq.n	80035d4 <HAL_RCC_OscConfig+0x368>
 80035f6:	e014      	b.n	8003622 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035f8:	f7fe f9fe 	bl	80019f8 <HAL_GetTick>
 80035fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035fe:	e00a      	b.n	8003616 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003600:	f7fe f9fa 	bl	80019f8 <HAL_GetTick>
 8003604:	4602      	mov	r2, r0
 8003606:	693b      	ldr	r3, [r7, #16]
 8003608:	1ad3      	subs	r3, r2, r3
 800360a:	f241 3288 	movw	r2, #5000	; 0x1388
 800360e:	4293      	cmp	r3, r2
 8003610:	d901      	bls.n	8003616 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003612:	2303      	movs	r3, #3
 8003614:	e0c1      	b.n	800379a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003616:	4b40      	ldr	r3, [pc, #256]	; (8003718 <HAL_RCC_OscConfig+0x4ac>)
 8003618:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800361a:	f003 0302 	and.w	r3, r3, #2
 800361e:	2b00      	cmp	r3, #0
 8003620:	d1ee      	bne.n	8003600 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003622:	7dfb      	ldrb	r3, [r7, #23]
 8003624:	2b01      	cmp	r3, #1
 8003626:	d105      	bne.n	8003634 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003628:	4b3b      	ldr	r3, [pc, #236]	; (8003718 <HAL_RCC_OscConfig+0x4ac>)
 800362a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800362c:	4a3a      	ldr	r2, [pc, #232]	; (8003718 <HAL_RCC_OscConfig+0x4ac>)
 800362e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003632:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	699b      	ldr	r3, [r3, #24]
 8003638:	2b00      	cmp	r3, #0
 800363a:	f000 80ad 	beq.w	8003798 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800363e:	4b36      	ldr	r3, [pc, #216]	; (8003718 <HAL_RCC_OscConfig+0x4ac>)
 8003640:	689b      	ldr	r3, [r3, #8]
 8003642:	f003 030c 	and.w	r3, r3, #12
 8003646:	2b08      	cmp	r3, #8
 8003648:	d060      	beq.n	800370c <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	699b      	ldr	r3, [r3, #24]
 800364e:	2b02      	cmp	r3, #2
 8003650:	d145      	bne.n	80036de <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003652:	4b33      	ldr	r3, [pc, #204]	; (8003720 <HAL_RCC_OscConfig+0x4b4>)
 8003654:	2200      	movs	r2, #0
 8003656:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003658:	f7fe f9ce 	bl	80019f8 <HAL_GetTick>
 800365c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800365e:	e008      	b.n	8003672 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003660:	f7fe f9ca 	bl	80019f8 <HAL_GetTick>
 8003664:	4602      	mov	r2, r0
 8003666:	693b      	ldr	r3, [r7, #16]
 8003668:	1ad3      	subs	r3, r2, r3
 800366a:	2b02      	cmp	r3, #2
 800366c:	d901      	bls.n	8003672 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800366e:	2303      	movs	r3, #3
 8003670:	e093      	b.n	800379a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003672:	4b29      	ldr	r3, [pc, #164]	; (8003718 <HAL_RCC_OscConfig+0x4ac>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800367a:	2b00      	cmp	r3, #0
 800367c:	d1f0      	bne.n	8003660 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	69da      	ldr	r2, [r3, #28]
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6a1b      	ldr	r3, [r3, #32]
 8003686:	431a      	orrs	r2, r3
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800368c:	019b      	lsls	r3, r3, #6
 800368e:	431a      	orrs	r2, r3
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003694:	085b      	lsrs	r3, r3, #1
 8003696:	3b01      	subs	r3, #1
 8003698:	041b      	lsls	r3, r3, #16
 800369a:	431a      	orrs	r2, r3
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036a0:	061b      	lsls	r3, r3, #24
 80036a2:	431a      	orrs	r2, r3
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036a8:	071b      	lsls	r3, r3, #28
 80036aa:	491b      	ldr	r1, [pc, #108]	; (8003718 <HAL_RCC_OscConfig+0x4ac>)
 80036ac:	4313      	orrs	r3, r2
 80036ae:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80036b0:	4b1b      	ldr	r3, [pc, #108]	; (8003720 <HAL_RCC_OscConfig+0x4b4>)
 80036b2:	2201      	movs	r2, #1
 80036b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036b6:	f7fe f99f 	bl	80019f8 <HAL_GetTick>
 80036ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036bc:	e008      	b.n	80036d0 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036be:	f7fe f99b 	bl	80019f8 <HAL_GetTick>
 80036c2:	4602      	mov	r2, r0
 80036c4:	693b      	ldr	r3, [r7, #16]
 80036c6:	1ad3      	subs	r3, r2, r3
 80036c8:	2b02      	cmp	r3, #2
 80036ca:	d901      	bls.n	80036d0 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80036cc:	2303      	movs	r3, #3
 80036ce:	e064      	b.n	800379a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036d0:	4b11      	ldr	r3, [pc, #68]	; (8003718 <HAL_RCC_OscConfig+0x4ac>)
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d0f0      	beq.n	80036be <HAL_RCC_OscConfig+0x452>
 80036dc:	e05c      	b.n	8003798 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036de:	4b10      	ldr	r3, [pc, #64]	; (8003720 <HAL_RCC_OscConfig+0x4b4>)
 80036e0:	2200      	movs	r2, #0
 80036e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036e4:	f7fe f988 	bl	80019f8 <HAL_GetTick>
 80036e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036ea:	e008      	b.n	80036fe <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036ec:	f7fe f984 	bl	80019f8 <HAL_GetTick>
 80036f0:	4602      	mov	r2, r0
 80036f2:	693b      	ldr	r3, [r7, #16]
 80036f4:	1ad3      	subs	r3, r2, r3
 80036f6:	2b02      	cmp	r3, #2
 80036f8:	d901      	bls.n	80036fe <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80036fa:	2303      	movs	r3, #3
 80036fc:	e04d      	b.n	800379a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036fe:	4b06      	ldr	r3, [pc, #24]	; (8003718 <HAL_RCC_OscConfig+0x4ac>)
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003706:	2b00      	cmp	r3, #0
 8003708:	d1f0      	bne.n	80036ec <HAL_RCC_OscConfig+0x480>
 800370a:	e045      	b.n	8003798 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	699b      	ldr	r3, [r3, #24]
 8003710:	2b01      	cmp	r3, #1
 8003712:	d107      	bne.n	8003724 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003714:	2301      	movs	r3, #1
 8003716:	e040      	b.n	800379a <HAL_RCC_OscConfig+0x52e>
 8003718:	40023800 	.word	0x40023800
 800371c:	40007000 	.word	0x40007000
 8003720:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003724:	4b1f      	ldr	r3, [pc, #124]	; (80037a4 <HAL_RCC_OscConfig+0x538>)
 8003726:	685b      	ldr	r3, [r3, #4]
 8003728:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	699b      	ldr	r3, [r3, #24]
 800372e:	2b01      	cmp	r3, #1
 8003730:	d030      	beq.n	8003794 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800373c:	429a      	cmp	r2, r3
 800373e:	d129      	bne.n	8003794 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800374a:	429a      	cmp	r2, r3
 800374c:	d122      	bne.n	8003794 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800374e:	68fa      	ldr	r2, [r7, #12]
 8003750:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003754:	4013      	ands	r3, r2
 8003756:	687a      	ldr	r2, [r7, #4]
 8003758:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800375a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800375c:	4293      	cmp	r3, r2
 800375e:	d119      	bne.n	8003794 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800376a:	085b      	lsrs	r3, r3, #1
 800376c:	3b01      	subs	r3, #1
 800376e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003770:	429a      	cmp	r2, r3
 8003772:	d10f      	bne.n	8003794 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800377e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003780:	429a      	cmp	r2, r3
 8003782:	d107      	bne.n	8003794 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800378e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003790:	429a      	cmp	r2, r3
 8003792:	d001      	beq.n	8003798 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8003794:	2301      	movs	r3, #1
 8003796:	e000      	b.n	800379a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003798:	2300      	movs	r3, #0
}
 800379a:	4618      	mov	r0, r3
 800379c:	3718      	adds	r7, #24
 800379e:	46bd      	mov	sp, r7
 80037a0:	bd80      	pop	{r7, pc}
 80037a2:	bf00      	nop
 80037a4:	40023800 	.word	0x40023800

080037a8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b082      	sub	sp, #8
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d101      	bne.n	80037ba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80037b6:	2301      	movs	r3, #1
 80037b8:	e041      	b.n	800383e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037c0:	b2db      	uxtb	r3, r3
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d106      	bne.n	80037d4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	2200      	movs	r2, #0
 80037ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80037ce:	6878      	ldr	r0, [r7, #4]
 80037d0:	f000 f839 	bl	8003846 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2202      	movs	r2, #2
 80037d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681a      	ldr	r2, [r3, #0]
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	3304      	adds	r3, #4
 80037e4:	4619      	mov	r1, r3
 80037e6:	4610      	mov	r0, r2
 80037e8:	f000 f9c0 	bl	8003b6c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2201      	movs	r2, #1
 80037f0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2201      	movs	r2, #1
 80037f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2201      	movs	r2, #1
 8003800:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2201      	movs	r2, #1
 8003808:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2201      	movs	r2, #1
 8003810:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2201      	movs	r2, #1
 8003818:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2201      	movs	r2, #1
 8003820:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2201      	movs	r2, #1
 8003828:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2201      	movs	r2, #1
 8003830:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2201      	movs	r2, #1
 8003838:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800383c:	2300      	movs	r3, #0
}
 800383e:	4618      	mov	r0, r3
 8003840:	3708      	adds	r7, #8
 8003842:	46bd      	mov	sp, r7
 8003844:	bd80      	pop	{r7, pc}

08003846 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003846:	b480      	push	{r7}
 8003848:	b083      	sub	sp, #12
 800384a:	af00      	add	r7, sp, #0
 800384c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800384e:	bf00      	nop
 8003850:	370c      	adds	r7, #12
 8003852:	46bd      	mov	sp, r7
 8003854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003858:	4770      	bx	lr
	...

0800385c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800385c:	b480      	push	{r7}
 800385e:	b085      	sub	sp, #20
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800386a:	b2db      	uxtb	r3, r3
 800386c:	2b01      	cmp	r3, #1
 800386e:	d001      	beq.n	8003874 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003870:	2301      	movs	r3, #1
 8003872:	e04e      	b.n	8003912 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2202      	movs	r2, #2
 8003878:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	68da      	ldr	r2, [r3, #12]
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f042 0201 	orr.w	r2, r2, #1
 800388a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	4a23      	ldr	r2, [pc, #140]	; (8003920 <HAL_TIM_Base_Start_IT+0xc4>)
 8003892:	4293      	cmp	r3, r2
 8003894:	d022      	beq.n	80038dc <HAL_TIM_Base_Start_IT+0x80>
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800389e:	d01d      	beq.n	80038dc <HAL_TIM_Base_Start_IT+0x80>
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	4a1f      	ldr	r2, [pc, #124]	; (8003924 <HAL_TIM_Base_Start_IT+0xc8>)
 80038a6:	4293      	cmp	r3, r2
 80038a8:	d018      	beq.n	80038dc <HAL_TIM_Base_Start_IT+0x80>
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	4a1e      	ldr	r2, [pc, #120]	; (8003928 <HAL_TIM_Base_Start_IT+0xcc>)
 80038b0:	4293      	cmp	r3, r2
 80038b2:	d013      	beq.n	80038dc <HAL_TIM_Base_Start_IT+0x80>
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	4a1c      	ldr	r2, [pc, #112]	; (800392c <HAL_TIM_Base_Start_IT+0xd0>)
 80038ba:	4293      	cmp	r3, r2
 80038bc:	d00e      	beq.n	80038dc <HAL_TIM_Base_Start_IT+0x80>
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	4a1b      	ldr	r2, [pc, #108]	; (8003930 <HAL_TIM_Base_Start_IT+0xd4>)
 80038c4:	4293      	cmp	r3, r2
 80038c6:	d009      	beq.n	80038dc <HAL_TIM_Base_Start_IT+0x80>
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	4a19      	ldr	r2, [pc, #100]	; (8003934 <HAL_TIM_Base_Start_IT+0xd8>)
 80038ce:	4293      	cmp	r3, r2
 80038d0:	d004      	beq.n	80038dc <HAL_TIM_Base_Start_IT+0x80>
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	4a18      	ldr	r2, [pc, #96]	; (8003938 <HAL_TIM_Base_Start_IT+0xdc>)
 80038d8:	4293      	cmp	r3, r2
 80038da:	d111      	bne.n	8003900 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	689b      	ldr	r3, [r3, #8]
 80038e2:	f003 0307 	and.w	r3, r3, #7
 80038e6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	2b06      	cmp	r3, #6
 80038ec:	d010      	beq.n	8003910 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	681a      	ldr	r2, [r3, #0]
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f042 0201 	orr.w	r2, r2, #1
 80038fc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038fe:	e007      	b.n	8003910 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	681a      	ldr	r2, [r3, #0]
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f042 0201 	orr.w	r2, r2, #1
 800390e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003910:	2300      	movs	r3, #0
}
 8003912:	4618      	mov	r0, r3
 8003914:	3714      	adds	r7, #20
 8003916:	46bd      	mov	sp, r7
 8003918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391c:	4770      	bx	lr
 800391e:	bf00      	nop
 8003920:	40010000 	.word	0x40010000
 8003924:	40000400 	.word	0x40000400
 8003928:	40000800 	.word	0x40000800
 800392c:	40000c00 	.word	0x40000c00
 8003930:	40010400 	.word	0x40010400
 8003934:	40014000 	.word	0x40014000
 8003938:	40001800 	.word	0x40001800

0800393c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	b084      	sub	sp, #16
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	68db      	ldr	r3, [r3, #12]
 800394a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	691b      	ldr	r3, [r3, #16]
 8003952:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003954:	68bb      	ldr	r3, [r7, #8]
 8003956:	f003 0302 	and.w	r3, r3, #2
 800395a:	2b00      	cmp	r3, #0
 800395c:	d020      	beq.n	80039a0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	f003 0302 	and.w	r3, r3, #2
 8003964:	2b00      	cmp	r3, #0
 8003966:	d01b      	beq.n	80039a0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f06f 0202 	mvn.w	r2, #2
 8003970:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	2201      	movs	r2, #1
 8003976:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	699b      	ldr	r3, [r3, #24]
 800397e:	f003 0303 	and.w	r3, r3, #3
 8003982:	2b00      	cmp	r3, #0
 8003984:	d003      	beq.n	800398e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003986:	6878      	ldr	r0, [r7, #4]
 8003988:	f000 f8d2 	bl	8003b30 <HAL_TIM_IC_CaptureCallback>
 800398c:	e005      	b.n	800399a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800398e:	6878      	ldr	r0, [r7, #4]
 8003990:	f000 f8c4 	bl	8003b1c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003994:	6878      	ldr	r0, [r7, #4]
 8003996:	f000 f8d5 	bl	8003b44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	2200      	movs	r2, #0
 800399e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80039a0:	68bb      	ldr	r3, [r7, #8]
 80039a2:	f003 0304 	and.w	r3, r3, #4
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d020      	beq.n	80039ec <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	f003 0304 	and.w	r3, r3, #4
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d01b      	beq.n	80039ec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f06f 0204 	mvn.w	r2, #4
 80039bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	2202      	movs	r2, #2
 80039c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	699b      	ldr	r3, [r3, #24]
 80039ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d003      	beq.n	80039da <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80039d2:	6878      	ldr	r0, [r7, #4]
 80039d4:	f000 f8ac 	bl	8003b30 <HAL_TIM_IC_CaptureCallback>
 80039d8:	e005      	b.n	80039e6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80039da:	6878      	ldr	r0, [r7, #4]
 80039dc:	f000 f89e 	bl	8003b1c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039e0:	6878      	ldr	r0, [r7, #4]
 80039e2:	f000 f8af 	bl	8003b44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	2200      	movs	r2, #0
 80039ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80039ec:	68bb      	ldr	r3, [r7, #8]
 80039ee:	f003 0308 	and.w	r3, r3, #8
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d020      	beq.n	8003a38 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	f003 0308 	and.w	r3, r3, #8
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d01b      	beq.n	8003a38 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f06f 0208 	mvn.w	r2, #8
 8003a08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	2204      	movs	r2, #4
 8003a0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	69db      	ldr	r3, [r3, #28]
 8003a16:	f003 0303 	and.w	r3, r3, #3
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d003      	beq.n	8003a26 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a1e:	6878      	ldr	r0, [r7, #4]
 8003a20:	f000 f886 	bl	8003b30 <HAL_TIM_IC_CaptureCallback>
 8003a24:	e005      	b.n	8003a32 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a26:	6878      	ldr	r0, [r7, #4]
 8003a28:	f000 f878 	bl	8003b1c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a2c:	6878      	ldr	r0, [r7, #4]
 8003a2e:	f000 f889 	bl	8003b44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	2200      	movs	r2, #0
 8003a36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003a38:	68bb      	ldr	r3, [r7, #8]
 8003a3a:	f003 0310 	and.w	r3, r3, #16
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d020      	beq.n	8003a84 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	f003 0310 	and.w	r3, r3, #16
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d01b      	beq.n	8003a84 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f06f 0210 	mvn.w	r2, #16
 8003a54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	2208      	movs	r2, #8
 8003a5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	69db      	ldr	r3, [r3, #28]
 8003a62:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d003      	beq.n	8003a72 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a6a:	6878      	ldr	r0, [r7, #4]
 8003a6c:	f000 f860 	bl	8003b30 <HAL_TIM_IC_CaptureCallback>
 8003a70:	e005      	b.n	8003a7e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a72:	6878      	ldr	r0, [r7, #4]
 8003a74:	f000 f852 	bl	8003b1c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a78:	6878      	ldr	r0, [r7, #4]
 8003a7a:	f000 f863 	bl	8003b44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	2200      	movs	r2, #0
 8003a82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003a84:	68bb      	ldr	r3, [r7, #8]
 8003a86:	f003 0301 	and.w	r3, r3, #1
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d00c      	beq.n	8003aa8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	f003 0301 	and.w	r3, r3, #1
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d007      	beq.n	8003aa8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f06f 0201 	mvn.w	r2, #1
 8003aa0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003aa2:	6878      	ldr	r0, [r7, #4]
 8003aa4:	f7fd fac8 	bl	8001038 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003aa8:	68bb      	ldr	r3, [r7, #8]
 8003aaa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d00c      	beq.n	8003acc <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d007      	beq.n	8003acc <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003ac4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003ac6:	6878      	ldr	r0, [r7, #4]
 8003ac8:	f000 f906 	bl	8003cd8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003acc:	68bb      	ldr	r3, [r7, #8]
 8003ace:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d00c      	beq.n	8003af0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d007      	beq.n	8003af0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003ae8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003aea:	6878      	ldr	r0, [r7, #4]
 8003aec:	f000 f834 	bl	8003b58 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003af0:	68bb      	ldr	r3, [r7, #8]
 8003af2:	f003 0320 	and.w	r3, r3, #32
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d00c      	beq.n	8003b14 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	f003 0320 	and.w	r3, r3, #32
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d007      	beq.n	8003b14 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f06f 0220 	mvn.w	r2, #32
 8003b0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003b0e:	6878      	ldr	r0, [r7, #4]
 8003b10:	f000 f8d8 	bl	8003cc4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003b14:	bf00      	nop
 8003b16:	3710      	adds	r7, #16
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	bd80      	pop	{r7, pc}

08003b1c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003b1c:	b480      	push	{r7}
 8003b1e:	b083      	sub	sp, #12
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003b24:	bf00      	nop
 8003b26:	370c      	adds	r7, #12
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2e:	4770      	bx	lr

08003b30 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003b30:	b480      	push	{r7}
 8003b32:	b083      	sub	sp, #12
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003b38:	bf00      	nop
 8003b3a:	370c      	adds	r7, #12
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b42:	4770      	bx	lr

08003b44 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003b44:	b480      	push	{r7}
 8003b46:	b083      	sub	sp, #12
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003b4c:	bf00      	nop
 8003b4e:	370c      	adds	r7, #12
 8003b50:	46bd      	mov	sp, r7
 8003b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b56:	4770      	bx	lr

08003b58 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003b58:	b480      	push	{r7}
 8003b5a:	b083      	sub	sp, #12
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003b60:	bf00      	nop
 8003b62:	370c      	adds	r7, #12
 8003b64:	46bd      	mov	sp, r7
 8003b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6a:	4770      	bx	lr

08003b6c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003b6c:	b480      	push	{r7}
 8003b6e:	b085      	sub	sp, #20
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
 8003b74:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	4a46      	ldr	r2, [pc, #280]	; (8003c98 <TIM_Base_SetConfig+0x12c>)
 8003b80:	4293      	cmp	r3, r2
 8003b82:	d013      	beq.n	8003bac <TIM_Base_SetConfig+0x40>
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b8a:	d00f      	beq.n	8003bac <TIM_Base_SetConfig+0x40>
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	4a43      	ldr	r2, [pc, #268]	; (8003c9c <TIM_Base_SetConfig+0x130>)
 8003b90:	4293      	cmp	r3, r2
 8003b92:	d00b      	beq.n	8003bac <TIM_Base_SetConfig+0x40>
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	4a42      	ldr	r2, [pc, #264]	; (8003ca0 <TIM_Base_SetConfig+0x134>)
 8003b98:	4293      	cmp	r3, r2
 8003b9a:	d007      	beq.n	8003bac <TIM_Base_SetConfig+0x40>
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	4a41      	ldr	r2, [pc, #260]	; (8003ca4 <TIM_Base_SetConfig+0x138>)
 8003ba0:	4293      	cmp	r3, r2
 8003ba2:	d003      	beq.n	8003bac <TIM_Base_SetConfig+0x40>
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	4a40      	ldr	r2, [pc, #256]	; (8003ca8 <TIM_Base_SetConfig+0x13c>)
 8003ba8:	4293      	cmp	r3, r2
 8003baa:	d108      	bne.n	8003bbe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bb2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003bb4:	683b      	ldr	r3, [r7, #0]
 8003bb6:	685b      	ldr	r3, [r3, #4]
 8003bb8:	68fa      	ldr	r2, [r7, #12]
 8003bba:	4313      	orrs	r3, r2
 8003bbc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	4a35      	ldr	r2, [pc, #212]	; (8003c98 <TIM_Base_SetConfig+0x12c>)
 8003bc2:	4293      	cmp	r3, r2
 8003bc4:	d02b      	beq.n	8003c1e <TIM_Base_SetConfig+0xb2>
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bcc:	d027      	beq.n	8003c1e <TIM_Base_SetConfig+0xb2>
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	4a32      	ldr	r2, [pc, #200]	; (8003c9c <TIM_Base_SetConfig+0x130>)
 8003bd2:	4293      	cmp	r3, r2
 8003bd4:	d023      	beq.n	8003c1e <TIM_Base_SetConfig+0xb2>
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	4a31      	ldr	r2, [pc, #196]	; (8003ca0 <TIM_Base_SetConfig+0x134>)
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	d01f      	beq.n	8003c1e <TIM_Base_SetConfig+0xb2>
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	4a30      	ldr	r2, [pc, #192]	; (8003ca4 <TIM_Base_SetConfig+0x138>)
 8003be2:	4293      	cmp	r3, r2
 8003be4:	d01b      	beq.n	8003c1e <TIM_Base_SetConfig+0xb2>
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	4a2f      	ldr	r2, [pc, #188]	; (8003ca8 <TIM_Base_SetConfig+0x13c>)
 8003bea:	4293      	cmp	r3, r2
 8003bec:	d017      	beq.n	8003c1e <TIM_Base_SetConfig+0xb2>
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	4a2e      	ldr	r2, [pc, #184]	; (8003cac <TIM_Base_SetConfig+0x140>)
 8003bf2:	4293      	cmp	r3, r2
 8003bf4:	d013      	beq.n	8003c1e <TIM_Base_SetConfig+0xb2>
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	4a2d      	ldr	r2, [pc, #180]	; (8003cb0 <TIM_Base_SetConfig+0x144>)
 8003bfa:	4293      	cmp	r3, r2
 8003bfc:	d00f      	beq.n	8003c1e <TIM_Base_SetConfig+0xb2>
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	4a2c      	ldr	r2, [pc, #176]	; (8003cb4 <TIM_Base_SetConfig+0x148>)
 8003c02:	4293      	cmp	r3, r2
 8003c04:	d00b      	beq.n	8003c1e <TIM_Base_SetConfig+0xb2>
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	4a2b      	ldr	r2, [pc, #172]	; (8003cb8 <TIM_Base_SetConfig+0x14c>)
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	d007      	beq.n	8003c1e <TIM_Base_SetConfig+0xb2>
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	4a2a      	ldr	r2, [pc, #168]	; (8003cbc <TIM_Base_SetConfig+0x150>)
 8003c12:	4293      	cmp	r3, r2
 8003c14:	d003      	beq.n	8003c1e <TIM_Base_SetConfig+0xb2>
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	4a29      	ldr	r2, [pc, #164]	; (8003cc0 <TIM_Base_SetConfig+0x154>)
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	d108      	bne.n	8003c30 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c24:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003c26:	683b      	ldr	r3, [r7, #0]
 8003c28:	68db      	ldr	r3, [r3, #12]
 8003c2a:	68fa      	ldr	r2, [r7, #12]
 8003c2c:	4313      	orrs	r3, r2
 8003c2e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	695b      	ldr	r3, [r3, #20]
 8003c3a:	4313      	orrs	r3, r2
 8003c3c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	68fa      	ldr	r2, [r7, #12]
 8003c42:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	689a      	ldr	r2, [r3, #8]
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	681a      	ldr	r2, [r3, #0]
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	4a10      	ldr	r2, [pc, #64]	; (8003c98 <TIM_Base_SetConfig+0x12c>)
 8003c58:	4293      	cmp	r3, r2
 8003c5a:	d003      	beq.n	8003c64 <TIM_Base_SetConfig+0xf8>
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	4a12      	ldr	r2, [pc, #72]	; (8003ca8 <TIM_Base_SetConfig+0x13c>)
 8003c60:	4293      	cmp	r3, r2
 8003c62:	d103      	bne.n	8003c6c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003c64:	683b      	ldr	r3, [r7, #0]
 8003c66:	691a      	ldr	r2, [r3, #16]
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2201      	movs	r2, #1
 8003c70:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	691b      	ldr	r3, [r3, #16]
 8003c76:	f003 0301 	and.w	r3, r3, #1
 8003c7a:	2b01      	cmp	r3, #1
 8003c7c:	d105      	bne.n	8003c8a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	691b      	ldr	r3, [r3, #16]
 8003c82:	f023 0201 	bic.w	r2, r3, #1
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	611a      	str	r2, [r3, #16]
  }
}
 8003c8a:	bf00      	nop
 8003c8c:	3714      	adds	r7, #20
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c94:	4770      	bx	lr
 8003c96:	bf00      	nop
 8003c98:	40010000 	.word	0x40010000
 8003c9c:	40000400 	.word	0x40000400
 8003ca0:	40000800 	.word	0x40000800
 8003ca4:	40000c00 	.word	0x40000c00
 8003ca8:	40010400 	.word	0x40010400
 8003cac:	40014000 	.word	0x40014000
 8003cb0:	40014400 	.word	0x40014400
 8003cb4:	40014800 	.word	0x40014800
 8003cb8:	40001800 	.word	0x40001800
 8003cbc:	40001c00 	.word	0x40001c00
 8003cc0:	40002000 	.word	0x40002000

08003cc4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003cc4:	b480      	push	{r7}
 8003cc6:	b083      	sub	sp, #12
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003ccc:	bf00      	nop
 8003cce:	370c      	adds	r7, #12
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd6:	4770      	bx	lr

08003cd8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003cd8:	b480      	push	{r7}
 8003cda:	b083      	sub	sp, #12
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003ce0:	bf00      	nop
 8003ce2:	370c      	adds	r7, #12
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cea:	4770      	bx	lr

08003cec <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003cec:	b580      	push	{r7, lr}
 8003cee:	b082      	sub	sp, #8
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d101      	bne.n	8003cfe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003cfa:	2301      	movs	r3, #1
 8003cfc:	e042      	b.n	8003d84 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d04:	b2db      	uxtb	r3, r3
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d106      	bne.n	8003d18 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003d12:	6878      	ldr	r0, [r7, #4]
 8003d14:	f7fd fce4 	bl	80016e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2224      	movs	r2, #36	; 0x24
 8003d1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	68da      	ldr	r2, [r3, #12]
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003d2e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003d30:	6878      	ldr	r0, [r7, #4]
 8003d32:	f000 f973 	bl	800401c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	691a      	ldr	r2, [r3, #16]
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003d44:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	695a      	ldr	r2, [r3, #20]
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003d54:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	68da      	ldr	r2, [r3, #12]
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003d64:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	2200      	movs	r2, #0
 8003d6a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2220      	movs	r2, #32
 8003d70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2220      	movs	r2, #32
 8003d78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2200      	movs	r2, #0
 8003d80:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003d82:	2300      	movs	r3, #0
}
 8003d84:	4618      	mov	r0, r3
 8003d86:	3708      	adds	r7, #8
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	bd80      	pop	{r7, pc}

08003d8c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	b08a      	sub	sp, #40	; 0x28
 8003d90:	af02      	add	r7, sp, #8
 8003d92:	60f8      	str	r0, [r7, #12]
 8003d94:	60b9      	str	r1, [r7, #8]
 8003d96:	603b      	str	r3, [r7, #0]
 8003d98:	4613      	mov	r3, r2
 8003d9a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003d9c:	2300      	movs	r3, #0
 8003d9e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003da6:	b2db      	uxtb	r3, r3
 8003da8:	2b20      	cmp	r3, #32
 8003daa:	d175      	bne.n	8003e98 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003dac:	68bb      	ldr	r3, [r7, #8]
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d002      	beq.n	8003db8 <HAL_UART_Transmit+0x2c>
 8003db2:	88fb      	ldrh	r3, [r7, #6]
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d101      	bne.n	8003dbc <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003db8:	2301      	movs	r3, #1
 8003dba:	e06e      	b.n	8003e9a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	2221      	movs	r2, #33	; 0x21
 8003dc6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003dca:	f7fd fe15 	bl	80019f8 <HAL_GetTick>
 8003dce:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	88fa      	ldrh	r2, [r7, #6]
 8003dd4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	88fa      	ldrh	r2, [r7, #6]
 8003dda:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	689b      	ldr	r3, [r3, #8]
 8003de0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003de4:	d108      	bne.n	8003df8 <HAL_UART_Transmit+0x6c>
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	691b      	ldr	r3, [r3, #16]
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d104      	bne.n	8003df8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003dee:	2300      	movs	r3, #0
 8003df0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003df2:	68bb      	ldr	r3, [r7, #8]
 8003df4:	61bb      	str	r3, [r7, #24]
 8003df6:	e003      	b.n	8003e00 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003df8:	68bb      	ldr	r3, [r7, #8]
 8003dfa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003dfc:	2300      	movs	r3, #0
 8003dfe:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003e00:	e02e      	b.n	8003e60 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003e02:	683b      	ldr	r3, [r7, #0]
 8003e04:	9300      	str	r3, [sp, #0]
 8003e06:	697b      	ldr	r3, [r7, #20]
 8003e08:	2200      	movs	r2, #0
 8003e0a:	2180      	movs	r1, #128	; 0x80
 8003e0c:	68f8      	ldr	r0, [r7, #12]
 8003e0e:	f000 f848 	bl	8003ea2 <UART_WaitOnFlagUntilTimeout>
 8003e12:	4603      	mov	r3, r0
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d005      	beq.n	8003e24 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	2220      	movs	r2, #32
 8003e1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8003e20:	2303      	movs	r3, #3
 8003e22:	e03a      	b.n	8003e9a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003e24:	69fb      	ldr	r3, [r7, #28]
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d10b      	bne.n	8003e42 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003e2a:	69bb      	ldr	r3, [r7, #24]
 8003e2c:	881b      	ldrh	r3, [r3, #0]
 8003e2e:	461a      	mov	r2, r3
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003e38:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003e3a:	69bb      	ldr	r3, [r7, #24]
 8003e3c:	3302      	adds	r3, #2
 8003e3e:	61bb      	str	r3, [r7, #24]
 8003e40:	e007      	b.n	8003e52 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003e42:	69fb      	ldr	r3, [r7, #28]
 8003e44:	781a      	ldrb	r2, [r3, #0]
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003e4c:	69fb      	ldr	r3, [r7, #28]
 8003e4e:	3301      	adds	r3, #1
 8003e50:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003e56:	b29b      	uxth	r3, r3
 8003e58:	3b01      	subs	r3, #1
 8003e5a:	b29a      	uxth	r2, r3
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003e64:	b29b      	uxth	r3, r3
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d1cb      	bne.n	8003e02 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003e6a:	683b      	ldr	r3, [r7, #0]
 8003e6c:	9300      	str	r3, [sp, #0]
 8003e6e:	697b      	ldr	r3, [r7, #20]
 8003e70:	2200      	movs	r2, #0
 8003e72:	2140      	movs	r1, #64	; 0x40
 8003e74:	68f8      	ldr	r0, [r7, #12]
 8003e76:	f000 f814 	bl	8003ea2 <UART_WaitOnFlagUntilTimeout>
 8003e7a:	4603      	mov	r3, r0
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d005      	beq.n	8003e8c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	2220      	movs	r2, #32
 8003e84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8003e88:	2303      	movs	r3, #3
 8003e8a:	e006      	b.n	8003e9a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	2220      	movs	r2, #32
 8003e90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8003e94:	2300      	movs	r3, #0
 8003e96:	e000      	b.n	8003e9a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003e98:	2302      	movs	r3, #2
  }
}
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	3720      	adds	r7, #32
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	bd80      	pop	{r7, pc}

08003ea2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003ea2:	b580      	push	{r7, lr}
 8003ea4:	b086      	sub	sp, #24
 8003ea6:	af00      	add	r7, sp, #0
 8003ea8:	60f8      	str	r0, [r7, #12]
 8003eaa:	60b9      	str	r1, [r7, #8]
 8003eac:	603b      	str	r3, [r7, #0]
 8003eae:	4613      	mov	r3, r2
 8003eb0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003eb2:	e03b      	b.n	8003f2c <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003eb4:	6a3b      	ldr	r3, [r7, #32]
 8003eb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003eba:	d037      	beq.n	8003f2c <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ebc:	f7fd fd9c 	bl	80019f8 <HAL_GetTick>
 8003ec0:	4602      	mov	r2, r0
 8003ec2:	683b      	ldr	r3, [r7, #0]
 8003ec4:	1ad3      	subs	r3, r2, r3
 8003ec6:	6a3a      	ldr	r2, [r7, #32]
 8003ec8:	429a      	cmp	r2, r3
 8003eca:	d302      	bcc.n	8003ed2 <UART_WaitOnFlagUntilTimeout+0x30>
 8003ecc:	6a3b      	ldr	r3, [r7, #32]
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d101      	bne.n	8003ed6 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003ed2:	2303      	movs	r3, #3
 8003ed4:	e03a      	b.n	8003f4c <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	68db      	ldr	r3, [r3, #12]
 8003edc:	f003 0304 	and.w	r3, r3, #4
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d023      	beq.n	8003f2c <UART_WaitOnFlagUntilTimeout+0x8a>
 8003ee4:	68bb      	ldr	r3, [r7, #8]
 8003ee6:	2b80      	cmp	r3, #128	; 0x80
 8003ee8:	d020      	beq.n	8003f2c <UART_WaitOnFlagUntilTimeout+0x8a>
 8003eea:	68bb      	ldr	r3, [r7, #8]
 8003eec:	2b40      	cmp	r3, #64	; 0x40
 8003eee:	d01d      	beq.n	8003f2c <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f003 0308 	and.w	r3, r3, #8
 8003efa:	2b08      	cmp	r3, #8
 8003efc:	d116      	bne.n	8003f2c <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003efe:	2300      	movs	r3, #0
 8003f00:	617b      	str	r3, [r7, #20]
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	617b      	str	r3, [r7, #20]
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	685b      	ldr	r3, [r3, #4]
 8003f10:	617b      	str	r3, [r7, #20]
 8003f12:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003f14:	68f8      	ldr	r0, [r7, #12]
 8003f16:	f000 f81d 	bl	8003f54 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	2208      	movs	r2, #8
 8003f1e:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	2200      	movs	r2, #0
 8003f24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8003f28:	2301      	movs	r3, #1
 8003f2a:	e00f      	b.n	8003f4c <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	681a      	ldr	r2, [r3, #0]
 8003f32:	68bb      	ldr	r3, [r7, #8]
 8003f34:	4013      	ands	r3, r2
 8003f36:	68ba      	ldr	r2, [r7, #8]
 8003f38:	429a      	cmp	r2, r3
 8003f3a:	bf0c      	ite	eq
 8003f3c:	2301      	moveq	r3, #1
 8003f3e:	2300      	movne	r3, #0
 8003f40:	b2db      	uxtb	r3, r3
 8003f42:	461a      	mov	r2, r3
 8003f44:	79fb      	ldrb	r3, [r7, #7]
 8003f46:	429a      	cmp	r2, r3
 8003f48:	d0b4      	beq.n	8003eb4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003f4a:	2300      	movs	r3, #0
}
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	3718      	adds	r7, #24
 8003f50:	46bd      	mov	sp, r7
 8003f52:	bd80      	pop	{r7, pc}

08003f54 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003f54:	b480      	push	{r7}
 8003f56:	b095      	sub	sp, #84	; 0x54
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	330c      	adds	r3, #12
 8003f62:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f66:	e853 3f00 	ldrex	r3, [r3]
 8003f6a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003f6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f6e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003f72:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	330c      	adds	r3, #12
 8003f7a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003f7c:	643a      	str	r2, [r7, #64]	; 0x40
 8003f7e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f80:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003f82:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003f84:	e841 2300 	strex	r3, r2, [r1]
 8003f88:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003f8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d1e5      	bne.n	8003f5c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	3314      	adds	r3, #20
 8003f96:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f98:	6a3b      	ldr	r3, [r7, #32]
 8003f9a:	e853 3f00 	ldrex	r3, [r3]
 8003f9e:	61fb      	str	r3, [r7, #28]
   return(result);
 8003fa0:	69fb      	ldr	r3, [r7, #28]
 8003fa2:	f023 0301 	bic.w	r3, r3, #1
 8003fa6:	64bb      	str	r3, [r7, #72]	; 0x48
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	3314      	adds	r3, #20
 8003fae:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003fb0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003fb2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fb4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003fb6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003fb8:	e841 2300 	strex	r3, r2, [r1]
 8003fbc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d1e5      	bne.n	8003f90 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fc8:	2b01      	cmp	r3, #1
 8003fca:	d119      	bne.n	8004000 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	330c      	adds	r3, #12
 8003fd2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	e853 3f00 	ldrex	r3, [r3]
 8003fda:	60bb      	str	r3, [r7, #8]
   return(result);
 8003fdc:	68bb      	ldr	r3, [r7, #8]
 8003fde:	f023 0310 	bic.w	r3, r3, #16
 8003fe2:	647b      	str	r3, [r7, #68]	; 0x44
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	330c      	adds	r3, #12
 8003fea:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003fec:	61ba      	str	r2, [r7, #24]
 8003fee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ff0:	6979      	ldr	r1, [r7, #20]
 8003ff2:	69ba      	ldr	r2, [r7, #24]
 8003ff4:	e841 2300 	strex	r3, r2, [r1]
 8003ff8:	613b      	str	r3, [r7, #16]
   return(result);
 8003ffa:	693b      	ldr	r3, [r7, #16]
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d1e5      	bne.n	8003fcc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2220      	movs	r2, #32
 8004004:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2200      	movs	r2, #0
 800400c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800400e:	bf00      	nop
 8004010:	3754      	adds	r7, #84	; 0x54
 8004012:	46bd      	mov	sp, r7
 8004014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004018:	4770      	bx	lr
	...

0800401c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800401c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004020:	b0c0      	sub	sp, #256	; 0x100
 8004022:	af00      	add	r7, sp, #0
 8004024:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004028:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	691b      	ldr	r3, [r3, #16]
 8004030:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004034:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004038:	68d9      	ldr	r1, [r3, #12]
 800403a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800403e:	681a      	ldr	r2, [r3, #0]
 8004040:	ea40 0301 	orr.w	r3, r0, r1
 8004044:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004046:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800404a:	689a      	ldr	r2, [r3, #8]
 800404c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004050:	691b      	ldr	r3, [r3, #16]
 8004052:	431a      	orrs	r2, r3
 8004054:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004058:	695b      	ldr	r3, [r3, #20]
 800405a:	431a      	orrs	r2, r3
 800405c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004060:	69db      	ldr	r3, [r3, #28]
 8004062:	4313      	orrs	r3, r2
 8004064:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004068:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	68db      	ldr	r3, [r3, #12]
 8004070:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004074:	f021 010c 	bic.w	r1, r1, #12
 8004078:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800407c:	681a      	ldr	r2, [r3, #0]
 800407e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004082:	430b      	orrs	r3, r1
 8004084:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004086:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	695b      	ldr	r3, [r3, #20]
 800408e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004092:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004096:	6999      	ldr	r1, [r3, #24]
 8004098:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800409c:	681a      	ldr	r2, [r3, #0]
 800409e:	ea40 0301 	orr.w	r3, r0, r1
 80040a2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80040a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040a8:	681a      	ldr	r2, [r3, #0]
 80040aa:	4b8f      	ldr	r3, [pc, #572]	; (80042e8 <UART_SetConfig+0x2cc>)
 80040ac:	429a      	cmp	r2, r3
 80040ae:	d005      	beq.n	80040bc <UART_SetConfig+0xa0>
 80040b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040b4:	681a      	ldr	r2, [r3, #0]
 80040b6:	4b8d      	ldr	r3, [pc, #564]	; (80042ec <UART_SetConfig+0x2d0>)
 80040b8:	429a      	cmp	r2, r3
 80040ba:	d104      	bne.n	80040c6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80040bc:	f7fe fe60 	bl	8002d80 <HAL_RCC_GetPCLK2Freq>
 80040c0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80040c4:	e003      	b.n	80040ce <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80040c6:	f7fe fe47 	bl	8002d58 <HAL_RCC_GetPCLK1Freq>
 80040ca:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80040ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040d2:	69db      	ldr	r3, [r3, #28]
 80040d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80040d8:	f040 810c 	bne.w	80042f4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80040dc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80040e0:	2200      	movs	r2, #0
 80040e2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80040e6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80040ea:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80040ee:	4622      	mov	r2, r4
 80040f0:	462b      	mov	r3, r5
 80040f2:	1891      	adds	r1, r2, r2
 80040f4:	65b9      	str	r1, [r7, #88]	; 0x58
 80040f6:	415b      	adcs	r3, r3
 80040f8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80040fa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80040fe:	4621      	mov	r1, r4
 8004100:	eb12 0801 	adds.w	r8, r2, r1
 8004104:	4629      	mov	r1, r5
 8004106:	eb43 0901 	adc.w	r9, r3, r1
 800410a:	f04f 0200 	mov.w	r2, #0
 800410e:	f04f 0300 	mov.w	r3, #0
 8004112:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004116:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800411a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800411e:	4690      	mov	r8, r2
 8004120:	4699      	mov	r9, r3
 8004122:	4623      	mov	r3, r4
 8004124:	eb18 0303 	adds.w	r3, r8, r3
 8004128:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800412c:	462b      	mov	r3, r5
 800412e:	eb49 0303 	adc.w	r3, r9, r3
 8004132:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004136:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800413a:	685b      	ldr	r3, [r3, #4]
 800413c:	2200      	movs	r2, #0
 800413e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004142:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004146:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800414a:	460b      	mov	r3, r1
 800414c:	18db      	adds	r3, r3, r3
 800414e:	653b      	str	r3, [r7, #80]	; 0x50
 8004150:	4613      	mov	r3, r2
 8004152:	eb42 0303 	adc.w	r3, r2, r3
 8004156:	657b      	str	r3, [r7, #84]	; 0x54
 8004158:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800415c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004160:	f7fc f868 	bl	8000234 <__aeabi_uldivmod>
 8004164:	4602      	mov	r2, r0
 8004166:	460b      	mov	r3, r1
 8004168:	4b61      	ldr	r3, [pc, #388]	; (80042f0 <UART_SetConfig+0x2d4>)
 800416a:	fba3 2302 	umull	r2, r3, r3, r2
 800416e:	095b      	lsrs	r3, r3, #5
 8004170:	011c      	lsls	r4, r3, #4
 8004172:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004176:	2200      	movs	r2, #0
 8004178:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800417c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004180:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004184:	4642      	mov	r2, r8
 8004186:	464b      	mov	r3, r9
 8004188:	1891      	adds	r1, r2, r2
 800418a:	64b9      	str	r1, [r7, #72]	; 0x48
 800418c:	415b      	adcs	r3, r3
 800418e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004190:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004194:	4641      	mov	r1, r8
 8004196:	eb12 0a01 	adds.w	sl, r2, r1
 800419a:	4649      	mov	r1, r9
 800419c:	eb43 0b01 	adc.w	fp, r3, r1
 80041a0:	f04f 0200 	mov.w	r2, #0
 80041a4:	f04f 0300 	mov.w	r3, #0
 80041a8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80041ac:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80041b0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80041b4:	4692      	mov	sl, r2
 80041b6:	469b      	mov	fp, r3
 80041b8:	4643      	mov	r3, r8
 80041ba:	eb1a 0303 	adds.w	r3, sl, r3
 80041be:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80041c2:	464b      	mov	r3, r9
 80041c4:	eb4b 0303 	adc.w	r3, fp, r3
 80041c8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80041cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041d0:	685b      	ldr	r3, [r3, #4]
 80041d2:	2200      	movs	r2, #0
 80041d4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80041d8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80041dc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80041e0:	460b      	mov	r3, r1
 80041e2:	18db      	adds	r3, r3, r3
 80041e4:	643b      	str	r3, [r7, #64]	; 0x40
 80041e6:	4613      	mov	r3, r2
 80041e8:	eb42 0303 	adc.w	r3, r2, r3
 80041ec:	647b      	str	r3, [r7, #68]	; 0x44
 80041ee:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80041f2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80041f6:	f7fc f81d 	bl	8000234 <__aeabi_uldivmod>
 80041fa:	4602      	mov	r2, r0
 80041fc:	460b      	mov	r3, r1
 80041fe:	4611      	mov	r1, r2
 8004200:	4b3b      	ldr	r3, [pc, #236]	; (80042f0 <UART_SetConfig+0x2d4>)
 8004202:	fba3 2301 	umull	r2, r3, r3, r1
 8004206:	095b      	lsrs	r3, r3, #5
 8004208:	2264      	movs	r2, #100	; 0x64
 800420a:	fb02 f303 	mul.w	r3, r2, r3
 800420e:	1acb      	subs	r3, r1, r3
 8004210:	00db      	lsls	r3, r3, #3
 8004212:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004216:	4b36      	ldr	r3, [pc, #216]	; (80042f0 <UART_SetConfig+0x2d4>)
 8004218:	fba3 2302 	umull	r2, r3, r3, r2
 800421c:	095b      	lsrs	r3, r3, #5
 800421e:	005b      	lsls	r3, r3, #1
 8004220:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004224:	441c      	add	r4, r3
 8004226:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800422a:	2200      	movs	r2, #0
 800422c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004230:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004234:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004238:	4642      	mov	r2, r8
 800423a:	464b      	mov	r3, r9
 800423c:	1891      	adds	r1, r2, r2
 800423e:	63b9      	str	r1, [r7, #56]	; 0x38
 8004240:	415b      	adcs	r3, r3
 8004242:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004244:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004248:	4641      	mov	r1, r8
 800424a:	1851      	adds	r1, r2, r1
 800424c:	6339      	str	r1, [r7, #48]	; 0x30
 800424e:	4649      	mov	r1, r9
 8004250:	414b      	adcs	r3, r1
 8004252:	637b      	str	r3, [r7, #52]	; 0x34
 8004254:	f04f 0200 	mov.w	r2, #0
 8004258:	f04f 0300 	mov.w	r3, #0
 800425c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004260:	4659      	mov	r1, fp
 8004262:	00cb      	lsls	r3, r1, #3
 8004264:	4651      	mov	r1, sl
 8004266:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800426a:	4651      	mov	r1, sl
 800426c:	00ca      	lsls	r2, r1, #3
 800426e:	4610      	mov	r0, r2
 8004270:	4619      	mov	r1, r3
 8004272:	4603      	mov	r3, r0
 8004274:	4642      	mov	r2, r8
 8004276:	189b      	adds	r3, r3, r2
 8004278:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800427c:	464b      	mov	r3, r9
 800427e:	460a      	mov	r2, r1
 8004280:	eb42 0303 	adc.w	r3, r2, r3
 8004284:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004288:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800428c:	685b      	ldr	r3, [r3, #4]
 800428e:	2200      	movs	r2, #0
 8004290:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004294:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004298:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800429c:	460b      	mov	r3, r1
 800429e:	18db      	adds	r3, r3, r3
 80042a0:	62bb      	str	r3, [r7, #40]	; 0x28
 80042a2:	4613      	mov	r3, r2
 80042a4:	eb42 0303 	adc.w	r3, r2, r3
 80042a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80042aa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80042ae:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80042b2:	f7fb ffbf 	bl	8000234 <__aeabi_uldivmod>
 80042b6:	4602      	mov	r2, r0
 80042b8:	460b      	mov	r3, r1
 80042ba:	4b0d      	ldr	r3, [pc, #52]	; (80042f0 <UART_SetConfig+0x2d4>)
 80042bc:	fba3 1302 	umull	r1, r3, r3, r2
 80042c0:	095b      	lsrs	r3, r3, #5
 80042c2:	2164      	movs	r1, #100	; 0x64
 80042c4:	fb01 f303 	mul.w	r3, r1, r3
 80042c8:	1ad3      	subs	r3, r2, r3
 80042ca:	00db      	lsls	r3, r3, #3
 80042cc:	3332      	adds	r3, #50	; 0x32
 80042ce:	4a08      	ldr	r2, [pc, #32]	; (80042f0 <UART_SetConfig+0x2d4>)
 80042d0:	fba2 2303 	umull	r2, r3, r2, r3
 80042d4:	095b      	lsrs	r3, r3, #5
 80042d6:	f003 0207 	and.w	r2, r3, #7
 80042da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	4422      	add	r2, r4
 80042e2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80042e4:	e106      	b.n	80044f4 <UART_SetConfig+0x4d8>
 80042e6:	bf00      	nop
 80042e8:	40011000 	.word	0x40011000
 80042ec:	40011400 	.word	0x40011400
 80042f0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80042f4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80042f8:	2200      	movs	r2, #0
 80042fa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80042fe:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004302:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004306:	4642      	mov	r2, r8
 8004308:	464b      	mov	r3, r9
 800430a:	1891      	adds	r1, r2, r2
 800430c:	6239      	str	r1, [r7, #32]
 800430e:	415b      	adcs	r3, r3
 8004310:	627b      	str	r3, [r7, #36]	; 0x24
 8004312:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004316:	4641      	mov	r1, r8
 8004318:	1854      	adds	r4, r2, r1
 800431a:	4649      	mov	r1, r9
 800431c:	eb43 0501 	adc.w	r5, r3, r1
 8004320:	f04f 0200 	mov.w	r2, #0
 8004324:	f04f 0300 	mov.w	r3, #0
 8004328:	00eb      	lsls	r3, r5, #3
 800432a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800432e:	00e2      	lsls	r2, r4, #3
 8004330:	4614      	mov	r4, r2
 8004332:	461d      	mov	r5, r3
 8004334:	4643      	mov	r3, r8
 8004336:	18e3      	adds	r3, r4, r3
 8004338:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800433c:	464b      	mov	r3, r9
 800433e:	eb45 0303 	adc.w	r3, r5, r3
 8004342:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004346:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800434a:	685b      	ldr	r3, [r3, #4]
 800434c:	2200      	movs	r2, #0
 800434e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004352:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004356:	f04f 0200 	mov.w	r2, #0
 800435a:	f04f 0300 	mov.w	r3, #0
 800435e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004362:	4629      	mov	r1, r5
 8004364:	008b      	lsls	r3, r1, #2
 8004366:	4621      	mov	r1, r4
 8004368:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800436c:	4621      	mov	r1, r4
 800436e:	008a      	lsls	r2, r1, #2
 8004370:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004374:	f7fb ff5e 	bl	8000234 <__aeabi_uldivmod>
 8004378:	4602      	mov	r2, r0
 800437a:	460b      	mov	r3, r1
 800437c:	4b60      	ldr	r3, [pc, #384]	; (8004500 <UART_SetConfig+0x4e4>)
 800437e:	fba3 2302 	umull	r2, r3, r3, r2
 8004382:	095b      	lsrs	r3, r3, #5
 8004384:	011c      	lsls	r4, r3, #4
 8004386:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800438a:	2200      	movs	r2, #0
 800438c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004390:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004394:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004398:	4642      	mov	r2, r8
 800439a:	464b      	mov	r3, r9
 800439c:	1891      	adds	r1, r2, r2
 800439e:	61b9      	str	r1, [r7, #24]
 80043a0:	415b      	adcs	r3, r3
 80043a2:	61fb      	str	r3, [r7, #28]
 80043a4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80043a8:	4641      	mov	r1, r8
 80043aa:	1851      	adds	r1, r2, r1
 80043ac:	6139      	str	r1, [r7, #16]
 80043ae:	4649      	mov	r1, r9
 80043b0:	414b      	adcs	r3, r1
 80043b2:	617b      	str	r3, [r7, #20]
 80043b4:	f04f 0200 	mov.w	r2, #0
 80043b8:	f04f 0300 	mov.w	r3, #0
 80043bc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80043c0:	4659      	mov	r1, fp
 80043c2:	00cb      	lsls	r3, r1, #3
 80043c4:	4651      	mov	r1, sl
 80043c6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80043ca:	4651      	mov	r1, sl
 80043cc:	00ca      	lsls	r2, r1, #3
 80043ce:	4610      	mov	r0, r2
 80043d0:	4619      	mov	r1, r3
 80043d2:	4603      	mov	r3, r0
 80043d4:	4642      	mov	r2, r8
 80043d6:	189b      	adds	r3, r3, r2
 80043d8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80043dc:	464b      	mov	r3, r9
 80043de:	460a      	mov	r2, r1
 80043e0:	eb42 0303 	adc.w	r3, r2, r3
 80043e4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80043e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043ec:	685b      	ldr	r3, [r3, #4]
 80043ee:	2200      	movs	r2, #0
 80043f0:	67bb      	str	r3, [r7, #120]	; 0x78
 80043f2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80043f4:	f04f 0200 	mov.w	r2, #0
 80043f8:	f04f 0300 	mov.w	r3, #0
 80043fc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004400:	4649      	mov	r1, r9
 8004402:	008b      	lsls	r3, r1, #2
 8004404:	4641      	mov	r1, r8
 8004406:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800440a:	4641      	mov	r1, r8
 800440c:	008a      	lsls	r2, r1, #2
 800440e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004412:	f7fb ff0f 	bl	8000234 <__aeabi_uldivmod>
 8004416:	4602      	mov	r2, r0
 8004418:	460b      	mov	r3, r1
 800441a:	4611      	mov	r1, r2
 800441c:	4b38      	ldr	r3, [pc, #224]	; (8004500 <UART_SetConfig+0x4e4>)
 800441e:	fba3 2301 	umull	r2, r3, r3, r1
 8004422:	095b      	lsrs	r3, r3, #5
 8004424:	2264      	movs	r2, #100	; 0x64
 8004426:	fb02 f303 	mul.w	r3, r2, r3
 800442a:	1acb      	subs	r3, r1, r3
 800442c:	011b      	lsls	r3, r3, #4
 800442e:	3332      	adds	r3, #50	; 0x32
 8004430:	4a33      	ldr	r2, [pc, #204]	; (8004500 <UART_SetConfig+0x4e4>)
 8004432:	fba2 2303 	umull	r2, r3, r2, r3
 8004436:	095b      	lsrs	r3, r3, #5
 8004438:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800443c:	441c      	add	r4, r3
 800443e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004442:	2200      	movs	r2, #0
 8004444:	673b      	str	r3, [r7, #112]	; 0x70
 8004446:	677a      	str	r2, [r7, #116]	; 0x74
 8004448:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800444c:	4642      	mov	r2, r8
 800444e:	464b      	mov	r3, r9
 8004450:	1891      	adds	r1, r2, r2
 8004452:	60b9      	str	r1, [r7, #8]
 8004454:	415b      	adcs	r3, r3
 8004456:	60fb      	str	r3, [r7, #12]
 8004458:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800445c:	4641      	mov	r1, r8
 800445e:	1851      	adds	r1, r2, r1
 8004460:	6039      	str	r1, [r7, #0]
 8004462:	4649      	mov	r1, r9
 8004464:	414b      	adcs	r3, r1
 8004466:	607b      	str	r3, [r7, #4]
 8004468:	f04f 0200 	mov.w	r2, #0
 800446c:	f04f 0300 	mov.w	r3, #0
 8004470:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004474:	4659      	mov	r1, fp
 8004476:	00cb      	lsls	r3, r1, #3
 8004478:	4651      	mov	r1, sl
 800447a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800447e:	4651      	mov	r1, sl
 8004480:	00ca      	lsls	r2, r1, #3
 8004482:	4610      	mov	r0, r2
 8004484:	4619      	mov	r1, r3
 8004486:	4603      	mov	r3, r0
 8004488:	4642      	mov	r2, r8
 800448a:	189b      	adds	r3, r3, r2
 800448c:	66bb      	str	r3, [r7, #104]	; 0x68
 800448e:	464b      	mov	r3, r9
 8004490:	460a      	mov	r2, r1
 8004492:	eb42 0303 	adc.w	r3, r2, r3
 8004496:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004498:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800449c:	685b      	ldr	r3, [r3, #4]
 800449e:	2200      	movs	r2, #0
 80044a0:	663b      	str	r3, [r7, #96]	; 0x60
 80044a2:	667a      	str	r2, [r7, #100]	; 0x64
 80044a4:	f04f 0200 	mov.w	r2, #0
 80044a8:	f04f 0300 	mov.w	r3, #0
 80044ac:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80044b0:	4649      	mov	r1, r9
 80044b2:	008b      	lsls	r3, r1, #2
 80044b4:	4641      	mov	r1, r8
 80044b6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80044ba:	4641      	mov	r1, r8
 80044bc:	008a      	lsls	r2, r1, #2
 80044be:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80044c2:	f7fb feb7 	bl	8000234 <__aeabi_uldivmod>
 80044c6:	4602      	mov	r2, r0
 80044c8:	460b      	mov	r3, r1
 80044ca:	4b0d      	ldr	r3, [pc, #52]	; (8004500 <UART_SetConfig+0x4e4>)
 80044cc:	fba3 1302 	umull	r1, r3, r3, r2
 80044d0:	095b      	lsrs	r3, r3, #5
 80044d2:	2164      	movs	r1, #100	; 0x64
 80044d4:	fb01 f303 	mul.w	r3, r1, r3
 80044d8:	1ad3      	subs	r3, r2, r3
 80044da:	011b      	lsls	r3, r3, #4
 80044dc:	3332      	adds	r3, #50	; 0x32
 80044de:	4a08      	ldr	r2, [pc, #32]	; (8004500 <UART_SetConfig+0x4e4>)
 80044e0:	fba2 2303 	umull	r2, r3, r2, r3
 80044e4:	095b      	lsrs	r3, r3, #5
 80044e6:	f003 020f 	and.w	r2, r3, #15
 80044ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	4422      	add	r2, r4
 80044f2:	609a      	str	r2, [r3, #8]
}
 80044f4:	bf00      	nop
 80044f6:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80044fa:	46bd      	mov	sp, r7
 80044fc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004500:	51eb851f 	.word	0x51eb851f

08004504 <__NVIC_SetPriority>:
{
 8004504:	b480      	push	{r7}
 8004506:	b083      	sub	sp, #12
 8004508:	af00      	add	r7, sp, #0
 800450a:	4603      	mov	r3, r0
 800450c:	6039      	str	r1, [r7, #0]
 800450e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004510:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004514:	2b00      	cmp	r3, #0
 8004516:	db0a      	blt.n	800452e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	b2da      	uxtb	r2, r3
 800451c:	490c      	ldr	r1, [pc, #48]	; (8004550 <__NVIC_SetPriority+0x4c>)
 800451e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004522:	0112      	lsls	r2, r2, #4
 8004524:	b2d2      	uxtb	r2, r2
 8004526:	440b      	add	r3, r1
 8004528:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800452c:	e00a      	b.n	8004544 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800452e:	683b      	ldr	r3, [r7, #0]
 8004530:	b2da      	uxtb	r2, r3
 8004532:	4908      	ldr	r1, [pc, #32]	; (8004554 <__NVIC_SetPriority+0x50>)
 8004534:	79fb      	ldrb	r3, [r7, #7]
 8004536:	f003 030f 	and.w	r3, r3, #15
 800453a:	3b04      	subs	r3, #4
 800453c:	0112      	lsls	r2, r2, #4
 800453e:	b2d2      	uxtb	r2, r2
 8004540:	440b      	add	r3, r1
 8004542:	761a      	strb	r2, [r3, #24]
}
 8004544:	bf00      	nop
 8004546:	370c      	adds	r7, #12
 8004548:	46bd      	mov	sp, r7
 800454a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454e:	4770      	bx	lr
 8004550:	e000e100 	.word	0xe000e100
 8004554:	e000ed00 	.word	0xe000ed00

08004558 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8004558:	b580      	push	{r7, lr}
 800455a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800455c:	4b05      	ldr	r3, [pc, #20]	; (8004574 <SysTick_Handler+0x1c>)
 800455e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8004560:	f001 fd28 	bl	8005fb4 <xTaskGetSchedulerState>
 8004564:	4603      	mov	r3, r0
 8004566:	2b01      	cmp	r3, #1
 8004568:	d001      	beq.n	800456e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800456a:	f002 fb0d 	bl	8006b88 <xPortSysTickHandler>
  }
}
 800456e:	bf00      	nop
 8004570:	bd80      	pop	{r7, pc}
 8004572:	bf00      	nop
 8004574:	e000e010 	.word	0xe000e010

08004578 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8004578:	b580      	push	{r7, lr}
 800457a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800457c:	2100      	movs	r1, #0
 800457e:	f06f 0004 	mvn.w	r0, #4
 8004582:	f7ff ffbf 	bl	8004504 <__NVIC_SetPriority>
#endif
}
 8004586:	bf00      	nop
 8004588:	bd80      	pop	{r7, pc}
	...

0800458c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800458c:	b480      	push	{r7}
 800458e:	b083      	sub	sp, #12
 8004590:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004592:	f3ef 8305 	mrs	r3, IPSR
 8004596:	603b      	str	r3, [r7, #0]
  return(result);
 8004598:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800459a:	2b00      	cmp	r3, #0
 800459c:	d003      	beq.n	80045a6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800459e:	f06f 0305 	mvn.w	r3, #5
 80045a2:	607b      	str	r3, [r7, #4]
 80045a4:	e00c      	b.n	80045c0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80045a6:	4b0a      	ldr	r3, [pc, #40]	; (80045d0 <osKernelInitialize+0x44>)
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d105      	bne.n	80045ba <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80045ae:	4b08      	ldr	r3, [pc, #32]	; (80045d0 <osKernelInitialize+0x44>)
 80045b0:	2201      	movs	r2, #1
 80045b2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80045b4:	2300      	movs	r3, #0
 80045b6:	607b      	str	r3, [r7, #4]
 80045b8:	e002      	b.n	80045c0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80045ba:	f04f 33ff 	mov.w	r3, #4294967295
 80045be:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80045c0:	687b      	ldr	r3, [r7, #4]
}
 80045c2:	4618      	mov	r0, r3
 80045c4:	370c      	adds	r7, #12
 80045c6:	46bd      	mov	sp, r7
 80045c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045cc:	4770      	bx	lr
 80045ce:	bf00      	nop
 80045d0:	200005ac 	.word	0x200005ac

080045d4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80045d4:	b580      	push	{r7, lr}
 80045d6:	b082      	sub	sp, #8
 80045d8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80045da:	f3ef 8305 	mrs	r3, IPSR
 80045de:	603b      	str	r3, [r7, #0]
  return(result);
 80045e0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d003      	beq.n	80045ee <osKernelStart+0x1a>
    stat = osErrorISR;
 80045e6:	f06f 0305 	mvn.w	r3, #5
 80045ea:	607b      	str	r3, [r7, #4]
 80045ec:	e010      	b.n	8004610 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80045ee:	4b0b      	ldr	r3, [pc, #44]	; (800461c <osKernelStart+0x48>)
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	2b01      	cmp	r3, #1
 80045f4:	d109      	bne.n	800460a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80045f6:	f7ff ffbf 	bl	8004578 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80045fa:	4b08      	ldr	r3, [pc, #32]	; (800461c <osKernelStart+0x48>)
 80045fc:	2202      	movs	r2, #2
 80045fe:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004600:	f001 f87c 	bl	80056fc <vTaskStartScheduler>
      stat = osOK;
 8004604:	2300      	movs	r3, #0
 8004606:	607b      	str	r3, [r7, #4]
 8004608:	e002      	b.n	8004610 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800460a:	f04f 33ff 	mov.w	r3, #4294967295
 800460e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004610:	687b      	ldr	r3, [r7, #4]
}
 8004612:	4618      	mov	r0, r3
 8004614:	3708      	adds	r7, #8
 8004616:	46bd      	mov	sp, r7
 8004618:	bd80      	pop	{r7, pc}
 800461a:	bf00      	nop
 800461c:	200005ac 	.word	0x200005ac

08004620 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004620:	b580      	push	{r7, lr}
 8004622:	b08e      	sub	sp, #56	; 0x38
 8004624:	af04      	add	r7, sp, #16
 8004626:	60f8      	str	r0, [r7, #12]
 8004628:	60b9      	str	r1, [r7, #8]
 800462a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800462c:	2300      	movs	r3, #0
 800462e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004630:	f3ef 8305 	mrs	r3, IPSR
 8004634:	617b      	str	r3, [r7, #20]
  return(result);
 8004636:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8004638:	2b00      	cmp	r3, #0
 800463a:	d17e      	bne.n	800473a <osThreadNew+0x11a>
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	2b00      	cmp	r3, #0
 8004640:	d07b      	beq.n	800473a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8004642:	2380      	movs	r3, #128	; 0x80
 8004644:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8004646:	2318      	movs	r3, #24
 8004648:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800464a:	2300      	movs	r3, #0
 800464c:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800464e:	f04f 33ff 	mov.w	r3, #4294967295
 8004652:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2b00      	cmp	r3, #0
 8004658:	d045      	beq.n	80046e6 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	2b00      	cmp	r3, #0
 8004660:	d002      	beq.n	8004668 <osThreadNew+0x48>
        name = attr->name;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	699b      	ldr	r3, [r3, #24]
 800466c:	2b00      	cmp	r3, #0
 800466e:	d002      	beq.n	8004676 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	699b      	ldr	r3, [r3, #24]
 8004674:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004676:	69fb      	ldr	r3, [r7, #28]
 8004678:	2b00      	cmp	r3, #0
 800467a:	d008      	beq.n	800468e <osThreadNew+0x6e>
 800467c:	69fb      	ldr	r3, [r7, #28]
 800467e:	2b38      	cmp	r3, #56	; 0x38
 8004680:	d805      	bhi.n	800468e <osThreadNew+0x6e>
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	685b      	ldr	r3, [r3, #4]
 8004686:	f003 0301 	and.w	r3, r3, #1
 800468a:	2b00      	cmp	r3, #0
 800468c:	d001      	beq.n	8004692 <osThreadNew+0x72>
        return (NULL);
 800468e:	2300      	movs	r3, #0
 8004690:	e054      	b.n	800473c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	695b      	ldr	r3, [r3, #20]
 8004696:	2b00      	cmp	r3, #0
 8004698:	d003      	beq.n	80046a2 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	695b      	ldr	r3, [r3, #20]
 800469e:	089b      	lsrs	r3, r3, #2
 80046a0:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	689b      	ldr	r3, [r3, #8]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d00e      	beq.n	80046c8 <osThreadNew+0xa8>
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	68db      	ldr	r3, [r3, #12]
 80046ae:	2ba7      	cmp	r3, #167	; 0xa7
 80046b0:	d90a      	bls.n	80046c8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d006      	beq.n	80046c8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	695b      	ldr	r3, [r3, #20]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d002      	beq.n	80046c8 <osThreadNew+0xa8>
        mem = 1;
 80046c2:	2301      	movs	r3, #1
 80046c4:	61bb      	str	r3, [r7, #24]
 80046c6:	e010      	b.n	80046ea <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	689b      	ldr	r3, [r3, #8]
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d10c      	bne.n	80046ea <osThreadNew+0xca>
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	68db      	ldr	r3, [r3, #12]
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d108      	bne.n	80046ea <osThreadNew+0xca>
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	691b      	ldr	r3, [r3, #16]
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d104      	bne.n	80046ea <osThreadNew+0xca>
          mem = 0;
 80046e0:	2300      	movs	r3, #0
 80046e2:	61bb      	str	r3, [r7, #24]
 80046e4:	e001      	b.n	80046ea <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80046e6:	2300      	movs	r3, #0
 80046e8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80046ea:	69bb      	ldr	r3, [r7, #24]
 80046ec:	2b01      	cmp	r3, #1
 80046ee:	d110      	bne.n	8004712 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80046f4:	687a      	ldr	r2, [r7, #4]
 80046f6:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80046f8:	9202      	str	r2, [sp, #8]
 80046fa:	9301      	str	r3, [sp, #4]
 80046fc:	69fb      	ldr	r3, [r7, #28]
 80046fe:	9300      	str	r3, [sp, #0]
 8004700:	68bb      	ldr	r3, [r7, #8]
 8004702:	6a3a      	ldr	r2, [r7, #32]
 8004704:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004706:	68f8      	ldr	r0, [r7, #12]
 8004708:	f000 fe0c 	bl	8005324 <xTaskCreateStatic>
 800470c:	4603      	mov	r3, r0
 800470e:	613b      	str	r3, [r7, #16]
 8004710:	e013      	b.n	800473a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8004712:	69bb      	ldr	r3, [r7, #24]
 8004714:	2b00      	cmp	r3, #0
 8004716:	d110      	bne.n	800473a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004718:	6a3b      	ldr	r3, [r7, #32]
 800471a:	b29a      	uxth	r2, r3
 800471c:	f107 0310 	add.w	r3, r7, #16
 8004720:	9301      	str	r3, [sp, #4]
 8004722:	69fb      	ldr	r3, [r7, #28]
 8004724:	9300      	str	r3, [sp, #0]
 8004726:	68bb      	ldr	r3, [r7, #8]
 8004728:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800472a:	68f8      	ldr	r0, [r7, #12]
 800472c:	f000 fe57 	bl	80053de <xTaskCreate>
 8004730:	4603      	mov	r3, r0
 8004732:	2b01      	cmp	r3, #1
 8004734:	d001      	beq.n	800473a <osThreadNew+0x11a>
            hTask = NULL;
 8004736:	2300      	movs	r3, #0
 8004738:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800473a:	693b      	ldr	r3, [r7, #16]
}
 800473c:	4618      	mov	r0, r3
 800473e:	3728      	adds	r7, #40	; 0x28
 8004740:	46bd      	mov	sp, r7
 8004742:	bd80      	pop	{r7, pc}

08004744 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8004744:	b580      	push	{r7, lr}
 8004746:	b084      	sub	sp, #16
 8004748:	af00      	add	r7, sp, #0
 800474a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800474c:	f3ef 8305 	mrs	r3, IPSR
 8004750:	60bb      	str	r3, [r7, #8]
  return(result);
 8004752:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004754:	2b00      	cmp	r3, #0
 8004756:	d003      	beq.n	8004760 <osDelay+0x1c>
    stat = osErrorISR;
 8004758:	f06f 0305 	mvn.w	r3, #5
 800475c:	60fb      	str	r3, [r7, #12]
 800475e:	e007      	b.n	8004770 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8004760:	2300      	movs	r3, #0
 8004762:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2b00      	cmp	r3, #0
 8004768:	d002      	beq.n	8004770 <osDelay+0x2c>
      vTaskDelay(ticks);
 800476a:	6878      	ldr	r0, [r7, #4]
 800476c:	f000 ff92 	bl	8005694 <vTaskDelay>
    }
  }

  return (stat);
 8004770:	68fb      	ldr	r3, [r7, #12]
}
 8004772:	4618      	mov	r0, r3
 8004774:	3710      	adds	r7, #16
 8004776:	46bd      	mov	sp, r7
 8004778:	bd80      	pop	{r7, pc}
	...

0800477c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800477c:	b480      	push	{r7}
 800477e:	b085      	sub	sp, #20
 8004780:	af00      	add	r7, sp, #0
 8004782:	60f8      	str	r0, [r7, #12]
 8004784:	60b9      	str	r1, [r7, #8]
 8004786:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	4a07      	ldr	r2, [pc, #28]	; (80047a8 <vApplicationGetIdleTaskMemory+0x2c>)
 800478c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800478e:	68bb      	ldr	r3, [r7, #8]
 8004790:	4a06      	ldr	r2, [pc, #24]	; (80047ac <vApplicationGetIdleTaskMemory+0x30>)
 8004792:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	2280      	movs	r2, #128	; 0x80
 8004798:	601a      	str	r2, [r3, #0]
}
 800479a:	bf00      	nop
 800479c:	3714      	adds	r7, #20
 800479e:	46bd      	mov	sp, r7
 80047a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a4:	4770      	bx	lr
 80047a6:	bf00      	nop
 80047a8:	200005b0 	.word	0x200005b0
 80047ac:	20000658 	.word	0x20000658

080047b0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80047b0:	b480      	push	{r7}
 80047b2:	b085      	sub	sp, #20
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	60f8      	str	r0, [r7, #12]
 80047b8:	60b9      	str	r1, [r7, #8]
 80047ba:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	4a07      	ldr	r2, [pc, #28]	; (80047dc <vApplicationGetTimerTaskMemory+0x2c>)
 80047c0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80047c2:	68bb      	ldr	r3, [r7, #8]
 80047c4:	4a06      	ldr	r2, [pc, #24]	; (80047e0 <vApplicationGetTimerTaskMemory+0x30>)
 80047c6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	f44f 7280 	mov.w	r2, #256	; 0x100
 80047ce:	601a      	str	r2, [r3, #0]
}
 80047d0:	bf00      	nop
 80047d2:	3714      	adds	r7, #20
 80047d4:	46bd      	mov	sp, r7
 80047d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047da:	4770      	bx	lr
 80047dc:	20000858 	.word	0x20000858
 80047e0:	20000900 	.word	0x20000900

080047e4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80047e4:	b480      	push	{r7}
 80047e6:	b083      	sub	sp, #12
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	f103 0208 	add.w	r2, r3, #8
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	f04f 32ff 	mov.w	r2, #4294967295
 80047fc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	f103 0208 	add.w	r2, r3, #8
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	f103 0208 	add.w	r2, r3, #8
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	2200      	movs	r2, #0
 8004816:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004818:	bf00      	nop
 800481a:	370c      	adds	r7, #12
 800481c:	46bd      	mov	sp, r7
 800481e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004822:	4770      	bx	lr

08004824 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004824:	b480      	push	{r7}
 8004826:	b083      	sub	sp, #12
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2200      	movs	r2, #0
 8004830:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004832:	bf00      	nop
 8004834:	370c      	adds	r7, #12
 8004836:	46bd      	mov	sp, r7
 8004838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483c:	4770      	bx	lr

0800483e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800483e:	b480      	push	{r7}
 8004840:	b085      	sub	sp, #20
 8004842:	af00      	add	r7, sp, #0
 8004844:	6078      	str	r0, [r7, #4]
 8004846:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	685b      	ldr	r3, [r3, #4]
 800484c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800484e:	683b      	ldr	r3, [r7, #0]
 8004850:	68fa      	ldr	r2, [r7, #12]
 8004852:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	689a      	ldr	r2, [r3, #8]
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	689b      	ldr	r3, [r3, #8]
 8004860:	683a      	ldr	r2, [r7, #0]
 8004862:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	683a      	ldr	r2, [r7, #0]
 8004868:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800486a:	683b      	ldr	r3, [r7, #0]
 800486c:	687a      	ldr	r2, [r7, #4]
 800486e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	1c5a      	adds	r2, r3, #1
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	601a      	str	r2, [r3, #0]
}
 800487a:	bf00      	nop
 800487c:	3714      	adds	r7, #20
 800487e:	46bd      	mov	sp, r7
 8004880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004884:	4770      	bx	lr

08004886 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004886:	b480      	push	{r7}
 8004888:	b085      	sub	sp, #20
 800488a:	af00      	add	r7, sp, #0
 800488c:	6078      	str	r0, [r7, #4]
 800488e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004890:	683b      	ldr	r3, [r7, #0]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004896:	68bb      	ldr	r3, [r7, #8]
 8004898:	f1b3 3fff 	cmp.w	r3, #4294967295
 800489c:	d103      	bne.n	80048a6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	691b      	ldr	r3, [r3, #16]
 80048a2:	60fb      	str	r3, [r7, #12]
 80048a4:	e00c      	b.n	80048c0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	3308      	adds	r3, #8
 80048aa:	60fb      	str	r3, [r7, #12]
 80048ac:	e002      	b.n	80048b4 <vListInsert+0x2e>
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	685b      	ldr	r3, [r3, #4]
 80048b2:	60fb      	str	r3, [r7, #12]
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	685b      	ldr	r3, [r3, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	68ba      	ldr	r2, [r7, #8]
 80048bc:	429a      	cmp	r2, r3
 80048be:	d2f6      	bcs.n	80048ae <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	685a      	ldr	r2, [r3, #4]
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	685b      	ldr	r3, [r3, #4]
 80048cc:	683a      	ldr	r2, [r7, #0]
 80048ce:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	68fa      	ldr	r2, [r7, #12]
 80048d4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	683a      	ldr	r2, [r7, #0]
 80048da:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80048dc:	683b      	ldr	r3, [r7, #0]
 80048de:	687a      	ldr	r2, [r7, #4]
 80048e0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	1c5a      	adds	r2, r3, #1
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	601a      	str	r2, [r3, #0]
}
 80048ec:	bf00      	nop
 80048ee:	3714      	adds	r7, #20
 80048f0:	46bd      	mov	sp, r7
 80048f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f6:	4770      	bx	lr

080048f8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80048f8:	b480      	push	{r7}
 80048fa:	b085      	sub	sp, #20
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	691b      	ldr	r3, [r3, #16]
 8004904:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	685b      	ldr	r3, [r3, #4]
 800490a:	687a      	ldr	r2, [r7, #4]
 800490c:	6892      	ldr	r2, [r2, #8]
 800490e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	689b      	ldr	r3, [r3, #8]
 8004914:	687a      	ldr	r2, [r7, #4]
 8004916:	6852      	ldr	r2, [r2, #4]
 8004918:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	685b      	ldr	r3, [r3, #4]
 800491e:	687a      	ldr	r2, [r7, #4]
 8004920:	429a      	cmp	r2, r3
 8004922:	d103      	bne.n	800492c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	689a      	ldr	r2, [r3, #8]
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2200      	movs	r2, #0
 8004930:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	1e5a      	subs	r2, r3, #1
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	681b      	ldr	r3, [r3, #0]
}
 8004940:	4618      	mov	r0, r3
 8004942:	3714      	adds	r7, #20
 8004944:	46bd      	mov	sp, r7
 8004946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494a:	4770      	bx	lr

0800494c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800494c:	b580      	push	{r7, lr}
 800494e:	b084      	sub	sp, #16
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]
 8004954:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	2b00      	cmp	r3, #0
 800495e:	d10a      	bne.n	8004976 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004960:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004964:	f383 8811 	msr	BASEPRI, r3
 8004968:	f3bf 8f6f 	isb	sy
 800496c:	f3bf 8f4f 	dsb	sy
 8004970:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004972:	bf00      	nop
 8004974:	e7fe      	b.n	8004974 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004976:	f002 f875 	bl	8006a64 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	681a      	ldr	r2, [r3, #0]
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004982:	68f9      	ldr	r1, [r7, #12]
 8004984:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004986:	fb01 f303 	mul.w	r3, r1, r3
 800498a:	441a      	add	r2, r3
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	2200      	movs	r2, #0
 8004994:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	681a      	ldr	r2, [r3, #0]
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	681a      	ldr	r2, [r3, #0]
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049a6:	3b01      	subs	r3, #1
 80049a8:	68f9      	ldr	r1, [r7, #12]
 80049aa:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80049ac:	fb01 f303 	mul.w	r3, r1, r3
 80049b0:	441a      	add	r2, r3
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	22ff      	movs	r2, #255	; 0xff
 80049ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	22ff      	movs	r2, #255	; 0xff
 80049c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80049c6:	683b      	ldr	r3, [r7, #0]
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d114      	bne.n	80049f6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	691b      	ldr	r3, [r3, #16]
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d01a      	beq.n	8004a0a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	3310      	adds	r3, #16
 80049d8:	4618      	mov	r0, r3
 80049da:	f001 f929 	bl	8005c30 <xTaskRemoveFromEventList>
 80049de:	4603      	mov	r3, r0
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d012      	beq.n	8004a0a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80049e4:	4b0c      	ldr	r3, [pc, #48]	; (8004a18 <xQueueGenericReset+0xcc>)
 80049e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80049ea:	601a      	str	r2, [r3, #0]
 80049ec:	f3bf 8f4f 	dsb	sy
 80049f0:	f3bf 8f6f 	isb	sy
 80049f4:	e009      	b.n	8004a0a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	3310      	adds	r3, #16
 80049fa:	4618      	mov	r0, r3
 80049fc:	f7ff fef2 	bl	80047e4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	3324      	adds	r3, #36	; 0x24
 8004a04:	4618      	mov	r0, r3
 8004a06:	f7ff feed 	bl	80047e4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004a0a:	f002 f85b 	bl	8006ac4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004a0e:	2301      	movs	r3, #1
}
 8004a10:	4618      	mov	r0, r3
 8004a12:	3710      	adds	r7, #16
 8004a14:	46bd      	mov	sp, r7
 8004a16:	bd80      	pop	{r7, pc}
 8004a18:	e000ed04 	.word	0xe000ed04

08004a1c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004a1c:	b580      	push	{r7, lr}
 8004a1e:	b08e      	sub	sp, #56	; 0x38
 8004a20:	af02      	add	r7, sp, #8
 8004a22:	60f8      	str	r0, [r7, #12]
 8004a24:	60b9      	str	r1, [r7, #8]
 8004a26:	607a      	str	r2, [r7, #4]
 8004a28:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d10a      	bne.n	8004a46 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8004a30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a34:	f383 8811 	msr	BASEPRI, r3
 8004a38:	f3bf 8f6f 	isb	sy
 8004a3c:	f3bf 8f4f 	dsb	sy
 8004a40:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004a42:	bf00      	nop
 8004a44:	e7fe      	b.n	8004a44 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004a46:	683b      	ldr	r3, [r7, #0]
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d10a      	bne.n	8004a62 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8004a4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a50:	f383 8811 	msr	BASEPRI, r3
 8004a54:	f3bf 8f6f 	isb	sy
 8004a58:	f3bf 8f4f 	dsb	sy
 8004a5c:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004a5e:	bf00      	nop
 8004a60:	e7fe      	b.n	8004a60 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d002      	beq.n	8004a6e <xQueueGenericCreateStatic+0x52>
 8004a68:	68bb      	ldr	r3, [r7, #8]
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d001      	beq.n	8004a72 <xQueueGenericCreateStatic+0x56>
 8004a6e:	2301      	movs	r3, #1
 8004a70:	e000      	b.n	8004a74 <xQueueGenericCreateStatic+0x58>
 8004a72:	2300      	movs	r3, #0
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d10a      	bne.n	8004a8e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8004a78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a7c:	f383 8811 	msr	BASEPRI, r3
 8004a80:	f3bf 8f6f 	isb	sy
 8004a84:	f3bf 8f4f 	dsb	sy
 8004a88:	623b      	str	r3, [r7, #32]
}
 8004a8a:	bf00      	nop
 8004a8c:	e7fe      	b.n	8004a8c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d102      	bne.n	8004a9a <xQueueGenericCreateStatic+0x7e>
 8004a94:	68bb      	ldr	r3, [r7, #8]
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d101      	bne.n	8004a9e <xQueueGenericCreateStatic+0x82>
 8004a9a:	2301      	movs	r3, #1
 8004a9c:	e000      	b.n	8004aa0 <xQueueGenericCreateStatic+0x84>
 8004a9e:	2300      	movs	r3, #0
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d10a      	bne.n	8004aba <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8004aa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004aa8:	f383 8811 	msr	BASEPRI, r3
 8004aac:	f3bf 8f6f 	isb	sy
 8004ab0:	f3bf 8f4f 	dsb	sy
 8004ab4:	61fb      	str	r3, [r7, #28]
}
 8004ab6:	bf00      	nop
 8004ab8:	e7fe      	b.n	8004ab8 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004aba:	2350      	movs	r3, #80	; 0x50
 8004abc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004abe:	697b      	ldr	r3, [r7, #20]
 8004ac0:	2b50      	cmp	r3, #80	; 0x50
 8004ac2:	d00a      	beq.n	8004ada <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8004ac4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ac8:	f383 8811 	msr	BASEPRI, r3
 8004acc:	f3bf 8f6f 	isb	sy
 8004ad0:	f3bf 8f4f 	dsb	sy
 8004ad4:	61bb      	str	r3, [r7, #24]
}
 8004ad6:	bf00      	nop
 8004ad8:	e7fe      	b.n	8004ad8 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004ada:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004adc:	683b      	ldr	r3, [r7, #0]
 8004ade:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004ae0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d00d      	beq.n	8004b02 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004ae6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ae8:	2201      	movs	r2, #1
 8004aea:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004aee:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8004af2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004af4:	9300      	str	r3, [sp, #0]
 8004af6:	4613      	mov	r3, r2
 8004af8:	687a      	ldr	r2, [r7, #4]
 8004afa:	68b9      	ldr	r1, [r7, #8]
 8004afc:	68f8      	ldr	r0, [r7, #12]
 8004afe:	f000 f805 	bl	8004b0c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004b02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8004b04:	4618      	mov	r0, r3
 8004b06:	3730      	adds	r7, #48	; 0x30
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	bd80      	pop	{r7, pc}

08004b0c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004b0c:	b580      	push	{r7, lr}
 8004b0e:	b084      	sub	sp, #16
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	60f8      	str	r0, [r7, #12]
 8004b14:	60b9      	str	r1, [r7, #8]
 8004b16:	607a      	str	r2, [r7, #4]
 8004b18:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004b1a:	68bb      	ldr	r3, [r7, #8]
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d103      	bne.n	8004b28 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004b20:	69bb      	ldr	r3, [r7, #24]
 8004b22:	69ba      	ldr	r2, [r7, #24]
 8004b24:	601a      	str	r2, [r3, #0]
 8004b26:	e002      	b.n	8004b2e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004b28:	69bb      	ldr	r3, [r7, #24]
 8004b2a:	687a      	ldr	r2, [r7, #4]
 8004b2c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004b2e:	69bb      	ldr	r3, [r7, #24]
 8004b30:	68fa      	ldr	r2, [r7, #12]
 8004b32:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004b34:	69bb      	ldr	r3, [r7, #24]
 8004b36:	68ba      	ldr	r2, [r7, #8]
 8004b38:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004b3a:	2101      	movs	r1, #1
 8004b3c:	69b8      	ldr	r0, [r7, #24]
 8004b3e:	f7ff ff05 	bl	800494c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004b42:	69bb      	ldr	r3, [r7, #24]
 8004b44:	78fa      	ldrb	r2, [r7, #3]
 8004b46:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004b4a:	bf00      	nop
 8004b4c:	3710      	adds	r7, #16
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	bd80      	pop	{r7, pc}
	...

08004b54 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004b54:	b580      	push	{r7, lr}
 8004b56:	b08e      	sub	sp, #56	; 0x38
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	60f8      	str	r0, [r7, #12]
 8004b5c:	60b9      	str	r1, [r7, #8]
 8004b5e:	607a      	str	r2, [r7, #4]
 8004b60:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004b62:	2300      	movs	r3, #0
 8004b64:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004b6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d10a      	bne.n	8004b86 <xQueueGenericSend+0x32>
	__asm volatile
 8004b70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b74:	f383 8811 	msr	BASEPRI, r3
 8004b78:	f3bf 8f6f 	isb	sy
 8004b7c:	f3bf 8f4f 	dsb	sy
 8004b80:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004b82:	bf00      	nop
 8004b84:	e7fe      	b.n	8004b84 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004b86:	68bb      	ldr	r3, [r7, #8]
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d103      	bne.n	8004b94 <xQueueGenericSend+0x40>
 8004b8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d101      	bne.n	8004b98 <xQueueGenericSend+0x44>
 8004b94:	2301      	movs	r3, #1
 8004b96:	e000      	b.n	8004b9a <xQueueGenericSend+0x46>
 8004b98:	2300      	movs	r3, #0
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d10a      	bne.n	8004bb4 <xQueueGenericSend+0x60>
	__asm volatile
 8004b9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ba2:	f383 8811 	msr	BASEPRI, r3
 8004ba6:	f3bf 8f6f 	isb	sy
 8004baa:	f3bf 8f4f 	dsb	sy
 8004bae:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004bb0:	bf00      	nop
 8004bb2:	e7fe      	b.n	8004bb2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004bb4:	683b      	ldr	r3, [r7, #0]
 8004bb6:	2b02      	cmp	r3, #2
 8004bb8:	d103      	bne.n	8004bc2 <xQueueGenericSend+0x6e>
 8004bba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bbe:	2b01      	cmp	r3, #1
 8004bc0:	d101      	bne.n	8004bc6 <xQueueGenericSend+0x72>
 8004bc2:	2301      	movs	r3, #1
 8004bc4:	e000      	b.n	8004bc8 <xQueueGenericSend+0x74>
 8004bc6:	2300      	movs	r3, #0
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d10a      	bne.n	8004be2 <xQueueGenericSend+0x8e>
	__asm volatile
 8004bcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bd0:	f383 8811 	msr	BASEPRI, r3
 8004bd4:	f3bf 8f6f 	isb	sy
 8004bd8:	f3bf 8f4f 	dsb	sy
 8004bdc:	623b      	str	r3, [r7, #32]
}
 8004bde:	bf00      	nop
 8004be0:	e7fe      	b.n	8004be0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004be2:	f001 f9e7 	bl	8005fb4 <xTaskGetSchedulerState>
 8004be6:	4603      	mov	r3, r0
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d102      	bne.n	8004bf2 <xQueueGenericSend+0x9e>
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d101      	bne.n	8004bf6 <xQueueGenericSend+0xa2>
 8004bf2:	2301      	movs	r3, #1
 8004bf4:	e000      	b.n	8004bf8 <xQueueGenericSend+0xa4>
 8004bf6:	2300      	movs	r3, #0
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d10a      	bne.n	8004c12 <xQueueGenericSend+0xbe>
	__asm volatile
 8004bfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c00:	f383 8811 	msr	BASEPRI, r3
 8004c04:	f3bf 8f6f 	isb	sy
 8004c08:	f3bf 8f4f 	dsb	sy
 8004c0c:	61fb      	str	r3, [r7, #28]
}
 8004c0e:	bf00      	nop
 8004c10:	e7fe      	b.n	8004c10 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004c12:	f001 ff27 	bl	8006a64 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004c16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c18:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004c1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c1e:	429a      	cmp	r2, r3
 8004c20:	d302      	bcc.n	8004c28 <xQueueGenericSend+0xd4>
 8004c22:	683b      	ldr	r3, [r7, #0]
 8004c24:	2b02      	cmp	r3, #2
 8004c26:	d129      	bne.n	8004c7c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004c28:	683a      	ldr	r2, [r7, #0]
 8004c2a:	68b9      	ldr	r1, [r7, #8]
 8004c2c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004c2e:	f000 fa0b 	bl	8005048 <prvCopyDataToQueue>
 8004c32:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004c34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d010      	beq.n	8004c5e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004c3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c3e:	3324      	adds	r3, #36	; 0x24
 8004c40:	4618      	mov	r0, r3
 8004c42:	f000 fff5 	bl	8005c30 <xTaskRemoveFromEventList>
 8004c46:	4603      	mov	r3, r0
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d013      	beq.n	8004c74 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004c4c:	4b3f      	ldr	r3, [pc, #252]	; (8004d4c <xQueueGenericSend+0x1f8>)
 8004c4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c52:	601a      	str	r2, [r3, #0]
 8004c54:	f3bf 8f4f 	dsb	sy
 8004c58:	f3bf 8f6f 	isb	sy
 8004c5c:	e00a      	b.n	8004c74 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004c5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d007      	beq.n	8004c74 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004c64:	4b39      	ldr	r3, [pc, #228]	; (8004d4c <xQueueGenericSend+0x1f8>)
 8004c66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c6a:	601a      	str	r2, [r3, #0]
 8004c6c:	f3bf 8f4f 	dsb	sy
 8004c70:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004c74:	f001 ff26 	bl	8006ac4 <vPortExitCritical>
				return pdPASS;
 8004c78:	2301      	movs	r3, #1
 8004c7a:	e063      	b.n	8004d44 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d103      	bne.n	8004c8a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004c82:	f001 ff1f 	bl	8006ac4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004c86:	2300      	movs	r3, #0
 8004c88:	e05c      	b.n	8004d44 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004c8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d106      	bne.n	8004c9e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004c90:	f107 0314 	add.w	r3, r7, #20
 8004c94:	4618      	mov	r0, r3
 8004c96:	f001 f82f 	bl	8005cf8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004c9a:	2301      	movs	r3, #1
 8004c9c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004c9e:	f001 ff11 	bl	8006ac4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004ca2:	f000 fd9b 	bl	80057dc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004ca6:	f001 fedd 	bl	8006a64 <vPortEnterCritical>
 8004caa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cac:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004cb0:	b25b      	sxtb	r3, r3
 8004cb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cb6:	d103      	bne.n	8004cc0 <xQueueGenericSend+0x16c>
 8004cb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cba:	2200      	movs	r2, #0
 8004cbc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004cc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cc2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004cc6:	b25b      	sxtb	r3, r3
 8004cc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ccc:	d103      	bne.n	8004cd6 <xQueueGenericSend+0x182>
 8004cce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cd0:	2200      	movs	r2, #0
 8004cd2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004cd6:	f001 fef5 	bl	8006ac4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004cda:	1d3a      	adds	r2, r7, #4
 8004cdc:	f107 0314 	add.w	r3, r7, #20
 8004ce0:	4611      	mov	r1, r2
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	f001 f81e 	bl	8005d24 <xTaskCheckForTimeOut>
 8004ce8:	4603      	mov	r3, r0
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d124      	bne.n	8004d38 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004cee:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004cf0:	f000 faa2 	bl	8005238 <prvIsQueueFull>
 8004cf4:	4603      	mov	r3, r0
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d018      	beq.n	8004d2c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004cfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cfc:	3310      	adds	r3, #16
 8004cfe:	687a      	ldr	r2, [r7, #4]
 8004d00:	4611      	mov	r1, r2
 8004d02:	4618      	mov	r0, r3
 8004d04:	f000 ff44 	bl	8005b90 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004d08:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004d0a:	f000 fa2d 	bl	8005168 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004d0e:	f000 fd73 	bl	80057f8 <xTaskResumeAll>
 8004d12:	4603      	mov	r3, r0
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	f47f af7c 	bne.w	8004c12 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8004d1a:	4b0c      	ldr	r3, [pc, #48]	; (8004d4c <xQueueGenericSend+0x1f8>)
 8004d1c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d20:	601a      	str	r2, [r3, #0]
 8004d22:	f3bf 8f4f 	dsb	sy
 8004d26:	f3bf 8f6f 	isb	sy
 8004d2a:	e772      	b.n	8004c12 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004d2c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004d2e:	f000 fa1b 	bl	8005168 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004d32:	f000 fd61 	bl	80057f8 <xTaskResumeAll>
 8004d36:	e76c      	b.n	8004c12 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004d38:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004d3a:	f000 fa15 	bl	8005168 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004d3e:	f000 fd5b 	bl	80057f8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004d42:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004d44:	4618      	mov	r0, r3
 8004d46:	3738      	adds	r7, #56	; 0x38
 8004d48:	46bd      	mov	sp, r7
 8004d4a:	bd80      	pop	{r7, pc}
 8004d4c:	e000ed04 	.word	0xe000ed04

08004d50 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004d50:	b580      	push	{r7, lr}
 8004d52:	b090      	sub	sp, #64	; 0x40
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	60f8      	str	r0, [r7, #12]
 8004d58:	60b9      	str	r1, [r7, #8]
 8004d5a:	607a      	str	r2, [r7, #4]
 8004d5c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8004d62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d10a      	bne.n	8004d7e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8004d68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d6c:	f383 8811 	msr	BASEPRI, r3
 8004d70:	f3bf 8f6f 	isb	sy
 8004d74:	f3bf 8f4f 	dsb	sy
 8004d78:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004d7a:	bf00      	nop
 8004d7c:	e7fe      	b.n	8004d7c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004d7e:	68bb      	ldr	r3, [r7, #8]
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d103      	bne.n	8004d8c <xQueueGenericSendFromISR+0x3c>
 8004d84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d101      	bne.n	8004d90 <xQueueGenericSendFromISR+0x40>
 8004d8c:	2301      	movs	r3, #1
 8004d8e:	e000      	b.n	8004d92 <xQueueGenericSendFromISR+0x42>
 8004d90:	2300      	movs	r3, #0
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d10a      	bne.n	8004dac <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8004d96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d9a:	f383 8811 	msr	BASEPRI, r3
 8004d9e:	f3bf 8f6f 	isb	sy
 8004da2:	f3bf 8f4f 	dsb	sy
 8004da6:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004da8:	bf00      	nop
 8004daa:	e7fe      	b.n	8004daa <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004dac:	683b      	ldr	r3, [r7, #0]
 8004dae:	2b02      	cmp	r3, #2
 8004db0:	d103      	bne.n	8004dba <xQueueGenericSendFromISR+0x6a>
 8004db2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004db4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004db6:	2b01      	cmp	r3, #1
 8004db8:	d101      	bne.n	8004dbe <xQueueGenericSendFromISR+0x6e>
 8004dba:	2301      	movs	r3, #1
 8004dbc:	e000      	b.n	8004dc0 <xQueueGenericSendFromISR+0x70>
 8004dbe:	2300      	movs	r3, #0
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d10a      	bne.n	8004dda <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8004dc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dc8:	f383 8811 	msr	BASEPRI, r3
 8004dcc:	f3bf 8f6f 	isb	sy
 8004dd0:	f3bf 8f4f 	dsb	sy
 8004dd4:	623b      	str	r3, [r7, #32]
}
 8004dd6:	bf00      	nop
 8004dd8:	e7fe      	b.n	8004dd8 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004dda:	f001 ff25 	bl	8006c28 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004dde:	f3ef 8211 	mrs	r2, BASEPRI
 8004de2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004de6:	f383 8811 	msr	BASEPRI, r3
 8004dea:	f3bf 8f6f 	isb	sy
 8004dee:	f3bf 8f4f 	dsb	sy
 8004df2:	61fa      	str	r2, [r7, #28]
 8004df4:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004df6:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004df8:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004dfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dfc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004dfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e02:	429a      	cmp	r2, r3
 8004e04:	d302      	bcc.n	8004e0c <xQueueGenericSendFromISR+0xbc>
 8004e06:	683b      	ldr	r3, [r7, #0]
 8004e08:	2b02      	cmp	r3, #2
 8004e0a:	d12f      	bne.n	8004e6c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004e0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e0e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004e12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004e16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e1a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004e1c:	683a      	ldr	r2, [r7, #0]
 8004e1e:	68b9      	ldr	r1, [r7, #8]
 8004e20:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004e22:	f000 f911 	bl	8005048 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004e26:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8004e2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e2e:	d112      	bne.n	8004e56 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004e30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d016      	beq.n	8004e66 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004e38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e3a:	3324      	adds	r3, #36	; 0x24
 8004e3c:	4618      	mov	r0, r3
 8004e3e:	f000 fef7 	bl	8005c30 <xTaskRemoveFromEventList>
 8004e42:	4603      	mov	r3, r0
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d00e      	beq.n	8004e66 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d00b      	beq.n	8004e66 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	2201      	movs	r2, #1
 8004e52:	601a      	str	r2, [r3, #0]
 8004e54:	e007      	b.n	8004e66 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004e56:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004e5a:	3301      	adds	r3, #1
 8004e5c:	b2db      	uxtb	r3, r3
 8004e5e:	b25a      	sxtb	r2, r3
 8004e60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e62:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004e66:	2301      	movs	r3, #1
 8004e68:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8004e6a:	e001      	b.n	8004e70 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004e6c:	2300      	movs	r3, #0
 8004e6e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004e70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e72:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004e74:	697b      	ldr	r3, [r7, #20]
 8004e76:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004e7a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004e7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8004e7e:	4618      	mov	r0, r3
 8004e80:	3740      	adds	r7, #64	; 0x40
 8004e82:	46bd      	mov	sp, r7
 8004e84:	bd80      	pop	{r7, pc}
	...

08004e88 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	b08c      	sub	sp, #48	; 0x30
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	60f8      	str	r0, [r7, #12]
 8004e90:	60b9      	str	r1, [r7, #8]
 8004e92:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004e94:	2300      	movs	r3, #0
 8004e96:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004e9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d10a      	bne.n	8004eb8 <xQueueReceive+0x30>
	__asm volatile
 8004ea2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ea6:	f383 8811 	msr	BASEPRI, r3
 8004eaa:	f3bf 8f6f 	isb	sy
 8004eae:	f3bf 8f4f 	dsb	sy
 8004eb2:	623b      	str	r3, [r7, #32]
}
 8004eb4:	bf00      	nop
 8004eb6:	e7fe      	b.n	8004eb6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004eb8:	68bb      	ldr	r3, [r7, #8]
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d103      	bne.n	8004ec6 <xQueueReceive+0x3e>
 8004ebe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d101      	bne.n	8004eca <xQueueReceive+0x42>
 8004ec6:	2301      	movs	r3, #1
 8004ec8:	e000      	b.n	8004ecc <xQueueReceive+0x44>
 8004eca:	2300      	movs	r3, #0
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d10a      	bne.n	8004ee6 <xQueueReceive+0x5e>
	__asm volatile
 8004ed0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ed4:	f383 8811 	msr	BASEPRI, r3
 8004ed8:	f3bf 8f6f 	isb	sy
 8004edc:	f3bf 8f4f 	dsb	sy
 8004ee0:	61fb      	str	r3, [r7, #28]
}
 8004ee2:	bf00      	nop
 8004ee4:	e7fe      	b.n	8004ee4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004ee6:	f001 f865 	bl	8005fb4 <xTaskGetSchedulerState>
 8004eea:	4603      	mov	r3, r0
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d102      	bne.n	8004ef6 <xQueueReceive+0x6e>
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d101      	bne.n	8004efa <xQueueReceive+0x72>
 8004ef6:	2301      	movs	r3, #1
 8004ef8:	e000      	b.n	8004efc <xQueueReceive+0x74>
 8004efa:	2300      	movs	r3, #0
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d10a      	bne.n	8004f16 <xQueueReceive+0x8e>
	__asm volatile
 8004f00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f04:	f383 8811 	msr	BASEPRI, r3
 8004f08:	f3bf 8f6f 	isb	sy
 8004f0c:	f3bf 8f4f 	dsb	sy
 8004f10:	61bb      	str	r3, [r7, #24]
}
 8004f12:	bf00      	nop
 8004f14:	e7fe      	b.n	8004f14 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004f16:	f001 fda5 	bl	8006a64 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004f1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f1e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d01f      	beq.n	8004f66 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004f26:	68b9      	ldr	r1, [r7, #8]
 8004f28:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004f2a:	f000 f8f7 	bl	800511c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f30:	1e5a      	subs	r2, r3, #1
 8004f32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f34:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004f36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f38:	691b      	ldr	r3, [r3, #16]
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d00f      	beq.n	8004f5e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004f3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f40:	3310      	adds	r3, #16
 8004f42:	4618      	mov	r0, r3
 8004f44:	f000 fe74 	bl	8005c30 <xTaskRemoveFromEventList>
 8004f48:	4603      	mov	r3, r0
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d007      	beq.n	8004f5e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004f4e:	4b3d      	ldr	r3, [pc, #244]	; (8005044 <xQueueReceive+0x1bc>)
 8004f50:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f54:	601a      	str	r2, [r3, #0]
 8004f56:	f3bf 8f4f 	dsb	sy
 8004f5a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004f5e:	f001 fdb1 	bl	8006ac4 <vPortExitCritical>
				return pdPASS;
 8004f62:	2301      	movs	r3, #1
 8004f64:	e069      	b.n	800503a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d103      	bne.n	8004f74 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004f6c:	f001 fdaa 	bl	8006ac4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004f70:	2300      	movs	r3, #0
 8004f72:	e062      	b.n	800503a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004f74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d106      	bne.n	8004f88 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004f7a:	f107 0310 	add.w	r3, r7, #16
 8004f7e:	4618      	mov	r0, r3
 8004f80:	f000 feba 	bl	8005cf8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004f84:	2301      	movs	r3, #1
 8004f86:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004f88:	f001 fd9c 	bl	8006ac4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004f8c:	f000 fc26 	bl	80057dc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004f90:	f001 fd68 	bl	8006a64 <vPortEnterCritical>
 8004f94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f96:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004f9a:	b25b      	sxtb	r3, r3
 8004f9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fa0:	d103      	bne.n	8004faa <xQueueReceive+0x122>
 8004fa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fa4:	2200      	movs	r2, #0
 8004fa6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004faa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fac:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004fb0:	b25b      	sxtb	r3, r3
 8004fb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fb6:	d103      	bne.n	8004fc0 <xQueueReceive+0x138>
 8004fb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fba:	2200      	movs	r2, #0
 8004fbc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004fc0:	f001 fd80 	bl	8006ac4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004fc4:	1d3a      	adds	r2, r7, #4
 8004fc6:	f107 0310 	add.w	r3, r7, #16
 8004fca:	4611      	mov	r1, r2
 8004fcc:	4618      	mov	r0, r3
 8004fce:	f000 fea9 	bl	8005d24 <xTaskCheckForTimeOut>
 8004fd2:	4603      	mov	r3, r0
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d123      	bne.n	8005020 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004fd8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004fda:	f000 f917 	bl	800520c <prvIsQueueEmpty>
 8004fde:	4603      	mov	r3, r0
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d017      	beq.n	8005014 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004fe4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fe6:	3324      	adds	r3, #36	; 0x24
 8004fe8:	687a      	ldr	r2, [r7, #4]
 8004fea:	4611      	mov	r1, r2
 8004fec:	4618      	mov	r0, r3
 8004fee:	f000 fdcf 	bl	8005b90 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004ff2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004ff4:	f000 f8b8 	bl	8005168 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004ff8:	f000 fbfe 	bl	80057f8 <xTaskResumeAll>
 8004ffc:	4603      	mov	r3, r0
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d189      	bne.n	8004f16 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8005002:	4b10      	ldr	r3, [pc, #64]	; (8005044 <xQueueReceive+0x1bc>)
 8005004:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005008:	601a      	str	r2, [r3, #0]
 800500a:	f3bf 8f4f 	dsb	sy
 800500e:	f3bf 8f6f 	isb	sy
 8005012:	e780      	b.n	8004f16 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005014:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005016:	f000 f8a7 	bl	8005168 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800501a:	f000 fbed 	bl	80057f8 <xTaskResumeAll>
 800501e:	e77a      	b.n	8004f16 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005020:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005022:	f000 f8a1 	bl	8005168 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005026:	f000 fbe7 	bl	80057f8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800502a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800502c:	f000 f8ee 	bl	800520c <prvIsQueueEmpty>
 8005030:	4603      	mov	r3, r0
 8005032:	2b00      	cmp	r3, #0
 8005034:	f43f af6f 	beq.w	8004f16 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005038:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800503a:	4618      	mov	r0, r3
 800503c:	3730      	adds	r7, #48	; 0x30
 800503e:	46bd      	mov	sp, r7
 8005040:	bd80      	pop	{r7, pc}
 8005042:	bf00      	nop
 8005044:	e000ed04 	.word	0xe000ed04

08005048 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005048:	b580      	push	{r7, lr}
 800504a:	b086      	sub	sp, #24
 800504c:	af00      	add	r7, sp, #0
 800504e:	60f8      	str	r0, [r7, #12]
 8005050:	60b9      	str	r1, [r7, #8]
 8005052:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005054:	2300      	movs	r3, #0
 8005056:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800505c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005062:	2b00      	cmp	r3, #0
 8005064:	d10d      	bne.n	8005082 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	2b00      	cmp	r3, #0
 800506c:	d14d      	bne.n	800510a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	689b      	ldr	r3, [r3, #8]
 8005072:	4618      	mov	r0, r3
 8005074:	f000 ffbc 	bl	8005ff0 <xTaskPriorityDisinherit>
 8005078:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	2200      	movs	r2, #0
 800507e:	609a      	str	r2, [r3, #8]
 8005080:	e043      	b.n	800510a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	2b00      	cmp	r3, #0
 8005086:	d119      	bne.n	80050bc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	6858      	ldr	r0, [r3, #4]
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005090:	461a      	mov	r2, r3
 8005092:	68b9      	ldr	r1, [r7, #8]
 8005094:	f002 f950 	bl	8007338 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	685a      	ldr	r2, [r3, #4]
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050a0:	441a      	add	r2, r3
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	685a      	ldr	r2, [r3, #4]
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	689b      	ldr	r3, [r3, #8]
 80050ae:	429a      	cmp	r2, r3
 80050b0:	d32b      	bcc.n	800510a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	681a      	ldr	r2, [r3, #0]
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	605a      	str	r2, [r3, #4]
 80050ba:	e026      	b.n	800510a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	68d8      	ldr	r0, [r3, #12]
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050c4:	461a      	mov	r2, r3
 80050c6:	68b9      	ldr	r1, [r7, #8]
 80050c8:	f002 f936 	bl	8007338 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	68da      	ldr	r2, [r3, #12]
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050d4:	425b      	negs	r3, r3
 80050d6:	441a      	add	r2, r3
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	68da      	ldr	r2, [r3, #12]
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	429a      	cmp	r2, r3
 80050e6:	d207      	bcs.n	80050f8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	689a      	ldr	r2, [r3, #8]
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050f0:	425b      	negs	r3, r3
 80050f2:	441a      	add	r2, r3
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2b02      	cmp	r3, #2
 80050fc:	d105      	bne.n	800510a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80050fe:	693b      	ldr	r3, [r7, #16]
 8005100:	2b00      	cmp	r3, #0
 8005102:	d002      	beq.n	800510a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005104:	693b      	ldr	r3, [r7, #16]
 8005106:	3b01      	subs	r3, #1
 8005108:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800510a:	693b      	ldr	r3, [r7, #16]
 800510c:	1c5a      	adds	r2, r3, #1
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005112:	697b      	ldr	r3, [r7, #20]
}
 8005114:	4618      	mov	r0, r3
 8005116:	3718      	adds	r7, #24
 8005118:	46bd      	mov	sp, r7
 800511a:	bd80      	pop	{r7, pc}

0800511c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800511c:	b580      	push	{r7, lr}
 800511e:	b082      	sub	sp, #8
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
 8005124:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800512a:	2b00      	cmp	r3, #0
 800512c:	d018      	beq.n	8005160 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	68da      	ldr	r2, [r3, #12]
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005136:	441a      	add	r2, r3
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	68da      	ldr	r2, [r3, #12]
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	689b      	ldr	r3, [r3, #8]
 8005144:	429a      	cmp	r2, r3
 8005146:	d303      	bcc.n	8005150 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681a      	ldr	r2, [r3, #0]
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	68d9      	ldr	r1, [r3, #12]
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005158:	461a      	mov	r2, r3
 800515a:	6838      	ldr	r0, [r7, #0]
 800515c:	f002 f8ec 	bl	8007338 <memcpy>
	}
}
 8005160:	bf00      	nop
 8005162:	3708      	adds	r7, #8
 8005164:	46bd      	mov	sp, r7
 8005166:	bd80      	pop	{r7, pc}

08005168 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005168:	b580      	push	{r7, lr}
 800516a:	b084      	sub	sp, #16
 800516c:	af00      	add	r7, sp, #0
 800516e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005170:	f001 fc78 	bl	8006a64 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800517a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800517c:	e011      	b.n	80051a2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005182:	2b00      	cmp	r3, #0
 8005184:	d012      	beq.n	80051ac <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	3324      	adds	r3, #36	; 0x24
 800518a:	4618      	mov	r0, r3
 800518c:	f000 fd50 	bl	8005c30 <xTaskRemoveFromEventList>
 8005190:	4603      	mov	r3, r0
 8005192:	2b00      	cmp	r3, #0
 8005194:	d001      	beq.n	800519a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005196:	f000 fe27 	bl	8005de8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800519a:	7bfb      	ldrb	r3, [r7, #15]
 800519c:	3b01      	subs	r3, #1
 800519e:	b2db      	uxtb	r3, r3
 80051a0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80051a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	dce9      	bgt.n	800517e <prvUnlockQueue+0x16>
 80051aa:	e000      	b.n	80051ae <prvUnlockQueue+0x46>
					break;
 80051ac:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	22ff      	movs	r2, #255	; 0xff
 80051b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80051b6:	f001 fc85 	bl	8006ac4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80051ba:	f001 fc53 	bl	8006a64 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80051c4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80051c6:	e011      	b.n	80051ec <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	691b      	ldr	r3, [r3, #16]
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d012      	beq.n	80051f6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	3310      	adds	r3, #16
 80051d4:	4618      	mov	r0, r3
 80051d6:	f000 fd2b 	bl	8005c30 <xTaskRemoveFromEventList>
 80051da:	4603      	mov	r3, r0
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d001      	beq.n	80051e4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80051e0:	f000 fe02 	bl	8005de8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80051e4:	7bbb      	ldrb	r3, [r7, #14]
 80051e6:	3b01      	subs	r3, #1
 80051e8:	b2db      	uxtb	r3, r3
 80051ea:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80051ec:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	dce9      	bgt.n	80051c8 <prvUnlockQueue+0x60>
 80051f4:	e000      	b.n	80051f8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80051f6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	22ff      	movs	r2, #255	; 0xff
 80051fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005200:	f001 fc60 	bl	8006ac4 <vPortExitCritical>
}
 8005204:	bf00      	nop
 8005206:	3710      	adds	r7, #16
 8005208:	46bd      	mov	sp, r7
 800520a:	bd80      	pop	{r7, pc}

0800520c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800520c:	b580      	push	{r7, lr}
 800520e:	b084      	sub	sp, #16
 8005210:	af00      	add	r7, sp, #0
 8005212:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005214:	f001 fc26 	bl	8006a64 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800521c:	2b00      	cmp	r3, #0
 800521e:	d102      	bne.n	8005226 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005220:	2301      	movs	r3, #1
 8005222:	60fb      	str	r3, [r7, #12]
 8005224:	e001      	b.n	800522a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005226:	2300      	movs	r3, #0
 8005228:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800522a:	f001 fc4b 	bl	8006ac4 <vPortExitCritical>

	return xReturn;
 800522e:	68fb      	ldr	r3, [r7, #12]
}
 8005230:	4618      	mov	r0, r3
 8005232:	3710      	adds	r7, #16
 8005234:	46bd      	mov	sp, r7
 8005236:	bd80      	pop	{r7, pc}

08005238 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005238:	b580      	push	{r7, lr}
 800523a:	b084      	sub	sp, #16
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005240:	f001 fc10 	bl	8006a64 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800524c:	429a      	cmp	r2, r3
 800524e:	d102      	bne.n	8005256 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005250:	2301      	movs	r3, #1
 8005252:	60fb      	str	r3, [r7, #12]
 8005254:	e001      	b.n	800525a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005256:	2300      	movs	r3, #0
 8005258:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800525a:	f001 fc33 	bl	8006ac4 <vPortExitCritical>

	return xReturn;
 800525e:	68fb      	ldr	r3, [r7, #12]
}
 8005260:	4618      	mov	r0, r3
 8005262:	3710      	adds	r7, #16
 8005264:	46bd      	mov	sp, r7
 8005266:	bd80      	pop	{r7, pc}

08005268 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005268:	b480      	push	{r7}
 800526a:	b085      	sub	sp, #20
 800526c:	af00      	add	r7, sp, #0
 800526e:	6078      	str	r0, [r7, #4]
 8005270:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005272:	2300      	movs	r3, #0
 8005274:	60fb      	str	r3, [r7, #12]
 8005276:	e014      	b.n	80052a2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005278:	4a0f      	ldr	r2, [pc, #60]	; (80052b8 <vQueueAddToRegistry+0x50>)
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005280:	2b00      	cmp	r3, #0
 8005282:	d10b      	bne.n	800529c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005284:	490c      	ldr	r1, [pc, #48]	; (80052b8 <vQueueAddToRegistry+0x50>)
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	683a      	ldr	r2, [r7, #0]
 800528a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800528e:	4a0a      	ldr	r2, [pc, #40]	; (80052b8 <vQueueAddToRegistry+0x50>)
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	00db      	lsls	r3, r3, #3
 8005294:	4413      	add	r3, r2
 8005296:	687a      	ldr	r2, [r7, #4]
 8005298:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800529a:	e006      	b.n	80052aa <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	3301      	adds	r3, #1
 80052a0:	60fb      	str	r3, [r7, #12]
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	2b07      	cmp	r3, #7
 80052a6:	d9e7      	bls.n	8005278 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80052a8:	bf00      	nop
 80052aa:	bf00      	nop
 80052ac:	3714      	adds	r7, #20
 80052ae:	46bd      	mov	sp, r7
 80052b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b4:	4770      	bx	lr
 80052b6:	bf00      	nop
 80052b8:	20000d00 	.word	0x20000d00

080052bc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80052bc:	b580      	push	{r7, lr}
 80052be:	b086      	sub	sp, #24
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	60f8      	str	r0, [r7, #12]
 80052c4:	60b9      	str	r1, [r7, #8]
 80052c6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80052cc:	f001 fbca 	bl	8006a64 <vPortEnterCritical>
 80052d0:	697b      	ldr	r3, [r7, #20]
 80052d2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80052d6:	b25b      	sxtb	r3, r3
 80052d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052dc:	d103      	bne.n	80052e6 <vQueueWaitForMessageRestricted+0x2a>
 80052de:	697b      	ldr	r3, [r7, #20]
 80052e0:	2200      	movs	r2, #0
 80052e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80052e6:	697b      	ldr	r3, [r7, #20]
 80052e8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80052ec:	b25b      	sxtb	r3, r3
 80052ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052f2:	d103      	bne.n	80052fc <vQueueWaitForMessageRestricted+0x40>
 80052f4:	697b      	ldr	r3, [r7, #20]
 80052f6:	2200      	movs	r2, #0
 80052f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80052fc:	f001 fbe2 	bl	8006ac4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005300:	697b      	ldr	r3, [r7, #20]
 8005302:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005304:	2b00      	cmp	r3, #0
 8005306:	d106      	bne.n	8005316 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005308:	697b      	ldr	r3, [r7, #20]
 800530a:	3324      	adds	r3, #36	; 0x24
 800530c:	687a      	ldr	r2, [r7, #4]
 800530e:	68b9      	ldr	r1, [r7, #8]
 8005310:	4618      	mov	r0, r3
 8005312:	f000 fc61 	bl	8005bd8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005316:	6978      	ldr	r0, [r7, #20]
 8005318:	f7ff ff26 	bl	8005168 <prvUnlockQueue>
	}
 800531c:	bf00      	nop
 800531e:	3718      	adds	r7, #24
 8005320:	46bd      	mov	sp, r7
 8005322:	bd80      	pop	{r7, pc}

08005324 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005324:	b580      	push	{r7, lr}
 8005326:	b08e      	sub	sp, #56	; 0x38
 8005328:	af04      	add	r7, sp, #16
 800532a:	60f8      	str	r0, [r7, #12]
 800532c:	60b9      	str	r1, [r7, #8]
 800532e:	607a      	str	r2, [r7, #4]
 8005330:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005332:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005334:	2b00      	cmp	r3, #0
 8005336:	d10a      	bne.n	800534e <xTaskCreateStatic+0x2a>
	__asm volatile
 8005338:	f04f 0350 	mov.w	r3, #80	; 0x50
 800533c:	f383 8811 	msr	BASEPRI, r3
 8005340:	f3bf 8f6f 	isb	sy
 8005344:	f3bf 8f4f 	dsb	sy
 8005348:	623b      	str	r3, [r7, #32]
}
 800534a:	bf00      	nop
 800534c:	e7fe      	b.n	800534c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800534e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005350:	2b00      	cmp	r3, #0
 8005352:	d10a      	bne.n	800536a <xTaskCreateStatic+0x46>
	__asm volatile
 8005354:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005358:	f383 8811 	msr	BASEPRI, r3
 800535c:	f3bf 8f6f 	isb	sy
 8005360:	f3bf 8f4f 	dsb	sy
 8005364:	61fb      	str	r3, [r7, #28]
}
 8005366:	bf00      	nop
 8005368:	e7fe      	b.n	8005368 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800536a:	23a8      	movs	r3, #168	; 0xa8
 800536c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800536e:	693b      	ldr	r3, [r7, #16]
 8005370:	2ba8      	cmp	r3, #168	; 0xa8
 8005372:	d00a      	beq.n	800538a <xTaskCreateStatic+0x66>
	__asm volatile
 8005374:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005378:	f383 8811 	msr	BASEPRI, r3
 800537c:	f3bf 8f6f 	isb	sy
 8005380:	f3bf 8f4f 	dsb	sy
 8005384:	61bb      	str	r3, [r7, #24]
}
 8005386:	bf00      	nop
 8005388:	e7fe      	b.n	8005388 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800538a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800538c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800538e:	2b00      	cmp	r3, #0
 8005390:	d01e      	beq.n	80053d0 <xTaskCreateStatic+0xac>
 8005392:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005394:	2b00      	cmp	r3, #0
 8005396:	d01b      	beq.n	80053d0 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005398:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800539a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800539c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800539e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80053a0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80053a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053a4:	2202      	movs	r2, #2
 80053a6:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80053aa:	2300      	movs	r3, #0
 80053ac:	9303      	str	r3, [sp, #12]
 80053ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053b0:	9302      	str	r3, [sp, #8]
 80053b2:	f107 0314 	add.w	r3, r7, #20
 80053b6:	9301      	str	r3, [sp, #4]
 80053b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053ba:	9300      	str	r3, [sp, #0]
 80053bc:	683b      	ldr	r3, [r7, #0]
 80053be:	687a      	ldr	r2, [r7, #4]
 80053c0:	68b9      	ldr	r1, [r7, #8]
 80053c2:	68f8      	ldr	r0, [r7, #12]
 80053c4:	f000 f850 	bl	8005468 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80053c8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80053ca:	f000 f8f3 	bl	80055b4 <prvAddNewTaskToReadyList>
 80053ce:	e001      	b.n	80053d4 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80053d0:	2300      	movs	r3, #0
 80053d2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80053d4:	697b      	ldr	r3, [r7, #20]
	}
 80053d6:	4618      	mov	r0, r3
 80053d8:	3728      	adds	r7, #40	; 0x28
 80053da:	46bd      	mov	sp, r7
 80053dc:	bd80      	pop	{r7, pc}

080053de <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80053de:	b580      	push	{r7, lr}
 80053e0:	b08c      	sub	sp, #48	; 0x30
 80053e2:	af04      	add	r7, sp, #16
 80053e4:	60f8      	str	r0, [r7, #12]
 80053e6:	60b9      	str	r1, [r7, #8]
 80053e8:	603b      	str	r3, [r7, #0]
 80053ea:	4613      	mov	r3, r2
 80053ec:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80053ee:	88fb      	ldrh	r3, [r7, #6]
 80053f0:	009b      	lsls	r3, r3, #2
 80053f2:	4618      	mov	r0, r3
 80053f4:	f001 fc58 	bl	8006ca8 <pvPortMalloc>
 80053f8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80053fa:	697b      	ldr	r3, [r7, #20]
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d00e      	beq.n	800541e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005400:	20a8      	movs	r0, #168	; 0xa8
 8005402:	f001 fc51 	bl	8006ca8 <pvPortMalloc>
 8005406:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005408:	69fb      	ldr	r3, [r7, #28]
 800540a:	2b00      	cmp	r3, #0
 800540c:	d003      	beq.n	8005416 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800540e:	69fb      	ldr	r3, [r7, #28]
 8005410:	697a      	ldr	r2, [r7, #20]
 8005412:	631a      	str	r2, [r3, #48]	; 0x30
 8005414:	e005      	b.n	8005422 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005416:	6978      	ldr	r0, [r7, #20]
 8005418:	f001 fd12 	bl	8006e40 <vPortFree>
 800541c:	e001      	b.n	8005422 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800541e:	2300      	movs	r3, #0
 8005420:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005422:	69fb      	ldr	r3, [r7, #28]
 8005424:	2b00      	cmp	r3, #0
 8005426:	d017      	beq.n	8005458 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005428:	69fb      	ldr	r3, [r7, #28]
 800542a:	2200      	movs	r2, #0
 800542c:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005430:	88fa      	ldrh	r2, [r7, #6]
 8005432:	2300      	movs	r3, #0
 8005434:	9303      	str	r3, [sp, #12]
 8005436:	69fb      	ldr	r3, [r7, #28]
 8005438:	9302      	str	r3, [sp, #8]
 800543a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800543c:	9301      	str	r3, [sp, #4]
 800543e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005440:	9300      	str	r3, [sp, #0]
 8005442:	683b      	ldr	r3, [r7, #0]
 8005444:	68b9      	ldr	r1, [r7, #8]
 8005446:	68f8      	ldr	r0, [r7, #12]
 8005448:	f000 f80e 	bl	8005468 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800544c:	69f8      	ldr	r0, [r7, #28]
 800544e:	f000 f8b1 	bl	80055b4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005452:	2301      	movs	r3, #1
 8005454:	61bb      	str	r3, [r7, #24]
 8005456:	e002      	b.n	800545e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005458:	f04f 33ff 	mov.w	r3, #4294967295
 800545c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800545e:	69bb      	ldr	r3, [r7, #24]
	}
 8005460:	4618      	mov	r0, r3
 8005462:	3720      	adds	r7, #32
 8005464:	46bd      	mov	sp, r7
 8005466:	bd80      	pop	{r7, pc}

08005468 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005468:	b580      	push	{r7, lr}
 800546a:	b088      	sub	sp, #32
 800546c:	af00      	add	r7, sp, #0
 800546e:	60f8      	str	r0, [r7, #12]
 8005470:	60b9      	str	r1, [r7, #8]
 8005472:	607a      	str	r2, [r7, #4]
 8005474:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005476:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005478:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	009b      	lsls	r3, r3, #2
 800547e:	461a      	mov	r2, r3
 8005480:	21a5      	movs	r1, #165	; 0xa5
 8005482:	f001 feaf 	bl	80071e4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005486:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005488:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005490:	3b01      	subs	r3, #1
 8005492:	009b      	lsls	r3, r3, #2
 8005494:	4413      	add	r3, r2
 8005496:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005498:	69bb      	ldr	r3, [r7, #24]
 800549a:	f023 0307 	bic.w	r3, r3, #7
 800549e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80054a0:	69bb      	ldr	r3, [r7, #24]
 80054a2:	f003 0307 	and.w	r3, r3, #7
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d00a      	beq.n	80054c0 <prvInitialiseNewTask+0x58>
	__asm volatile
 80054aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054ae:	f383 8811 	msr	BASEPRI, r3
 80054b2:	f3bf 8f6f 	isb	sy
 80054b6:	f3bf 8f4f 	dsb	sy
 80054ba:	617b      	str	r3, [r7, #20]
}
 80054bc:	bf00      	nop
 80054be:	e7fe      	b.n	80054be <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80054c0:	68bb      	ldr	r3, [r7, #8]
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d01f      	beq.n	8005506 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80054c6:	2300      	movs	r3, #0
 80054c8:	61fb      	str	r3, [r7, #28]
 80054ca:	e012      	b.n	80054f2 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80054cc:	68ba      	ldr	r2, [r7, #8]
 80054ce:	69fb      	ldr	r3, [r7, #28]
 80054d0:	4413      	add	r3, r2
 80054d2:	7819      	ldrb	r1, [r3, #0]
 80054d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80054d6:	69fb      	ldr	r3, [r7, #28]
 80054d8:	4413      	add	r3, r2
 80054da:	3334      	adds	r3, #52	; 0x34
 80054dc:	460a      	mov	r2, r1
 80054de:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80054e0:	68ba      	ldr	r2, [r7, #8]
 80054e2:	69fb      	ldr	r3, [r7, #28]
 80054e4:	4413      	add	r3, r2
 80054e6:	781b      	ldrb	r3, [r3, #0]
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d006      	beq.n	80054fa <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80054ec:	69fb      	ldr	r3, [r7, #28]
 80054ee:	3301      	adds	r3, #1
 80054f0:	61fb      	str	r3, [r7, #28]
 80054f2:	69fb      	ldr	r3, [r7, #28]
 80054f4:	2b0f      	cmp	r3, #15
 80054f6:	d9e9      	bls.n	80054cc <prvInitialiseNewTask+0x64>
 80054f8:	e000      	b.n	80054fc <prvInitialiseNewTask+0x94>
			{
				break;
 80054fa:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80054fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054fe:	2200      	movs	r2, #0
 8005500:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005504:	e003      	b.n	800550e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005506:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005508:	2200      	movs	r2, #0
 800550a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800550e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005510:	2b37      	cmp	r3, #55	; 0x37
 8005512:	d901      	bls.n	8005518 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005514:	2337      	movs	r3, #55	; 0x37
 8005516:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005518:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800551a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800551c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800551e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005520:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005522:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005524:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005526:	2200      	movs	r2, #0
 8005528:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800552a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800552c:	3304      	adds	r3, #4
 800552e:	4618      	mov	r0, r3
 8005530:	f7ff f978 	bl	8004824 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005534:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005536:	3318      	adds	r3, #24
 8005538:	4618      	mov	r0, r3
 800553a:	f7ff f973 	bl	8004824 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800553e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005540:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005542:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005544:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005546:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800554a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800554c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800554e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005550:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005552:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005554:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005556:	2200      	movs	r2, #0
 8005558:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800555c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800555e:	2200      	movs	r2, #0
 8005560:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005564:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005566:	3354      	adds	r3, #84	; 0x54
 8005568:	224c      	movs	r2, #76	; 0x4c
 800556a:	2100      	movs	r1, #0
 800556c:	4618      	mov	r0, r3
 800556e:	f001 fe39 	bl	80071e4 <memset>
 8005572:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005574:	4a0c      	ldr	r2, [pc, #48]	; (80055a8 <prvInitialiseNewTask+0x140>)
 8005576:	659a      	str	r2, [r3, #88]	; 0x58
 8005578:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800557a:	4a0c      	ldr	r2, [pc, #48]	; (80055ac <prvInitialiseNewTask+0x144>)
 800557c:	65da      	str	r2, [r3, #92]	; 0x5c
 800557e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005580:	4a0b      	ldr	r2, [pc, #44]	; (80055b0 <prvInitialiseNewTask+0x148>)
 8005582:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005584:	683a      	ldr	r2, [r7, #0]
 8005586:	68f9      	ldr	r1, [r7, #12]
 8005588:	69b8      	ldr	r0, [r7, #24]
 800558a:	f001 f941 	bl	8006810 <pxPortInitialiseStack>
 800558e:	4602      	mov	r2, r0
 8005590:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005592:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005594:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005596:	2b00      	cmp	r3, #0
 8005598:	d002      	beq.n	80055a0 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800559a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800559c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800559e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80055a0:	bf00      	nop
 80055a2:	3720      	adds	r7, #32
 80055a4:	46bd      	mov	sp, r7
 80055a6:	bd80      	pop	{r7, pc}
 80055a8:	20004f9c 	.word	0x20004f9c
 80055ac:	20005004 	.word	0x20005004
 80055b0:	2000506c 	.word	0x2000506c

080055b4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80055b4:	b580      	push	{r7, lr}
 80055b6:	b082      	sub	sp, #8
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80055bc:	f001 fa52 	bl	8006a64 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80055c0:	4b2d      	ldr	r3, [pc, #180]	; (8005678 <prvAddNewTaskToReadyList+0xc4>)
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	3301      	adds	r3, #1
 80055c6:	4a2c      	ldr	r2, [pc, #176]	; (8005678 <prvAddNewTaskToReadyList+0xc4>)
 80055c8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80055ca:	4b2c      	ldr	r3, [pc, #176]	; (800567c <prvAddNewTaskToReadyList+0xc8>)
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d109      	bne.n	80055e6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80055d2:	4a2a      	ldr	r2, [pc, #168]	; (800567c <prvAddNewTaskToReadyList+0xc8>)
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80055d8:	4b27      	ldr	r3, [pc, #156]	; (8005678 <prvAddNewTaskToReadyList+0xc4>)
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	2b01      	cmp	r3, #1
 80055de:	d110      	bne.n	8005602 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80055e0:	f000 fc26 	bl	8005e30 <prvInitialiseTaskLists>
 80055e4:	e00d      	b.n	8005602 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80055e6:	4b26      	ldr	r3, [pc, #152]	; (8005680 <prvAddNewTaskToReadyList+0xcc>)
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d109      	bne.n	8005602 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80055ee:	4b23      	ldr	r3, [pc, #140]	; (800567c <prvAddNewTaskToReadyList+0xc8>)
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055f8:	429a      	cmp	r2, r3
 80055fa:	d802      	bhi.n	8005602 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80055fc:	4a1f      	ldr	r2, [pc, #124]	; (800567c <prvAddNewTaskToReadyList+0xc8>)
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005602:	4b20      	ldr	r3, [pc, #128]	; (8005684 <prvAddNewTaskToReadyList+0xd0>)
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	3301      	adds	r3, #1
 8005608:	4a1e      	ldr	r2, [pc, #120]	; (8005684 <prvAddNewTaskToReadyList+0xd0>)
 800560a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800560c:	4b1d      	ldr	r3, [pc, #116]	; (8005684 <prvAddNewTaskToReadyList+0xd0>)
 800560e:	681a      	ldr	r2, [r3, #0]
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005618:	4b1b      	ldr	r3, [pc, #108]	; (8005688 <prvAddNewTaskToReadyList+0xd4>)
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	429a      	cmp	r2, r3
 800561e:	d903      	bls.n	8005628 <prvAddNewTaskToReadyList+0x74>
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005624:	4a18      	ldr	r2, [pc, #96]	; (8005688 <prvAddNewTaskToReadyList+0xd4>)
 8005626:	6013      	str	r3, [r2, #0]
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800562c:	4613      	mov	r3, r2
 800562e:	009b      	lsls	r3, r3, #2
 8005630:	4413      	add	r3, r2
 8005632:	009b      	lsls	r3, r3, #2
 8005634:	4a15      	ldr	r2, [pc, #84]	; (800568c <prvAddNewTaskToReadyList+0xd8>)
 8005636:	441a      	add	r2, r3
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	3304      	adds	r3, #4
 800563c:	4619      	mov	r1, r3
 800563e:	4610      	mov	r0, r2
 8005640:	f7ff f8fd 	bl	800483e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005644:	f001 fa3e 	bl	8006ac4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005648:	4b0d      	ldr	r3, [pc, #52]	; (8005680 <prvAddNewTaskToReadyList+0xcc>)
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	2b00      	cmp	r3, #0
 800564e:	d00e      	beq.n	800566e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005650:	4b0a      	ldr	r3, [pc, #40]	; (800567c <prvAddNewTaskToReadyList+0xc8>)
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800565a:	429a      	cmp	r2, r3
 800565c:	d207      	bcs.n	800566e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800565e:	4b0c      	ldr	r3, [pc, #48]	; (8005690 <prvAddNewTaskToReadyList+0xdc>)
 8005660:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005664:	601a      	str	r2, [r3, #0]
 8005666:	f3bf 8f4f 	dsb	sy
 800566a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800566e:	bf00      	nop
 8005670:	3708      	adds	r7, #8
 8005672:	46bd      	mov	sp, r7
 8005674:	bd80      	pop	{r7, pc}
 8005676:	bf00      	nop
 8005678:	20001214 	.word	0x20001214
 800567c:	20000d40 	.word	0x20000d40
 8005680:	20001220 	.word	0x20001220
 8005684:	20001230 	.word	0x20001230
 8005688:	2000121c 	.word	0x2000121c
 800568c:	20000d44 	.word	0x20000d44
 8005690:	e000ed04 	.word	0xe000ed04

08005694 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005694:	b580      	push	{r7, lr}
 8005696:	b084      	sub	sp, #16
 8005698:	af00      	add	r7, sp, #0
 800569a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800569c:	2300      	movs	r3, #0
 800569e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d017      	beq.n	80056d6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80056a6:	4b13      	ldr	r3, [pc, #76]	; (80056f4 <vTaskDelay+0x60>)
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d00a      	beq.n	80056c4 <vTaskDelay+0x30>
	__asm volatile
 80056ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056b2:	f383 8811 	msr	BASEPRI, r3
 80056b6:	f3bf 8f6f 	isb	sy
 80056ba:	f3bf 8f4f 	dsb	sy
 80056be:	60bb      	str	r3, [r7, #8]
}
 80056c0:	bf00      	nop
 80056c2:	e7fe      	b.n	80056c2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80056c4:	f000 f88a 	bl	80057dc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80056c8:	2100      	movs	r1, #0
 80056ca:	6878      	ldr	r0, [r7, #4]
 80056cc:	f000 fcfe 	bl	80060cc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80056d0:	f000 f892 	bl	80057f8 <xTaskResumeAll>
 80056d4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d107      	bne.n	80056ec <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80056dc:	4b06      	ldr	r3, [pc, #24]	; (80056f8 <vTaskDelay+0x64>)
 80056de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80056e2:	601a      	str	r2, [r3, #0]
 80056e4:	f3bf 8f4f 	dsb	sy
 80056e8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80056ec:	bf00      	nop
 80056ee:	3710      	adds	r7, #16
 80056f0:	46bd      	mov	sp, r7
 80056f2:	bd80      	pop	{r7, pc}
 80056f4:	2000123c 	.word	0x2000123c
 80056f8:	e000ed04 	.word	0xe000ed04

080056fc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80056fc:	b580      	push	{r7, lr}
 80056fe:	b08a      	sub	sp, #40	; 0x28
 8005700:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005702:	2300      	movs	r3, #0
 8005704:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005706:	2300      	movs	r3, #0
 8005708:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800570a:	463a      	mov	r2, r7
 800570c:	1d39      	adds	r1, r7, #4
 800570e:	f107 0308 	add.w	r3, r7, #8
 8005712:	4618      	mov	r0, r3
 8005714:	f7ff f832 	bl	800477c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005718:	6839      	ldr	r1, [r7, #0]
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	68ba      	ldr	r2, [r7, #8]
 800571e:	9202      	str	r2, [sp, #8]
 8005720:	9301      	str	r3, [sp, #4]
 8005722:	2300      	movs	r3, #0
 8005724:	9300      	str	r3, [sp, #0]
 8005726:	2300      	movs	r3, #0
 8005728:	460a      	mov	r2, r1
 800572a:	4924      	ldr	r1, [pc, #144]	; (80057bc <vTaskStartScheduler+0xc0>)
 800572c:	4824      	ldr	r0, [pc, #144]	; (80057c0 <vTaskStartScheduler+0xc4>)
 800572e:	f7ff fdf9 	bl	8005324 <xTaskCreateStatic>
 8005732:	4603      	mov	r3, r0
 8005734:	4a23      	ldr	r2, [pc, #140]	; (80057c4 <vTaskStartScheduler+0xc8>)
 8005736:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005738:	4b22      	ldr	r3, [pc, #136]	; (80057c4 <vTaskStartScheduler+0xc8>)
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	2b00      	cmp	r3, #0
 800573e:	d002      	beq.n	8005746 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005740:	2301      	movs	r3, #1
 8005742:	617b      	str	r3, [r7, #20]
 8005744:	e001      	b.n	800574a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005746:	2300      	movs	r3, #0
 8005748:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800574a:	697b      	ldr	r3, [r7, #20]
 800574c:	2b01      	cmp	r3, #1
 800574e:	d102      	bne.n	8005756 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005750:	f000 fd10 	bl	8006174 <xTimerCreateTimerTask>
 8005754:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005756:	697b      	ldr	r3, [r7, #20]
 8005758:	2b01      	cmp	r3, #1
 800575a:	d11b      	bne.n	8005794 <vTaskStartScheduler+0x98>
	__asm volatile
 800575c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005760:	f383 8811 	msr	BASEPRI, r3
 8005764:	f3bf 8f6f 	isb	sy
 8005768:	f3bf 8f4f 	dsb	sy
 800576c:	613b      	str	r3, [r7, #16]
}
 800576e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005770:	4b15      	ldr	r3, [pc, #84]	; (80057c8 <vTaskStartScheduler+0xcc>)
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	3354      	adds	r3, #84	; 0x54
 8005776:	4a15      	ldr	r2, [pc, #84]	; (80057cc <vTaskStartScheduler+0xd0>)
 8005778:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800577a:	4b15      	ldr	r3, [pc, #84]	; (80057d0 <vTaskStartScheduler+0xd4>)
 800577c:	f04f 32ff 	mov.w	r2, #4294967295
 8005780:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005782:	4b14      	ldr	r3, [pc, #80]	; (80057d4 <vTaskStartScheduler+0xd8>)
 8005784:	2201      	movs	r2, #1
 8005786:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005788:	4b13      	ldr	r3, [pc, #76]	; (80057d8 <vTaskStartScheduler+0xdc>)
 800578a:	2200      	movs	r2, #0
 800578c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800578e:	f001 f8c7 	bl	8006920 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005792:	e00e      	b.n	80057b2 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005794:	697b      	ldr	r3, [r7, #20]
 8005796:	f1b3 3fff 	cmp.w	r3, #4294967295
 800579a:	d10a      	bne.n	80057b2 <vTaskStartScheduler+0xb6>
	__asm volatile
 800579c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057a0:	f383 8811 	msr	BASEPRI, r3
 80057a4:	f3bf 8f6f 	isb	sy
 80057a8:	f3bf 8f4f 	dsb	sy
 80057ac:	60fb      	str	r3, [r7, #12]
}
 80057ae:	bf00      	nop
 80057b0:	e7fe      	b.n	80057b0 <vTaskStartScheduler+0xb4>
}
 80057b2:	bf00      	nop
 80057b4:	3718      	adds	r7, #24
 80057b6:	46bd      	mov	sp, r7
 80057b8:	bd80      	pop	{r7, pc}
 80057ba:	bf00      	nop
 80057bc:	080074cc 	.word	0x080074cc
 80057c0:	08005e01 	.word	0x08005e01
 80057c4:	20001238 	.word	0x20001238
 80057c8:	20000d40 	.word	0x20000d40
 80057cc:	20000064 	.word	0x20000064
 80057d0:	20001234 	.word	0x20001234
 80057d4:	20001220 	.word	0x20001220
 80057d8:	20001218 	.word	0x20001218

080057dc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80057dc:	b480      	push	{r7}
 80057de:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80057e0:	4b04      	ldr	r3, [pc, #16]	; (80057f4 <vTaskSuspendAll+0x18>)
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	3301      	adds	r3, #1
 80057e6:	4a03      	ldr	r2, [pc, #12]	; (80057f4 <vTaskSuspendAll+0x18>)
 80057e8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80057ea:	bf00      	nop
 80057ec:	46bd      	mov	sp, r7
 80057ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f2:	4770      	bx	lr
 80057f4:	2000123c 	.word	0x2000123c

080057f8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80057f8:	b580      	push	{r7, lr}
 80057fa:	b084      	sub	sp, #16
 80057fc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80057fe:	2300      	movs	r3, #0
 8005800:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005802:	2300      	movs	r3, #0
 8005804:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005806:	4b42      	ldr	r3, [pc, #264]	; (8005910 <xTaskResumeAll+0x118>)
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	2b00      	cmp	r3, #0
 800580c:	d10a      	bne.n	8005824 <xTaskResumeAll+0x2c>
	__asm volatile
 800580e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005812:	f383 8811 	msr	BASEPRI, r3
 8005816:	f3bf 8f6f 	isb	sy
 800581a:	f3bf 8f4f 	dsb	sy
 800581e:	603b      	str	r3, [r7, #0]
}
 8005820:	bf00      	nop
 8005822:	e7fe      	b.n	8005822 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005824:	f001 f91e 	bl	8006a64 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005828:	4b39      	ldr	r3, [pc, #228]	; (8005910 <xTaskResumeAll+0x118>)
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	3b01      	subs	r3, #1
 800582e:	4a38      	ldr	r2, [pc, #224]	; (8005910 <xTaskResumeAll+0x118>)
 8005830:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005832:	4b37      	ldr	r3, [pc, #220]	; (8005910 <xTaskResumeAll+0x118>)
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	2b00      	cmp	r3, #0
 8005838:	d162      	bne.n	8005900 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800583a:	4b36      	ldr	r3, [pc, #216]	; (8005914 <xTaskResumeAll+0x11c>)
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	2b00      	cmp	r3, #0
 8005840:	d05e      	beq.n	8005900 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005842:	e02f      	b.n	80058a4 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005844:	4b34      	ldr	r3, [pc, #208]	; (8005918 <xTaskResumeAll+0x120>)
 8005846:	68db      	ldr	r3, [r3, #12]
 8005848:	68db      	ldr	r3, [r3, #12]
 800584a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	3318      	adds	r3, #24
 8005850:	4618      	mov	r0, r3
 8005852:	f7ff f851 	bl	80048f8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	3304      	adds	r3, #4
 800585a:	4618      	mov	r0, r3
 800585c:	f7ff f84c 	bl	80048f8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005864:	4b2d      	ldr	r3, [pc, #180]	; (800591c <xTaskResumeAll+0x124>)
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	429a      	cmp	r2, r3
 800586a:	d903      	bls.n	8005874 <xTaskResumeAll+0x7c>
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005870:	4a2a      	ldr	r2, [pc, #168]	; (800591c <xTaskResumeAll+0x124>)
 8005872:	6013      	str	r3, [r2, #0]
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005878:	4613      	mov	r3, r2
 800587a:	009b      	lsls	r3, r3, #2
 800587c:	4413      	add	r3, r2
 800587e:	009b      	lsls	r3, r3, #2
 8005880:	4a27      	ldr	r2, [pc, #156]	; (8005920 <xTaskResumeAll+0x128>)
 8005882:	441a      	add	r2, r3
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	3304      	adds	r3, #4
 8005888:	4619      	mov	r1, r3
 800588a:	4610      	mov	r0, r2
 800588c:	f7fe ffd7 	bl	800483e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005894:	4b23      	ldr	r3, [pc, #140]	; (8005924 <xTaskResumeAll+0x12c>)
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800589a:	429a      	cmp	r2, r3
 800589c:	d302      	bcc.n	80058a4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800589e:	4b22      	ldr	r3, [pc, #136]	; (8005928 <xTaskResumeAll+0x130>)
 80058a0:	2201      	movs	r2, #1
 80058a2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80058a4:	4b1c      	ldr	r3, [pc, #112]	; (8005918 <xTaskResumeAll+0x120>)
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d1cb      	bne.n	8005844 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d001      	beq.n	80058b6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80058b2:	f000 fb5f 	bl	8005f74 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80058b6:	4b1d      	ldr	r3, [pc, #116]	; (800592c <xTaskResumeAll+0x134>)
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d010      	beq.n	80058e4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80058c2:	f000 f847 	bl	8005954 <xTaskIncrementTick>
 80058c6:	4603      	mov	r3, r0
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d002      	beq.n	80058d2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80058cc:	4b16      	ldr	r3, [pc, #88]	; (8005928 <xTaskResumeAll+0x130>)
 80058ce:	2201      	movs	r2, #1
 80058d0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	3b01      	subs	r3, #1
 80058d6:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d1f1      	bne.n	80058c2 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80058de:	4b13      	ldr	r3, [pc, #76]	; (800592c <xTaskResumeAll+0x134>)
 80058e0:	2200      	movs	r2, #0
 80058e2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80058e4:	4b10      	ldr	r3, [pc, #64]	; (8005928 <xTaskResumeAll+0x130>)
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d009      	beq.n	8005900 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80058ec:	2301      	movs	r3, #1
 80058ee:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80058f0:	4b0f      	ldr	r3, [pc, #60]	; (8005930 <xTaskResumeAll+0x138>)
 80058f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80058f6:	601a      	str	r2, [r3, #0]
 80058f8:	f3bf 8f4f 	dsb	sy
 80058fc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005900:	f001 f8e0 	bl	8006ac4 <vPortExitCritical>

	return xAlreadyYielded;
 8005904:	68bb      	ldr	r3, [r7, #8]
}
 8005906:	4618      	mov	r0, r3
 8005908:	3710      	adds	r7, #16
 800590a:	46bd      	mov	sp, r7
 800590c:	bd80      	pop	{r7, pc}
 800590e:	bf00      	nop
 8005910:	2000123c 	.word	0x2000123c
 8005914:	20001214 	.word	0x20001214
 8005918:	200011d4 	.word	0x200011d4
 800591c:	2000121c 	.word	0x2000121c
 8005920:	20000d44 	.word	0x20000d44
 8005924:	20000d40 	.word	0x20000d40
 8005928:	20001228 	.word	0x20001228
 800592c:	20001224 	.word	0x20001224
 8005930:	e000ed04 	.word	0xe000ed04

08005934 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005934:	b480      	push	{r7}
 8005936:	b083      	sub	sp, #12
 8005938:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800593a:	4b05      	ldr	r3, [pc, #20]	; (8005950 <xTaskGetTickCount+0x1c>)
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005940:	687b      	ldr	r3, [r7, #4]
}
 8005942:	4618      	mov	r0, r3
 8005944:	370c      	adds	r7, #12
 8005946:	46bd      	mov	sp, r7
 8005948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594c:	4770      	bx	lr
 800594e:	bf00      	nop
 8005950:	20001218 	.word	0x20001218

08005954 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005954:	b580      	push	{r7, lr}
 8005956:	b086      	sub	sp, #24
 8005958:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800595a:	2300      	movs	r3, #0
 800595c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800595e:	4b4f      	ldr	r3, [pc, #316]	; (8005a9c <xTaskIncrementTick+0x148>)
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	2b00      	cmp	r3, #0
 8005964:	f040 808f 	bne.w	8005a86 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005968:	4b4d      	ldr	r3, [pc, #308]	; (8005aa0 <xTaskIncrementTick+0x14c>)
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	3301      	adds	r3, #1
 800596e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005970:	4a4b      	ldr	r2, [pc, #300]	; (8005aa0 <xTaskIncrementTick+0x14c>)
 8005972:	693b      	ldr	r3, [r7, #16]
 8005974:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005976:	693b      	ldr	r3, [r7, #16]
 8005978:	2b00      	cmp	r3, #0
 800597a:	d120      	bne.n	80059be <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800597c:	4b49      	ldr	r3, [pc, #292]	; (8005aa4 <xTaskIncrementTick+0x150>)
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	2b00      	cmp	r3, #0
 8005984:	d00a      	beq.n	800599c <xTaskIncrementTick+0x48>
	__asm volatile
 8005986:	f04f 0350 	mov.w	r3, #80	; 0x50
 800598a:	f383 8811 	msr	BASEPRI, r3
 800598e:	f3bf 8f6f 	isb	sy
 8005992:	f3bf 8f4f 	dsb	sy
 8005996:	603b      	str	r3, [r7, #0]
}
 8005998:	bf00      	nop
 800599a:	e7fe      	b.n	800599a <xTaskIncrementTick+0x46>
 800599c:	4b41      	ldr	r3, [pc, #260]	; (8005aa4 <xTaskIncrementTick+0x150>)
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	60fb      	str	r3, [r7, #12]
 80059a2:	4b41      	ldr	r3, [pc, #260]	; (8005aa8 <xTaskIncrementTick+0x154>)
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	4a3f      	ldr	r2, [pc, #252]	; (8005aa4 <xTaskIncrementTick+0x150>)
 80059a8:	6013      	str	r3, [r2, #0]
 80059aa:	4a3f      	ldr	r2, [pc, #252]	; (8005aa8 <xTaskIncrementTick+0x154>)
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	6013      	str	r3, [r2, #0]
 80059b0:	4b3e      	ldr	r3, [pc, #248]	; (8005aac <xTaskIncrementTick+0x158>)
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	3301      	adds	r3, #1
 80059b6:	4a3d      	ldr	r2, [pc, #244]	; (8005aac <xTaskIncrementTick+0x158>)
 80059b8:	6013      	str	r3, [r2, #0]
 80059ba:	f000 fadb 	bl	8005f74 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80059be:	4b3c      	ldr	r3, [pc, #240]	; (8005ab0 <xTaskIncrementTick+0x15c>)
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	693a      	ldr	r2, [r7, #16]
 80059c4:	429a      	cmp	r2, r3
 80059c6:	d349      	bcc.n	8005a5c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80059c8:	4b36      	ldr	r3, [pc, #216]	; (8005aa4 <xTaskIncrementTick+0x150>)
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d104      	bne.n	80059dc <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80059d2:	4b37      	ldr	r3, [pc, #220]	; (8005ab0 <xTaskIncrementTick+0x15c>)
 80059d4:	f04f 32ff 	mov.w	r2, #4294967295
 80059d8:	601a      	str	r2, [r3, #0]
					break;
 80059da:	e03f      	b.n	8005a5c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80059dc:	4b31      	ldr	r3, [pc, #196]	; (8005aa4 <xTaskIncrementTick+0x150>)
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	68db      	ldr	r3, [r3, #12]
 80059e2:	68db      	ldr	r3, [r3, #12]
 80059e4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80059e6:	68bb      	ldr	r3, [r7, #8]
 80059e8:	685b      	ldr	r3, [r3, #4]
 80059ea:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80059ec:	693a      	ldr	r2, [r7, #16]
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	429a      	cmp	r2, r3
 80059f2:	d203      	bcs.n	80059fc <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80059f4:	4a2e      	ldr	r2, [pc, #184]	; (8005ab0 <xTaskIncrementTick+0x15c>)
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80059fa:	e02f      	b.n	8005a5c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80059fc:	68bb      	ldr	r3, [r7, #8]
 80059fe:	3304      	adds	r3, #4
 8005a00:	4618      	mov	r0, r3
 8005a02:	f7fe ff79 	bl	80048f8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005a06:	68bb      	ldr	r3, [r7, #8]
 8005a08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d004      	beq.n	8005a18 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005a0e:	68bb      	ldr	r3, [r7, #8]
 8005a10:	3318      	adds	r3, #24
 8005a12:	4618      	mov	r0, r3
 8005a14:	f7fe ff70 	bl	80048f8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005a18:	68bb      	ldr	r3, [r7, #8]
 8005a1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a1c:	4b25      	ldr	r3, [pc, #148]	; (8005ab4 <xTaskIncrementTick+0x160>)
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	429a      	cmp	r2, r3
 8005a22:	d903      	bls.n	8005a2c <xTaskIncrementTick+0xd8>
 8005a24:	68bb      	ldr	r3, [r7, #8]
 8005a26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a28:	4a22      	ldr	r2, [pc, #136]	; (8005ab4 <xTaskIncrementTick+0x160>)
 8005a2a:	6013      	str	r3, [r2, #0]
 8005a2c:	68bb      	ldr	r3, [r7, #8]
 8005a2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a30:	4613      	mov	r3, r2
 8005a32:	009b      	lsls	r3, r3, #2
 8005a34:	4413      	add	r3, r2
 8005a36:	009b      	lsls	r3, r3, #2
 8005a38:	4a1f      	ldr	r2, [pc, #124]	; (8005ab8 <xTaskIncrementTick+0x164>)
 8005a3a:	441a      	add	r2, r3
 8005a3c:	68bb      	ldr	r3, [r7, #8]
 8005a3e:	3304      	adds	r3, #4
 8005a40:	4619      	mov	r1, r3
 8005a42:	4610      	mov	r0, r2
 8005a44:	f7fe fefb 	bl	800483e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005a48:	68bb      	ldr	r3, [r7, #8]
 8005a4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a4c:	4b1b      	ldr	r3, [pc, #108]	; (8005abc <xTaskIncrementTick+0x168>)
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a52:	429a      	cmp	r2, r3
 8005a54:	d3b8      	bcc.n	80059c8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8005a56:	2301      	movs	r3, #1
 8005a58:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005a5a:	e7b5      	b.n	80059c8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005a5c:	4b17      	ldr	r3, [pc, #92]	; (8005abc <xTaskIncrementTick+0x168>)
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a62:	4915      	ldr	r1, [pc, #84]	; (8005ab8 <xTaskIncrementTick+0x164>)
 8005a64:	4613      	mov	r3, r2
 8005a66:	009b      	lsls	r3, r3, #2
 8005a68:	4413      	add	r3, r2
 8005a6a:	009b      	lsls	r3, r3, #2
 8005a6c:	440b      	add	r3, r1
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	2b01      	cmp	r3, #1
 8005a72:	d901      	bls.n	8005a78 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8005a74:	2301      	movs	r3, #1
 8005a76:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005a78:	4b11      	ldr	r3, [pc, #68]	; (8005ac0 <xTaskIncrementTick+0x16c>)
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d007      	beq.n	8005a90 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8005a80:	2301      	movs	r3, #1
 8005a82:	617b      	str	r3, [r7, #20]
 8005a84:	e004      	b.n	8005a90 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005a86:	4b0f      	ldr	r3, [pc, #60]	; (8005ac4 <xTaskIncrementTick+0x170>)
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	3301      	adds	r3, #1
 8005a8c:	4a0d      	ldr	r2, [pc, #52]	; (8005ac4 <xTaskIncrementTick+0x170>)
 8005a8e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005a90:	697b      	ldr	r3, [r7, #20]
}
 8005a92:	4618      	mov	r0, r3
 8005a94:	3718      	adds	r7, #24
 8005a96:	46bd      	mov	sp, r7
 8005a98:	bd80      	pop	{r7, pc}
 8005a9a:	bf00      	nop
 8005a9c:	2000123c 	.word	0x2000123c
 8005aa0:	20001218 	.word	0x20001218
 8005aa4:	200011cc 	.word	0x200011cc
 8005aa8:	200011d0 	.word	0x200011d0
 8005aac:	2000122c 	.word	0x2000122c
 8005ab0:	20001234 	.word	0x20001234
 8005ab4:	2000121c 	.word	0x2000121c
 8005ab8:	20000d44 	.word	0x20000d44
 8005abc:	20000d40 	.word	0x20000d40
 8005ac0:	20001228 	.word	0x20001228
 8005ac4:	20001224 	.word	0x20001224

08005ac8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005ac8:	b480      	push	{r7}
 8005aca:	b085      	sub	sp, #20
 8005acc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005ace:	4b2a      	ldr	r3, [pc, #168]	; (8005b78 <vTaskSwitchContext+0xb0>)
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d003      	beq.n	8005ade <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005ad6:	4b29      	ldr	r3, [pc, #164]	; (8005b7c <vTaskSwitchContext+0xb4>)
 8005ad8:	2201      	movs	r2, #1
 8005ada:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005adc:	e046      	b.n	8005b6c <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8005ade:	4b27      	ldr	r3, [pc, #156]	; (8005b7c <vTaskSwitchContext+0xb4>)
 8005ae0:	2200      	movs	r2, #0
 8005ae2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005ae4:	4b26      	ldr	r3, [pc, #152]	; (8005b80 <vTaskSwitchContext+0xb8>)
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	60fb      	str	r3, [r7, #12]
 8005aea:	e010      	b.n	8005b0e <vTaskSwitchContext+0x46>
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d10a      	bne.n	8005b08 <vTaskSwitchContext+0x40>
	__asm volatile
 8005af2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005af6:	f383 8811 	msr	BASEPRI, r3
 8005afa:	f3bf 8f6f 	isb	sy
 8005afe:	f3bf 8f4f 	dsb	sy
 8005b02:	607b      	str	r3, [r7, #4]
}
 8005b04:	bf00      	nop
 8005b06:	e7fe      	b.n	8005b06 <vTaskSwitchContext+0x3e>
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	3b01      	subs	r3, #1
 8005b0c:	60fb      	str	r3, [r7, #12]
 8005b0e:	491d      	ldr	r1, [pc, #116]	; (8005b84 <vTaskSwitchContext+0xbc>)
 8005b10:	68fa      	ldr	r2, [r7, #12]
 8005b12:	4613      	mov	r3, r2
 8005b14:	009b      	lsls	r3, r3, #2
 8005b16:	4413      	add	r3, r2
 8005b18:	009b      	lsls	r3, r3, #2
 8005b1a:	440b      	add	r3, r1
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d0e4      	beq.n	8005aec <vTaskSwitchContext+0x24>
 8005b22:	68fa      	ldr	r2, [r7, #12]
 8005b24:	4613      	mov	r3, r2
 8005b26:	009b      	lsls	r3, r3, #2
 8005b28:	4413      	add	r3, r2
 8005b2a:	009b      	lsls	r3, r3, #2
 8005b2c:	4a15      	ldr	r2, [pc, #84]	; (8005b84 <vTaskSwitchContext+0xbc>)
 8005b2e:	4413      	add	r3, r2
 8005b30:	60bb      	str	r3, [r7, #8]
 8005b32:	68bb      	ldr	r3, [r7, #8]
 8005b34:	685b      	ldr	r3, [r3, #4]
 8005b36:	685a      	ldr	r2, [r3, #4]
 8005b38:	68bb      	ldr	r3, [r7, #8]
 8005b3a:	605a      	str	r2, [r3, #4]
 8005b3c:	68bb      	ldr	r3, [r7, #8]
 8005b3e:	685a      	ldr	r2, [r3, #4]
 8005b40:	68bb      	ldr	r3, [r7, #8]
 8005b42:	3308      	adds	r3, #8
 8005b44:	429a      	cmp	r2, r3
 8005b46:	d104      	bne.n	8005b52 <vTaskSwitchContext+0x8a>
 8005b48:	68bb      	ldr	r3, [r7, #8]
 8005b4a:	685b      	ldr	r3, [r3, #4]
 8005b4c:	685a      	ldr	r2, [r3, #4]
 8005b4e:	68bb      	ldr	r3, [r7, #8]
 8005b50:	605a      	str	r2, [r3, #4]
 8005b52:	68bb      	ldr	r3, [r7, #8]
 8005b54:	685b      	ldr	r3, [r3, #4]
 8005b56:	68db      	ldr	r3, [r3, #12]
 8005b58:	4a0b      	ldr	r2, [pc, #44]	; (8005b88 <vTaskSwitchContext+0xc0>)
 8005b5a:	6013      	str	r3, [r2, #0]
 8005b5c:	4a08      	ldr	r2, [pc, #32]	; (8005b80 <vTaskSwitchContext+0xb8>)
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005b62:	4b09      	ldr	r3, [pc, #36]	; (8005b88 <vTaskSwitchContext+0xc0>)
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	3354      	adds	r3, #84	; 0x54
 8005b68:	4a08      	ldr	r2, [pc, #32]	; (8005b8c <vTaskSwitchContext+0xc4>)
 8005b6a:	6013      	str	r3, [r2, #0]
}
 8005b6c:	bf00      	nop
 8005b6e:	3714      	adds	r7, #20
 8005b70:	46bd      	mov	sp, r7
 8005b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b76:	4770      	bx	lr
 8005b78:	2000123c 	.word	0x2000123c
 8005b7c:	20001228 	.word	0x20001228
 8005b80:	2000121c 	.word	0x2000121c
 8005b84:	20000d44 	.word	0x20000d44
 8005b88:	20000d40 	.word	0x20000d40
 8005b8c:	20000064 	.word	0x20000064

08005b90 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005b90:	b580      	push	{r7, lr}
 8005b92:	b084      	sub	sp, #16
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	6078      	str	r0, [r7, #4]
 8005b98:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d10a      	bne.n	8005bb6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8005ba0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ba4:	f383 8811 	msr	BASEPRI, r3
 8005ba8:	f3bf 8f6f 	isb	sy
 8005bac:	f3bf 8f4f 	dsb	sy
 8005bb0:	60fb      	str	r3, [r7, #12]
}
 8005bb2:	bf00      	nop
 8005bb4:	e7fe      	b.n	8005bb4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005bb6:	4b07      	ldr	r3, [pc, #28]	; (8005bd4 <vTaskPlaceOnEventList+0x44>)
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	3318      	adds	r3, #24
 8005bbc:	4619      	mov	r1, r3
 8005bbe:	6878      	ldr	r0, [r7, #4]
 8005bc0:	f7fe fe61 	bl	8004886 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005bc4:	2101      	movs	r1, #1
 8005bc6:	6838      	ldr	r0, [r7, #0]
 8005bc8:	f000 fa80 	bl	80060cc <prvAddCurrentTaskToDelayedList>
}
 8005bcc:	bf00      	nop
 8005bce:	3710      	adds	r7, #16
 8005bd0:	46bd      	mov	sp, r7
 8005bd2:	bd80      	pop	{r7, pc}
 8005bd4:	20000d40 	.word	0x20000d40

08005bd8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005bd8:	b580      	push	{r7, lr}
 8005bda:	b086      	sub	sp, #24
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	60f8      	str	r0, [r7, #12]
 8005be0:	60b9      	str	r1, [r7, #8]
 8005be2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d10a      	bne.n	8005c00 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8005bea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bee:	f383 8811 	msr	BASEPRI, r3
 8005bf2:	f3bf 8f6f 	isb	sy
 8005bf6:	f3bf 8f4f 	dsb	sy
 8005bfa:	617b      	str	r3, [r7, #20]
}
 8005bfc:	bf00      	nop
 8005bfe:	e7fe      	b.n	8005bfe <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005c00:	4b0a      	ldr	r3, [pc, #40]	; (8005c2c <vTaskPlaceOnEventListRestricted+0x54>)
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	3318      	adds	r3, #24
 8005c06:	4619      	mov	r1, r3
 8005c08:	68f8      	ldr	r0, [r7, #12]
 8005c0a:	f7fe fe18 	bl	800483e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d002      	beq.n	8005c1a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8005c14:	f04f 33ff 	mov.w	r3, #4294967295
 8005c18:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005c1a:	6879      	ldr	r1, [r7, #4]
 8005c1c:	68b8      	ldr	r0, [r7, #8]
 8005c1e:	f000 fa55 	bl	80060cc <prvAddCurrentTaskToDelayedList>
	}
 8005c22:	bf00      	nop
 8005c24:	3718      	adds	r7, #24
 8005c26:	46bd      	mov	sp, r7
 8005c28:	bd80      	pop	{r7, pc}
 8005c2a:	bf00      	nop
 8005c2c:	20000d40 	.word	0x20000d40

08005c30 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005c30:	b580      	push	{r7, lr}
 8005c32:	b086      	sub	sp, #24
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	68db      	ldr	r3, [r3, #12]
 8005c3c:	68db      	ldr	r3, [r3, #12]
 8005c3e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005c40:	693b      	ldr	r3, [r7, #16]
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d10a      	bne.n	8005c5c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8005c46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c4a:	f383 8811 	msr	BASEPRI, r3
 8005c4e:	f3bf 8f6f 	isb	sy
 8005c52:	f3bf 8f4f 	dsb	sy
 8005c56:	60fb      	str	r3, [r7, #12]
}
 8005c58:	bf00      	nop
 8005c5a:	e7fe      	b.n	8005c5a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005c5c:	693b      	ldr	r3, [r7, #16]
 8005c5e:	3318      	adds	r3, #24
 8005c60:	4618      	mov	r0, r3
 8005c62:	f7fe fe49 	bl	80048f8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005c66:	4b1e      	ldr	r3, [pc, #120]	; (8005ce0 <xTaskRemoveFromEventList+0xb0>)
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d11d      	bne.n	8005caa <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005c6e:	693b      	ldr	r3, [r7, #16]
 8005c70:	3304      	adds	r3, #4
 8005c72:	4618      	mov	r0, r3
 8005c74:	f7fe fe40 	bl	80048f8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005c78:	693b      	ldr	r3, [r7, #16]
 8005c7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c7c:	4b19      	ldr	r3, [pc, #100]	; (8005ce4 <xTaskRemoveFromEventList+0xb4>)
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	429a      	cmp	r2, r3
 8005c82:	d903      	bls.n	8005c8c <xTaskRemoveFromEventList+0x5c>
 8005c84:	693b      	ldr	r3, [r7, #16]
 8005c86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c88:	4a16      	ldr	r2, [pc, #88]	; (8005ce4 <xTaskRemoveFromEventList+0xb4>)
 8005c8a:	6013      	str	r3, [r2, #0]
 8005c8c:	693b      	ldr	r3, [r7, #16]
 8005c8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c90:	4613      	mov	r3, r2
 8005c92:	009b      	lsls	r3, r3, #2
 8005c94:	4413      	add	r3, r2
 8005c96:	009b      	lsls	r3, r3, #2
 8005c98:	4a13      	ldr	r2, [pc, #76]	; (8005ce8 <xTaskRemoveFromEventList+0xb8>)
 8005c9a:	441a      	add	r2, r3
 8005c9c:	693b      	ldr	r3, [r7, #16]
 8005c9e:	3304      	adds	r3, #4
 8005ca0:	4619      	mov	r1, r3
 8005ca2:	4610      	mov	r0, r2
 8005ca4:	f7fe fdcb 	bl	800483e <vListInsertEnd>
 8005ca8:	e005      	b.n	8005cb6 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005caa:	693b      	ldr	r3, [r7, #16]
 8005cac:	3318      	adds	r3, #24
 8005cae:	4619      	mov	r1, r3
 8005cb0:	480e      	ldr	r0, [pc, #56]	; (8005cec <xTaskRemoveFromEventList+0xbc>)
 8005cb2:	f7fe fdc4 	bl	800483e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005cb6:	693b      	ldr	r3, [r7, #16]
 8005cb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005cba:	4b0d      	ldr	r3, [pc, #52]	; (8005cf0 <xTaskRemoveFromEventList+0xc0>)
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cc0:	429a      	cmp	r2, r3
 8005cc2:	d905      	bls.n	8005cd0 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005cc4:	2301      	movs	r3, #1
 8005cc6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005cc8:	4b0a      	ldr	r3, [pc, #40]	; (8005cf4 <xTaskRemoveFromEventList+0xc4>)
 8005cca:	2201      	movs	r2, #1
 8005ccc:	601a      	str	r2, [r3, #0]
 8005cce:	e001      	b.n	8005cd4 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8005cd0:	2300      	movs	r3, #0
 8005cd2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005cd4:	697b      	ldr	r3, [r7, #20]
}
 8005cd6:	4618      	mov	r0, r3
 8005cd8:	3718      	adds	r7, #24
 8005cda:	46bd      	mov	sp, r7
 8005cdc:	bd80      	pop	{r7, pc}
 8005cde:	bf00      	nop
 8005ce0:	2000123c 	.word	0x2000123c
 8005ce4:	2000121c 	.word	0x2000121c
 8005ce8:	20000d44 	.word	0x20000d44
 8005cec:	200011d4 	.word	0x200011d4
 8005cf0:	20000d40 	.word	0x20000d40
 8005cf4:	20001228 	.word	0x20001228

08005cf8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005cf8:	b480      	push	{r7}
 8005cfa:	b083      	sub	sp, #12
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005d00:	4b06      	ldr	r3, [pc, #24]	; (8005d1c <vTaskInternalSetTimeOutState+0x24>)
 8005d02:	681a      	ldr	r2, [r3, #0]
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005d08:	4b05      	ldr	r3, [pc, #20]	; (8005d20 <vTaskInternalSetTimeOutState+0x28>)
 8005d0a:	681a      	ldr	r2, [r3, #0]
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	605a      	str	r2, [r3, #4]
}
 8005d10:	bf00      	nop
 8005d12:	370c      	adds	r7, #12
 8005d14:	46bd      	mov	sp, r7
 8005d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d1a:	4770      	bx	lr
 8005d1c:	2000122c 	.word	0x2000122c
 8005d20:	20001218 	.word	0x20001218

08005d24 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005d24:	b580      	push	{r7, lr}
 8005d26:	b088      	sub	sp, #32
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	6078      	str	r0, [r7, #4]
 8005d2c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d10a      	bne.n	8005d4a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8005d34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d38:	f383 8811 	msr	BASEPRI, r3
 8005d3c:	f3bf 8f6f 	isb	sy
 8005d40:	f3bf 8f4f 	dsb	sy
 8005d44:	613b      	str	r3, [r7, #16]
}
 8005d46:	bf00      	nop
 8005d48:	e7fe      	b.n	8005d48 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005d4a:	683b      	ldr	r3, [r7, #0]
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d10a      	bne.n	8005d66 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8005d50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d54:	f383 8811 	msr	BASEPRI, r3
 8005d58:	f3bf 8f6f 	isb	sy
 8005d5c:	f3bf 8f4f 	dsb	sy
 8005d60:	60fb      	str	r3, [r7, #12]
}
 8005d62:	bf00      	nop
 8005d64:	e7fe      	b.n	8005d64 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8005d66:	f000 fe7d 	bl	8006a64 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005d6a:	4b1d      	ldr	r3, [pc, #116]	; (8005de0 <xTaskCheckForTimeOut+0xbc>)
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	685b      	ldr	r3, [r3, #4]
 8005d74:	69ba      	ldr	r2, [r7, #24]
 8005d76:	1ad3      	subs	r3, r2, r3
 8005d78:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005d7a:	683b      	ldr	r3, [r7, #0]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d82:	d102      	bne.n	8005d8a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005d84:	2300      	movs	r3, #0
 8005d86:	61fb      	str	r3, [r7, #28]
 8005d88:	e023      	b.n	8005dd2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681a      	ldr	r2, [r3, #0]
 8005d8e:	4b15      	ldr	r3, [pc, #84]	; (8005de4 <xTaskCheckForTimeOut+0xc0>)
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	429a      	cmp	r2, r3
 8005d94:	d007      	beq.n	8005da6 <xTaskCheckForTimeOut+0x82>
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	685b      	ldr	r3, [r3, #4]
 8005d9a:	69ba      	ldr	r2, [r7, #24]
 8005d9c:	429a      	cmp	r2, r3
 8005d9e:	d302      	bcc.n	8005da6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005da0:	2301      	movs	r3, #1
 8005da2:	61fb      	str	r3, [r7, #28]
 8005da4:	e015      	b.n	8005dd2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005da6:	683b      	ldr	r3, [r7, #0]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	697a      	ldr	r2, [r7, #20]
 8005dac:	429a      	cmp	r2, r3
 8005dae:	d20b      	bcs.n	8005dc8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005db0:	683b      	ldr	r3, [r7, #0]
 8005db2:	681a      	ldr	r2, [r3, #0]
 8005db4:	697b      	ldr	r3, [r7, #20]
 8005db6:	1ad2      	subs	r2, r2, r3
 8005db8:	683b      	ldr	r3, [r7, #0]
 8005dba:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005dbc:	6878      	ldr	r0, [r7, #4]
 8005dbe:	f7ff ff9b 	bl	8005cf8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005dc2:	2300      	movs	r3, #0
 8005dc4:	61fb      	str	r3, [r7, #28]
 8005dc6:	e004      	b.n	8005dd2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8005dc8:	683b      	ldr	r3, [r7, #0]
 8005dca:	2200      	movs	r2, #0
 8005dcc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005dce:	2301      	movs	r3, #1
 8005dd0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005dd2:	f000 fe77 	bl	8006ac4 <vPortExitCritical>

	return xReturn;
 8005dd6:	69fb      	ldr	r3, [r7, #28]
}
 8005dd8:	4618      	mov	r0, r3
 8005dda:	3720      	adds	r7, #32
 8005ddc:	46bd      	mov	sp, r7
 8005dde:	bd80      	pop	{r7, pc}
 8005de0:	20001218 	.word	0x20001218
 8005de4:	2000122c 	.word	0x2000122c

08005de8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005de8:	b480      	push	{r7}
 8005dea:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005dec:	4b03      	ldr	r3, [pc, #12]	; (8005dfc <vTaskMissedYield+0x14>)
 8005dee:	2201      	movs	r2, #1
 8005df0:	601a      	str	r2, [r3, #0]
}
 8005df2:	bf00      	nop
 8005df4:	46bd      	mov	sp, r7
 8005df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfa:	4770      	bx	lr
 8005dfc:	20001228 	.word	0x20001228

08005e00 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005e00:	b580      	push	{r7, lr}
 8005e02:	b082      	sub	sp, #8
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005e08:	f000 f852 	bl	8005eb0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005e0c:	4b06      	ldr	r3, [pc, #24]	; (8005e28 <prvIdleTask+0x28>)
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	2b01      	cmp	r3, #1
 8005e12:	d9f9      	bls.n	8005e08 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005e14:	4b05      	ldr	r3, [pc, #20]	; (8005e2c <prvIdleTask+0x2c>)
 8005e16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e1a:	601a      	str	r2, [r3, #0]
 8005e1c:	f3bf 8f4f 	dsb	sy
 8005e20:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005e24:	e7f0      	b.n	8005e08 <prvIdleTask+0x8>
 8005e26:	bf00      	nop
 8005e28:	20000d44 	.word	0x20000d44
 8005e2c:	e000ed04 	.word	0xe000ed04

08005e30 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005e30:	b580      	push	{r7, lr}
 8005e32:	b082      	sub	sp, #8
 8005e34:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005e36:	2300      	movs	r3, #0
 8005e38:	607b      	str	r3, [r7, #4]
 8005e3a:	e00c      	b.n	8005e56 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005e3c:	687a      	ldr	r2, [r7, #4]
 8005e3e:	4613      	mov	r3, r2
 8005e40:	009b      	lsls	r3, r3, #2
 8005e42:	4413      	add	r3, r2
 8005e44:	009b      	lsls	r3, r3, #2
 8005e46:	4a12      	ldr	r2, [pc, #72]	; (8005e90 <prvInitialiseTaskLists+0x60>)
 8005e48:	4413      	add	r3, r2
 8005e4a:	4618      	mov	r0, r3
 8005e4c:	f7fe fcca 	bl	80047e4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	3301      	adds	r3, #1
 8005e54:	607b      	str	r3, [r7, #4]
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	2b37      	cmp	r3, #55	; 0x37
 8005e5a:	d9ef      	bls.n	8005e3c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005e5c:	480d      	ldr	r0, [pc, #52]	; (8005e94 <prvInitialiseTaskLists+0x64>)
 8005e5e:	f7fe fcc1 	bl	80047e4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005e62:	480d      	ldr	r0, [pc, #52]	; (8005e98 <prvInitialiseTaskLists+0x68>)
 8005e64:	f7fe fcbe 	bl	80047e4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005e68:	480c      	ldr	r0, [pc, #48]	; (8005e9c <prvInitialiseTaskLists+0x6c>)
 8005e6a:	f7fe fcbb 	bl	80047e4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005e6e:	480c      	ldr	r0, [pc, #48]	; (8005ea0 <prvInitialiseTaskLists+0x70>)
 8005e70:	f7fe fcb8 	bl	80047e4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005e74:	480b      	ldr	r0, [pc, #44]	; (8005ea4 <prvInitialiseTaskLists+0x74>)
 8005e76:	f7fe fcb5 	bl	80047e4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005e7a:	4b0b      	ldr	r3, [pc, #44]	; (8005ea8 <prvInitialiseTaskLists+0x78>)
 8005e7c:	4a05      	ldr	r2, [pc, #20]	; (8005e94 <prvInitialiseTaskLists+0x64>)
 8005e7e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005e80:	4b0a      	ldr	r3, [pc, #40]	; (8005eac <prvInitialiseTaskLists+0x7c>)
 8005e82:	4a05      	ldr	r2, [pc, #20]	; (8005e98 <prvInitialiseTaskLists+0x68>)
 8005e84:	601a      	str	r2, [r3, #0]
}
 8005e86:	bf00      	nop
 8005e88:	3708      	adds	r7, #8
 8005e8a:	46bd      	mov	sp, r7
 8005e8c:	bd80      	pop	{r7, pc}
 8005e8e:	bf00      	nop
 8005e90:	20000d44 	.word	0x20000d44
 8005e94:	200011a4 	.word	0x200011a4
 8005e98:	200011b8 	.word	0x200011b8
 8005e9c:	200011d4 	.word	0x200011d4
 8005ea0:	200011e8 	.word	0x200011e8
 8005ea4:	20001200 	.word	0x20001200
 8005ea8:	200011cc 	.word	0x200011cc
 8005eac:	200011d0 	.word	0x200011d0

08005eb0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005eb0:	b580      	push	{r7, lr}
 8005eb2:	b082      	sub	sp, #8
 8005eb4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005eb6:	e019      	b.n	8005eec <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005eb8:	f000 fdd4 	bl	8006a64 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005ebc:	4b10      	ldr	r3, [pc, #64]	; (8005f00 <prvCheckTasksWaitingTermination+0x50>)
 8005ebe:	68db      	ldr	r3, [r3, #12]
 8005ec0:	68db      	ldr	r3, [r3, #12]
 8005ec2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	3304      	adds	r3, #4
 8005ec8:	4618      	mov	r0, r3
 8005eca:	f7fe fd15 	bl	80048f8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005ece:	4b0d      	ldr	r3, [pc, #52]	; (8005f04 <prvCheckTasksWaitingTermination+0x54>)
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	3b01      	subs	r3, #1
 8005ed4:	4a0b      	ldr	r2, [pc, #44]	; (8005f04 <prvCheckTasksWaitingTermination+0x54>)
 8005ed6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005ed8:	4b0b      	ldr	r3, [pc, #44]	; (8005f08 <prvCheckTasksWaitingTermination+0x58>)
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	3b01      	subs	r3, #1
 8005ede:	4a0a      	ldr	r2, [pc, #40]	; (8005f08 <prvCheckTasksWaitingTermination+0x58>)
 8005ee0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005ee2:	f000 fdef 	bl	8006ac4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005ee6:	6878      	ldr	r0, [r7, #4]
 8005ee8:	f000 f810 	bl	8005f0c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005eec:	4b06      	ldr	r3, [pc, #24]	; (8005f08 <prvCheckTasksWaitingTermination+0x58>)
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d1e1      	bne.n	8005eb8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005ef4:	bf00      	nop
 8005ef6:	bf00      	nop
 8005ef8:	3708      	adds	r7, #8
 8005efa:	46bd      	mov	sp, r7
 8005efc:	bd80      	pop	{r7, pc}
 8005efe:	bf00      	nop
 8005f00:	200011e8 	.word	0x200011e8
 8005f04:	20001214 	.word	0x20001214
 8005f08:	200011fc 	.word	0x200011fc

08005f0c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005f0c:	b580      	push	{r7, lr}
 8005f0e:	b084      	sub	sp, #16
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	3354      	adds	r3, #84	; 0x54
 8005f18:	4618      	mov	r0, r3
 8005f1a:	f001 f97b 	bl	8007214 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d108      	bne.n	8005f3a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f2c:	4618      	mov	r0, r3
 8005f2e:	f000 ff87 	bl	8006e40 <vPortFree>
				vPortFree( pxTCB );
 8005f32:	6878      	ldr	r0, [r7, #4]
 8005f34:	f000 ff84 	bl	8006e40 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005f38:	e018      	b.n	8005f6c <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8005f40:	2b01      	cmp	r3, #1
 8005f42:	d103      	bne.n	8005f4c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8005f44:	6878      	ldr	r0, [r7, #4]
 8005f46:	f000 ff7b 	bl	8006e40 <vPortFree>
	}
 8005f4a:	e00f      	b.n	8005f6c <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8005f52:	2b02      	cmp	r3, #2
 8005f54:	d00a      	beq.n	8005f6c <prvDeleteTCB+0x60>
	__asm volatile
 8005f56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f5a:	f383 8811 	msr	BASEPRI, r3
 8005f5e:	f3bf 8f6f 	isb	sy
 8005f62:	f3bf 8f4f 	dsb	sy
 8005f66:	60fb      	str	r3, [r7, #12]
}
 8005f68:	bf00      	nop
 8005f6a:	e7fe      	b.n	8005f6a <prvDeleteTCB+0x5e>
	}
 8005f6c:	bf00      	nop
 8005f6e:	3710      	adds	r7, #16
 8005f70:	46bd      	mov	sp, r7
 8005f72:	bd80      	pop	{r7, pc}

08005f74 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005f74:	b480      	push	{r7}
 8005f76:	b083      	sub	sp, #12
 8005f78:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005f7a:	4b0c      	ldr	r3, [pc, #48]	; (8005fac <prvResetNextTaskUnblockTime+0x38>)
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d104      	bne.n	8005f8e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005f84:	4b0a      	ldr	r3, [pc, #40]	; (8005fb0 <prvResetNextTaskUnblockTime+0x3c>)
 8005f86:	f04f 32ff 	mov.w	r2, #4294967295
 8005f8a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005f8c:	e008      	b.n	8005fa0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005f8e:	4b07      	ldr	r3, [pc, #28]	; (8005fac <prvResetNextTaskUnblockTime+0x38>)
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	68db      	ldr	r3, [r3, #12]
 8005f94:	68db      	ldr	r3, [r3, #12]
 8005f96:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	685b      	ldr	r3, [r3, #4]
 8005f9c:	4a04      	ldr	r2, [pc, #16]	; (8005fb0 <prvResetNextTaskUnblockTime+0x3c>)
 8005f9e:	6013      	str	r3, [r2, #0]
}
 8005fa0:	bf00      	nop
 8005fa2:	370c      	adds	r7, #12
 8005fa4:	46bd      	mov	sp, r7
 8005fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005faa:	4770      	bx	lr
 8005fac:	200011cc 	.word	0x200011cc
 8005fb0:	20001234 	.word	0x20001234

08005fb4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005fb4:	b480      	push	{r7}
 8005fb6:	b083      	sub	sp, #12
 8005fb8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005fba:	4b0b      	ldr	r3, [pc, #44]	; (8005fe8 <xTaskGetSchedulerState+0x34>)
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d102      	bne.n	8005fc8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005fc2:	2301      	movs	r3, #1
 8005fc4:	607b      	str	r3, [r7, #4]
 8005fc6:	e008      	b.n	8005fda <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005fc8:	4b08      	ldr	r3, [pc, #32]	; (8005fec <xTaskGetSchedulerState+0x38>)
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d102      	bne.n	8005fd6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005fd0:	2302      	movs	r3, #2
 8005fd2:	607b      	str	r3, [r7, #4]
 8005fd4:	e001      	b.n	8005fda <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005fd6:	2300      	movs	r3, #0
 8005fd8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005fda:	687b      	ldr	r3, [r7, #4]
	}
 8005fdc:	4618      	mov	r0, r3
 8005fde:	370c      	adds	r7, #12
 8005fe0:	46bd      	mov	sp, r7
 8005fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe6:	4770      	bx	lr
 8005fe8:	20001220 	.word	0x20001220
 8005fec:	2000123c 	.word	0x2000123c

08005ff0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005ff0:	b580      	push	{r7, lr}
 8005ff2:	b086      	sub	sp, #24
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005ffc:	2300      	movs	r3, #0
 8005ffe:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	2b00      	cmp	r3, #0
 8006004:	d056      	beq.n	80060b4 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006006:	4b2e      	ldr	r3, [pc, #184]	; (80060c0 <xTaskPriorityDisinherit+0xd0>)
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	693a      	ldr	r2, [r7, #16]
 800600c:	429a      	cmp	r2, r3
 800600e:	d00a      	beq.n	8006026 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8006010:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006014:	f383 8811 	msr	BASEPRI, r3
 8006018:	f3bf 8f6f 	isb	sy
 800601c:	f3bf 8f4f 	dsb	sy
 8006020:	60fb      	str	r3, [r7, #12]
}
 8006022:	bf00      	nop
 8006024:	e7fe      	b.n	8006024 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006026:	693b      	ldr	r3, [r7, #16]
 8006028:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800602a:	2b00      	cmp	r3, #0
 800602c:	d10a      	bne.n	8006044 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800602e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006032:	f383 8811 	msr	BASEPRI, r3
 8006036:	f3bf 8f6f 	isb	sy
 800603a:	f3bf 8f4f 	dsb	sy
 800603e:	60bb      	str	r3, [r7, #8]
}
 8006040:	bf00      	nop
 8006042:	e7fe      	b.n	8006042 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8006044:	693b      	ldr	r3, [r7, #16]
 8006046:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006048:	1e5a      	subs	r2, r3, #1
 800604a:	693b      	ldr	r3, [r7, #16]
 800604c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800604e:	693b      	ldr	r3, [r7, #16]
 8006050:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006052:	693b      	ldr	r3, [r7, #16]
 8006054:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006056:	429a      	cmp	r2, r3
 8006058:	d02c      	beq.n	80060b4 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800605a:	693b      	ldr	r3, [r7, #16]
 800605c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800605e:	2b00      	cmp	r3, #0
 8006060:	d128      	bne.n	80060b4 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006062:	693b      	ldr	r3, [r7, #16]
 8006064:	3304      	adds	r3, #4
 8006066:	4618      	mov	r0, r3
 8006068:	f7fe fc46 	bl	80048f8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800606c:	693b      	ldr	r3, [r7, #16]
 800606e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006070:	693b      	ldr	r3, [r7, #16]
 8006072:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006074:	693b      	ldr	r3, [r7, #16]
 8006076:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006078:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800607c:	693b      	ldr	r3, [r7, #16]
 800607e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006080:	693b      	ldr	r3, [r7, #16]
 8006082:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006084:	4b0f      	ldr	r3, [pc, #60]	; (80060c4 <xTaskPriorityDisinherit+0xd4>)
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	429a      	cmp	r2, r3
 800608a:	d903      	bls.n	8006094 <xTaskPriorityDisinherit+0xa4>
 800608c:	693b      	ldr	r3, [r7, #16]
 800608e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006090:	4a0c      	ldr	r2, [pc, #48]	; (80060c4 <xTaskPriorityDisinherit+0xd4>)
 8006092:	6013      	str	r3, [r2, #0]
 8006094:	693b      	ldr	r3, [r7, #16]
 8006096:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006098:	4613      	mov	r3, r2
 800609a:	009b      	lsls	r3, r3, #2
 800609c:	4413      	add	r3, r2
 800609e:	009b      	lsls	r3, r3, #2
 80060a0:	4a09      	ldr	r2, [pc, #36]	; (80060c8 <xTaskPriorityDisinherit+0xd8>)
 80060a2:	441a      	add	r2, r3
 80060a4:	693b      	ldr	r3, [r7, #16]
 80060a6:	3304      	adds	r3, #4
 80060a8:	4619      	mov	r1, r3
 80060aa:	4610      	mov	r0, r2
 80060ac:	f7fe fbc7 	bl	800483e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80060b0:	2301      	movs	r3, #1
 80060b2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80060b4:	697b      	ldr	r3, [r7, #20]
	}
 80060b6:	4618      	mov	r0, r3
 80060b8:	3718      	adds	r7, #24
 80060ba:	46bd      	mov	sp, r7
 80060bc:	bd80      	pop	{r7, pc}
 80060be:	bf00      	nop
 80060c0:	20000d40 	.word	0x20000d40
 80060c4:	2000121c 	.word	0x2000121c
 80060c8:	20000d44 	.word	0x20000d44

080060cc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80060cc:	b580      	push	{r7, lr}
 80060ce:	b084      	sub	sp, #16
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	6078      	str	r0, [r7, #4]
 80060d4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80060d6:	4b21      	ldr	r3, [pc, #132]	; (800615c <prvAddCurrentTaskToDelayedList+0x90>)
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80060dc:	4b20      	ldr	r3, [pc, #128]	; (8006160 <prvAddCurrentTaskToDelayedList+0x94>)
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	3304      	adds	r3, #4
 80060e2:	4618      	mov	r0, r3
 80060e4:	f7fe fc08 	bl	80048f8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060ee:	d10a      	bne.n	8006106 <prvAddCurrentTaskToDelayedList+0x3a>
 80060f0:	683b      	ldr	r3, [r7, #0]
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d007      	beq.n	8006106 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80060f6:	4b1a      	ldr	r3, [pc, #104]	; (8006160 <prvAddCurrentTaskToDelayedList+0x94>)
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	3304      	adds	r3, #4
 80060fc:	4619      	mov	r1, r3
 80060fe:	4819      	ldr	r0, [pc, #100]	; (8006164 <prvAddCurrentTaskToDelayedList+0x98>)
 8006100:	f7fe fb9d 	bl	800483e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006104:	e026      	b.n	8006154 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006106:	68fa      	ldr	r2, [r7, #12]
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	4413      	add	r3, r2
 800610c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800610e:	4b14      	ldr	r3, [pc, #80]	; (8006160 <prvAddCurrentTaskToDelayedList+0x94>)
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	68ba      	ldr	r2, [r7, #8]
 8006114:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006116:	68ba      	ldr	r2, [r7, #8]
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	429a      	cmp	r2, r3
 800611c:	d209      	bcs.n	8006132 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800611e:	4b12      	ldr	r3, [pc, #72]	; (8006168 <prvAddCurrentTaskToDelayedList+0x9c>)
 8006120:	681a      	ldr	r2, [r3, #0]
 8006122:	4b0f      	ldr	r3, [pc, #60]	; (8006160 <prvAddCurrentTaskToDelayedList+0x94>)
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	3304      	adds	r3, #4
 8006128:	4619      	mov	r1, r3
 800612a:	4610      	mov	r0, r2
 800612c:	f7fe fbab 	bl	8004886 <vListInsert>
}
 8006130:	e010      	b.n	8006154 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006132:	4b0e      	ldr	r3, [pc, #56]	; (800616c <prvAddCurrentTaskToDelayedList+0xa0>)
 8006134:	681a      	ldr	r2, [r3, #0]
 8006136:	4b0a      	ldr	r3, [pc, #40]	; (8006160 <prvAddCurrentTaskToDelayedList+0x94>)
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	3304      	adds	r3, #4
 800613c:	4619      	mov	r1, r3
 800613e:	4610      	mov	r0, r2
 8006140:	f7fe fba1 	bl	8004886 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006144:	4b0a      	ldr	r3, [pc, #40]	; (8006170 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	68ba      	ldr	r2, [r7, #8]
 800614a:	429a      	cmp	r2, r3
 800614c:	d202      	bcs.n	8006154 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800614e:	4a08      	ldr	r2, [pc, #32]	; (8006170 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006150:	68bb      	ldr	r3, [r7, #8]
 8006152:	6013      	str	r3, [r2, #0]
}
 8006154:	bf00      	nop
 8006156:	3710      	adds	r7, #16
 8006158:	46bd      	mov	sp, r7
 800615a:	bd80      	pop	{r7, pc}
 800615c:	20001218 	.word	0x20001218
 8006160:	20000d40 	.word	0x20000d40
 8006164:	20001200 	.word	0x20001200
 8006168:	200011d0 	.word	0x200011d0
 800616c:	200011cc 	.word	0x200011cc
 8006170:	20001234 	.word	0x20001234

08006174 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006174:	b580      	push	{r7, lr}
 8006176:	b08a      	sub	sp, #40	; 0x28
 8006178:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800617a:	2300      	movs	r3, #0
 800617c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800617e:	f000 fb07 	bl	8006790 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006182:	4b1c      	ldr	r3, [pc, #112]	; (80061f4 <xTimerCreateTimerTask+0x80>)
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	2b00      	cmp	r3, #0
 8006188:	d021      	beq.n	80061ce <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800618a:	2300      	movs	r3, #0
 800618c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800618e:	2300      	movs	r3, #0
 8006190:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006192:	1d3a      	adds	r2, r7, #4
 8006194:	f107 0108 	add.w	r1, r7, #8
 8006198:	f107 030c 	add.w	r3, r7, #12
 800619c:	4618      	mov	r0, r3
 800619e:	f7fe fb07 	bl	80047b0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80061a2:	6879      	ldr	r1, [r7, #4]
 80061a4:	68bb      	ldr	r3, [r7, #8]
 80061a6:	68fa      	ldr	r2, [r7, #12]
 80061a8:	9202      	str	r2, [sp, #8]
 80061aa:	9301      	str	r3, [sp, #4]
 80061ac:	2302      	movs	r3, #2
 80061ae:	9300      	str	r3, [sp, #0]
 80061b0:	2300      	movs	r3, #0
 80061b2:	460a      	mov	r2, r1
 80061b4:	4910      	ldr	r1, [pc, #64]	; (80061f8 <xTimerCreateTimerTask+0x84>)
 80061b6:	4811      	ldr	r0, [pc, #68]	; (80061fc <xTimerCreateTimerTask+0x88>)
 80061b8:	f7ff f8b4 	bl	8005324 <xTaskCreateStatic>
 80061bc:	4603      	mov	r3, r0
 80061be:	4a10      	ldr	r2, [pc, #64]	; (8006200 <xTimerCreateTimerTask+0x8c>)
 80061c0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80061c2:	4b0f      	ldr	r3, [pc, #60]	; (8006200 <xTimerCreateTimerTask+0x8c>)
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d001      	beq.n	80061ce <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80061ca:	2301      	movs	r3, #1
 80061cc:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80061ce:	697b      	ldr	r3, [r7, #20]
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d10a      	bne.n	80061ea <xTimerCreateTimerTask+0x76>
	__asm volatile
 80061d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061d8:	f383 8811 	msr	BASEPRI, r3
 80061dc:	f3bf 8f6f 	isb	sy
 80061e0:	f3bf 8f4f 	dsb	sy
 80061e4:	613b      	str	r3, [r7, #16]
}
 80061e6:	bf00      	nop
 80061e8:	e7fe      	b.n	80061e8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80061ea:	697b      	ldr	r3, [r7, #20]
}
 80061ec:	4618      	mov	r0, r3
 80061ee:	3718      	adds	r7, #24
 80061f0:	46bd      	mov	sp, r7
 80061f2:	bd80      	pop	{r7, pc}
 80061f4:	20001270 	.word	0x20001270
 80061f8:	080074d4 	.word	0x080074d4
 80061fc:	08006339 	.word	0x08006339
 8006200:	20001274 	.word	0x20001274

08006204 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006204:	b580      	push	{r7, lr}
 8006206:	b08a      	sub	sp, #40	; 0x28
 8006208:	af00      	add	r7, sp, #0
 800620a:	60f8      	str	r0, [r7, #12]
 800620c:	60b9      	str	r1, [r7, #8]
 800620e:	607a      	str	r2, [r7, #4]
 8006210:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006212:	2300      	movs	r3, #0
 8006214:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	2b00      	cmp	r3, #0
 800621a:	d10a      	bne.n	8006232 <xTimerGenericCommand+0x2e>
	__asm volatile
 800621c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006220:	f383 8811 	msr	BASEPRI, r3
 8006224:	f3bf 8f6f 	isb	sy
 8006228:	f3bf 8f4f 	dsb	sy
 800622c:	623b      	str	r3, [r7, #32]
}
 800622e:	bf00      	nop
 8006230:	e7fe      	b.n	8006230 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006232:	4b1a      	ldr	r3, [pc, #104]	; (800629c <xTimerGenericCommand+0x98>)
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	2b00      	cmp	r3, #0
 8006238:	d02a      	beq.n	8006290 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800623a:	68bb      	ldr	r3, [r7, #8]
 800623c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006246:	68bb      	ldr	r3, [r7, #8]
 8006248:	2b05      	cmp	r3, #5
 800624a:	dc18      	bgt.n	800627e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800624c:	f7ff feb2 	bl	8005fb4 <xTaskGetSchedulerState>
 8006250:	4603      	mov	r3, r0
 8006252:	2b02      	cmp	r3, #2
 8006254:	d109      	bne.n	800626a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006256:	4b11      	ldr	r3, [pc, #68]	; (800629c <xTimerGenericCommand+0x98>)
 8006258:	6818      	ldr	r0, [r3, #0]
 800625a:	f107 0110 	add.w	r1, r7, #16
 800625e:	2300      	movs	r3, #0
 8006260:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006262:	f7fe fc77 	bl	8004b54 <xQueueGenericSend>
 8006266:	6278      	str	r0, [r7, #36]	; 0x24
 8006268:	e012      	b.n	8006290 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800626a:	4b0c      	ldr	r3, [pc, #48]	; (800629c <xTimerGenericCommand+0x98>)
 800626c:	6818      	ldr	r0, [r3, #0]
 800626e:	f107 0110 	add.w	r1, r7, #16
 8006272:	2300      	movs	r3, #0
 8006274:	2200      	movs	r2, #0
 8006276:	f7fe fc6d 	bl	8004b54 <xQueueGenericSend>
 800627a:	6278      	str	r0, [r7, #36]	; 0x24
 800627c:	e008      	b.n	8006290 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800627e:	4b07      	ldr	r3, [pc, #28]	; (800629c <xTimerGenericCommand+0x98>)
 8006280:	6818      	ldr	r0, [r3, #0]
 8006282:	f107 0110 	add.w	r1, r7, #16
 8006286:	2300      	movs	r3, #0
 8006288:	683a      	ldr	r2, [r7, #0]
 800628a:	f7fe fd61 	bl	8004d50 <xQueueGenericSendFromISR>
 800628e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006292:	4618      	mov	r0, r3
 8006294:	3728      	adds	r7, #40	; 0x28
 8006296:	46bd      	mov	sp, r7
 8006298:	bd80      	pop	{r7, pc}
 800629a:	bf00      	nop
 800629c:	20001270 	.word	0x20001270

080062a0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80062a0:	b580      	push	{r7, lr}
 80062a2:	b088      	sub	sp, #32
 80062a4:	af02      	add	r7, sp, #8
 80062a6:	6078      	str	r0, [r7, #4]
 80062a8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80062aa:	4b22      	ldr	r3, [pc, #136]	; (8006334 <prvProcessExpiredTimer+0x94>)
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	68db      	ldr	r3, [r3, #12]
 80062b0:	68db      	ldr	r3, [r3, #12]
 80062b2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80062b4:	697b      	ldr	r3, [r7, #20]
 80062b6:	3304      	adds	r3, #4
 80062b8:	4618      	mov	r0, r3
 80062ba:	f7fe fb1d 	bl	80048f8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80062be:	697b      	ldr	r3, [r7, #20]
 80062c0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80062c4:	f003 0304 	and.w	r3, r3, #4
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d022      	beq.n	8006312 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80062cc:	697b      	ldr	r3, [r7, #20]
 80062ce:	699a      	ldr	r2, [r3, #24]
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	18d1      	adds	r1, r2, r3
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	683a      	ldr	r2, [r7, #0]
 80062d8:	6978      	ldr	r0, [r7, #20]
 80062da:	f000 f8d1 	bl	8006480 <prvInsertTimerInActiveList>
 80062de:	4603      	mov	r3, r0
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d01f      	beq.n	8006324 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80062e4:	2300      	movs	r3, #0
 80062e6:	9300      	str	r3, [sp, #0]
 80062e8:	2300      	movs	r3, #0
 80062ea:	687a      	ldr	r2, [r7, #4]
 80062ec:	2100      	movs	r1, #0
 80062ee:	6978      	ldr	r0, [r7, #20]
 80062f0:	f7ff ff88 	bl	8006204 <xTimerGenericCommand>
 80062f4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80062f6:	693b      	ldr	r3, [r7, #16]
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d113      	bne.n	8006324 <prvProcessExpiredTimer+0x84>
	__asm volatile
 80062fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006300:	f383 8811 	msr	BASEPRI, r3
 8006304:	f3bf 8f6f 	isb	sy
 8006308:	f3bf 8f4f 	dsb	sy
 800630c:	60fb      	str	r3, [r7, #12]
}
 800630e:	bf00      	nop
 8006310:	e7fe      	b.n	8006310 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006312:	697b      	ldr	r3, [r7, #20]
 8006314:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006318:	f023 0301 	bic.w	r3, r3, #1
 800631c:	b2da      	uxtb	r2, r3
 800631e:	697b      	ldr	r3, [r7, #20]
 8006320:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006324:	697b      	ldr	r3, [r7, #20]
 8006326:	6a1b      	ldr	r3, [r3, #32]
 8006328:	6978      	ldr	r0, [r7, #20]
 800632a:	4798      	blx	r3
}
 800632c:	bf00      	nop
 800632e:	3718      	adds	r7, #24
 8006330:	46bd      	mov	sp, r7
 8006332:	bd80      	pop	{r7, pc}
 8006334:	20001268 	.word	0x20001268

08006338 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006338:	b580      	push	{r7, lr}
 800633a:	b084      	sub	sp, #16
 800633c:	af00      	add	r7, sp, #0
 800633e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006340:	f107 0308 	add.w	r3, r7, #8
 8006344:	4618      	mov	r0, r3
 8006346:	f000 f857 	bl	80063f8 <prvGetNextExpireTime>
 800634a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800634c:	68bb      	ldr	r3, [r7, #8]
 800634e:	4619      	mov	r1, r3
 8006350:	68f8      	ldr	r0, [r7, #12]
 8006352:	f000 f803 	bl	800635c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006356:	f000 f8d5 	bl	8006504 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800635a:	e7f1      	b.n	8006340 <prvTimerTask+0x8>

0800635c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800635c:	b580      	push	{r7, lr}
 800635e:	b084      	sub	sp, #16
 8006360:	af00      	add	r7, sp, #0
 8006362:	6078      	str	r0, [r7, #4]
 8006364:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006366:	f7ff fa39 	bl	80057dc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800636a:	f107 0308 	add.w	r3, r7, #8
 800636e:	4618      	mov	r0, r3
 8006370:	f000 f866 	bl	8006440 <prvSampleTimeNow>
 8006374:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006376:	68bb      	ldr	r3, [r7, #8]
 8006378:	2b00      	cmp	r3, #0
 800637a:	d130      	bne.n	80063de <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800637c:	683b      	ldr	r3, [r7, #0]
 800637e:	2b00      	cmp	r3, #0
 8006380:	d10a      	bne.n	8006398 <prvProcessTimerOrBlockTask+0x3c>
 8006382:	687a      	ldr	r2, [r7, #4]
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	429a      	cmp	r2, r3
 8006388:	d806      	bhi.n	8006398 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800638a:	f7ff fa35 	bl	80057f8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800638e:	68f9      	ldr	r1, [r7, #12]
 8006390:	6878      	ldr	r0, [r7, #4]
 8006392:	f7ff ff85 	bl	80062a0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006396:	e024      	b.n	80063e2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006398:	683b      	ldr	r3, [r7, #0]
 800639a:	2b00      	cmp	r3, #0
 800639c:	d008      	beq.n	80063b0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800639e:	4b13      	ldr	r3, [pc, #76]	; (80063ec <prvProcessTimerOrBlockTask+0x90>)
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d101      	bne.n	80063ac <prvProcessTimerOrBlockTask+0x50>
 80063a8:	2301      	movs	r3, #1
 80063aa:	e000      	b.n	80063ae <prvProcessTimerOrBlockTask+0x52>
 80063ac:	2300      	movs	r3, #0
 80063ae:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80063b0:	4b0f      	ldr	r3, [pc, #60]	; (80063f0 <prvProcessTimerOrBlockTask+0x94>)
 80063b2:	6818      	ldr	r0, [r3, #0]
 80063b4:	687a      	ldr	r2, [r7, #4]
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	1ad3      	subs	r3, r2, r3
 80063ba:	683a      	ldr	r2, [r7, #0]
 80063bc:	4619      	mov	r1, r3
 80063be:	f7fe ff7d 	bl	80052bc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80063c2:	f7ff fa19 	bl	80057f8 <xTaskResumeAll>
 80063c6:	4603      	mov	r3, r0
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d10a      	bne.n	80063e2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80063cc:	4b09      	ldr	r3, [pc, #36]	; (80063f4 <prvProcessTimerOrBlockTask+0x98>)
 80063ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80063d2:	601a      	str	r2, [r3, #0]
 80063d4:	f3bf 8f4f 	dsb	sy
 80063d8:	f3bf 8f6f 	isb	sy
}
 80063dc:	e001      	b.n	80063e2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80063de:	f7ff fa0b 	bl	80057f8 <xTaskResumeAll>
}
 80063e2:	bf00      	nop
 80063e4:	3710      	adds	r7, #16
 80063e6:	46bd      	mov	sp, r7
 80063e8:	bd80      	pop	{r7, pc}
 80063ea:	bf00      	nop
 80063ec:	2000126c 	.word	0x2000126c
 80063f0:	20001270 	.word	0x20001270
 80063f4:	e000ed04 	.word	0xe000ed04

080063f8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80063f8:	b480      	push	{r7}
 80063fa:	b085      	sub	sp, #20
 80063fc:	af00      	add	r7, sp, #0
 80063fe:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006400:	4b0e      	ldr	r3, [pc, #56]	; (800643c <prvGetNextExpireTime+0x44>)
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	2b00      	cmp	r3, #0
 8006408:	d101      	bne.n	800640e <prvGetNextExpireTime+0x16>
 800640a:	2201      	movs	r2, #1
 800640c:	e000      	b.n	8006410 <prvGetNextExpireTime+0x18>
 800640e:	2200      	movs	r2, #0
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	2b00      	cmp	r3, #0
 800641a:	d105      	bne.n	8006428 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800641c:	4b07      	ldr	r3, [pc, #28]	; (800643c <prvGetNextExpireTime+0x44>)
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	68db      	ldr	r3, [r3, #12]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	60fb      	str	r3, [r7, #12]
 8006426:	e001      	b.n	800642c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006428:	2300      	movs	r3, #0
 800642a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800642c:	68fb      	ldr	r3, [r7, #12]
}
 800642e:	4618      	mov	r0, r3
 8006430:	3714      	adds	r7, #20
 8006432:	46bd      	mov	sp, r7
 8006434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006438:	4770      	bx	lr
 800643a:	bf00      	nop
 800643c:	20001268 	.word	0x20001268

08006440 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006440:	b580      	push	{r7, lr}
 8006442:	b084      	sub	sp, #16
 8006444:	af00      	add	r7, sp, #0
 8006446:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006448:	f7ff fa74 	bl	8005934 <xTaskGetTickCount>
 800644c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800644e:	4b0b      	ldr	r3, [pc, #44]	; (800647c <prvSampleTimeNow+0x3c>)
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	68fa      	ldr	r2, [r7, #12]
 8006454:	429a      	cmp	r2, r3
 8006456:	d205      	bcs.n	8006464 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006458:	f000 f936 	bl	80066c8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	2201      	movs	r2, #1
 8006460:	601a      	str	r2, [r3, #0]
 8006462:	e002      	b.n	800646a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	2200      	movs	r2, #0
 8006468:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800646a:	4a04      	ldr	r2, [pc, #16]	; (800647c <prvSampleTimeNow+0x3c>)
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006470:	68fb      	ldr	r3, [r7, #12]
}
 8006472:	4618      	mov	r0, r3
 8006474:	3710      	adds	r7, #16
 8006476:	46bd      	mov	sp, r7
 8006478:	bd80      	pop	{r7, pc}
 800647a:	bf00      	nop
 800647c:	20001278 	.word	0x20001278

08006480 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006480:	b580      	push	{r7, lr}
 8006482:	b086      	sub	sp, #24
 8006484:	af00      	add	r7, sp, #0
 8006486:	60f8      	str	r0, [r7, #12]
 8006488:	60b9      	str	r1, [r7, #8]
 800648a:	607a      	str	r2, [r7, #4]
 800648c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800648e:	2300      	movs	r3, #0
 8006490:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	68ba      	ldr	r2, [r7, #8]
 8006496:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	68fa      	ldr	r2, [r7, #12]
 800649c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800649e:	68ba      	ldr	r2, [r7, #8]
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	429a      	cmp	r2, r3
 80064a4:	d812      	bhi.n	80064cc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80064a6:	687a      	ldr	r2, [r7, #4]
 80064a8:	683b      	ldr	r3, [r7, #0]
 80064aa:	1ad2      	subs	r2, r2, r3
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	699b      	ldr	r3, [r3, #24]
 80064b0:	429a      	cmp	r2, r3
 80064b2:	d302      	bcc.n	80064ba <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80064b4:	2301      	movs	r3, #1
 80064b6:	617b      	str	r3, [r7, #20]
 80064b8:	e01b      	b.n	80064f2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80064ba:	4b10      	ldr	r3, [pc, #64]	; (80064fc <prvInsertTimerInActiveList+0x7c>)
 80064bc:	681a      	ldr	r2, [r3, #0]
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	3304      	adds	r3, #4
 80064c2:	4619      	mov	r1, r3
 80064c4:	4610      	mov	r0, r2
 80064c6:	f7fe f9de 	bl	8004886 <vListInsert>
 80064ca:	e012      	b.n	80064f2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80064cc:	687a      	ldr	r2, [r7, #4]
 80064ce:	683b      	ldr	r3, [r7, #0]
 80064d0:	429a      	cmp	r2, r3
 80064d2:	d206      	bcs.n	80064e2 <prvInsertTimerInActiveList+0x62>
 80064d4:	68ba      	ldr	r2, [r7, #8]
 80064d6:	683b      	ldr	r3, [r7, #0]
 80064d8:	429a      	cmp	r2, r3
 80064da:	d302      	bcc.n	80064e2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80064dc:	2301      	movs	r3, #1
 80064de:	617b      	str	r3, [r7, #20]
 80064e0:	e007      	b.n	80064f2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80064e2:	4b07      	ldr	r3, [pc, #28]	; (8006500 <prvInsertTimerInActiveList+0x80>)
 80064e4:	681a      	ldr	r2, [r3, #0]
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	3304      	adds	r3, #4
 80064ea:	4619      	mov	r1, r3
 80064ec:	4610      	mov	r0, r2
 80064ee:	f7fe f9ca 	bl	8004886 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80064f2:	697b      	ldr	r3, [r7, #20]
}
 80064f4:	4618      	mov	r0, r3
 80064f6:	3718      	adds	r7, #24
 80064f8:	46bd      	mov	sp, r7
 80064fa:	bd80      	pop	{r7, pc}
 80064fc:	2000126c 	.word	0x2000126c
 8006500:	20001268 	.word	0x20001268

08006504 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006504:	b580      	push	{r7, lr}
 8006506:	b08e      	sub	sp, #56	; 0x38
 8006508:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800650a:	e0ca      	b.n	80066a2 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	2b00      	cmp	r3, #0
 8006510:	da18      	bge.n	8006544 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006512:	1d3b      	adds	r3, r7, #4
 8006514:	3304      	adds	r3, #4
 8006516:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006518:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800651a:	2b00      	cmp	r3, #0
 800651c:	d10a      	bne.n	8006534 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800651e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006522:	f383 8811 	msr	BASEPRI, r3
 8006526:	f3bf 8f6f 	isb	sy
 800652a:	f3bf 8f4f 	dsb	sy
 800652e:	61fb      	str	r3, [r7, #28]
}
 8006530:	bf00      	nop
 8006532:	e7fe      	b.n	8006532 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006534:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800653a:	6850      	ldr	r0, [r2, #4]
 800653c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800653e:	6892      	ldr	r2, [r2, #8]
 8006540:	4611      	mov	r1, r2
 8006542:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	2b00      	cmp	r3, #0
 8006548:	f2c0 80ab 	blt.w	80066a2 <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006550:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006552:	695b      	ldr	r3, [r3, #20]
 8006554:	2b00      	cmp	r3, #0
 8006556:	d004      	beq.n	8006562 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006558:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800655a:	3304      	adds	r3, #4
 800655c:	4618      	mov	r0, r3
 800655e:	f7fe f9cb 	bl	80048f8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006562:	463b      	mov	r3, r7
 8006564:	4618      	mov	r0, r3
 8006566:	f7ff ff6b 	bl	8006440 <prvSampleTimeNow>
 800656a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	2b09      	cmp	r3, #9
 8006570:	f200 8096 	bhi.w	80066a0 <prvProcessReceivedCommands+0x19c>
 8006574:	a201      	add	r2, pc, #4	; (adr r2, 800657c <prvProcessReceivedCommands+0x78>)
 8006576:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800657a:	bf00      	nop
 800657c:	080065a5 	.word	0x080065a5
 8006580:	080065a5 	.word	0x080065a5
 8006584:	080065a5 	.word	0x080065a5
 8006588:	08006619 	.word	0x08006619
 800658c:	0800662d 	.word	0x0800662d
 8006590:	08006677 	.word	0x08006677
 8006594:	080065a5 	.word	0x080065a5
 8006598:	080065a5 	.word	0x080065a5
 800659c:	08006619 	.word	0x08006619
 80065a0:	0800662d 	.word	0x0800662d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80065a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065a6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80065aa:	f043 0301 	orr.w	r3, r3, #1
 80065ae:	b2da      	uxtb	r2, r3
 80065b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065b2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80065b6:	68ba      	ldr	r2, [r7, #8]
 80065b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065ba:	699b      	ldr	r3, [r3, #24]
 80065bc:	18d1      	adds	r1, r2, r3
 80065be:	68bb      	ldr	r3, [r7, #8]
 80065c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80065c2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80065c4:	f7ff ff5c 	bl	8006480 <prvInsertTimerInActiveList>
 80065c8:	4603      	mov	r3, r0
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d069      	beq.n	80066a2 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80065ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065d0:	6a1b      	ldr	r3, [r3, #32]
 80065d2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80065d4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80065d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065d8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80065dc:	f003 0304 	and.w	r3, r3, #4
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d05e      	beq.n	80066a2 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80065e4:	68ba      	ldr	r2, [r7, #8]
 80065e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065e8:	699b      	ldr	r3, [r3, #24]
 80065ea:	441a      	add	r2, r3
 80065ec:	2300      	movs	r3, #0
 80065ee:	9300      	str	r3, [sp, #0]
 80065f0:	2300      	movs	r3, #0
 80065f2:	2100      	movs	r1, #0
 80065f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80065f6:	f7ff fe05 	bl	8006204 <xTimerGenericCommand>
 80065fa:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80065fc:	6a3b      	ldr	r3, [r7, #32]
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d14f      	bne.n	80066a2 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8006602:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006606:	f383 8811 	msr	BASEPRI, r3
 800660a:	f3bf 8f6f 	isb	sy
 800660e:	f3bf 8f4f 	dsb	sy
 8006612:	61bb      	str	r3, [r7, #24]
}
 8006614:	bf00      	nop
 8006616:	e7fe      	b.n	8006616 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006618:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800661a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800661e:	f023 0301 	bic.w	r3, r3, #1
 8006622:	b2da      	uxtb	r2, r3
 8006624:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006626:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800662a:	e03a      	b.n	80066a2 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800662c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800662e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006632:	f043 0301 	orr.w	r3, r3, #1
 8006636:	b2da      	uxtb	r2, r3
 8006638:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800663a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800663e:	68ba      	ldr	r2, [r7, #8]
 8006640:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006642:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006644:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006646:	699b      	ldr	r3, [r3, #24]
 8006648:	2b00      	cmp	r3, #0
 800664a:	d10a      	bne.n	8006662 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800664c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006650:	f383 8811 	msr	BASEPRI, r3
 8006654:	f3bf 8f6f 	isb	sy
 8006658:	f3bf 8f4f 	dsb	sy
 800665c:	617b      	str	r3, [r7, #20]
}
 800665e:	bf00      	nop
 8006660:	e7fe      	b.n	8006660 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006662:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006664:	699a      	ldr	r2, [r3, #24]
 8006666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006668:	18d1      	adds	r1, r2, r3
 800666a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800666c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800666e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006670:	f7ff ff06 	bl	8006480 <prvInsertTimerInActiveList>
					break;
 8006674:	e015      	b.n	80066a2 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006676:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006678:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800667c:	f003 0302 	and.w	r3, r3, #2
 8006680:	2b00      	cmp	r3, #0
 8006682:	d103      	bne.n	800668c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8006684:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006686:	f000 fbdb 	bl	8006e40 <vPortFree>
 800668a:	e00a      	b.n	80066a2 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800668c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800668e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006692:	f023 0301 	bic.w	r3, r3, #1
 8006696:	b2da      	uxtb	r2, r3
 8006698:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800669a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800669e:	e000      	b.n	80066a2 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 80066a0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80066a2:	4b08      	ldr	r3, [pc, #32]	; (80066c4 <prvProcessReceivedCommands+0x1c0>)
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	1d39      	adds	r1, r7, #4
 80066a8:	2200      	movs	r2, #0
 80066aa:	4618      	mov	r0, r3
 80066ac:	f7fe fbec 	bl	8004e88 <xQueueReceive>
 80066b0:	4603      	mov	r3, r0
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	f47f af2a 	bne.w	800650c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80066b8:	bf00      	nop
 80066ba:	bf00      	nop
 80066bc:	3730      	adds	r7, #48	; 0x30
 80066be:	46bd      	mov	sp, r7
 80066c0:	bd80      	pop	{r7, pc}
 80066c2:	bf00      	nop
 80066c4:	20001270 	.word	0x20001270

080066c8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80066c8:	b580      	push	{r7, lr}
 80066ca:	b088      	sub	sp, #32
 80066cc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80066ce:	e048      	b.n	8006762 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80066d0:	4b2d      	ldr	r3, [pc, #180]	; (8006788 <prvSwitchTimerLists+0xc0>)
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	68db      	ldr	r3, [r3, #12]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80066da:	4b2b      	ldr	r3, [pc, #172]	; (8006788 <prvSwitchTimerLists+0xc0>)
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	68db      	ldr	r3, [r3, #12]
 80066e0:	68db      	ldr	r3, [r3, #12]
 80066e2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	3304      	adds	r3, #4
 80066e8:	4618      	mov	r0, r3
 80066ea:	f7fe f905 	bl	80048f8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	6a1b      	ldr	r3, [r3, #32]
 80066f2:	68f8      	ldr	r0, [r7, #12]
 80066f4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80066fc:	f003 0304 	and.w	r3, r3, #4
 8006700:	2b00      	cmp	r3, #0
 8006702:	d02e      	beq.n	8006762 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	699b      	ldr	r3, [r3, #24]
 8006708:	693a      	ldr	r2, [r7, #16]
 800670a:	4413      	add	r3, r2
 800670c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800670e:	68ba      	ldr	r2, [r7, #8]
 8006710:	693b      	ldr	r3, [r7, #16]
 8006712:	429a      	cmp	r2, r3
 8006714:	d90e      	bls.n	8006734 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	68ba      	ldr	r2, [r7, #8]
 800671a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	68fa      	ldr	r2, [r7, #12]
 8006720:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006722:	4b19      	ldr	r3, [pc, #100]	; (8006788 <prvSwitchTimerLists+0xc0>)
 8006724:	681a      	ldr	r2, [r3, #0]
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	3304      	adds	r3, #4
 800672a:	4619      	mov	r1, r3
 800672c:	4610      	mov	r0, r2
 800672e:	f7fe f8aa 	bl	8004886 <vListInsert>
 8006732:	e016      	b.n	8006762 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006734:	2300      	movs	r3, #0
 8006736:	9300      	str	r3, [sp, #0]
 8006738:	2300      	movs	r3, #0
 800673a:	693a      	ldr	r2, [r7, #16]
 800673c:	2100      	movs	r1, #0
 800673e:	68f8      	ldr	r0, [r7, #12]
 8006740:	f7ff fd60 	bl	8006204 <xTimerGenericCommand>
 8006744:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	2b00      	cmp	r3, #0
 800674a:	d10a      	bne.n	8006762 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800674c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006750:	f383 8811 	msr	BASEPRI, r3
 8006754:	f3bf 8f6f 	isb	sy
 8006758:	f3bf 8f4f 	dsb	sy
 800675c:	603b      	str	r3, [r7, #0]
}
 800675e:	bf00      	nop
 8006760:	e7fe      	b.n	8006760 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006762:	4b09      	ldr	r3, [pc, #36]	; (8006788 <prvSwitchTimerLists+0xc0>)
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	2b00      	cmp	r3, #0
 800676a:	d1b1      	bne.n	80066d0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800676c:	4b06      	ldr	r3, [pc, #24]	; (8006788 <prvSwitchTimerLists+0xc0>)
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006772:	4b06      	ldr	r3, [pc, #24]	; (800678c <prvSwitchTimerLists+0xc4>)
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	4a04      	ldr	r2, [pc, #16]	; (8006788 <prvSwitchTimerLists+0xc0>)
 8006778:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800677a:	4a04      	ldr	r2, [pc, #16]	; (800678c <prvSwitchTimerLists+0xc4>)
 800677c:	697b      	ldr	r3, [r7, #20]
 800677e:	6013      	str	r3, [r2, #0]
}
 8006780:	bf00      	nop
 8006782:	3718      	adds	r7, #24
 8006784:	46bd      	mov	sp, r7
 8006786:	bd80      	pop	{r7, pc}
 8006788:	20001268 	.word	0x20001268
 800678c:	2000126c 	.word	0x2000126c

08006790 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006790:	b580      	push	{r7, lr}
 8006792:	b082      	sub	sp, #8
 8006794:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006796:	f000 f965 	bl	8006a64 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800679a:	4b15      	ldr	r3, [pc, #84]	; (80067f0 <prvCheckForValidListAndQueue+0x60>)
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d120      	bne.n	80067e4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80067a2:	4814      	ldr	r0, [pc, #80]	; (80067f4 <prvCheckForValidListAndQueue+0x64>)
 80067a4:	f7fe f81e 	bl	80047e4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80067a8:	4813      	ldr	r0, [pc, #76]	; (80067f8 <prvCheckForValidListAndQueue+0x68>)
 80067aa:	f7fe f81b 	bl	80047e4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80067ae:	4b13      	ldr	r3, [pc, #76]	; (80067fc <prvCheckForValidListAndQueue+0x6c>)
 80067b0:	4a10      	ldr	r2, [pc, #64]	; (80067f4 <prvCheckForValidListAndQueue+0x64>)
 80067b2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80067b4:	4b12      	ldr	r3, [pc, #72]	; (8006800 <prvCheckForValidListAndQueue+0x70>)
 80067b6:	4a10      	ldr	r2, [pc, #64]	; (80067f8 <prvCheckForValidListAndQueue+0x68>)
 80067b8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80067ba:	2300      	movs	r3, #0
 80067bc:	9300      	str	r3, [sp, #0]
 80067be:	4b11      	ldr	r3, [pc, #68]	; (8006804 <prvCheckForValidListAndQueue+0x74>)
 80067c0:	4a11      	ldr	r2, [pc, #68]	; (8006808 <prvCheckForValidListAndQueue+0x78>)
 80067c2:	2110      	movs	r1, #16
 80067c4:	200a      	movs	r0, #10
 80067c6:	f7fe f929 	bl	8004a1c <xQueueGenericCreateStatic>
 80067ca:	4603      	mov	r3, r0
 80067cc:	4a08      	ldr	r2, [pc, #32]	; (80067f0 <prvCheckForValidListAndQueue+0x60>)
 80067ce:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80067d0:	4b07      	ldr	r3, [pc, #28]	; (80067f0 <prvCheckForValidListAndQueue+0x60>)
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d005      	beq.n	80067e4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80067d8:	4b05      	ldr	r3, [pc, #20]	; (80067f0 <prvCheckForValidListAndQueue+0x60>)
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	490b      	ldr	r1, [pc, #44]	; (800680c <prvCheckForValidListAndQueue+0x7c>)
 80067de:	4618      	mov	r0, r3
 80067e0:	f7fe fd42 	bl	8005268 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80067e4:	f000 f96e 	bl	8006ac4 <vPortExitCritical>
}
 80067e8:	bf00      	nop
 80067ea:	46bd      	mov	sp, r7
 80067ec:	bd80      	pop	{r7, pc}
 80067ee:	bf00      	nop
 80067f0:	20001270 	.word	0x20001270
 80067f4:	20001240 	.word	0x20001240
 80067f8:	20001254 	.word	0x20001254
 80067fc:	20001268 	.word	0x20001268
 8006800:	2000126c 	.word	0x2000126c
 8006804:	2000131c 	.word	0x2000131c
 8006808:	2000127c 	.word	0x2000127c
 800680c:	080074dc 	.word	0x080074dc

08006810 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006810:	b480      	push	{r7}
 8006812:	b085      	sub	sp, #20
 8006814:	af00      	add	r7, sp, #0
 8006816:	60f8      	str	r0, [r7, #12]
 8006818:	60b9      	str	r1, [r7, #8]
 800681a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	3b04      	subs	r3, #4
 8006820:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006828:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	3b04      	subs	r3, #4
 800682e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006830:	68bb      	ldr	r3, [r7, #8]
 8006832:	f023 0201 	bic.w	r2, r3, #1
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	3b04      	subs	r3, #4
 800683e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006840:	4a0c      	ldr	r2, [pc, #48]	; (8006874 <pxPortInitialiseStack+0x64>)
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	3b14      	subs	r3, #20
 800684a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800684c:	687a      	ldr	r2, [r7, #4]
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	3b04      	subs	r3, #4
 8006856:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	f06f 0202 	mvn.w	r2, #2
 800685e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	3b20      	subs	r3, #32
 8006864:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006866:	68fb      	ldr	r3, [r7, #12]
}
 8006868:	4618      	mov	r0, r3
 800686a:	3714      	adds	r7, #20
 800686c:	46bd      	mov	sp, r7
 800686e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006872:	4770      	bx	lr
 8006874:	08006879 	.word	0x08006879

08006878 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006878:	b480      	push	{r7}
 800687a:	b085      	sub	sp, #20
 800687c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800687e:	2300      	movs	r3, #0
 8006880:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006882:	4b12      	ldr	r3, [pc, #72]	; (80068cc <prvTaskExitError+0x54>)
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	f1b3 3fff 	cmp.w	r3, #4294967295
 800688a:	d00a      	beq.n	80068a2 <prvTaskExitError+0x2a>
	__asm volatile
 800688c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006890:	f383 8811 	msr	BASEPRI, r3
 8006894:	f3bf 8f6f 	isb	sy
 8006898:	f3bf 8f4f 	dsb	sy
 800689c:	60fb      	str	r3, [r7, #12]
}
 800689e:	bf00      	nop
 80068a0:	e7fe      	b.n	80068a0 <prvTaskExitError+0x28>
	__asm volatile
 80068a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068a6:	f383 8811 	msr	BASEPRI, r3
 80068aa:	f3bf 8f6f 	isb	sy
 80068ae:	f3bf 8f4f 	dsb	sy
 80068b2:	60bb      	str	r3, [r7, #8]
}
 80068b4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80068b6:	bf00      	nop
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d0fc      	beq.n	80068b8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80068be:	bf00      	nop
 80068c0:	bf00      	nop
 80068c2:	3714      	adds	r7, #20
 80068c4:	46bd      	mov	sp, r7
 80068c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ca:	4770      	bx	lr
 80068cc:	20000014 	.word	0x20000014

080068d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80068d0:	4b07      	ldr	r3, [pc, #28]	; (80068f0 <pxCurrentTCBConst2>)
 80068d2:	6819      	ldr	r1, [r3, #0]
 80068d4:	6808      	ldr	r0, [r1, #0]
 80068d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068da:	f380 8809 	msr	PSP, r0
 80068de:	f3bf 8f6f 	isb	sy
 80068e2:	f04f 0000 	mov.w	r0, #0
 80068e6:	f380 8811 	msr	BASEPRI, r0
 80068ea:	4770      	bx	lr
 80068ec:	f3af 8000 	nop.w

080068f0 <pxCurrentTCBConst2>:
 80068f0:	20000d40 	.word	0x20000d40
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80068f4:	bf00      	nop
 80068f6:	bf00      	nop

080068f8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80068f8:	4808      	ldr	r0, [pc, #32]	; (800691c <prvPortStartFirstTask+0x24>)
 80068fa:	6800      	ldr	r0, [r0, #0]
 80068fc:	6800      	ldr	r0, [r0, #0]
 80068fe:	f380 8808 	msr	MSP, r0
 8006902:	f04f 0000 	mov.w	r0, #0
 8006906:	f380 8814 	msr	CONTROL, r0
 800690a:	b662      	cpsie	i
 800690c:	b661      	cpsie	f
 800690e:	f3bf 8f4f 	dsb	sy
 8006912:	f3bf 8f6f 	isb	sy
 8006916:	df00      	svc	0
 8006918:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800691a:	bf00      	nop
 800691c:	e000ed08 	.word	0xe000ed08

08006920 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006920:	b580      	push	{r7, lr}
 8006922:	b086      	sub	sp, #24
 8006924:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006926:	4b46      	ldr	r3, [pc, #280]	; (8006a40 <xPortStartScheduler+0x120>)
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	4a46      	ldr	r2, [pc, #280]	; (8006a44 <xPortStartScheduler+0x124>)
 800692c:	4293      	cmp	r3, r2
 800692e:	d10a      	bne.n	8006946 <xPortStartScheduler+0x26>
	__asm volatile
 8006930:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006934:	f383 8811 	msr	BASEPRI, r3
 8006938:	f3bf 8f6f 	isb	sy
 800693c:	f3bf 8f4f 	dsb	sy
 8006940:	613b      	str	r3, [r7, #16]
}
 8006942:	bf00      	nop
 8006944:	e7fe      	b.n	8006944 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006946:	4b3e      	ldr	r3, [pc, #248]	; (8006a40 <xPortStartScheduler+0x120>)
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	4a3f      	ldr	r2, [pc, #252]	; (8006a48 <xPortStartScheduler+0x128>)
 800694c:	4293      	cmp	r3, r2
 800694e:	d10a      	bne.n	8006966 <xPortStartScheduler+0x46>
	__asm volatile
 8006950:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006954:	f383 8811 	msr	BASEPRI, r3
 8006958:	f3bf 8f6f 	isb	sy
 800695c:	f3bf 8f4f 	dsb	sy
 8006960:	60fb      	str	r3, [r7, #12]
}
 8006962:	bf00      	nop
 8006964:	e7fe      	b.n	8006964 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006966:	4b39      	ldr	r3, [pc, #228]	; (8006a4c <xPortStartScheduler+0x12c>)
 8006968:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800696a:	697b      	ldr	r3, [r7, #20]
 800696c:	781b      	ldrb	r3, [r3, #0]
 800696e:	b2db      	uxtb	r3, r3
 8006970:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006972:	697b      	ldr	r3, [r7, #20]
 8006974:	22ff      	movs	r2, #255	; 0xff
 8006976:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006978:	697b      	ldr	r3, [r7, #20]
 800697a:	781b      	ldrb	r3, [r3, #0]
 800697c:	b2db      	uxtb	r3, r3
 800697e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006980:	78fb      	ldrb	r3, [r7, #3]
 8006982:	b2db      	uxtb	r3, r3
 8006984:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006988:	b2da      	uxtb	r2, r3
 800698a:	4b31      	ldr	r3, [pc, #196]	; (8006a50 <xPortStartScheduler+0x130>)
 800698c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800698e:	4b31      	ldr	r3, [pc, #196]	; (8006a54 <xPortStartScheduler+0x134>)
 8006990:	2207      	movs	r2, #7
 8006992:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006994:	e009      	b.n	80069aa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8006996:	4b2f      	ldr	r3, [pc, #188]	; (8006a54 <xPortStartScheduler+0x134>)
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	3b01      	subs	r3, #1
 800699c:	4a2d      	ldr	r2, [pc, #180]	; (8006a54 <xPortStartScheduler+0x134>)
 800699e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80069a0:	78fb      	ldrb	r3, [r7, #3]
 80069a2:	b2db      	uxtb	r3, r3
 80069a4:	005b      	lsls	r3, r3, #1
 80069a6:	b2db      	uxtb	r3, r3
 80069a8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80069aa:	78fb      	ldrb	r3, [r7, #3]
 80069ac:	b2db      	uxtb	r3, r3
 80069ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069b2:	2b80      	cmp	r3, #128	; 0x80
 80069b4:	d0ef      	beq.n	8006996 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80069b6:	4b27      	ldr	r3, [pc, #156]	; (8006a54 <xPortStartScheduler+0x134>)
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	f1c3 0307 	rsb	r3, r3, #7
 80069be:	2b04      	cmp	r3, #4
 80069c0:	d00a      	beq.n	80069d8 <xPortStartScheduler+0xb8>
	__asm volatile
 80069c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069c6:	f383 8811 	msr	BASEPRI, r3
 80069ca:	f3bf 8f6f 	isb	sy
 80069ce:	f3bf 8f4f 	dsb	sy
 80069d2:	60bb      	str	r3, [r7, #8]
}
 80069d4:	bf00      	nop
 80069d6:	e7fe      	b.n	80069d6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80069d8:	4b1e      	ldr	r3, [pc, #120]	; (8006a54 <xPortStartScheduler+0x134>)
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	021b      	lsls	r3, r3, #8
 80069de:	4a1d      	ldr	r2, [pc, #116]	; (8006a54 <xPortStartScheduler+0x134>)
 80069e0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80069e2:	4b1c      	ldr	r3, [pc, #112]	; (8006a54 <xPortStartScheduler+0x134>)
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80069ea:	4a1a      	ldr	r2, [pc, #104]	; (8006a54 <xPortStartScheduler+0x134>)
 80069ec:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	b2da      	uxtb	r2, r3
 80069f2:	697b      	ldr	r3, [r7, #20]
 80069f4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80069f6:	4b18      	ldr	r3, [pc, #96]	; (8006a58 <xPortStartScheduler+0x138>)
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	4a17      	ldr	r2, [pc, #92]	; (8006a58 <xPortStartScheduler+0x138>)
 80069fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006a00:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006a02:	4b15      	ldr	r3, [pc, #84]	; (8006a58 <xPortStartScheduler+0x138>)
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	4a14      	ldr	r2, [pc, #80]	; (8006a58 <xPortStartScheduler+0x138>)
 8006a08:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006a0c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006a0e:	f000 f8dd 	bl	8006bcc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006a12:	4b12      	ldr	r3, [pc, #72]	; (8006a5c <xPortStartScheduler+0x13c>)
 8006a14:	2200      	movs	r2, #0
 8006a16:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006a18:	f000 f8fc 	bl	8006c14 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006a1c:	4b10      	ldr	r3, [pc, #64]	; (8006a60 <xPortStartScheduler+0x140>)
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	4a0f      	ldr	r2, [pc, #60]	; (8006a60 <xPortStartScheduler+0x140>)
 8006a22:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006a26:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006a28:	f7ff ff66 	bl	80068f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006a2c:	f7ff f84c 	bl	8005ac8 <vTaskSwitchContext>
	prvTaskExitError();
 8006a30:	f7ff ff22 	bl	8006878 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006a34:	2300      	movs	r3, #0
}
 8006a36:	4618      	mov	r0, r3
 8006a38:	3718      	adds	r7, #24
 8006a3a:	46bd      	mov	sp, r7
 8006a3c:	bd80      	pop	{r7, pc}
 8006a3e:	bf00      	nop
 8006a40:	e000ed00 	.word	0xe000ed00
 8006a44:	410fc271 	.word	0x410fc271
 8006a48:	410fc270 	.word	0x410fc270
 8006a4c:	e000e400 	.word	0xe000e400
 8006a50:	2000136c 	.word	0x2000136c
 8006a54:	20001370 	.word	0x20001370
 8006a58:	e000ed20 	.word	0xe000ed20
 8006a5c:	20000014 	.word	0x20000014
 8006a60:	e000ef34 	.word	0xe000ef34

08006a64 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006a64:	b480      	push	{r7}
 8006a66:	b083      	sub	sp, #12
 8006a68:	af00      	add	r7, sp, #0
	__asm volatile
 8006a6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a6e:	f383 8811 	msr	BASEPRI, r3
 8006a72:	f3bf 8f6f 	isb	sy
 8006a76:	f3bf 8f4f 	dsb	sy
 8006a7a:	607b      	str	r3, [r7, #4]
}
 8006a7c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006a7e:	4b0f      	ldr	r3, [pc, #60]	; (8006abc <vPortEnterCritical+0x58>)
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	3301      	adds	r3, #1
 8006a84:	4a0d      	ldr	r2, [pc, #52]	; (8006abc <vPortEnterCritical+0x58>)
 8006a86:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006a88:	4b0c      	ldr	r3, [pc, #48]	; (8006abc <vPortEnterCritical+0x58>)
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	2b01      	cmp	r3, #1
 8006a8e:	d10f      	bne.n	8006ab0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006a90:	4b0b      	ldr	r3, [pc, #44]	; (8006ac0 <vPortEnterCritical+0x5c>)
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	b2db      	uxtb	r3, r3
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d00a      	beq.n	8006ab0 <vPortEnterCritical+0x4c>
	__asm volatile
 8006a9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a9e:	f383 8811 	msr	BASEPRI, r3
 8006aa2:	f3bf 8f6f 	isb	sy
 8006aa6:	f3bf 8f4f 	dsb	sy
 8006aaa:	603b      	str	r3, [r7, #0]
}
 8006aac:	bf00      	nop
 8006aae:	e7fe      	b.n	8006aae <vPortEnterCritical+0x4a>
	}
}
 8006ab0:	bf00      	nop
 8006ab2:	370c      	adds	r7, #12
 8006ab4:	46bd      	mov	sp, r7
 8006ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aba:	4770      	bx	lr
 8006abc:	20000014 	.word	0x20000014
 8006ac0:	e000ed04 	.word	0xe000ed04

08006ac4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006ac4:	b480      	push	{r7}
 8006ac6:	b083      	sub	sp, #12
 8006ac8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006aca:	4b12      	ldr	r3, [pc, #72]	; (8006b14 <vPortExitCritical+0x50>)
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d10a      	bne.n	8006ae8 <vPortExitCritical+0x24>
	__asm volatile
 8006ad2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ad6:	f383 8811 	msr	BASEPRI, r3
 8006ada:	f3bf 8f6f 	isb	sy
 8006ade:	f3bf 8f4f 	dsb	sy
 8006ae2:	607b      	str	r3, [r7, #4]
}
 8006ae4:	bf00      	nop
 8006ae6:	e7fe      	b.n	8006ae6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006ae8:	4b0a      	ldr	r3, [pc, #40]	; (8006b14 <vPortExitCritical+0x50>)
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	3b01      	subs	r3, #1
 8006aee:	4a09      	ldr	r2, [pc, #36]	; (8006b14 <vPortExitCritical+0x50>)
 8006af0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006af2:	4b08      	ldr	r3, [pc, #32]	; (8006b14 <vPortExitCritical+0x50>)
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d105      	bne.n	8006b06 <vPortExitCritical+0x42>
 8006afa:	2300      	movs	r3, #0
 8006afc:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006afe:	683b      	ldr	r3, [r7, #0]
 8006b00:	f383 8811 	msr	BASEPRI, r3
}
 8006b04:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006b06:	bf00      	nop
 8006b08:	370c      	adds	r7, #12
 8006b0a:	46bd      	mov	sp, r7
 8006b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b10:	4770      	bx	lr
 8006b12:	bf00      	nop
 8006b14:	20000014 	.word	0x20000014
	...

08006b20 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006b20:	f3ef 8009 	mrs	r0, PSP
 8006b24:	f3bf 8f6f 	isb	sy
 8006b28:	4b15      	ldr	r3, [pc, #84]	; (8006b80 <pxCurrentTCBConst>)
 8006b2a:	681a      	ldr	r2, [r3, #0]
 8006b2c:	f01e 0f10 	tst.w	lr, #16
 8006b30:	bf08      	it	eq
 8006b32:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006b36:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b3a:	6010      	str	r0, [r2, #0]
 8006b3c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006b40:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006b44:	f380 8811 	msr	BASEPRI, r0
 8006b48:	f3bf 8f4f 	dsb	sy
 8006b4c:	f3bf 8f6f 	isb	sy
 8006b50:	f7fe ffba 	bl	8005ac8 <vTaskSwitchContext>
 8006b54:	f04f 0000 	mov.w	r0, #0
 8006b58:	f380 8811 	msr	BASEPRI, r0
 8006b5c:	bc09      	pop	{r0, r3}
 8006b5e:	6819      	ldr	r1, [r3, #0]
 8006b60:	6808      	ldr	r0, [r1, #0]
 8006b62:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b66:	f01e 0f10 	tst.w	lr, #16
 8006b6a:	bf08      	it	eq
 8006b6c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006b70:	f380 8809 	msr	PSP, r0
 8006b74:	f3bf 8f6f 	isb	sy
 8006b78:	4770      	bx	lr
 8006b7a:	bf00      	nop
 8006b7c:	f3af 8000 	nop.w

08006b80 <pxCurrentTCBConst>:
 8006b80:	20000d40 	.word	0x20000d40
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006b84:	bf00      	nop
 8006b86:	bf00      	nop

08006b88 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006b88:	b580      	push	{r7, lr}
 8006b8a:	b082      	sub	sp, #8
 8006b8c:	af00      	add	r7, sp, #0
	__asm volatile
 8006b8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b92:	f383 8811 	msr	BASEPRI, r3
 8006b96:	f3bf 8f6f 	isb	sy
 8006b9a:	f3bf 8f4f 	dsb	sy
 8006b9e:	607b      	str	r3, [r7, #4]
}
 8006ba0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006ba2:	f7fe fed7 	bl	8005954 <xTaskIncrementTick>
 8006ba6:	4603      	mov	r3, r0
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d003      	beq.n	8006bb4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006bac:	4b06      	ldr	r3, [pc, #24]	; (8006bc8 <xPortSysTickHandler+0x40>)
 8006bae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006bb2:	601a      	str	r2, [r3, #0]
 8006bb4:	2300      	movs	r3, #0
 8006bb6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006bb8:	683b      	ldr	r3, [r7, #0]
 8006bba:	f383 8811 	msr	BASEPRI, r3
}
 8006bbe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006bc0:	bf00      	nop
 8006bc2:	3708      	adds	r7, #8
 8006bc4:	46bd      	mov	sp, r7
 8006bc6:	bd80      	pop	{r7, pc}
 8006bc8:	e000ed04 	.word	0xe000ed04

08006bcc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006bcc:	b480      	push	{r7}
 8006bce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006bd0:	4b0b      	ldr	r3, [pc, #44]	; (8006c00 <vPortSetupTimerInterrupt+0x34>)
 8006bd2:	2200      	movs	r2, #0
 8006bd4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006bd6:	4b0b      	ldr	r3, [pc, #44]	; (8006c04 <vPortSetupTimerInterrupt+0x38>)
 8006bd8:	2200      	movs	r2, #0
 8006bda:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006bdc:	4b0a      	ldr	r3, [pc, #40]	; (8006c08 <vPortSetupTimerInterrupt+0x3c>)
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	4a0a      	ldr	r2, [pc, #40]	; (8006c0c <vPortSetupTimerInterrupt+0x40>)
 8006be2:	fba2 2303 	umull	r2, r3, r2, r3
 8006be6:	099b      	lsrs	r3, r3, #6
 8006be8:	4a09      	ldr	r2, [pc, #36]	; (8006c10 <vPortSetupTimerInterrupt+0x44>)
 8006bea:	3b01      	subs	r3, #1
 8006bec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006bee:	4b04      	ldr	r3, [pc, #16]	; (8006c00 <vPortSetupTimerInterrupt+0x34>)
 8006bf0:	2207      	movs	r2, #7
 8006bf2:	601a      	str	r2, [r3, #0]
}
 8006bf4:	bf00      	nop
 8006bf6:	46bd      	mov	sp, r7
 8006bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bfc:	4770      	bx	lr
 8006bfe:	bf00      	nop
 8006c00:	e000e010 	.word	0xe000e010
 8006c04:	e000e018 	.word	0xe000e018
 8006c08:	20000008 	.word	0x20000008
 8006c0c:	10624dd3 	.word	0x10624dd3
 8006c10:	e000e014 	.word	0xe000e014

08006c14 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006c14:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006c24 <vPortEnableVFP+0x10>
 8006c18:	6801      	ldr	r1, [r0, #0]
 8006c1a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8006c1e:	6001      	str	r1, [r0, #0]
 8006c20:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006c22:	bf00      	nop
 8006c24:	e000ed88 	.word	0xe000ed88

08006c28 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006c28:	b480      	push	{r7}
 8006c2a:	b085      	sub	sp, #20
 8006c2c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006c2e:	f3ef 8305 	mrs	r3, IPSR
 8006c32:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	2b0f      	cmp	r3, #15
 8006c38:	d914      	bls.n	8006c64 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006c3a:	4a17      	ldr	r2, [pc, #92]	; (8006c98 <vPortValidateInterruptPriority+0x70>)
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	4413      	add	r3, r2
 8006c40:	781b      	ldrb	r3, [r3, #0]
 8006c42:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006c44:	4b15      	ldr	r3, [pc, #84]	; (8006c9c <vPortValidateInterruptPriority+0x74>)
 8006c46:	781b      	ldrb	r3, [r3, #0]
 8006c48:	7afa      	ldrb	r2, [r7, #11]
 8006c4a:	429a      	cmp	r2, r3
 8006c4c:	d20a      	bcs.n	8006c64 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8006c4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c52:	f383 8811 	msr	BASEPRI, r3
 8006c56:	f3bf 8f6f 	isb	sy
 8006c5a:	f3bf 8f4f 	dsb	sy
 8006c5e:	607b      	str	r3, [r7, #4]
}
 8006c60:	bf00      	nop
 8006c62:	e7fe      	b.n	8006c62 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006c64:	4b0e      	ldr	r3, [pc, #56]	; (8006ca0 <vPortValidateInterruptPriority+0x78>)
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006c6c:	4b0d      	ldr	r3, [pc, #52]	; (8006ca4 <vPortValidateInterruptPriority+0x7c>)
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	429a      	cmp	r2, r3
 8006c72:	d90a      	bls.n	8006c8a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8006c74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c78:	f383 8811 	msr	BASEPRI, r3
 8006c7c:	f3bf 8f6f 	isb	sy
 8006c80:	f3bf 8f4f 	dsb	sy
 8006c84:	603b      	str	r3, [r7, #0]
}
 8006c86:	bf00      	nop
 8006c88:	e7fe      	b.n	8006c88 <vPortValidateInterruptPriority+0x60>
	}
 8006c8a:	bf00      	nop
 8006c8c:	3714      	adds	r7, #20
 8006c8e:	46bd      	mov	sp, r7
 8006c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c94:	4770      	bx	lr
 8006c96:	bf00      	nop
 8006c98:	e000e3f0 	.word	0xe000e3f0
 8006c9c:	2000136c 	.word	0x2000136c
 8006ca0:	e000ed0c 	.word	0xe000ed0c
 8006ca4:	20001370 	.word	0x20001370

08006ca8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006ca8:	b580      	push	{r7, lr}
 8006caa:	b08a      	sub	sp, #40	; 0x28
 8006cac:	af00      	add	r7, sp, #0
 8006cae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006cb0:	2300      	movs	r3, #0
 8006cb2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006cb4:	f7fe fd92 	bl	80057dc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006cb8:	4b5b      	ldr	r3, [pc, #364]	; (8006e28 <pvPortMalloc+0x180>)
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d101      	bne.n	8006cc4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006cc0:	f000 f920 	bl	8006f04 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006cc4:	4b59      	ldr	r3, [pc, #356]	; (8006e2c <pvPortMalloc+0x184>)
 8006cc6:	681a      	ldr	r2, [r3, #0]
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	4013      	ands	r3, r2
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	f040 8093 	bne.w	8006df8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d01d      	beq.n	8006d14 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006cd8:	2208      	movs	r2, #8
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	4413      	add	r3, r2
 8006cde:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	f003 0307 	and.w	r3, r3, #7
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d014      	beq.n	8006d14 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	f023 0307 	bic.w	r3, r3, #7
 8006cf0:	3308      	adds	r3, #8
 8006cf2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	f003 0307 	and.w	r3, r3, #7
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d00a      	beq.n	8006d14 <pvPortMalloc+0x6c>
	__asm volatile
 8006cfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d02:	f383 8811 	msr	BASEPRI, r3
 8006d06:	f3bf 8f6f 	isb	sy
 8006d0a:	f3bf 8f4f 	dsb	sy
 8006d0e:	617b      	str	r3, [r7, #20]
}
 8006d10:	bf00      	nop
 8006d12:	e7fe      	b.n	8006d12 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d06e      	beq.n	8006df8 <pvPortMalloc+0x150>
 8006d1a:	4b45      	ldr	r3, [pc, #276]	; (8006e30 <pvPortMalloc+0x188>)
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	687a      	ldr	r2, [r7, #4]
 8006d20:	429a      	cmp	r2, r3
 8006d22:	d869      	bhi.n	8006df8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006d24:	4b43      	ldr	r3, [pc, #268]	; (8006e34 <pvPortMalloc+0x18c>)
 8006d26:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006d28:	4b42      	ldr	r3, [pc, #264]	; (8006e34 <pvPortMalloc+0x18c>)
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006d2e:	e004      	b.n	8006d3a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d32:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d3c:	685b      	ldr	r3, [r3, #4]
 8006d3e:	687a      	ldr	r2, [r7, #4]
 8006d40:	429a      	cmp	r2, r3
 8006d42:	d903      	bls.n	8006d4c <pvPortMalloc+0xa4>
 8006d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d1f1      	bne.n	8006d30 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006d4c:	4b36      	ldr	r3, [pc, #216]	; (8006e28 <pvPortMalloc+0x180>)
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d52:	429a      	cmp	r2, r3
 8006d54:	d050      	beq.n	8006df8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006d56:	6a3b      	ldr	r3, [r7, #32]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	2208      	movs	r2, #8
 8006d5c:	4413      	add	r3, r2
 8006d5e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d62:	681a      	ldr	r2, [r3, #0]
 8006d64:	6a3b      	ldr	r3, [r7, #32]
 8006d66:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d6a:	685a      	ldr	r2, [r3, #4]
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	1ad2      	subs	r2, r2, r3
 8006d70:	2308      	movs	r3, #8
 8006d72:	005b      	lsls	r3, r3, #1
 8006d74:	429a      	cmp	r2, r3
 8006d76:	d91f      	bls.n	8006db8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006d78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	4413      	add	r3, r2
 8006d7e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006d80:	69bb      	ldr	r3, [r7, #24]
 8006d82:	f003 0307 	and.w	r3, r3, #7
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d00a      	beq.n	8006da0 <pvPortMalloc+0xf8>
	__asm volatile
 8006d8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d8e:	f383 8811 	msr	BASEPRI, r3
 8006d92:	f3bf 8f6f 	isb	sy
 8006d96:	f3bf 8f4f 	dsb	sy
 8006d9a:	613b      	str	r3, [r7, #16]
}
 8006d9c:	bf00      	nop
 8006d9e:	e7fe      	b.n	8006d9e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006da2:	685a      	ldr	r2, [r3, #4]
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	1ad2      	subs	r2, r2, r3
 8006da8:	69bb      	ldr	r3, [r7, #24]
 8006daa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dae:	687a      	ldr	r2, [r7, #4]
 8006db0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006db2:	69b8      	ldr	r0, [r7, #24]
 8006db4:	f000 f908 	bl	8006fc8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006db8:	4b1d      	ldr	r3, [pc, #116]	; (8006e30 <pvPortMalloc+0x188>)
 8006dba:	681a      	ldr	r2, [r3, #0]
 8006dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dbe:	685b      	ldr	r3, [r3, #4]
 8006dc0:	1ad3      	subs	r3, r2, r3
 8006dc2:	4a1b      	ldr	r2, [pc, #108]	; (8006e30 <pvPortMalloc+0x188>)
 8006dc4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006dc6:	4b1a      	ldr	r3, [pc, #104]	; (8006e30 <pvPortMalloc+0x188>)
 8006dc8:	681a      	ldr	r2, [r3, #0]
 8006dca:	4b1b      	ldr	r3, [pc, #108]	; (8006e38 <pvPortMalloc+0x190>)
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	429a      	cmp	r2, r3
 8006dd0:	d203      	bcs.n	8006dda <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006dd2:	4b17      	ldr	r3, [pc, #92]	; (8006e30 <pvPortMalloc+0x188>)
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	4a18      	ldr	r2, [pc, #96]	; (8006e38 <pvPortMalloc+0x190>)
 8006dd8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ddc:	685a      	ldr	r2, [r3, #4]
 8006dde:	4b13      	ldr	r3, [pc, #76]	; (8006e2c <pvPortMalloc+0x184>)
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	431a      	orrs	r2, r3
 8006de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006de6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dea:	2200      	movs	r2, #0
 8006dec:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006dee:	4b13      	ldr	r3, [pc, #76]	; (8006e3c <pvPortMalloc+0x194>)
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	3301      	adds	r3, #1
 8006df4:	4a11      	ldr	r2, [pc, #68]	; (8006e3c <pvPortMalloc+0x194>)
 8006df6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006df8:	f7fe fcfe 	bl	80057f8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006dfc:	69fb      	ldr	r3, [r7, #28]
 8006dfe:	f003 0307 	and.w	r3, r3, #7
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d00a      	beq.n	8006e1c <pvPortMalloc+0x174>
	__asm volatile
 8006e06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e0a:	f383 8811 	msr	BASEPRI, r3
 8006e0e:	f3bf 8f6f 	isb	sy
 8006e12:	f3bf 8f4f 	dsb	sy
 8006e16:	60fb      	str	r3, [r7, #12]
}
 8006e18:	bf00      	nop
 8006e1a:	e7fe      	b.n	8006e1a <pvPortMalloc+0x172>
	return pvReturn;
 8006e1c:	69fb      	ldr	r3, [r7, #28]
}
 8006e1e:	4618      	mov	r0, r3
 8006e20:	3728      	adds	r7, #40	; 0x28
 8006e22:	46bd      	mov	sp, r7
 8006e24:	bd80      	pop	{r7, pc}
 8006e26:	bf00      	nop
 8006e28:	20004f7c 	.word	0x20004f7c
 8006e2c:	20004f90 	.word	0x20004f90
 8006e30:	20004f80 	.word	0x20004f80
 8006e34:	20004f74 	.word	0x20004f74
 8006e38:	20004f84 	.word	0x20004f84
 8006e3c:	20004f88 	.word	0x20004f88

08006e40 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006e40:	b580      	push	{r7, lr}
 8006e42:	b086      	sub	sp, #24
 8006e44:	af00      	add	r7, sp, #0
 8006e46:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d04d      	beq.n	8006eee <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006e52:	2308      	movs	r3, #8
 8006e54:	425b      	negs	r3, r3
 8006e56:	697a      	ldr	r2, [r7, #20]
 8006e58:	4413      	add	r3, r2
 8006e5a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006e5c:	697b      	ldr	r3, [r7, #20]
 8006e5e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006e60:	693b      	ldr	r3, [r7, #16]
 8006e62:	685a      	ldr	r2, [r3, #4]
 8006e64:	4b24      	ldr	r3, [pc, #144]	; (8006ef8 <vPortFree+0xb8>)
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	4013      	ands	r3, r2
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d10a      	bne.n	8006e84 <vPortFree+0x44>
	__asm volatile
 8006e6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e72:	f383 8811 	msr	BASEPRI, r3
 8006e76:	f3bf 8f6f 	isb	sy
 8006e7a:	f3bf 8f4f 	dsb	sy
 8006e7e:	60fb      	str	r3, [r7, #12]
}
 8006e80:	bf00      	nop
 8006e82:	e7fe      	b.n	8006e82 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006e84:	693b      	ldr	r3, [r7, #16]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d00a      	beq.n	8006ea2 <vPortFree+0x62>
	__asm volatile
 8006e8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e90:	f383 8811 	msr	BASEPRI, r3
 8006e94:	f3bf 8f6f 	isb	sy
 8006e98:	f3bf 8f4f 	dsb	sy
 8006e9c:	60bb      	str	r3, [r7, #8]
}
 8006e9e:	bf00      	nop
 8006ea0:	e7fe      	b.n	8006ea0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006ea2:	693b      	ldr	r3, [r7, #16]
 8006ea4:	685a      	ldr	r2, [r3, #4]
 8006ea6:	4b14      	ldr	r3, [pc, #80]	; (8006ef8 <vPortFree+0xb8>)
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	4013      	ands	r3, r2
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d01e      	beq.n	8006eee <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006eb0:	693b      	ldr	r3, [r7, #16]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d11a      	bne.n	8006eee <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006eb8:	693b      	ldr	r3, [r7, #16]
 8006eba:	685a      	ldr	r2, [r3, #4]
 8006ebc:	4b0e      	ldr	r3, [pc, #56]	; (8006ef8 <vPortFree+0xb8>)
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	43db      	mvns	r3, r3
 8006ec2:	401a      	ands	r2, r3
 8006ec4:	693b      	ldr	r3, [r7, #16]
 8006ec6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006ec8:	f7fe fc88 	bl	80057dc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006ecc:	693b      	ldr	r3, [r7, #16]
 8006ece:	685a      	ldr	r2, [r3, #4]
 8006ed0:	4b0a      	ldr	r3, [pc, #40]	; (8006efc <vPortFree+0xbc>)
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	4413      	add	r3, r2
 8006ed6:	4a09      	ldr	r2, [pc, #36]	; (8006efc <vPortFree+0xbc>)
 8006ed8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006eda:	6938      	ldr	r0, [r7, #16]
 8006edc:	f000 f874 	bl	8006fc8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006ee0:	4b07      	ldr	r3, [pc, #28]	; (8006f00 <vPortFree+0xc0>)
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	3301      	adds	r3, #1
 8006ee6:	4a06      	ldr	r2, [pc, #24]	; (8006f00 <vPortFree+0xc0>)
 8006ee8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8006eea:	f7fe fc85 	bl	80057f8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006eee:	bf00      	nop
 8006ef0:	3718      	adds	r7, #24
 8006ef2:	46bd      	mov	sp, r7
 8006ef4:	bd80      	pop	{r7, pc}
 8006ef6:	bf00      	nop
 8006ef8:	20004f90 	.word	0x20004f90
 8006efc:	20004f80 	.word	0x20004f80
 8006f00:	20004f8c 	.word	0x20004f8c

08006f04 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006f04:	b480      	push	{r7}
 8006f06:	b085      	sub	sp, #20
 8006f08:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006f0a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8006f0e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006f10:	4b27      	ldr	r3, [pc, #156]	; (8006fb0 <prvHeapInit+0xac>)
 8006f12:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	f003 0307 	and.w	r3, r3, #7
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d00c      	beq.n	8006f38 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	3307      	adds	r3, #7
 8006f22:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	f023 0307 	bic.w	r3, r3, #7
 8006f2a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006f2c:	68ba      	ldr	r2, [r7, #8]
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	1ad3      	subs	r3, r2, r3
 8006f32:	4a1f      	ldr	r2, [pc, #124]	; (8006fb0 <prvHeapInit+0xac>)
 8006f34:	4413      	add	r3, r2
 8006f36:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006f3c:	4a1d      	ldr	r2, [pc, #116]	; (8006fb4 <prvHeapInit+0xb0>)
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006f42:	4b1c      	ldr	r3, [pc, #112]	; (8006fb4 <prvHeapInit+0xb0>)
 8006f44:	2200      	movs	r2, #0
 8006f46:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	68ba      	ldr	r2, [r7, #8]
 8006f4c:	4413      	add	r3, r2
 8006f4e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006f50:	2208      	movs	r2, #8
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	1a9b      	subs	r3, r3, r2
 8006f56:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	f023 0307 	bic.w	r3, r3, #7
 8006f5e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	4a15      	ldr	r2, [pc, #84]	; (8006fb8 <prvHeapInit+0xb4>)
 8006f64:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006f66:	4b14      	ldr	r3, [pc, #80]	; (8006fb8 <prvHeapInit+0xb4>)
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	2200      	movs	r2, #0
 8006f6c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006f6e:	4b12      	ldr	r3, [pc, #72]	; (8006fb8 <prvHeapInit+0xb4>)
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	2200      	movs	r2, #0
 8006f74:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006f7a:	683b      	ldr	r3, [r7, #0]
 8006f7c:	68fa      	ldr	r2, [r7, #12]
 8006f7e:	1ad2      	subs	r2, r2, r3
 8006f80:	683b      	ldr	r3, [r7, #0]
 8006f82:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006f84:	4b0c      	ldr	r3, [pc, #48]	; (8006fb8 <prvHeapInit+0xb4>)
 8006f86:	681a      	ldr	r2, [r3, #0]
 8006f88:	683b      	ldr	r3, [r7, #0]
 8006f8a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006f8c:	683b      	ldr	r3, [r7, #0]
 8006f8e:	685b      	ldr	r3, [r3, #4]
 8006f90:	4a0a      	ldr	r2, [pc, #40]	; (8006fbc <prvHeapInit+0xb8>)
 8006f92:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006f94:	683b      	ldr	r3, [r7, #0]
 8006f96:	685b      	ldr	r3, [r3, #4]
 8006f98:	4a09      	ldr	r2, [pc, #36]	; (8006fc0 <prvHeapInit+0xbc>)
 8006f9a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006f9c:	4b09      	ldr	r3, [pc, #36]	; (8006fc4 <prvHeapInit+0xc0>)
 8006f9e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006fa2:	601a      	str	r2, [r3, #0]
}
 8006fa4:	bf00      	nop
 8006fa6:	3714      	adds	r7, #20
 8006fa8:	46bd      	mov	sp, r7
 8006faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fae:	4770      	bx	lr
 8006fb0:	20001374 	.word	0x20001374
 8006fb4:	20004f74 	.word	0x20004f74
 8006fb8:	20004f7c 	.word	0x20004f7c
 8006fbc:	20004f84 	.word	0x20004f84
 8006fc0:	20004f80 	.word	0x20004f80
 8006fc4:	20004f90 	.word	0x20004f90

08006fc8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006fc8:	b480      	push	{r7}
 8006fca:	b085      	sub	sp, #20
 8006fcc:	af00      	add	r7, sp, #0
 8006fce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006fd0:	4b28      	ldr	r3, [pc, #160]	; (8007074 <prvInsertBlockIntoFreeList+0xac>)
 8006fd2:	60fb      	str	r3, [r7, #12]
 8006fd4:	e002      	b.n	8006fdc <prvInsertBlockIntoFreeList+0x14>
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	60fb      	str	r3, [r7, #12]
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	687a      	ldr	r2, [r7, #4]
 8006fe2:	429a      	cmp	r2, r3
 8006fe4:	d8f7      	bhi.n	8006fd6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	685b      	ldr	r3, [r3, #4]
 8006fee:	68ba      	ldr	r2, [r7, #8]
 8006ff0:	4413      	add	r3, r2
 8006ff2:	687a      	ldr	r2, [r7, #4]
 8006ff4:	429a      	cmp	r2, r3
 8006ff6:	d108      	bne.n	800700a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	685a      	ldr	r2, [r3, #4]
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	685b      	ldr	r3, [r3, #4]
 8007000:	441a      	add	r2, r3
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	685b      	ldr	r3, [r3, #4]
 8007012:	68ba      	ldr	r2, [r7, #8]
 8007014:	441a      	add	r2, r3
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	429a      	cmp	r2, r3
 800701c:	d118      	bne.n	8007050 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	681a      	ldr	r2, [r3, #0]
 8007022:	4b15      	ldr	r3, [pc, #84]	; (8007078 <prvInsertBlockIntoFreeList+0xb0>)
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	429a      	cmp	r2, r3
 8007028:	d00d      	beq.n	8007046 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	685a      	ldr	r2, [r3, #4]
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	685b      	ldr	r3, [r3, #4]
 8007034:	441a      	add	r2, r3
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	681a      	ldr	r2, [r3, #0]
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	601a      	str	r2, [r3, #0]
 8007044:	e008      	b.n	8007058 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007046:	4b0c      	ldr	r3, [pc, #48]	; (8007078 <prvInsertBlockIntoFreeList+0xb0>)
 8007048:	681a      	ldr	r2, [r3, #0]
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	601a      	str	r2, [r3, #0]
 800704e:	e003      	b.n	8007058 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	681a      	ldr	r2, [r3, #0]
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007058:	68fa      	ldr	r2, [r7, #12]
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	429a      	cmp	r2, r3
 800705e:	d002      	beq.n	8007066 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	687a      	ldr	r2, [r7, #4]
 8007064:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007066:	bf00      	nop
 8007068:	3714      	adds	r7, #20
 800706a:	46bd      	mov	sp, r7
 800706c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007070:	4770      	bx	lr
 8007072:	bf00      	nop
 8007074:	20004f74 	.word	0x20004f74
 8007078:	20004f7c 	.word	0x20004f7c

0800707c <malloc>:
 800707c:	4b02      	ldr	r3, [pc, #8]	; (8007088 <malloc+0xc>)
 800707e:	4601      	mov	r1, r0
 8007080:	6818      	ldr	r0, [r3, #0]
 8007082:	f000 b823 	b.w	80070cc <_malloc_r>
 8007086:	bf00      	nop
 8007088:	20000064 	.word	0x20000064

0800708c <sbrk_aligned>:
 800708c:	b570      	push	{r4, r5, r6, lr}
 800708e:	4e0e      	ldr	r6, [pc, #56]	; (80070c8 <sbrk_aligned+0x3c>)
 8007090:	460c      	mov	r4, r1
 8007092:	6831      	ldr	r1, [r6, #0]
 8007094:	4605      	mov	r5, r0
 8007096:	b911      	cbnz	r1, 800709e <sbrk_aligned+0x12>
 8007098:	f000 f912 	bl	80072c0 <_sbrk_r>
 800709c:	6030      	str	r0, [r6, #0]
 800709e:	4621      	mov	r1, r4
 80070a0:	4628      	mov	r0, r5
 80070a2:	f000 f90d 	bl	80072c0 <_sbrk_r>
 80070a6:	1c43      	adds	r3, r0, #1
 80070a8:	d00a      	beq.n	80070c0 <sbrk_aligned+0x34>
 80070aa:	1cc4      	adds	r4, r0, #3
 80070ac:	f024 0403 	bic.w	r4, r4, #3
 80070b0:	42a0      	cmp	r0, r4
 80070b2:	d007      	beq.n	80070c4 <sbrk_aligned+0x38>
 80070b4:	1a21      	subs	r1, r4, r0
 80070b6:	4628      	mov	r0, r5
 80070b8:	f000 f902 	bl	80072c0 <_sbrk_r>
 80070bc:	3001      	adds	r0, #1
 80070be:	d101      	bne.n	80070c4 <sbrk_aligned+0x38>
 80070c0:	f04f 34ff 	mov.w	r4, #4294967295
 80070c4:	4620      	mov	r0, r4
 80070c6:	bd70      	pop	{r4, r5, r6, pc}
 80070c8:	20004f98 	.word	0x20004f98

080070cc <_malloc_r>:
 80070cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80070d0:	1ccd      	adds	r5, r1, #3
 80070d2:	f025 0503 	bic.w	r5, r5, #3
 80070d6:	3508      	adds	r5, #8
 80070d8:	2d0c      	cmp	r5, #12
 80070da:	bf38      	it	cc
 80070dc:	250c      	movcc	r5, #12
 80070de:	2d00      	cmp	r5, #0
 80070e0:	4607      	mov	r7, r0
 80070e2:	db01      	blt.n	80070e8 <_malloc_r+0x1c>
 80070e4:	42a9      	cmp	r1, r5
 80070e6:	d905      	bls.n	80070f4 <_malloc_r+0x28>
 80070e8:	230c      	movs	r3, #12
 80070ea:	603b      	str	r3, [r7, #0]
 80070ec:	2600      	movs	r6, #0
 80070ee:	4630      	mov	r0, r6
 80070f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80070f4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80071c8 <_malloc_r+0xfc>
 80070f8:	f000 f868 	bl	80071cc <__malloc_lock>
 80070fc:	f8d8 3000 	ldr.w	r3, [r8]
 8007100:	461c      	mov	r4, r3
 8007102:	bb5c      	cbnz	r4, 800715c <_malloc_r+0x90>
 8007104:	4629      	mov	r1, r5
 8007106:	4638      	mov	r0, r7
 8007108:	f7ff ffc0 	bl	800708c <sbrk_aligned>
 800710c:	1c43      	adds	r3, r0, #1
 800710e:	4604      	mov	r4, r0
 8007110:	d155      	bne.n	80071be <_malloc_r+0xf2>
 8007112:	f8d8 4000 	ldr.w	r4, [r8]
 8007116:	4626      	mov	r6, r4
 8007118:	2e00      	cmp	r6, #0
 800711a:	d145      	bne.n	80071a8 <_malloc_r+0xdc>
 800711c:	2c00      	cmp	r4, #0
 800711e:	d048      	beq.n	80071b2 <_malloc_r+0xe6>
 8007120:	6823      	ldr	r3, [r4, #0]
 8007122:	4631      	mov	r1, r6
 8007124:	4638      	mov	r0, r7
 8007126:	eb04 0903 	add.w	r9, r4, r3
 800712a:	f000 f8c9 	bl	80072c0 <_sbrk_r>
 800712e:	4581      	cmp	r9, r0
 8007130:	d13f      	bne.n	80071b2 <_malloc_r+0xe6>
 8007132:	6821      	ldr	r1, [r4, #0]
 8007134:	1a6d      	subs	r5, r5, r1
 8007136:	4629      	mov	r1, r5
 8007138:	4638      	mov	r0, r7
 800713a:	f7ff ffa7 	bl	800708c <sbrk_aligned>
 800713e:	3001      	adds	r0, #1
 8007140:	d037      	beq.n	80071b2 <_malloc_r+0xe6>
 8007142:	6823      	ldr	r3, [r4, #0]
 8007144:	442b      	add	r3, r5
 8007146:	6023      	str	r3, [r4, #0]
 8007148:	f8d8 3000 	ldr.w	r3, [r8]
 800714c:	2b00      	cmp	r3, #0
 800714e:	d038      	beq.n	80071c2 <_malloc_r+0xf6>
 8007150:	685a      	ldr	r2, [r3, #4]
 8007152:	42a2      	cmp	r2, r4
 8007154:	d12b      	bne.n	80071ae <_malloc_r+0xe2>
 8007156:	2200      	movs	r2, #0
 8007158:	605a      	str	r2, [r3, #4]
 800715a:	e00f      	b.n	800717c <_malloc_r+0xb0>
 800715c:	6822      	ldr	r2, [r4, #0]
 800715e:	1b52      	subs	r2, r2, r5
 8007160:	d41f      	bmi.n	80071a2 <_malloc_r+0xd6>
 8007162:	2a0b      	cmp	r2, #11
 8007164:	d917      	bls.n	8007196 <_malloc_r+0xca>
 8007166:	1961      	adds	r1, r4, r5
 8007168:	42a3      	cmp	r3, r4
 800716a:	6025      	str	r5, [r4, #0]
 800716c:	bf18      	it	ne
 800716e:	6059      	strne	r1, [r3, #4]
 8007170:	6863      	ldr	r3, [r4, #4]
 8007172:	bf08      	it	eq
 8007174:	f8c8 1000 	streq.w	r1, [r8]
 8007178:	5162      	str	r2, [r4, r5]
 800717a:	604b      	str	r3, [r1, #4]
 800717c:	4638      	mov	r0, r7
 800717e:	f104 060b 	add.w	r6, r4, #11
 8007182:	f000 f829 	bl	80071d8 <__malloc_unlock>
 8007186:	f026 0607 	bic.w	r6, r6, #7
 800718a:	1d23      	adds	r3, r4, #4
 800718c:	1af2      	subs	r2, r6, r3
 800718e:	d0ae      	beq.n	80070ee <_malloc_r+0x22>
 8007190:	1b9b      	subs	r3, r3, r6
 8007192:	50a3      	str	r3, [r4, r2]
 8007194:	e7ab      	b.n	80070ee <_malloc_r+0x22>
 8007196:	42a3      	cmp	r3, r4
 8007198:	6862      	ldr	r2, [r4, #4]
 800719a:	d1dd      	bne.n	8007158 <_malloc_r+0x8c>
 800719c:	f8c8 2000 	str.w	r2, [r8]
 80071a0:	e7ec      	b.n	800717c <_malloc_r+0xb0>
 80071a2:	4623      	mov	r3, r4
 80071a4:	6864      	ldr	r4, [r4, #4]
 80071a6:	e7ac      	b.n	8007102 <_malloc_r+0x36>
 80071a8:	4634      	mov	r4, r6
 80071aa:	6876      	ldr	r6, [r6, #4]
 80071ac:	e7b4      	b.n	8007118 <_malloc_r+0x4c>
 80071ae:	4613      	mov	r3, r2
 80071b0:	e7cc      	b.n	800714c <_malloc_r+0x80>
 80071b2:	230c      	movs	r3, #12
 80071b4:	603b      	str	r3, [r7, #0]
 80071b6:	4638      	mov	r0, r7
 80071b8:	f000 f80e 	bl	80071d8 <__malloc_unlock>
 80071bc:	e797      	b.n	80070ee <_malloc_r+0x22>
 80071be:	6025      	str	r5, [r4, #0]
 80071c0:	e7dc      	b.n	800717c <_malloc_r+0xb0>
 80071c2:	605b      	str	r3, [r3, #4]
 80071c4:	deff      	udf	#255	; 0xff
 80071c6:	bf00      	nop
 80071c8:	20004f94 	.word	0x20004f94

080071cc <__malloc_lock>:
 80071cc:	4801      	ldr	r0, [pc, #4]	; (80071d4 <__malloc_lock+0x8>)
 80071ce:	f000 b8b1 	b.w	8007334 <__retarget_lock_acquire_recursive>
 80071d2:	bf00      	nop
 80071d4:	200050d8 	.word	0x200050d8

080071d8 <__malloc_unlock>:
 80071d8:	4801      	ldr	r0, [pc, #4]	; (80071e0 <__malloc_unlock+0x8>)
 80071da:	f000 b8ac 	b.w	8007336 <__retarget_lock_release_recursive>
 80071de:	bf00      	nop
 80071e0:	200050d8 	.word	0x200050d8

080071e4 <memset>:
 80071e4:	4402      	add	r2, r0
 80071e6:	4603      	mov	r3, r0
 80071e8:	4293      	cmp	r3, r2
 80071ea:	d100      	bne.n	80071ee <memset+0xa>
 80071ec:	4770      	bx	lr
 80071ee:	f803 1b01 	strb.w	r1, [r3], #1
 80071f2:	e7f9      	b.n	80071e8 <memset+0x4>

080071f4 <strcat>:
 80071f4:	b510      	push	{r4, lr}
 80071f6:	4602      	mov	r2, r0
 80071f8:	7814      	ldrb	r4, [r2, #0]
 80071fa:	4613      	mov	r3, r2
 80071fc:	3201      	adds	r2, #1
 80071fe:	2c00      	cmp	r4, #0
 8007200:	d1fa      	bne.n	80071f8 <strcat+0x4>
 8007202:	3b01      	subs	r3, #1
 8007204:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007208:	f803 2f01 	strb.w	r2, [r3, #1]!
 800720c:	2a00      	cmp	r2, #0
 800720e:	d1f9      	bne.n	8007204 <strcat+0x10>
 8007210:	bd10      	pop	{r4, pc}
	...

08007214 <_reclaim_reent>:
 8007214:	4b29      	ldr	r3, [pc, #164]	; (80072bc <_reclaim_reent+0xa8>)
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	4283      	cmp	r3, r0
 800721a:	b570      	push	{r4, r5, r6, lr}
 800721c:	4604      	mov	r4, r0
 800721e:	d04b      	beq.n	80072b8 <_reclaim_reent+0xa4>
 8007220:	69c3      	ldr	r3, [r0, #28]
 8007222:	b143      	cbz	r3, 8007236 <_reclaim_reent+0x22>
 8007224:	68db      	ldr	r3, [r3, #12]
 8007226:	2b00      	cmp	r3, #0
 8007228:	d144      	bne.n	80072b4 <_reclaim_reent+0xa0>
 800722a:	69e3      	ldr	r3, [r4, #28]
 800722c:	6819      	ldr	r1, [r3, #0]
 800722e:	b111      	cbz	r1, 8007236 <_reclaim_reent+0x22>
 8007230:	4620      	mov	r0, r4
 8007232:	f000 f88f 	bl	8007354 <_free_r>
 8007236:	6961      	ldr	r1, [r4, #20]
 8007238:	b111      	cbz	r1, 8007240 <_reclaim_reent+0x2c>
 800723a:	4620      	mov	r0, r4
 800723c:	f000 f88a 	bl	8007354 <_free_r>
 8007240:	69e1      	ldr	r1, [r4, #28]
 8007242:	b111      	cbz	r1, 800724a <_reclaim_reent+0x36>
 8007244:	4620      	mov	r0, r4
 8007246:	f000 f885 	bl	8007354 <_free_r>
 800724a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800724c:	b111      	cbz	r1, 8007254 <_reclaim_reent+0x40>
 800724e:	4620      	mov	r0, r4
 8007250:	f000 f880 	bl	8007354 <_free_r>
 8007254:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007256:	b111      	cbz	r1, 800725e <_reclaim_reent+0x4a>
 8007258:	4620      	mov	r0, r4
 800725a:	f000 f87b 	bl	8007354 <_free_r>
 800725e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8007260:	b111      	cbz	r1, 8007268 <_reclaim_reent+0x54>
 8007262:	4620      	mov	r0, r4
 8007264:	f000 f876 	bl	8007354 <_free_r>
 8007268:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800726a:	b111      	cbz	r1, 8007272 <_reclaim_reent+0x5e>
 800726c:	4620      	mov	r0, r4
 800726e:	f000 f871 	bl	8007354 <_free_r>
 8007272:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8007274:	b111      	cbz	r1, 800727c <_reclaim_reent+0x68>
 8007276:	4620      	mov	r0, r4
 8007278:	f000 f86c 	bl	8007354 <_free_r>
 800727c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800727e:	b111      	cbz	r1, 8007286 <_reclaim_reent+0x72>
 8007280:	4620      	mov	r0, r4
 8007282:	f000 f867 	bl	8007354 <_free_r>
 8007286:	6a23      	ldr	r3, [r4, #32]
 8007288:	b1b3      	cbz	r3, 80072b8 <_reclaim_reent+0xa4>
 800728a:	4620      	mov	r0, r4
 800728c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007290:	4718      	bx	r3
 8007292:	5949      	ldr	r1, [r1, r5]
 8007294:	b941      	cbnz	r1, 80072a8 <_reclaim_reent+0x94>
 8007296:	3504      	adds	r5, #4
 8007298:	69e3      	ldr	r3, [r4, #28]
 800729a:	2d80      	cmp	r5, #128	; 0x80
 800729c:	68d9      	ldr	r1, [r3, #12]
 800729e:	d1f8      	bne.n	8007292 <_reclaim_reent+0x7e>
 80072a0:	4620      	mov	r0, r4
 80072a2:	f000 f857 	bl	8007354 <_free_r>
 80072a6:	e7c0      	b.n	800722a <_reclaim_reent+0x16>
 80072a8:	680e      	ldr	r6, [r1, #0]
 80072aa:	4620      	mov	r0, r4
 80072ac:	f000 f852 	bl	8007354 <_free_r>
 80072b0:	4631      	mov	r1, r6
 80072b2:	e7ef      	b.n	8007294 <_reclaim_reent+0x80>
 80072b4:	2500      	movs	r5, #0
 80072b6:	e7ef      	b.n	8007298 <_reclaim_reent+0x84>
 80072b8:	bd70      	pop	{r4, r5, r6, pc}
 80072ba:	bf00      	nop
 80072bc:	20000064 	.word	0x20000064

080072c0 <_sbrk_r>:
 80072c0:	b538      	push	{r3, r4, r5, lr}
 80072c2:	4d06      	ldr	r5, [pc, #24]	; (80072dc <_sbrk_r+0x1c>)
 80072c4:	2300      	movs	r3, #0
 80072c6:	4604      	mov	r4, r0
 80072c8:	4608      	mov	r0, r1
 80072ca:	602b      	str	r3, [r5, #0]
 80072cc:	f7fa faec 	bl	80018a8 <_sbrk>
 80072d0:	1c43      	adds	r3, r0, #1
 80072d2:	d102      	bne.n	80072da <_sbrk_r+0x1a>
 80072d4:	682b      	ldr	r3, [r5, #0]
 80072d6:	b103      	cbz	r3, 80072da <_sbrk_r+0x1a>
 80072d8:	6023      	str	r3, [r4, #0]
 80072da:	bd38      	pop	{r3, r4, r5, pc}
 80072dc:	200050d4 	.word	0x200050d4

080072e0 <__errno>:
 80072e0:	4b01      	ldr	r3, [pc, #4]	; (80072e8 <__errno+0x8>)
 80072e2:	6818      	ldr	r0, [r3, #0]
 80072e4:	4770      	bx	lr
 80072e6:	bf00      	nop
 80072e8:	20000064 	.word	0x20000064

080072ec <__libc_init_array>:
 80072ec:	b570      	push	{r4, r5, r6, lr}
 80072ee:	4d0d      	ldr	r5, [pc, #52]	; (8007324 <__libc_init_array+0x38>)
 80072f0:	4c0d      	ldr	r4, [pc, #52]	; (8007328 <__libc_init_array+0x3c>)
 80072f2:	1b64      	subs	r4, r4, r5
 80072f4:	10a4      	asrs	r4, r4, #2
 80072f6:	2600      	movs	r6, #0
 80072f8:	42a6      	cmp	r6, r4
 80072fa:	d109      	bne.n	8007310 <__libc_init_array+0x24>
 80072fc:	4d0b      	ldr	r5, [pc, #44]	; (800732c <__libc_init_array+0x40>)
 80072fe:	4c0c      	ldr	r4, [pc, #48]	; (8007330 <__libc_init_array+0x44>)
 8007300:	f000 f874 	bl	80073ec <_init>
 8007304:	1b64      	subs	r4, r4, r5
 8007306:	10a4      	asrs	r4, r4, #2
 8007308:	2600      	movs	r6, #0
 800730a:	42a6      	cmp	r6, r4
 800730c:	d105      	bne.n	800731a <__libc_init_array+0x2e>
 800730e:	bd70      	pop	{r4, r5, r6, pc}
 8007310:	f855 3b04 	ldr.w	r3, [r5], #4
 8007314:	4798      	blx	r3
 8007316:	3601      	adds	r6, #1
 8007318:	e7ee      	b.n	80072f8 <__libc_init_array+0xc>
 800731a:	f855 3b04 	ldr.w	r3, [r5], #4
 800731e:	4798      	blx	r3
 8007320:	3601      	adds	r6, #1
 8007322:	e7f2      	b.n	800730a <__libc_init_array+0x1e>
 8007324:	08008338 	.word	0x08008338
 8007328:	08008338 	.word	0x08008338
 800732c:	08008338 	.word	0x08008338
 8007330:	0800833c 	.word	0x0800833c

08007334 <__retarget_lock_acquire_recursive>:
 8007334:	4770      	bx	lr

08007336 <__retarget_lock_release_recursive>:
 8007336:	4770      	bx	lr

08007338 <memcpy>:
 8007338:	440a      	add	r2, r1
 800733a:	4291      	cmp	r1, r2
 800733c:	f100 33ff 	add.w	r3, r0, #4294967295
 8007340:	d100      	bne.n	8007344 <memcpy+0xc>
 8007342:	4770      	bx	lr
 8007344:	b510      	push	{r4, lr}
 8007346:	f811 4b01 	ldrb.w	r4, [r1], #1
 800734a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800734e:	4291      	cmp	r1, r2
 8007350:	d1f9      	bne.n	8007346 <memcpy+0xe>
 8007352:	bd10      	pop	{r4, pc}

08007354 <_free_r>:
 8007354:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007356:	2900      	cmp	r1, #0
 8007358:	d044      	beq.n	80073e4 <_free_r+0x90>
 800735a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800735e:	9001      	str	r0, [sp, #4]
 8007360:	2b00      	cmp	r3, #0
 8007362:	f1a1 0404 	sub.w	r4, r1, #4
 8007366:	bfb8      	it	lt
 8007368:	18e4      	addlt	r4, r4, r3
 800736a:	f7ff ff2f 	bl	80071cc <__malloc_lock>
 800736e:	4a1e      	ldr	r2, [pc, #120]	; (80073e8 <_free_r+0x94>)
 8007370:	9801      	ldr	r0, [sp, #4]
 8007372:	6813      	ldr	r3, [r2, #0]
 8007374:	b933      	cbnz	r3, 8007384 <_free_r+0x30>
 8007376:	6063      	str	r3, [r4, #4]
 8007378:	6014      	str	r4, [r2, #0]
 800737a:	b003      	add	sp, #12
 800737c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007380:	f7ff bf2a 	b.w	80071d8 <__malloc_unlock>
 8007384:	42a3      	cmp	r3, r4
 8007386:	d908      	bls.n	800739a <_free_r+0x46>
 8007388:	6825      	ldr	r5, [r4, #0]
 800738a:	1961      	adds	r1, r4, r5
 800738c:	428b      	cmp	r3, r1
 800738e:	bf01      	itttt	eq
 8007390:	6819      	ldreq	r1, [r3, #0]
 8007392:	685b      	ldreq	r3, [r3, #4]
 8007394:	1949      	addeq	r1, r1, r5
 8007396:	6021      	streq	r1, [r4, #0]
 8007398:	e7ed      	b.n	8007376 <_free_r+0x22>
 800739a:	461a      	mov	r2, r3
 800739c:	685b      	ldr	r3, [r3, #4]
 800739e:	b10b      	cbz	r3, 80073a4 <_free_r+0x50>
 80073a0:	42a3      	cmp	r3, r4
 80073a2:	d9fa      	bls.n	800739a <_free_r+0x46>
 80073a4:	6811      	ldr	r1, [r2, #0]
 80073a6:	1855      	adds	r5, r2, r1
 80073a8:	42a5      	cmp	r5, r4
 80073aa:	d10b      	bne.n	80073c4 <_free_r+0x70>
 80073ac:	6824      	ldr	r4, [r4, #0]
 80073ae:	4421      	add	r1, r4
 80073b0:	1854      	adds	r4, r2, r1
 80073b2:	42a3      	cmp	r3, r4
 80073b4:	6011      	str	r1, [r2, #0]
 80073b6:	d1e0      	bne.n	800737a <_free_r+0x26>
 80073b8:	681c      	ldr	r4, [r3, #0]
 80073ba:	685b      	ldr	r3, [r3, #4]
 80073bc:	6053      	str	r3, [r2, #4]
 80073be:	440c      	add	r4, r1
 80073c0:	6014      	str	r4, [r2, #0]
 80073c2:	e7da      	b.n	800737a <_free_r+0x26>
 80073c4:	d902      	bls.n	80073cc <_free_r+0x78>
 80073c6:	230c      	movs	r3, #12
 80073c8:	6003      	str	r3, [r0, #0]
 80073ca:	e7d6      	b.n	800737a <_free_r+0x26>
 80073cc:	6825      	ldr	r5, [r4, #0]
 80073ce:	1961      	adds	r1, r4, r5
 80073d0:	428b      	cmp	r3, r1
 80073d2:	bf04      	itt	eq
 80073d4:	6819      	ldreq	r1, [r3, #0]
 80073d6:	685b      	ldreq	r3, [r3, #4]
 80073d8:	6063      	str	r3, [r4, #4]
 80073da:	bf04      	itt	eq
 80073dc:	1949      	addeq	r1, r1, r5
 80073de:	6021      	streq	r1, [r4, #0]
 80073e0:	6054      	str	r4, [r2, #4]
 80073e2:	e7ca      	b.n	800737a <_free_r+0x26>
 80073e4:	b003      	add	sp, #12
 80073e6:	bd30      	pop	{r4, r5, pc}
 80073e8:	20004f94 	.word	0x20004f94

080073ec <_init>:
 80073ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073ee:	bf00      	nop
 80073f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80073f2:	bc08      	pop	{r3}
 80073f4:	469e      	mov	lr, r3
 80073f6:	4770      	bx	lr

080073f8 <_fini>:
 80073f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073fa:	bf00      	nop
 80073fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80073fe:	bc08      	pop	{r3}
 8007400:	469e      	mov	lr, r3
 8007402:	4770      	bx	lr
