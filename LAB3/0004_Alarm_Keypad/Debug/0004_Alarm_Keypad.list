
0004_Alarm_Keypad.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006a2c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000e68  08006bfc  08006bfc  00016bfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007a64  08007a64  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08007a64  08007a64  00017a64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007a6c  08007a6c  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007a6c  08007a6c  00017a6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007a70  08007a70  00017a70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08007a74  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004614  20000074  08007ae8  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004688  08007ae8  00024688  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY
 13 .debug_info   00017ffe  00000000  00000000  000200e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000393e  00000000  00000000  000380e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001690  00000000  00000000  0003ba28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000011a3  00000000  00000000  0003d0b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000258dc  00000000  00000000  0003e25b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001b50d  00000000  00000000  00063b37  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000de626  00000000  00000000  0007f044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006530  00000000  00000000  0015d66c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005a  00000000  00000000  00163b9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000074 	.word	0x20000074
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08006be4 	.word	0x08006be4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000078 	.word	0x20000078
 800020c:	08006be4 	.word	0x08006be4

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000220:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000224:	f000 b970 	b.w	8000508 <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9e08      	ldr	r6, [sp, #32]
 8000246:	460d      	mov	r5, r1
 8000248:	4604      	mov	r4, r0
 800024a:	460f      	mov	r7, r1
 800024c:	2b00      	cmp	r3, #0
 800024e:	d14a      	bne.n	80002e6 <__udivmoddi4+0xa6>
 8000250:	428a      	cmp	r2, r1
 8000252:	4694      	mov	ip, r2
 8000254:	d965      	bls.n	8000322 <__udivmoddi4+0xe2>
 8000256:	fab2 f382 	clz	r3, r2
 800025a:	b143      	cbz	r3, 800026e <__udivmoddi4+0x2e>
 800025c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000260:	f1c3 0220 	rsb	r2, r3, #32
 8000264:	409f      	lsls	r7, r3
 8000266:	fa20 f202 	lsr.w	r2, r0, r2
 800026a:	4317      	orrs	r7, r2
 800026c:	409c      	lsls	r4, r3
 800026e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000272:	fa1f f58c 	uxth.w	r5, ip
 8000276:	fbb7 f1fe 	udiv	r1, r7, lr
 800027a:	0c22      	lsrs	r2, r4, #16
 800027c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000280:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000284:	fb01 f005 	mul.w	r0, r1, r5
 8000288:	4290      	cmp	r0, r2
 800028a:	d90a      	bls.n	80002a2 <__udivmoddi4+0x62>
 800028c:	eb1c 0202 	adds.w	r2, ip, r2
 8000290:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000294:	f080 811c 	bcs.w	80004d0 <__udivmoddi4+0x290>
 8000298:	4290      	cmp	r0, r2
 800029a:	f240 8119 	bls.w	80004d0 <__udivmoddi4+0x290>
 800029e:	3902      	subs	r1, #2
 80002a0:	4462      	add	r2, ip
 80002a2:	1a12      	subs	r2, r2, r0
 80002a4:	b2a4      	uxth	r4, r4
 80002a6:	fbb2 f0fe 	udiv	r0, r2, lr
 80002aa:	fb0e 2210 	mls	r2, lr, r0, r2
 80002ae:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002b2:	fb00 f505 	mul.w	r5, r0, r5
 80002b6:	42a5      	cmp	r5, r4
 80002b8:	d90a      	bls.n	80002d0 <__udivmoddi4+0x90>
 80002ba:	eb1c 0404 	adds.w	r4, ip, r4
 80002be:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80002c2:	f080 8107 	bcs.w	80004d4 <__udivmoddi4+0x294>
 80002c6:	42a5      	cmp	r5, r4
 80002c8:	f240 8104 	bls.w	80004d4 <__udivmoddi4+0x294>
 80002cc:	4464      	add	r4, ip
 80002ce:	3802      	subs	r0, #2
 80002d0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002d4:	1b64      	subs	r4, r4, r5
 80002d6:	2100      	movs	r1, #0
 80002d8:	b11e      	cbz	r6, 80002e2 <__udivmoddi4+0xa2>
 80002da:	40dc      	lsrs	r4, r3
 80002dc:	2300      	movs	r3, #0
 80002de:	e9c6 4300 	strd	r4, r3, [r6]
 80002e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d908      	bls.n	80002fc <__udivmoddi4+0xbc>
 80002ea:	2e00      	cmp	r6, #0
 80002ec:	f000 80ed 	beq.w	80004ca <__udivmoddi4+0x28a>
 80002f0:	2100      	movs	r1, #0
 80002f2:	e9c6 0500 	strd	r0, r5, [r6]
 80002f6:	4608      	mov	r0, r1
 80002f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fc:	fab3 f183 	clz	r1, r3
 8000300:	2900      	cmp	r1, #0
 8000302:	d149      	bne.n	8000398 <__udivmoddi4+0x158>
 8000304:	42ab      	cmp	r3, r5
 8000306:	d302      	bcc.n	800030e <__udivmoddi4+0xce>
 8000308:	4282      	cmp	r2, r0
 800030a:	f200 80f8 	bhi.w	80004fe <__udivmoddi4+0x2be>
 800030e:	1a84      	subs	r4, r0, r2
 8000310:	eb65 0203 	sbc.w	r2, r5, r3
 8000314:	2001      	movs	r0, #1
 8000316:	4617      	mov	r7, r2
 8000318:	2e00      	cmp	r6, #0
 800031a:	d0e2      	beq.n	80002e2 <__udivmoddi4+0xa2>
 800031c:	e9c6 4700 	strd	r4, r7, [r6]
 8000320:	e7df      	b.n	80002e2 <__udivmoddi4+0xa2>
 8000322:	b902      	cbnz	r2, 8000326 <__udivmoddi4+0xe6>
 8000324:	deff      	udf	#255	; 0xff
 8000326:	fab2 f382 	clz	r3, r2
 800032a:	2b00      	cmp	r3, #0
 800032c:	f040 8090 	bne.w	8000450 <__udivmoddi4+0x210>
 8000330:	1a8a      	subs	r2, r1, r2
 8000332:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000336:	fa1f fe8c 	uxth.w	lr, ip
 800033a:	2101      	movs	r1, #1
 800033c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000340:	fb07 2015 	mls	r0, r7, r5, r2
 8000344:	0c22      	lsrs	r2, r4, #16
 8000346:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800034a:	fb0e f005 	mul.w	r0, lr, r5
 800034e:	4290      	cmp	r0, r2
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x124>
 8000352:	eb1c 0202 	adds.w	r2, ip, r2
 8000356:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x122>
 800035c:	4290      	cmp	r0, r2
 800035e:	f200 80cb 	bhi.w	80004f8 <__udivmoddi4+0x2b8>
 8000362:	4645      	mov	r5, r8
 8000364:	1a12      	subs	r2, r2, r0
 8000366:	b2a4      	uxth	r4, r4
 8000368:	fbb2 f0f7 	udiv	r0, r2, r7
 800036c:	fb07 2210 	mls	r2, r7, r0, r2
 8000370:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000374:	fb0e fe00 	mul.w	lr, lr, r0
 8000378:	45a6      	cmp	lr, r4
 800037a:	d908      	bls.n	800038e <__udivmoddi4+0x14e>
 800037c:	eb1c 0404 	adds.w	r4, ip, r4
 8000380:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000384:	d202      	bcs.n	800038c <__udivmoddi4+0x14c>
 8000386:	45a6      	cmp	lr, r4
 8000388:	f200 80bb 	bhi.w	8000502 <__udivmoddi4+0x2c2>
 800038c:	4610      	mov	r0, r2
 800038e:	eba4 040e 	sub.w	r4, r4, lr
 8000392:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000396:	e79f      	b.n	80002d8 <__udivmoddi4+0x98>
 8000398:	f1c1 0720 	rsb	r7, r1, #32
 800039c:	408b      	lsls	r3, r1
 800039e:	fa22 fc07 	lsr.w	ip, r2, r7
 80003a2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003a6:	fa05 f401 	lsl.w	r4, r5, r1
 80003aa:	fa20 f307 	lsr.w	r3, r0, r7
 80003ae:	40fd      	lsrs	r5, r7
 80003b0:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003b4:	4323      	orrs	r3, r4
 80003b6:	fbb5 f8f9 	udiv	r8, r5, r9
 80003ba:	fa1f fe8c 	uxth.w	lr, ip
 80003be:	fb09 5518 	mls	r5, r9, r8, r5
 80003c2:	0c1c      	lsrs	r4, r3, #16
 80003c4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003c8:	fb08 f50e 	mul.w	r5, r8, lr
 80003cc:	42a5      	cmp	r5, r4
 80003ce:	fa02 f201 	lsl.w	r2, r2, r1
 80003d2:	fa00 f001 	lsl.w	r0, r0, r1
 80003d6:	d90b      	bls.n	80003f0 <__udivmoddi4+0x1b0>
 80003d8:	eb1c 0404 	adds.w	r4, ip, r4
 80003dc:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003e0:	f080 8088 	bcs.w	80004f4 <__udivmoddi4+0x2b4>
 80003e4:	42a5      	cmp	r5, r4
 80003e6:	f240 8085 	bls.w	80004f4 <__udivmoddi4+0x2b4>
 80003ea:	f1a8 0802 	sub.w	r8, r8, #2
 80003ee:	4464      	add	r4, ip
 80003f0:	1b64      	subs	r4, r4, r5
 80003f2:	b29d      	uxth	r5, r3
 80003f4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003f8:	fb09 4413 	mls	r4, r9, r3, r4
 80003fc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000400:	fb03 fe0e 	mul.w	lr, r3, lr
 8000404:	45a6      	cmp	lr, r4
 8000406:	d908      	bls.n	800041a <__udivmoddi4+0x1da>
 8000408:	eb1c 0404 	adds.w	r4, ip, r4
 800040c:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000410:	d26c      	bcs.n	80004ec <__udivmoddi4+0x2ac>
 8000412:	45a6      	cmp	lr, r4
 8000414:	d96a      	bls.n	80004ec <__udivmoddi4+0x2ac>
 8000416:	3b02      	subs	r3, #2
 8000418:	4464      	add	r4, ip
 800041a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800041e:	fba3 9502 	umull	r9, r5, r3, r2
 8000422:	eba4 040e 	sub.w	r4, r4, lr
 8000426:	42ac      	cmp	r4, r5
 8000428:	46c8      	mov	r8, r9
 800042a:	46ae      	mov	lr, r5
 800042c:	d356      	bcc.n	80004dc <__udivmoddi4+0x29c>
 800042e:	d053      	beq.n	80004d8 <__udivmoddi4+0x298>
 8000430:	b156      	cbz	r6, 8000448 <__udivmoddi4+0x208>
 8000432:	ebb0 0208 	subs.w	r2, r0, r8
 8000436:	eb64 040e 	sbc.w	r4, r4, lr
 800043a:	fa04 f707 	lsl.w	r7, r4, r7
 800043e:	40ca      	lsrs	r2, r1
 8000440:	40cc      	lsrs	r4, r1
 8000442:	4317      	orrs	r7, r2
 8000444:	e9c6 7400 	strd	r7, r4, [r6]
 8000448:	4618      	mov	r0, r3
 800044a:	2100      	movs	r1, #0
 800044c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000450:	f1c3 0120 	rsb	r1, r3, #32
 8000454:	fa02 fc03 	lsl.w	ip, r2, r3
 8000458:	fa20 f201 	lsr.w	r2, r0, r1
 800045c:	fa25 f101 	lsr.w	r1, r5, r1
 8000460:	409d      	lsls	r5, r3
 8000462:	432a      	orrs	r2, r5
 8000464:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000470:	fb07 1510 	mls	r5, r7, r0, r1
 8000474:	0c11      	lsrs	r1, r2, #16
 8000476:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800047a:	fb00 f50e 	mul.w	r5, r0, lr
 800047e:	428d      	cmp	r5, r1
 8000480:	fa04 f403 	lsl.w	r4, r4, r3
 8000484:	d908      	bls.n	8000498 <__udivmoddi4+0x258>
 8000486:	eb1c 0101 	adds.w	r1, ip, r1
 800048a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800048e:	d22f      	bcs.n	80004f0 <__udivmoddi4+0x2b0>
 8000490:	428d      	cmp	r5, r1
 8000492:	d92d      	bls.n	80004f0 <__udivmoddi4+0x2b0>
 8000494:	3802      	subs	r0, #2
 8000496:	4461      	add	r1, ip
 8000498:	1b49      	subs	r1, r1, r5
 800049a:	b292      	uxth	r2, r2
 800049c:	fbb1 f5f7 	udiv	r5, r1, r7
 80004a0:	fb07 1115 	mls	r1, r7, r5, r1
 80004a4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004a8:	fb05 f10e 	mul.w	r1, r5, lr
 80004ac:	4291      	cmp	r1, r2
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x282>
 80004b0:	eb1c 0202 	adds.w	r2, ip, r2
 80004b4:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80004b8:	d216      	bcs.n	80004e8 <__udivmoddi4+0x2a8>
 80004ba:	4291      	cmp	r1, r2
 80004bc:	d914      	bls.n	80004e8 <__udivmoddi4+0x2a8>
 80004be:	3d02      	subs	r5, #2
 80004c0:	4462      	add	r2, ip
 80004c2:	1a52      	subs	r2, r2, r1
 80004c4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004c8:	e738      	b.n	800033c <__udivmoddi4+0xfc>
 80004ca:	4631      	mov	r1, r6
 80004cc:	4630      	mov	r0, r6
 80004ce:	e708      	b.n	80002e2 <__udivmoddi4+0xa2>
 80004d0:	4639      	mov	r1, r7
 80004d2:	e6e6      	b.n	80002a2 <__udivmoddi4+0x62>
 80004d4:	4610      	mov	r0, r2
 80004d6:	e6fb      	b.n	80002d0 <__udivmoddi4+0x90>
 80004d8:	4548      	cmp	r0, r9
 80004da:	d2a9      	bcs.n	8000430 <__udivmoddi4+0x1f0>
 80004dc:	ebb9 0802 	subs.w	r8, r9, r2
 80004e0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004e4:	3b01      	subs	r3, #1
 80004e6:	e7a3      	b.n	8000430 <__udivmoddi4+0x1f0>
 80004e8:	4645      	mov	r5, r8
 80004ea:	e7ea      	b.n	80004c2 <__udivmoddi4+0x282>
 80004ec:	462b      	mov	r3, r5
 80004ee:	e794      	b.n	800041a <__udivmoddi4+0x1da>
 80004f0:	4640      	mov	r0, r8
 80004f2:	e7d1      	b.n	8000498 <__udivmoddi4+0x258>
 80004f4:	46d0      	mov	r8, sl
 80004f6:	e77b      	b.n	80003f0 <__udivmoddi4+0x1b0>
 80004f8:	3d02      	subs	r5, #2
 80004fa:	4462      	add	r2, ip
 80004fc:	e732      	b.n	8000364 <__udivmoddi4+0x124>
 80004fe:	4608      	mov	r0, r1
 8000500:	e70a      	b.n	8000318 <__udivmoddi4+0xd8>
 8000502:	4464      	add	r4, ip
 8000504:	3802      	subs	r0, #2
 8000506:	e742      	b.n	800038e <__udivmoddi4+0x14e>

08000508 <__aeabi_idiv0>:
 8000508:	4770      	bx	lr
 800050a:	bf00      	nop

0800050c <Get_Key>:
*/

#include "Keypad4X4.h"
char key;
char Get_Key(void)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	b082      	sub	sp, #8
 8000510:	af00      	add	r7, sp, #0
	int done=1;
 8000512:	2301      	movs	r3, #1
 8000514:	607b      	str	r3, [r7, #4]
	while(done)
 8000516:	e19b      	b.n	8000850 <Get_Key+0x344>
	{
	//COLUMN 3
	HAL_GPIO_WritePin (KC0_GPIO_Port, KC0_Pin, GPIO_PIN_SET);     // Pull the C0 HIGH
 8000518:	2201      	movs	r2, #1
 800051a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800051e:	48b3      	ldr	r0, [pc, #716]	; (80007ec <Get_Key+0x2e0>)
 8000520:	f001 fcc4 	bl	8001eac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC1_GPIO_Port, KC1_Pin, GPIO_PIN_RESET);   // Pull the C1 LOW
 8000524:	2200      	movs	r2, #0
 8000526:	2110      	movs	r1, #16
 8000528:	48b0      	ldr	r0, [pc, #704]	; (80007ec <Get_Key+0x2e0>)
 800052a:	f001 fcbf 	bl	8001eac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC2_GPIO_Port, KC2_Pin, GPIO_PIN_RESET);   // Pull the C2 LOW
 800052e:	2200      	movs	r2, #0
 8000530:	2120      	movs	r1, #32
 8000532:	48ae      	ldr	r0, [pc, #696]	; (80007ec <Get_Key+0x2e0>)
 8000534:	f001 fcba 	bl	8001eac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC3_GPIO_Port, KC3_Pin, GPIO_PIN_RESET);   // Pull the C3 LOW
 8000538:	2200      	movs	r2, #0
 800053a:	2108      	movs	r1, #8
 800053c:	48ab      	ldr	r0, [pc, #684]	; (80007ec <Get_Key+0x2e0>)
 800053e:	f001 fcb5 	bl	8001eac <HAL_GPIO_WritePin>

	if ((HAL_GPIO_ReadPin (KR0_GPIO_Port, KR0_Pin)))   // if R0 is HIGH
 8000542:	2140      	movs	r1, #64	; 0x40
 8000544:	48a9      	ldr	r0, [pc, #676]	; (80007ec <Get_Key+0x2e0>)
 8000546:	f001 fc99 	bl	8001e7c <HAL_GPIO_ReadPin>
 800054a:	4603      	mov	r3, r0
 800054c:	2b00      	cmp	r3, #0
 800054e:	d00b      	beq.n	8000568 <Get_Key+0x5c>
	{
		while ((HAL_GPIO_ReadPin (KR0_GPIO_Port, KR0_Pin)));   // wait till the button is pressed
 8000550:	bf00      	nop
 8000552:	2140      	movs	r1, #64	; 0x40
 8000554:	48a5      	ldr	r0, [pc, #660]	; (80007ec <Get_Key+0x2e0>)
 8000556:	f001 fc91 	bl	8001e7c <HAL_GPIO_ReadPin>
 800055a:	4603      	mov	r3, r0
 800055c:	2b00      	cmp	r3, #0
 800055e:	d1f8      	bne.n	8000552 <Get_Key+0x46>
		key='1';
 8000560:	4ba3      	ldr	r3, [pc, #652]	; (80007f0 <Get_Key+0x2e4>)
 8000562:	2231      	movs	r2, #49	; 0x31
 8000564:	701a      	strb	r2, [r3, #0]
		break;
 8000566:	e177      	b.n	8000858 <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR1_GPIO_Port, KR1_Pin)))   // if  R1 is HIGH
 8000568:	2180      	movs	r1, #128	; 0x80
 800056a:	48a2      	ldr	r0, [pc, #648]	; (80007f4 <Get_Key+0x2e8>)
 800056c:	f001 fc86 	bl	8001e7c <HAL_GPIO_ReadPin>
 8000570:	4603      	mov	r3, r0
 8000572:	2b00      	cmp	r3, #0
 8000574:	d00b      	beq.n	800058e <Get_Key+0x82>
	{
		while ((HAL_GPIO_ReadPin (KR1_GPIO_Port, KR1_Pin)));   // wait till the button is pressed
 8000576:	bf00      	nop
 8000578:	2180      	movs	r1, #128	; 0x80
 800057a:	489e      	ldr	r0, [pc, #632]	; (80007f4 <Get_Key+0x2e8>)
 800057c:	f001 fc7e 	bl	8001e7c <HAL_GPIO_ReadPin>
 8000580:	4603      	mov	r3, r0
 8000582:	2b00      	cmp	r3, #0
 8000584:	d1f8      	bne.n	8000578 <Get_Key+0x6c>
		key='4';
 8000586:	4b9a      	ldr	r3, [pc, #616]	; (80007f0 <Get_Key+0x2e4>)
 8000588:	2234      	movs	r2, #52	; 0x34
 800058a:	701a      	strb	r2, [r3, #0]
		break;
 800058c:	e164      	b.n	8000858 <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR2_GPIO_Port, KR2_Pin)))   // if R2 is HIGH
 800058e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000592:	4899      	ldr	r0, [pc, #612]	; (80007f8 <Get_Key+0x2ec>)
 8000594:	f001 fc72 	bl	8001e7c <HAL_GPIO_ReadPin>
 8000598:	4603      	mov	r3, r0
 800059a:	2b00      	cmp	r3, #0
 800059c:	d00c      	beq.n	80005b8 <Get_Key+0xac>
	{
		while ((HAL_GPIO_ReadPin (KR2_GPIO_Port, KR2_Pin)));   // wait till the button is pressed
 800059e:	bf00      	nop
 80005a0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005a4:	4894      	ldr	r0, [pc, #592]	; (80007f8 <Get_Key+0x2ec>)
 80005a6:	f001 fc69 	bl	8001e7c <HAL_GPIO_ReadPin>
 80005aa:	4603      	mov	r3, r0
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d1f7      	bne.n	80005a0 <Get_Key+0x94>
		key='7';
 80005b0:	4b8f      	ldr	r3, [pc, #572]	; (80007f0 <Get_Key+0x2e4>)
 80005b2:	2237      	movs	r2, #55	; 0x37
 80005b4:	701a      	strb	r2, [r3, #0]
		break;
 80005b6:	e14f      	b.n	8000858 <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR3_GPIO_Port, KR3_Pin)))   // if R3 is HIGH
 80005b8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005bc:	488e      	ldr	r0, [pc, #568]	; (80007f8 <Get_Key+0x2ec>)
 80005be:	f001 fc5d 	bl	8001e7c <HAL_GPIO_ReadPin>
 80005c2:	4603      	mov	r3, r0
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d00c      	beq.n	80005e2 <Get_Key+0xd6>
	{
		while ((HAL_GPIO_ReadPin (KR3_GPIO_Port, KR3_Pin)));   // wait till the button is pressed
 80005c8:	bf00      	nop
 80005ca:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005ce:	488a      	ldr	r0, [pc, #552]	; (80007f8 <Get_Key+0x2ec>)
 80005d0:	f001 fc54 	bl	8001e7c <HAL_GPIO_ReadPin>
 80005d4:	4603      	mov	r3, r0
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d1f7      	bne.n	80005ca <Get_Key+0xbe>
		key='*';
 80005da:	4b85      	ldr	r3, [pc, #532]	; (80007f0 <Get_Key+0x2e4>)
 80005dc:	222a      	movs	r2, #42	; 0x2a
 80005de:	701a      	strb	r2, [r3, #0]
		break;
 80005e0:	e13a      	b.n	8000858 <Get_Key+0x34c>
	}

	//COLUMN 2
	HAL_GPIO_WritePin (KC0_GPIO_Port, KC0_Pin, GPIO_PIN_RESET);   // Pull the C0 LOW  
 80005e2:	2200      	movs	r2, #0
 80005e4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005e8:	4880      	ldr	r0, [pc, #512]	; (80007ec <Get_Key+0x2e0>)
 80005ea:	f001 fc5f 	bl	8001eac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC1_GPIO_Port, KC1_Pin, GPIO_PIN_SET);     // Pull the C1 HIGH
 80005ee:	2201      	movs	r2, #1
 80005f0:	2110      	movs	r1, #16
 80005f2:	487e      	ldr	r0, [pc, #504]	; (80007ec <Get_Key+0x2e0>)
 80005f4:	f001 fc5a 	bl	8001eac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC2_GPIO_Port, KC2_Pin, GPIO_PIN_RESET);   // Pull the C2 LOW
 80005f8:	2200      	movs	r2, #0
 80005fa:	2120      	movs	r1, #32
 80005fc:	487b      	ldr	r0, [pc, #492]	; (80007ec <Get_Key+0x2e0>)
 80005fe:	f001 fc55 	bl	8001eac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC3_GPIO_Port, KC3_Pin, GPIO_PIN_RESET);   // Pull the C3 LOW
 8000602:	2200      	movs	r2, #0
 8000604:	2108      	movs	r1, #8
 8000606:	4879      	ldr	r0, [pc, #484]	; (80007ec <Get_Key+0x2e0>)
 8000608:	f001 fc50 	bl	8001eac <HAL_GPIO_WritePin>
	if ((HAL_GPIO_ReadPin (KR0_GPIO_Port, KR0_Pin)))   // if R0 is HIGH
 800060c:	2140      	movs	r1, #64	; 0x40
 800060e:	4877      	ldr	r0, [pc, #476]	; (80007ec <Get_Key+0x2e0>)
 8000610:	f001 fc34 	bl	8001e7c <HAL_GPIO_ReadPin>
 8000614:	4603      	mov	r3, r0
 8000616:	2b00      	cmp	r3, #0
 8000618:	d00b      	beq.n	8000632 <Get_Key+0x126>
	{
		while ((HAL_GPIO_ReadPin (KR0_GPIO_Port, KR0_Pin)));   // wait till the button is pressed
 800061a:	bf00      	nop
 800061c:	2140      	movs	r1, #64	; 0x40
 800061e:	4873      	ldr	r0, [pc, #460]	; (80007ec <Get_Key+0x2e0>)
 8000620:	f001 fc2c 	bl	8001e7c <HAL_GPIO_ReadPin>
 8000624:	4603      	mov	r3, r0
 8000626:	2b00      	cmp	r3, #0
 8000628:	d1f8      	bne.n	800061c <Get_Key+0x110>
		key='2';
 800062a:	4b71      	ldr	r3, [pc, #452]	; (80007f0 <Get_Key+0x2e4>)
 800062c:	2232      	movs	r2, #50	; 0x32
 800062e:	701a      	strb	r2, [r3, #0]
		break;
 8000630:	e112      	b.n	8000858 <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR1_GPIO_Port, KR1_Pin)))   // if  R1 is HIGH
 8000632:	2180      	movs	r1, #128	; 0x80
 8000634:	486f      	ldr	r0, [pc, #444]	; (80007f4 <Get_Key+0x2e8>)
 8000636:	f001 fc21 	bl	8001e7c <HAL_GPIO_ReadPin>
 800063a:	4603      	mov	r3, r0
 800063c:	2b00      	cmp	r3, #0
 800063e:	d00b      	beq.n	8000658 <Get_Key+0x14c>
	{
		while ((HAL_GPIO_ReadPin (KR1_GPIO_Port, KR1_Pin)));   // wait till the button is pressed
 8000640:	bf00      	nop
 8000642:	2180      	movs	r1, #128	; 0x80
 8000644:	486b      	ldr	r0, [pc, #428]	; (80007f4 <Get_Key+0x2e8>)
 8000646:	f001 fc19 	bl	8001e7c <HAL_GPIO_ReadPin>
 800064a:	4603      	mov	r3, r0
 800064c:	2b00      	cmp	r3, #0
 800064e:	d1f8      	bne.n	8000642 <Get_Key+0x136>
		key='5';
 8000650:	4b67      	ldr	r3, [pc, #412]	; (80007f0 <Get_Key+0x2e4>)
 8000652:	2235      	movs	r2, #53	; 0x35
 8000654:	701a      	strb	r2, [r3, #0]
		break;
 8000656:	e0ff      	b.n	8000858 <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR2_GPIO_Port, KR2_Pin)))   // if R2 is HIGH
 8000658:	f44f 7100 	mov.w	r1, #512	; 0x200
 800065c:	4866      	ldr	r0, [pc, #408]	; (80007f8 <Get_Key+0x2ec>)
 800065e:	f001 fc0d 	bl	8001e7c <HAL_GPIO_ReadPin>
 8000662:	4603      	mov	r3, r0
 8000664:	2b00      	cmp	r3, #0
 8000666:	d00c      	beq.n	8000682 <Get_Key+0x176>
	{
		while ((HAL_GPIO_ReadPin (KR2_GPIO_Port, KR2_Pin)));   // wait till the button is pressed
 8000668:	bf00      	nop
 800066a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800066e:	4862      	ldr	r0, [pc, #392]	; (80007f8 <Get_Key+0x2ec>)
 8000670:	f001 fc04 	bl	8001e7c <HAL_GPIO_ReadPin>
 8000674:	4603      	mov	r3, r0
 8000676:	2b00      	cmp	r3, #0
 8000678:	d1f7      	bne.n	800066a <Get_Key+0x15e>
		key='8';
 800067a:	4b5d      	ldr	r3, [pc, #372]	; (80007f0 <Get_Key+0x2e4>)
 800067c:	2238      	movs	r2, #56	; 0x38
 800067e:	701a      	strb	r2, [r3, #0]
		break;
 8000680:	e0ea      	b.n	8000858 <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR3_GPIO_Port, KR3_Pin)))   // if R3 is HIGH
 8000682:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000686:	485c      	ldr	r0, [pc, #368]	; (80007f8 <Get_Key+0x2ec>)
 8000688:	f001 fbf8 	bl	8001e7c <HAL_GPIO_ReadPin>
 800068c:	4603      	mov	r3, r0
 800068e:	2b00      	cmp	r3, #0
 8000690:	d00c      	beq.n	80006ac <Get_Key+0x1a0>
	{
		while ((HAL_GPIO_ReadPin (KR3_GPIO_Port, KR3_Pin)));   // wait till the button is pressed
 8000692:	bf00      	nop
 8000694:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000698:	4857      	ldr	r0, [pc, #348]	; (80007f8 <Get_Key+0x2ec>)
 800069a:	f001 fbef 	bl	8001e7c <HAL_GPIO_ReadPin>
 800069e:	4603      	mov	r3, r0
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d1f7      	bne.n	8000694 <Get_Key+0x188>
		key='0';
 80006a4:	4b52      	ldr	r3, [pc, #328]	; (80007f0 <Get_Key+0x2e4>)
 80006a6:	2230      	movs	r2, #48	; 0x30
 80006a8:	701a      	strb	r2, [r3, #0]
		break;
 80006aa:	e0d5      	b.n	8000858 <Get_Key+0x34c>
	}
	//COLUMN 1
	HAL_GPIO_WritePin (KC0_GPIO_Port, KC0_Pin, GPIO_PIN_RESET);  // Pull the C0 LOW  
 80006ac:	2200      	movs	r2, #0
 80006ae:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006b2:	484e      	ldr	r0, [pc, #312]	; (80007ec <Get_Key+0x2e0>)
 80006b4:	f001 fbfa 	bl	8001eac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC1_GPIO_Port, KC1_Pin, GPIO_PIN_RESET);  // Pull the C1 LOW
 80006b8:	2200      	movs	r2, #0
 80006ba:	2110      	movs	r1, #16
 80006bc:	484b      	ldr	r0, [pc, #300]	; (80007ec <Get_Key+0x2e0>)
 80006be:	f001 fbf5 	bl	8001eac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC2_GPIO_Port, KC2_Pin, GPIO_PIN_SET);    // Pull the C2 HIGH
 80006c2:	2201      	movs	r2, #1
 80006c4:	2120      	movs	r1, #32
 80006c6:	4849      	ldr	r0, [pc, #292]	; (80007ec <Get_Key+0x2e0>)
 80006c8:	f001 fbf0 	bl	8001eac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC3_GPIO_Port, KC3_Pin, GPIO_PIN_RESET);  // Pull the C3 LOW
 80006cc:	2200      	movs	r2, #0
 80006ce:	2108      	movs	r1, #8
 80006d0:	4846      	ldr	r0, [pc, #280]	; (80007ec <Get_Key+0x2e0>)
 80006d2:	f001 fbeb 	bl	8001eac <HAL_GPIO_WritePin>

	if ((HAL_GPIO_ReadPin (KR0_GPIO_Port, KR0_Pin)))   // if R0 is HIGH
 80006d6:	2140      	movs	r1, #64	; 0x40
 80006d8:	4844      	ldr	r0, [pc, #272]	; (80007ec <Get_Key+0x2e0>)
 80006da:	f001 fbcf 	bl	8001e7c <HAL_GPIO_ReadPin>
 80006de:	4603      	mov	r3, r0
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d00b      	beq.n	80006fc <Get_Key+0x1f0>
	{
		while ((HAL_GPIO_ReadPin (KR0_GPIO_Port, KR0_Pin)));   // wait till the button is pressed
 80006e4:	bf00      	nop
 80006e6:	2140      	movs	r1, #64	; 0x40
 80006e8:	4840      	ldr	r0, [pc, #256]	; (80007ec <Get_Key+0x2e0>)
 80006ea:	f001 fbc7 	bl	8001e7c <HAL_GPIO_ReadPin>
 80006ee:	4603      	mov	r3, r0
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d1f8      	bne.n	80006e6 <Get_Key+0x1da>
		key='3';
 80006f4:	4b3e      	ldr	r3, [pc, #248]	; (80007f0 <Get_Key+0x2e4>)
 80006f6:	2233      	movs	r2, #51	; 0x33
 80006f8:	701a      	strb	r2, [r3, #0]
		break;
 80006fa:	e0ad      	b.n	8000858 <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR1_GPIO_Port, KR1_Pin)))   // if  R1 is HIGH
 80006fc:	2180      	movs	r1, #128	; 0x80
 80006fe:	483d      	ldr	r0, [pc, #244]	; (80007f4 <Get_Key+0x2e8>)
 8000700:	f001 fbbc 	bl	8001e7c <HAL_GPIO_ReadPin>
 8000704:	4603      	mov	r3, r0
 8000706:	2b00      	cmp	r3, #0
 8000708:	d00b      	beq.n	8000722 <Get_Key+0x216>
	{
		while ((HAL_GPIO_ReadPin (KR1_GPIO_Port, KR1_Pin)));   // wait till the button is pressed
 800070a:	bf00      	nop
 800070c:	2180      	movs	r1, #128	; 0x80
 800070e:	4839      	ldr	r0, [pc, #228]	; (80007f4 <Get_Key+0x2e8>)
 8000710:	f001 fbb4 	bl	8001e7c <HAL_GPIO_ReadPin>
 8000714:	4603      	mov	r3, r0
 8000716:	2b00      	cmp	r3, #0
 8000718:	d1f8      	bne.n	800070c <Get_Key+0x200>
		key='6';
 800071a:	4b35      	ldr	r3, [pc, #212]	; (80007f0 <Get_Key+0x2e4>)
 800071c:	2236      	movs	r2, #54	; 0x36
 800071e:	701a      	strb	r2, [r3, #0]
		break;
 8000720:	e09a      	b.n	8000858 <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR2_GPIO_Port, KR2_Pin)))   // if R2 is HIGH
 8000722:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000726:	4834      	ldr	r0, [pc, #208]	; (80007f8 <Get_Key+0x2ec>)
 8000728:	f001 fba8 	bl	8001e7c <HAL_GPIO_ReadPin>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d00c      	beq.n	800074c <Get_Key+0x240>
	{
		while ((HAL_GPIO_ReadPin (KR2_GPIO_Port, KR2_Pin)));   // wait till the button is pressed
 8000732:	bf00      	nop
 8000734:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000738:	482f      	ldr	r0, [pc, #188]	; (80007f8 <Get_Key+0x2ec>)
 800073a:	f001 fb9f 	bl	8001e7c <HAL_GPIO_ReadPin>
 800073e:	4603      	mov	r3, r0
 8000740:	2b00      	cmp	r3, #0
 8000742:	d1f7      	bne.n	8000734 <Get_Key+0x228>
		key='9';
 8000744:	4b2a      	ldr	r3, [pc, #168]	; (80007f0 <Get_Key+0x2e4>)
 8000746:	2239      	movs	r2, #57	; 0x39
 8000748:	701a      	strb	r2, [r3, #0]
		break;
 800074a:	e085      	b.n	8000858 <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR3_GPIO_Port, KR3_Pin)))   // if R3 is HIGH
 800074c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000750:	4829      	ldr	r0, [pc, #164]	; (80007f8 <Get_Key+0x2ec>)
 8000752:	f001 fb93 	bl	8001e7c <HAL_GPIO_ReadPin>
 8000756:	4603      	mov	r3, r0
 8000758:	2b00      	cmp	r3, #0
 800075a:	d00c      	beq.n	8000776 <Get_Key+0x26a>
	{
		while ((HAL_GPIO_ReadPin (KR3_GPIO_Port, KR3_Pin)));   // wait till the button is pressed
 800075c:	bf00      	nop
 800075e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000762:	4825      	ldr	r0, [pc, #148]	; (80007f8 <Get_Key+0x2ec>)
 8000764:	f001 fb8a 	bl	8001e7c <HAL_GPIO_ReadPin>
 8000768:	4603      	mov	r3, r0
 800076a:	2b00      	cmp	r3, #0
 800076c:	d1f7      	bne.n	800075e <Get_Key+0x252>
		key='#';
 800076e:	4b20      	ldr	r3, [pc, #128]	; (80007f0 <Get_Key+0x2e4>)
 8000770:	2223      	movs	r2, #35	; 0x23
 8000772:	701a      	strb	r2, [r3, #0]
		break;
 8000774:	e070      	b.n	8000858 <Get_Key+0x34c>
	}
	//COLUMN 0
	HAL_GPIO_WritePin (KC0_GPIO_Port, KC0_Pin, GPIO_PIN_RESET);   // Pull the C0 LOW  
 8000776:	2200      	movs	r2, #0
 8000778:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800077c:	481b      	ldr	r0, [pc, #108]	; (80007ec <Get_Key+0x2e0>)
 800077e:	f001 fb95 	bl	8001eac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC1_GPIO_Port, KC1_Pin, GPIO_PIN_RESET);   // Pull the C1 LOW
 8000782:	2200      	movs	r2, #0
 8000784:	2110      	movs	r1, #16
 8000786:	4819      	ldr	r0, [pc, #100]	; (80007ec <Get_Key+0x2e0>)
 8000788:	f001 fb90 	bl	8001eac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC2_GPIO_Port, KC2_Pin, GPIO_PIN_RESET);   // Pull the C2 LOW
 800078c:	2200      	movs	r2, #0
 800078e:	2120      	movs	r1, #32
 8000790:	4816      	ldr	r0, [pc, #88]	; (80007ec <Get_Key+0x2e0>)
 8000792:	f001 fb8b 	bl	8001eac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC3_GPIO_Port, KC3_Pin, GPIO_PIN_SET);     // Pull the C3 HIGH
 8000796:	2201      	movs	r2, #1
 8000798:	2108      	movs	r1, #8
 800079a:	4814      	ldr	r0, [pc, #80]	; (80007ec <Get_Key+0x2e0>)
 800079c:	f001 fb86 	bl	8001eac <HAL_GPIO_WritePin>

	if ((HAL_GPIO_ReadPin (KR0_GPIO_Port, KR0_Pin)))   // if R0 is HIGH
 80007a0:	2140      	movs	r1, #64	; 0x40
 80007a2:	4812      	ldr	r0, [pc, #72]	; (80007ec <Get_Key+0x2e0>)
 80007a4:	f001 fb6a 	bl	8001e7c <HAL_GPIO_ReadPin>
 80007a8:	4603      	mov	r3, r0
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d00b      	beq.n	80007c6 <Get_Key+0x2ba>
	{
		while ((HAL_GPIO_ReadPin (KR0_GPIO_Port, KR0_Pin)));   // wait till the button is pressed
 80007ae:	bf00      	nop
 80007b0:	2140      	movs	r1, #64	; 0x40
 80007b2:	480e      	ldr	r0, [pc, #56]	; (80007ec <Get_Key+0x2e0>)
 80007b4:	f001 fb62 	bl	8001e7c <HAL_GPIO_ReadPin>
 80007b8:	4603      	mov	r3, r0
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d1f8      	bne.n	80007b0 <Get_Key+0x2a4>
		key='A';
 80007be:	4b0c      	ldr	r3, [pc, #48]	; (80007f0 <Get_Key+0x2e4>)
 80007c0:	2241      	movs	r2, #65	; 0x41
 80007c2:	701a      	strb	r2, [r3, #0]
		break;
 80007c4:	e048      	b.n	8000858 <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR1_GPIO_Port, KR1_Pin)))   // if  R1 is HIGH
 80007c6:	2180      	movs	r1, #128	; 0x80
 80007c8:	480a      	ldr	r0, [pc, #40]	; (80007f4 <Get_Key+0x2e8>)
 80007ca:	f001 fb57 	bl	8001e7c <HAL_GPIO_ReadPin>
 80007ce:	4603      	mov	r3, r0
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d013      	beq.n	80007fc <Get_Key+0x2f0>
	{
		while ((HAL_GPIO_ReadPin (KR1_GPIO_Port, KR1_Pin)));   // wait till the button is pressed
 80007d4:	bf00      	nop
 80007d6:	2180      	movs	r1, #128	; 0x80
 80007d8:	4806      	ldr	r0, [pc, #24]	; (80007f4 <Get_Key+0x2e8>)
 80007da:	f001 fb4f 	bl	8001e7c <HAL_GPIO_ReadPin>
 80007de:	4603      	mov	r3, r0
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d1f8      	bne.n	80007d6 <Get_Key+0x2ca>
		key='B';
 80007e4:	4b02      	ldr	r3, [pc, #8]	; (80007f0 <Get_Key+0x2e4>)
 80007e6:	2242      	movs	r2, #66	; 0x42
 80007e8:	701a      	strb	r2, [r3, #0]
		break;
 80007ea:	e035      	b.n	8000858 <Get_Key+0x34c>
 80007ec:	40020400 	.word	0x40020400
 80007f0:	20000090 	.word	0x20000090
 80007f4:	40020800 	.word	0x40020800
 80007f8:	40020000 	.word	0x40020000
	}

	if ((HAL_GPIO_ReadPin (KR2_GPIO_Port, KR2_Pin)))   // if R2 is HIGH
 80007fc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000800:	481a      	ldr	r0, [pc, #104]	; (800086c <Get_Key+0x360>)
 8000802:	f001 fb3b 	bl	8001e7c <HAL_GPIO_ReadPin>
 8000806:	4603      	mov	r3, r0
 8000808:	2b00      	cmp	r3, #0
 800080a:	d00c      	beq.n	8000826 <Get_Key+0x31a>
	{
		while ((HAL_GPIO_ReadPin (KR2_GPIO_Port, KR2_Pin)));   // wait till the button is pressed
 800080c:	bf00      	nop
 800080e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000812:	4816      	ldr	r0, [pc, #88]	; (800086c <Get_Key+0x360>)
 8000814:	f001 fb32 	bl	8001e7c <HAL_GPIO_ReadPin>
 8000818:	4603      	mov	r3, r0
 800081a:	2b00      	cmp	r3, #0
 800081c:	d1f7      	bne.n	800080e <Get_Key+0x302>
		key='C';
 800081e:	4b14      	ldr	r3, [pc, #80]	; (8000870 <Get_Key+0x364>)
 8000820:	2243      	movs	r2, #67	; 0x43
 8000822:	701a      	strb	r2, [r3, #0]
		break;
 8000824:	e018      	b.n	8000858 <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR3_GPIO_Port, KR3_Pin)))   // if R3 is HIGH
 8000826:	f44f 7180 	mov.w	r1, #256	; 0x100
 800082a:	4810      	ldr	r0, [pc, #64]	; (800086c <Get_Key+0x360>)
 800082c:	f001 fb26 	bl	8001e7c <HAL_GPIO_ReadPin>
 8000830:	4603      	mov	r3, r0
 8000832:	2b00      	cmp	r3, #0
 8000834:	d00c      	beq.n	8000850 <Get_Key+0x344>
	{
		while ((HAL_GPIO_ReadPin (KR3_GPIO_Port, KR3_Pin)));   // wait till the button is pressed
 8000836:	bf00      	nop
 8000838:	f44f 7180 	mov.w	r1, #256	; 0x100
 800083c:	480b      	ldr	r0, [pc, #44]	; (800086c <Get_Key+0x360>)
 800083e:	f001 fb1d 	bl	8001e7c <HAL_GPIO_ReadPin>
 8000842:	4603      	mov	r3, r0
 8000844:	2b00      	cmp	r3, #0
 8000846:	d1f7      	bne.n	8000838 <Get_Key+0x32c>
		key='D';
 8000848:	4b09      	ldr	r3, [pc, #36]	; (8000870 <Get_Key+0x364>)
 800084a:	2244      	movs	r2, #68	; 0x44
 800084c:	701a      	strb	r2, [r3, #0]
		break;
 800084e:	e003      	b.n	8000858 <Get_Key+0x34c>
	while(done)
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	2b00      	cmp	r3, #0
 8000854:	f47f ae60 	bne.w	8000518 <Get_Key+0xc>
	}
}
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000858:	2120      	movs	r1, #32
 800085a:	4804      	ldr	r0, [pc, #16]	; (800086c <Get_Key+0x360>)
 800085c:	f001 fb3f 	bl	8001ede <HAL_GPIO_TogglePin>
	return(key);
 8000860:	4b03      	ldr	r3, [pc, #12]	; (8000870 <Get_Key+0x364>)
 8000862:	781b      	ldrb	r3, [r3, #0]
}
 8000864:	4618      	mov	r0, r3
 8000866:	3708      	adds	r7, #8
 8000868:	46bd      	mov	sp, r7
 800086a:	bd80      	pop	{r7, pc}
 800086c:	40020000 	.word	0x40020000
 8000870:	20000090 	.word	0x20000090

08000874 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000874:	b480      	push	{r7}
 8000876:	b085      	sub	sp, #20
 8000878:	af00      	add	r7, sp, #0
 800087a:	60f8      	str	r0, [r7, #12]
 800087c:	60b9      	str	r1, [r7, #8]
 800087e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000880:	68fb      	ldr	r3, [r7, #12]
 8000882:	4a07      	ldr	r2, [pc, #28]	; (80008a0 <vApplicationGetIdleTaskMemory+0x2c>)
 8000884:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000886:	68bb      	ldr	r3, [r7, #8]
 8000888:	4a06      	ldr	r2, [pc, #24]	; (80008a4 <vApplicationGetIdleTaskMemory+0x30>)
 800088a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	2280      	movs	r2, #128	; 0x80
 8000890:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000892:	bf00      	nop
 8000894:	3714      	adds	r7, #20
 8000896:	46bd      	mov	sp, r7
 8000898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089c:	4770      	bx	lr
 800089e:	bf00      	nop
 80008a0:	20000094 	.word	0x20000094
 80008a4:	200000e8 	.word	0x200000e8

080008a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008a8:	b5b0      	push	{r4, r5, r7, lr}
 80008aa:	b092      	sub	sp, #72	; 0x48
 80008ac:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008ae:	f001 f809 	bl	80018c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008b2:	f000 f86b 	bl	800098c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008b6:	f000 f92f 	bl	8000b18 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80008ba:	f000 f903 	bl	8000ac4 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80008be:	f000 f8d3 	bl	8000a68 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  /* USER CODE BEGIN 2 */
    SSD1306_Init();
 80008c2:	f000 faff 	bl	8000ec4 <SSD1306_Init>
    SSD1306_GotoXY (0,0);
 80008c6:	2100      	movs	r1, #0
 80008c8:	2000      	movs	r0, #0
 80008ca:	f000 fc65 	bl	8001198 <SSD1306_GotoXY>
    //SSD1306_Puts ("Voltage:", &Font_11x18, 1);
    SSD1306_Puts("Not Armed!", &Font_11x18, 1);
 80008ce:	2201      	movs	r2, #1
 80008d0:	4925      	ldr	r1, [pc, #148]	; (8000968 <main+0xc0>)
 80008d2:	4826      	ldr	r0, [pc, #152]	; (800096c <main+0xc4>)
 80008d4:	f000 fcf6 	bl	80012c4 <SSD1306_Puts>
    SSD1306_GotoXY (0, 30);
 80008d8:	211e      	movs	r1, #30
 80008da:	2000      	movs	r0, #0
 80008dc:	f000 fc5c 	bl	8001198 <SSD1306_GotoXY>
    SSD1306_Puts ("Code:", &Font_11x18, 1);
 80008e0:	2201      	movs	r2, #1
 80008e2:	4921      	ldr	r1, [pc, #132]	; (8000968 <main+0xc0>)
 80008e4:	4822      	ldr	r0, [pc, #136]	; (8000970 <main+0xc8>)
 80008e6:	f000 fced 	bl	80012c4 <SSD1306_Puts>
    SSD1306_UpdateScreen();
 80008ea:	f000 fbaf 	bl	800104c <SSD1306_UpdateScreen>
    SSD1306_UpdateScreen();
 80008ee:	f000 fbad 	bl	800104c <SSD1306_UpdateScreen>
    HAL_Delay (500);
 80008f2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80008f6:	f001 f827 	bl	8001948 <HAL_Delay>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of myQueue01 */
  osMessageQDef(myQueue01, 16, char);
 80008fa:	4b1e      	ldr	r3, [pc, #120]	; (8000974 <main+0xcc>)
 80008fc:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8000900:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000902:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  myQueue01Handle = osMessageCreate(osMessageQ(myQueue01), NULL);
 8000906:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800090a:	2100      	movs	r1, #0
 800090c:	4618      	mov	r0, r3
 800090e:	f003 fccc 	bl	80042aa <osMessageCreate>
 8000912:	4603      	mov	r3, r0
 8000914:	4a18      	ldr	r2, [pc, #96]	; (8000978 <main+0xd0>)
 8000916:	6013      	str	r3, [r2, #0]

  /* Create the thread(s) */
  /* definition and creation of defaultTask */

  /* definition and creation of myTask02 */
  osThreadDef(myTask02, StartTask02, osPriorityAboveNormal, 0, 128);
 8000918:	4b18      	ldr	r3, [pc, #96]	; (800097c <main+0xd4>)
 800091a:	f107 041c 	add.w	r4, r7, #28
 800091e:	461d      	mov	r5, r3
 8000920:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000922:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000924:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000928:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask02Handle = osThreadCreate(osThread(myTask02), NULL);
 800092c:	f107 031c 	add.w	r3, r7, #28
 8000930:	2100      	movs	r1, #0
 8000932:	4618      	mov	r0, r3
 8000934:	f003 fc59 	bl	80041ea <osThreadCreate>
 8000938:	4603      	mov	r3, r0
 800093a:	4a11      	ldr	r2, [pc, #68]	; (8000980 <main+0xd8>)
 800093c:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask03 */
  osThreadDef(myTask03, StartTask03, osPriorityNormal, 0, 128);
 800093e:	4b11      	ldr	r3, [pc, #68]	; (8000984 <main+0xdc>)
 8000940:	463c      	mov	r4, r7
 8000942:	461d      	mov	r5, r3
 8000944:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000946:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000948:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800094c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask03Handle = osThreadCreate(osThread(myTask03), NULL);
 8000950:	463b      	mov	r3, r7
 8000952:	2100      	movs	r1, #0
 8000954:	4618      	mov	r0, r3
 8000956:	f003 fc48 	bl	80041ea <osThreadCreate>
 800095a:	4603      	mov	r3, r0
 800095c:	4a0a      	ldr	r2, [pc, #40]	; (8000988 <main+0xe0>)
 800095e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000960:	f003 fc3c 	bl	80041dc <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000964:	e7fe      	b.n	8000964 <main+0xbc>
 8000966:	bf00      	nop
 8000968:	20000000 	.word	0x20000000
 800096c:	08006bfc 	.word	0x08006bfc
 8000970:	08006c08 	.word	0x08006c08
 8000974:	08006c10 	.word	0x08006c10
 8000978:	2000038c 	.word	0x2000038c
 800097c:	08006c2c 	.word	0x08006c2c
 8000980:	20000384 	.word	0x20000384
 8000984:	08006c54 	.word	0x08006c54
 8000988:	20000388 	.word	0x20000388

0800098c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b094      	sub	sp, #80	; 0x50
 8000990:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000992:	f107 031c 	add.w	r3, r7, #28
 8000996:	2234      	movs	r2, #52	; 0x34
 8000998:	2100      	movs	r1, #0
 800099a:	4618      	mov	r0, r3
 800099c:	f005 fd86 	bl	80064ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009a0:	f107 0308 	add.w	r3, r7, #8
 80009a4:	2200      	movs	r2, #0
 80009a6:	601a      	str	r2, [r3, #0]
 80009a8:	605a      	str	r2, [r3, #4]
 80009aa:	609a      	str	r2, [r3, #8]
 80009ac:	60da      	str	r2, [r3, #12]
 80009ae:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80009b0:	2300      	movs	r3, #0
 80009b2:	607b      	str	r3, [r7, #4]
 80009b4:	4b2a      	ldr	r3, [pc, #168]	; (8000a60 <SystemClock_Config+0xd4>)
 80009b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009b8:	4a29      	ldr	r2, [pc, #164]	; (8000a60 <SystemClock_Config+0xd4>)
 80009ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009be:	6413      	str	r3, [r2, #64]	; 0x40
 80009c0:	4b27      	ldr	r3, [pc, #156]	; (8000a60 <SystemClock_Config+0xd4>)
 80009c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009c8:	607b      	str	r3, [r7, #4]
 80009ca:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80009cc:	2300      	movs	r3, #0
 80009ce:	603b      	str	r3, [r7, #0]
 80009d0:	4b24      	ldr	r3, [pc, #144]	; (8000a64 <SystemClock_Config+0xd8>)
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80009d8:	4a22      	ldr	r2, [pc, #136]	; (8000a64 <SystemClock_Config+0xd8>)
 80009da:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009de:	6013      	str	r3, [r2, #0]
 80009e0:	4b20      	ldr	r3, [pc, #128]	; (8000a64 <SystemClock_Config+0xd8>)
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80009e8:	603b      	str	r3, [r7, #0]
 80009ea:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80009ec:	2302      	movs	r3, #2
 80009ee:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009f0:	2301      	movs	r3, #1
 80009f2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009f4:	2310      	movs	r3, #16
 80009f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009f8:	2302      	movs	r3, #2
 80009fa:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80009fc:	2300      	movs	r3, #0
 80009fe:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000a00:	2310      	movs	r3, #16
 8000a02:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000a04:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000a08:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000a0a:	2304      	movs	r3, #4
 8000a0c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000a0e:	2302      	movs	r3, #2
 8000a10:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000a12:	2302      	movs	r3, #2
 8000a14:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a16:	f107 031c 	add.w	r3, r7, #28
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	f002 fbc2 	bl	80031a4 <HAL_RCC_OscConfig>
 8000a20:	4603      	mov	r3, r0
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d001      	beq.n	8000a2a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000a26:	f000 fa47 	bl	8000eb8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a2a:	230f      	movs	r3, #15
 8000a2c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a2e:	2302      	movs	r3, #2
 8000a30:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a32:	2300      	movs	r3, #0
 8000a34:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000a36:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a3a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000a40:	f107 0308 	add.w	r3, r7, #8
 8000a44:	2102      	movs	r1, #2
 8000a46:	4618      	mov	r0, r3
 8000a48:	f002 f830 	bl	8002aac <HAL_RCC_ClockConfig>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d001      	beq.n	8000a56 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000a52:	f000 fa31 	bl	8000eb8 <Error_Handler>
  }
}
 8000a56:	bf00      	nop
 8000a58:	3750      	adds	r7, #80	; 0x50
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bd80      	pop	{r7, pc}
 8000a5e:	bf00      	nop
 8000a60:	40023800 	.word	0x40023800
 8000a64:	40007000 	.word	0x40007000

08000a68 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000a6c:	4b12      	ldr	r3, [pc, #72]	; (8000ab8 <MX_I2C1_Init+0x50>)
 8000a6e:	4a13      	ldr	r2, [pc, #76]	; (8000abc <MX_I2C1_Init+0x54>)
 8000a70:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000a72:	4b11      	ldr	r3, [pc, #68]	; (8000ab8 <MX_I2C1_Init+0x50>)
 8000a74:	4a12      	ldr	r2, [pc, #72]	; (8000ac0 <MX_I2C1_Init+0x58>)
 8000a76:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000a78:	4b0f      	ldr	r3, [pc, #60]	; (8000ab8 <MX_I2C1_Init+0x50>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000a7e:	4b0e      	ldr	r3, [pc, #56]	; (8000ab8 <MX_I2C1_Init+0x50>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a84:	4b0c      	ldr	r3, [pc, #48]	; (8000ab8 <MX_I2C1_Init+0x50>)
 8000a86:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000a8a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a8c:	4b0a      	ldr	r3, [pc, #40]	; (8000ab8 <MX_I2C1_Init+0x50>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000a92:	4b09      	ldr	r3, [pc, #36]	; (8000ab8 <MX_I2C1_Init+0x50>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a98:	4b07      	ldr	r3, [pc, #28]	; (8000ab8 <MX_I2C1_Init+0x50>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a9e:	4b06      	ldr	r3, [pc, #24]	; (8000ab8 <MX_I2C1_Init+0x50>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000aa4:	4804      	ldr	r0, [pc, #16]	; (8000ab8 <MX_I2C1_Init+0x50>)
 8000aa6:	f001 fa35 	bl	8001f14 <HAL_I2C_Init>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d001      	beq.n	8000ab4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000ab0:	f000 fa02 	bl	8000eb8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000ab4:	bf00      	nop
 8000ab6:	bd80      	pop	{r7, pc}
 8000ab8:	200002e8 	.word	0x200002e8
 8000abc:	40005400 	.word	0x40005400
 8000ac0:	00061a80 	.word	0x00061a80

08000ac4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000ac8:	4b11      	ldr	r3, [pc, #68]	; (8000b10 <MX_USART2_UART_Init+0x4c>)
 8000aca:	4a12      	ldr	r2, [pc, #72]	; (8000b14 <MX_USART2_UART_Init+0x50>)
 8000acc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000ace:	4b10      	ldr	r3, [pc, #64]	; (8000b10 <MX_USART2_UART_Init+0x4c>)
 8000ad0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000ad4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000ad6:	4b0e      	ldr	r3, [pc, #56]	; (8000b10 <MX_USART2_UART_Init+0x4c>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000adc:	4b0c      	ldr	r3, [pc, #48]	; (8000b10 <MX_USART2_UART_Init+0x4c>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000ae2:	4b0b      	ldr	r3, [pc, #44]	; (8000b10 <MX_USART2_UART_Init+0x4c>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ae8:	4b09      	ldr	r3, [pc, #36]	; (8000b10 <MX_USART2_UART_Init+0x4c>)
 8000aea:	220c      	movs	r2, #12
 8000aec:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000aee:	4b08      	ldr	r3, [pc, #32]	; (8000b10 <MX_USART2_UART_Init+0x4c>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000af4:	4b06      	ldr	r3, [pc, #24]	; (8000b10 <MX_USART2_UART_Init+0x4c>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000afa:	4805      	ldr	r0, [pc, #20]	; (8000b10 <MX_USART2_UART_Init+0x4c>)
 8000afc:	f003 f892 	bl	8003c24 <HAL_UART_Init>
 8000b00:	4603      	mov	r3, r0
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d001      	beq.n	8000b0a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000b06:	f000 f9d7 	bl	8000eb8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b0a:	bf00      	nop
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	bf00      	nop
 8000b10:	2000033c 	.word	0x2000033c
 8000b14:	40004400 	.word	0x40004400

08000b18 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b08a      	sub	sp, #40	; 0x28
 8000b1c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b1e:	f107 0314 	add.w	r3, r7, #20
 8000b22:	2200      	movs	r2, #0
 8000b24:	601a      	str	r2, [r3, #0]
 8000b26:	605a      	str	r2, [r3, #4]
 8000b28:	609a      	str	r2, [r3, #8]
 8000b2a:	60da      	str	r2, [r3, #12]
 8000b2c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b2e:	2300      	movs	r3, #0
 8000b30:	613b      	str	r3, [r7, #16]
 8000b32:	4b54      	ldr	r3, [pc, #336]	; (8000c84 <MX_GPIO_Init+0x16c>)
 8000b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b36:	4a53      	ldr	r2, [pc, #332]	; (8000c84 <MX_GPIO_Init+0x16c>)
 8000b38:	f043 0304 	orr.w	r3, r3, #4
 8000b3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b3e:	4b51      	ldr	r3, [pc, #324]	; (8000c84 <MX_GPIO_Init+0x16c>)
 8000b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b42:	f003 0304 	and.w	r3, r3, #4
 8000b46:	613b      	str	r3, [r7, #16]
 8000b48:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	60fb      	str	r3, [r7, #12]
 8000b4e:	4b4d      	ldr	r3, [pc, #308]	; (8000c84 <MX_GPIO_Init+0x16c>)
 8000b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b52:	4a4c      	ldr	r2, [pc, #304]	; (8000c84 <MX_GPIO_Init+0x16c>)
 8000b54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b58:	6313      	str	r3, [r2, #48]	; 0x30
 8000b5a:	4b4a      	ldr	r3, [pc, #296]	; (8000c84 <MX_GPIO_Init+0x16c>)
 8000b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b62:	60fb      	str	r3, [r7, #12]
 8000b64:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b66:	2300      	movs	r3, #0
 8000b68:	60bb      	str	r3, [r7, #8]
 8000b6a:	4b46      	ldr	r3, [pc, #280]	; (8000c84 <MX_GPIO_Init+0x16c>)
 8000b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b6e:	4a45      	ldr	r2, [pc, #276]	; (8000c84 <MX_GPIO_Init+0x16c>)
 8000b70:	f043 0301 	orr.w	r3, r3, #1
 8000b74:	6313      	str	r3, [r2, #48]	; 0x30
 8000b76:	4b43      	ldr	r3, [pc, #268]	; (8000c84 <MX_GPIO_Init+0x16c>)
 8000b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b7a:	f003 0301 	and.w	r3, r3, #1
 8000b7e:	60bb      	str	r3, [r7, #8]
 8000b80:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b82:	2300      	movs	r3, #0
 8000b84:	607b      	str	r3, [r7, #4]
 8000b86:	4b3f      	ldr	r3, [pc, #252]	; (8000c84 <MX_GPIO_Init+0x16c>)
 8000b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8a:	4a3e      	ldr	r2, [pc, #248]	; (8000c84 <MX_GPIO_Init+0x16c>)
 8000b8c:	f043 0302 	orr.w	r3, r3, #2
 8000b90:	6313      	str	r3, [r2, #48]	; 0x30
 8000b92:	4b3c      	ldr	r3, [pc, #240]	; (8000c84 <MX_GPIO_Init+0x16c>)
 8000b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b96:	f003 0302 	and.w	r3, r3, #2
 8000b9a:	607b      	str	r3, [r7, #4]
 8000b9c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	2120      	movs	r1, #32
 8000ba2:	4839      	ldr	r0, [pc, #228]	; (8000c88 <MX_GPIO_Init+0x170>)
 8000ba4:	f001 f982 	bl	8001eac <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 8000ba8:	2200      	movs	r2, #0
 8000baa:	21c0      	movs	r1, #192	; 0xc0
 8000bac:	4836      	ldr	r0, [pc, #216]	; (8000c88 <MX_GPIO_Init+0x170>)
 8000bae:	f001 f97d 	bl	8001eac <HAL_GPIO_WritePin>


  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, KC0_Pin|KC3_Pin|KC1_Pin|KC2_Pin, GPIO_PIN_RESET);
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	f44f 6187 	mov.w	r1, #1080	; 0x438
 8000bb8:	4834      	ldr	r0, [pc, #208]	; (8000c8c <MX_GPIO_Init+0x174>)
 8000bba:	f001 f977 	bl	8001eac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000bbe:	2320      	movs	r3, #32
 8000bc0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bc2:	2301      	movs	r3, #1
 8000bc4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bce:	f107 0314 	add.w	r3, r7, #20
 8000bd2:	4619      	mov	r1, r3
 8000bd4:	482c      	ldr	r0, [pc, #176]	; (8000c88 <MX_GPIO_Init+0x170>)
 8000bd6:	f000 ffbd 	bl	8001b54 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000bda:	2340      	movs	r3, #64	; 0x40
 8000bdc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bde:	2301      	movs	r3, #1
 8000be0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be2:	2300      	movs	r3, #0
 8000be4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000be6:	2300      	movs	r3, #0
 8000be8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bea:	f107 0314 	add.w	r3, r7, #20
 8000bee:	4619      	mov	r1, r3
 8000bf0:	4825      	ldr	r0, [pc, #148]	; (8000c88 <MX_GPIO_Init+0x170>)
 8000bf2:	f000 ffaf 	bl	8001b54 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000bf6:	2380      	movs	r3, #128	; 0x80
 8000bf8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bfa:	2301      	movs	r3, #1
 8000bfc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c02:	2300      	movs	r3, #0
 8000c04:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c06:	f107 0314 	add.w	r3, r7, #20
 8000c0a:	4619      	mov	r1, r3
 8000c0c:	481e      	ldr	r0, [pc, #120]	; (8000c88 <MX_GPIO_Init+0x170>)
 8000c0e:	f000 ffa1 	bl	8001b54 <HAL_GPIO_Init>

  /*Configure GPIO pins : KC0_Pin KC3_Pin KC1_Pin KC2_Pin */
  GPIO_InitStruct.Pin = KC0_Pin|KC3_Pin|KC1_Pin|KC2_Pin;
 8000c12:	f44f 6387 	mov.w	r3, #1080	; 0x438
 8000c16:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c18:	2301      	movs	r3, #1
 8000c1a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c20:	2300      	movs	r3, #0
 8000c22:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c24:	f107 0314 	add.w	r3, r7, #20
 8000c28:	4619      	mov	r1, r3
 8000c2a:	4818      	ldr	r0, [pc, #96]	; (8000c8c <MX_GPIO_Init+0x174>)
 8000c2c:	f000 ff92 	bl	8001b54 <HAL_GPIO_Init>

  /*Configure GPIO pin : KR1_Pin */
  GPIO_InitStruct.Pin = KR1_Pin;
 8000c30:	2380      	movs	r3, #128	; 0x80
 8000c32:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c34:	2300      	movs	r3, #0
 8000c36:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000c38:	2302      	movs	r3, #2
 8000c3a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(KR1_GPIO_Port, &GPIO_InitStruct);
 8000c3c:	f107 0314 	add.w	r3, r7, #20
 8000c40:	4619      	mov	r1, r3
 8000c42:	4813      	ldr	r0, [pc, #76]	; (8000c90 <MX_GPIO_Init+0x178>)
 8000c44:	f000 ff86 	bl	8001b54 <HAL_GPIO_Init>

  /*Configure GPIO pins : KR3_Pin KR2_Pin */
  GPIO_InitStruct.Pin = KR3_Pin|KR2_Pin;
 8000c48:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000c4c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000c52:	2302      	movs	r3, #2
 8000c54:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c56:	f107 0314 	add.w	r3, r7, #20
 8000c5a:	4619      	mov	r1, r3
 8000c5c:	480a      	ldr	r0, [pc, #40]	; (8000c88 <MX_GPIO_Init+0x170>)
 8000c5e:	f000 ff79 	bl	8001b54 <HAL_GPIO_Init>

  /*Configure GPIO pin : KR0_Pin */
  GPIO_InitStruct.Pin = KR0_Pin;
 8000c62:	2340      	movs	r3, #64	; 0x40
 8000c64:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c66:	2300      	movs	r3, #0
 8000c68:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000c6a:	2302      	movs	r3, #2
 8000c6c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(KR0_GPIO_Port, &GPIO_InitStruct);
 8000c6e:	f107 0314 	add.w	r3, r7, #20
 8000c72:	4619      	mov	r1, r3
 8000c74:	4805      	ldr	r0, [pc, #20]	; (8000c8c <MX_GPIO_Init+0x174>)
 8000c76:	f000 ff6d 	bl	8001b54 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c7a:	bf00      	nop
 8000c7c:	3728      	adds	r7, #40	; 0x28
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	40023800 	.word	0x40023800
 8000c88:	40020000 	.word	0x40020000
 8000c8c:	40020400 	.word	0x40020400
 8000c90:	40020800 	.word	0x40020800

08000c94 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void const * argument)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b08a      	sub	sp, #40	; 0x28
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
	  char receivedKey;
	  char enteredCode[7] = {0}; // Array to store the entered code, assuming max length + 1 for null terminator
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	617b      	str	r3, [r7, #20]
 8000ca0:	f107 0318 	add.w	r3, r7, #24
 8000ca4:	2100      	movs	r1, #0
 8000ca6:	460a      	mov	r2, r1
 8000ca8:	801a      	strh	r2, [r3, #0]
 8000caa:	460a      	mov	r2, r1
 8000cac:	709a      	strb	r2, [r3, #2]
	  uint8_t codeLength = 0; // To track the number of entered characters
 8000cae:	2300      	movs	r3, #0
 8000cb0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	  const uint8_t maxCodeLength = 6; // Adjust based on your requirements
 8000cb4:	2306      	movs	r3, #6
 8000cb6:	77fb      	strb	r3, [r7, #31]
	  const char correctCode[7] = "000000"; // Example of a correct code for comparison
 8000cb8:	4a59      	ldr	r2, [pc, #356]	; (8000e20 <StartTask02+0x18c>)
 8000cba:	f107 030c 	add.w	r3, r7, #12
 8000cbe:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000cc2:	6018      	str	r0, [r3, #0]
 8000cc4:	3304      	adds	r3, #4
 8000cc6:	8019      	strh	r1, [r3, #0]
 8000cc8:	3302      	adds	r3, #2
 8000cca:	0c0a      	lsrs	r2, r1, #16
 8000ccc:	701a      	strb	r2, [r3, #0]
	  int armed = 0;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	623b      	str	r3, [r7, #32]

	  for(;;) {

		if(armed) {
 8000cd2:	6a3b      	ldr	r3, [r7, #32]
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d00e      	beq.n	8000cf6 <StartTask02+0x62>
	          HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, SET);
 8000cd8:	2201      	movs	r2, #1
 8000cda:	2140      	movs	r1, #64	; 0x40
 8000cdc:	4851      	ldr	r0, [pc, #324]	; (8000e24 <StartTask02+0x190>)
 8000cde:	f001 f8e5 	bl	8001eac <HAL_GPIO_WritePin>
	          HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, RESET);
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	2180      	movs	r1, #128	; 0x80
 8000ce6:	484f      	ldr	r0, [pc, #316]	; (8000e24 <StartTask02+0x190>)
 8000ce8:	f001 f8e0 	bl	8001eac <HAL_GPIO_WritePin>
	          osDelay(2000);
 8000cec:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000cf0:	f003 fac7 	bl	8004282 <osDelay>
 8000cf4:	e009      	b.n	8000d0a <StartTask02+0x76>
		} else {
	          HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, SET);
 8000cf6:	2201      	movs	r2, #1
 8000cf8:	2180      	movs	r1, #128	; 0x80
 8000cfa:	484a      	ldr	r0, [pc, #296]	; (8000e24 <StartTask02+0x190>)
 8000cfc:	f001 f8d6 	bl	8001eac <HAL_GPIO_WritePin>
	          HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, RESET);
 8000d00:	2200      	movs	r2, #0
 8000d02:	2140      	movs	r1, #64	; 0x40
 8000d04:	4847      	ldr	r0, [pc, #284]	; (8000e24 <StartTask02+0x190>)
 8000d06:	f001 f8d1 	bl	8001eac <HAL_GPIO_WritePin>
		}

	    if (xQueueReceive(myQueue01Handle, &receivedKey, portMAX_DELAY) == pdPASS) {
 8000d0a:	4b47      	ldr	r3, [pc, #284]	; (8000e28 <StartTask02+0x194>)
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	f107 011e 	add.w	r1, r7, #30
 8000d12:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000d16:	4618      	mov	r0, r3
 8000d18:	f003 fddc 	bl	80048d4 <xQueueReceive>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	2b01      	cmp	r3, #1
 8000d20:	d1d7      	bne.n	8000cd2 <StartTask02+0x3e>
	      if (receivedKey == '#' && codeLength == maxCodeLength) { // Enter/confirm key or max length reached
 8000d22:	7fbb      	ldrb	r3, [r7, #30]
 8000d24:	2b23      	cmp	r3, #35	; 0x23
 8000d26:	d15e      	bne.n	8000de6 <StartTask02+0x152>
 8000d28:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8000d2c:	7ffb      	ldrb	r3, [r7, #31]
 8000d2e:	429a      	cmp	r2, r3
 8000d30:	d159      	bne.n	8000de6 <StartTask02+0x152>
	        // Check if the entered code is correct
	        if (strncmp(enteredCode, correctCode, maxCodeLength) == 0) {
 8000d32:	7ffa      	ldrb	r2, [r7, #31]
 8000d34:	f107 010c 	add.w	r1, r7, #12
 8000d38:	f107 0314 	add.w	r3, r7, #20
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	f005 fba3 	bl	8006488 <strncmp>
 8000d42:	4603      	mov	r3, r0
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d113      	bne.n	8000d70 <StartTask02+0xdc>
	          // Code is correct
	          SSD1306_Clear();
 8000d48:	f000 fae1 	bl	800130e <SSD1306_Clear>
	          SSD1306_GotoXY(0, 0);
 8000d4c:	2100      	movs	r1, #0
 8000d4e:	2000      	movs	r0, #0
 8000d50:	f000 fa22 	bl	8001198 <SSD1306_GotoXY>
	          SSD1306_Puts("Success!", &Font_11x18, 1);
 8000d54:	2201      	movs	r2, #1
 8000d56:	4935      	ldr	r1, [pc, #212]	; (8000e2c <StartTask02+0x198>)
 8000d58:	4835      	ldr	r0, [pc, #212]	; (8000e30 <StartTask02+0x19c>)
 8000d5a:	f000 fab3 	bl	80012c4 <SSD1306_Puts>
	          if (armed) {
 8000d5e:	6a3b      	ldr	r3, [r7, #32]
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d002      	beq.n	8000d6a <StartTask02+0xd6>
	        	  armed = 0;
 8000d64:	2300      	movs	r3, #0
 8000d66:	623b      	str	r3, [r7, #32]
 8000d68:	e00d      	b.n	8000d86 <StartTask02+0xf2>
	          } else {
	        	  armed = 1;
 8000d6a:	2301      	movs	r3, #1
 8000d6c:	623b      	str	r3, [r7, #32]
 8000d6e:	e00a      	b.n	8000d86 <StartTask02+0xf2>
	          }
	        } else {
	          // Code is incorrect
	          SSD1306_Clear();
 8000d70:	f000 facd 	bl	800130e <SSD1306_Clear>
	          SSD1306_GotoXY(0, 0);
 8000d74:	2100      	movs	r1, #0
 8000d76:	2000      	movs	r0, #0
 8000d78:	f000 fa0e 	bl	8001198 <SSD1306_GotoXY>
	          SSD1306_Puts("Failed!", &Font_11x18, 1);
 8000d7c:	2201      	movs	r2, #1
 8000d7e:	492b      	ldr	r1, [pc, #172]	; (8000e2c <StartTask02+0x198>)
 8000d80:	482c      	ldr	r0, [pc, #176]	; (8000e34 <StartTask02+0x1a0>)
 8000d82:	f000 fa9f 	bl	80012c4 <SSD1306_Puts>
	        }
	        SSD1306_UpdateScreen();
 8000d86:	f000 f961 	bl	800104c <SSD1306_UpdateScreen>
	        HAL_Delay(2000); // Display message for 2 seconds
 8000d8a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000d8e:	f000 fddb 	bl	8001948 <HAL_Delay>

	        // Reset display and code length for next entry
	        SSD1306_Clear();
 8000d92:	f000 fabc 	bl	800130e <SSD1306_Clear>
	        SSD1306_GotoXY (0, 0);
 8000d96:	2100      	movs	r1, #0
 8000d98:	2000      	movs	r0, #0
 8000d9a:	f000 f9fd 	bl	8001198 <SSD1306_GotoXY>
	        if (armed) {
 8000d9e:	6a3b      	ldr	r3, [r7, #32]
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d005      	beq.n	8000db0 <StartTask02+0x11c>
		        SSD1306_Puts("Armed!", &Font_11x18, 1);
 8000da4:	2201      	movs	r2, #1
 8000da6:	4921      	ldr	r1, [pc, #132]	; (8000e2c <StartTask02+0x198>)
 8000da8:	4823      	ldr	r0, [pc, #140]	; (8000e38 <StartTask02+0x1a4>)
 8000daa:	f000 fa8b 	bl	80012c4 <SSD1306_Puts>
 8000dae:	e004      	b.n	8000dba <StartTask02+0x126>

	        } else {
		        SSD1306_Puts("Not Armed!", &Font_11x18, 1);
 8000db0:	2201      	movs	r2, #1
 8000db2:	491e      	ldr	r1, [pc, #120]	; (8000e2c <StartTask02+0x198>)
 8000db4:	4821      	ldr	r0, [pc, #132]	; (8000e3c <StartTask02+0x1a8>)
 8000db6:	f000 fa85 	bl	80012c4 <SSD1306_Puts>

	        }
	        SSD1306_GotoXY (0, 30); // Adjust Y position based on your font size
 8000dba:	211e      	movs	r1, #30
 8000dbc:	2000      	movs	r0, #0
 8000dbe:	f000 f9eb 	bl	8001198 <SSD1306_GotoXY>
	        SSD1306_Puts("Code:", &Font_11x18, 1);
 8000dc2:	2201      	movs	r2, #1
 8000dc4:	4919      	ldr	r1, [pc, #100]	; (8000e2c <StartTask02+0x198>)
 8000dc6:	481e      	ldr	r0, [pc, #120]	; (8000e40 <StartTask02+0x1ac>)
 8000dc8:	f000 fa7c 	bl	80012c4 <SSD1306_Puts>
	        SSD1306_UpdateScreen();
 8000dcc:	f000 f93e 	bl	800104c <SSD1306_UpdateScreen>
	        memset(enteredCode, 0, sizeof(enteredCode)); // Clear the entered code
 8000dd0:	f107 0314 	add.w	r3, r7, #20
 8000dd4:	2207      	movs	r2, #7
 8000dd6:	2100      	movs	r1, #0
 8000dd8:	4618      	mov	r0, r3
 8000dda:	f005 fb67 	bl	80064ac <memset>
	        codeLength = 0;
 8000dde:	2300      	movs	r3, #0
 8000de0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000de4:	e01b      	b.n	8000e1e <StartTask02+0x18a>
	      } else {
	        // Add received key to the entered code and update display with an additional asterisk
	        if (codeLength < maxCodeLength) { // Prevent buffer overflow
 8000de6:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8000dea:	7ffb      	ldrb	r3, [r7, #31]
 8000dec:	429a      	cmp	r2, r3
 8000dee:	d213      	bcs.n	8000e18 <StartTask02+0x184>
	          enteredCode[codeLength] = receivedKey; // Store the received key
 8000df0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000df4:	7fba      	ldrb	r2, [r7, #30]
 8000df6:	3328      	adds	r3, #40	; 0x28
 8000df8:	443b      	add	r3, r7
 8000dfa:	f803 2c14 	strb.w	r2, [r3, #-20]
	          //SSD1306_GotoXY ((codeLength * 5), 30); // Adjust spacing based on font size
	          SSD1306_Puts("*", &Font_11x18, 1);
 8000dfe:	2201      	movs	r2, #1
 8000e00:	490a      	ldr	r1, [pc, #40]	; (8000e2c <StartTask02+0x198>)
 8000e02:	4810      	ldr	r0, [pc, #64]	; (8000e44 <StartTask02+0x1b0>)
 8000e04:	f000 fa5e 	bl	80012c4 <SSD1306_Puts>
	          SSD1306_UpdateScreen();
 8000e08:	f000 f920 	bl	800104c <SSD1306_UpdateScreen>
	          codeLength++;
 8000e0c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000e10:	3301      	adds	r3, #1
 8000e12:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000e16:	e75c      	b.n	8000cd2 <StartTask02+0x3e>
	          // Might  wait here? HAL_Delay (500);
	        } else {
	        	printf("Error: Max Code Length Reached!\r\n");
 8000e18:	480b      	ldr	r0, [pc, #44]	; (8000e48 <StartTask02+0x1b4>)
 8000e1a:	f005 fb2d 	bl	8006478 <puts>
		if(armed) {
 8000e1e:	e758      	b.n	8000cd2 <StartTask02+0x3e>
 8000e20:	08006cb4 	.word	0x08006cb4
 8000e24:	40020000 	.word	0x40020000
 8000e28:	2000038c 	.word	0x2000038c
 8000e2c:	20000000 	.word	0x20000000
 8000e30:	08006c70 	.word	0x08006c70
 8000e34:	08006c7c 	.word	0x08006c7c
 8000e38:	08006c84 	.word	0x08006c84
 8000e3c:	08006bfc 	.word	0x08006bfc
 8000e40:	08006c08 	.word	0x08006c08
 8000e44:	08006c8c 	.word	0x08006c8c
 8000e48:	08006c90 	.word	0x08006c90

08000e4c <StartTask03>:
  /* USER CODE END StartTask02 */
}


void StartTask03(void const * argument)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b084      	sub	sp, #16
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
		  SSD1306_UpdateScreen();
		  HAL_Delay (500);
	  }
	  */

	  const TickType_t xDelay = 20 / portTICK_PERIOD_MS; // Debounce delay
 8000e54:	2314      	movs	r3, #20
 8000e56:	60fb      	str	r3, [r7, #12]
	  char keyToSend; // To hold the key to be sent

	  for(;;) {
	    keyToSend = Get_Key(); // Assume Get_Key() is debounced and returns '\0' if no key is pressed
 8000e58:	f7ff fb58 	bl	800050c <Get_Key>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	72fb      	strb	r3, [r7, #11]
	    if (keyToSend != '\0') { // Check if a key is pressed
 8000e60:	7afb      	ldrb	r3, [r7, #11]
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d00e      	beq.n	8000e84 <StartTask03+0x38>
	      // Send the key press to the display task
	      if (xQueueSend(myQueue01Handle, &keyToSend, portMAX_DELAY) != pdPASS) {
 8000e66:	4b09      	ldr	r3, [pc, #36]	; (8000e8c <StartTask03+0x40>)
 8000e68:	6818      	ldr	r0, [r3, #0]
 8000e6a:	f107 010b 	add.w	r1, r7, #11
 8000e6e:	2300      	movs	r3, #0
 8000e70:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000e74:	f003 fc30 	bl	80046d8 <xQueueGenericSend>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	2b01      	cmp	r3, #1
 8000e7c:	d002      	beq.n	8000e84 <StartTask03+0x38>
	    	  printf("Error: Data couldn't be sent from task 2\r\n");
 8000e7e:	4804      	ldr	r0, [pc, #16]	; (8000e90 <StartTask03+0x44>)
 8000e80:	f005 fafa 	bl	8006478 <puts>
	      }
	    }

	    vTaskDelay(xDelay); // Wait for the next cycle
 8000e84:	68f8      	ldr	r0, [r7, #12]
 8000e86:	f004 f8a9 	bl	8004fdc <vTaskDelay>
	    keyToSend = Get_Key(); // Assume Get_Key() is debounced and returns '\0' if no key is pressed
 8000e8a:	e7e5      	b.n	8000e58 <StartTask03+0xc>
 8000e8c:	2000038c 	.word	0x2000038c
 8000e90:	08006cbc 	.word	0x08006cbc

08000e94 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b082      	sub	sp, #8
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	4a04      	ldr	r2, [pc, #16]	; (8000eb4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000ea2:	4293      	cmp	r3, r2
 8000ea4:	d101      	bne.n	8000eaa <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000ea6:	f000 fd2f 	bl	8001908 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000eaa:	bf00      	nop
 8000eac:	3708      	adds	r7, #8
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}
 8000eb2:	bf00      	nop
 8000eb4:	40001000 	.word	0x40001000

08000eb8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ebc:	b672      	cpsid	i
}
 8000ebe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ec0:	e7fe      	b.n	8000ec0 <Error_Handler+0x8>
	...

08000ec4 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b082      	sub	sp, #8
 8000ec8:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 8000eca:	f000 fa29 	bl	8001320 <ssd1306_I2C_Init>

	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8000ece:	f644 6320 	movw	r3, #20000	; 0x4e20
 8000ed2:	2201      	movs	r2, #1
 8000ed4:	2178      	movs	r1, #120	; 0x78
 8000ed6:	485b      	ldr	r0, [pc, #364]	; (8001044 <SSD1306_Init+0x180>)
 8000ed8:	f001 fa5e 	bl	8002398 <HAL_I2C_IsDeviceReady>
 8000edc:	4603      	mov	r3, r0
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d001      	beq.n	8000ee6 <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	e0a9      	b.n	800103a <SSD1306_Init+0x176>
	}

	/* A little delay */
	uint32_t p = 2500;
 8000ee6:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8000eea:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000eec:	e002      	b.n	8000ef4 <SSD1306_Init+0x30>
		p--;
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	3b01      	subs	r3, #1
 8000ef2:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d1f9      	bne.n	8000eee <SSD1306_Init+0x2a>

	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8000efa:	22ae      	movs	r2, #174	; 0xae
 8000efc:	2100      	movs	r1, #0
 8000efe:	2078      	movs	r0, #120	; 0x78
 8000f00:	f000 fa8a 	bl	8001418 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode
 8000f04:	2220      	movs	r2, #32
 8000f06:	2100      	movs	r1, #0
 8000f08:	2078      	movs	r0, #120	; 0x78
 8000f0a:	f000 fa85 	bl	8001418 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8000f0e:	2210      	movs	r2, #16
 8000f10:	2100      	movs	r1, #0
 8000f12:	2078      	movs	r0, #120	; 0x78
 8000f14:	f000 fa80 	bl	8001418 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8000f18:	22b0      	movs	r2, #176	; 0xb0
 8000f1a:	2100      	movs	r1, #0
 8000f1c:	2078      	movs	r0, #120	; 0x78
 8000f1e:	f000 fa7b 	bl	8001418 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8000f22:	22c8      	movs	r2, #200	; 0xc8
 8000f24:	2100      	movs	r1, #0
 8000f26:	2078      	movs	r0, #120	; 0x78
 8000f28:	f000 fa76 	bl	8001418 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	2100      	movs	r1, #0
 8000f30:	2078      	movs	r0, #120	; 0x78
 8000f32:	f000 fa71 	bl	8001418 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8000f36:	2210      	movs	r2, #16
 8000f38:	2100      	movs	r1, #0
 8000f3a:	2078      	movs	r0, #120	; 0x78
 8000f3c:	f000 fa6c 	bl	8001418 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8000f40:	2240      	movs	r2, #64	; 0x40
 8000f42:	2100      	movs	r1, #0
 8000f44:	2078      	movs	r0, #120	; 0x78
 8000f46:	f000 fa67 	bl	8001418 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8000f4a:	2281      	movs	r2, #129	; 0x81
 8000f4c:	2100      	movs	r1, #0
 8000f4e:	2078      	movs	r0, #120	; 0x78
 8000f50:	f000 fa62 	bl	8001418 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8000f54:	22ff      	movs	r2, #255	; 0xff
 8000f56:	2100      	movs	r1, #0
 8000f58:	2078      	movs	r0, #120	; 0x78
 8000f5a:	f000 fa5d 	bl	8001418 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8000f5e:	22a1      	movs	r2, #161	; 0xa1
 8000f60:	2100      	movs	r1, #0
 8000f62:	2078      	movs	r0, #120	; 0x78
 8000f64:	f000 fa58 	bl	8001418 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8000f68:	22a6      	movs	r2, #166	; 0xa6
 8000f6a:	2100      	movs	r1, #0
 8000f6c:	2078      	movs	r0, #120	; 0x78
 8000f6e:	f000 fa53 	bl	8001418 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8000f72:	22a8      	movs	r2, #168	; 0xa8
 8000f74:	2100      	movs	r1, #0
 8000f76:	2078      	movs	r0, #120	; 0x78
 8000f78:	f000 fa4e 	bl	8001418 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8000f7c:	223f      	movs	r2, #63	; 0x3f
 8000f7e:	2100      	movs	r1, #0
 8000f80:	2078      	movs	r0, #120	; 0x78
 8000f82:	f000 fa49 	bl	8001418 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8000f86:	22a4      	movs	r2, #164	; 0xa4
 8000f88:	2100      	movs	r1, #0
 8000f8a:	2078      	movs	r0, #120	; 0x78
 8000f8c:	f000 fa44 	bl	8001418 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8000f90:	22d3      	movs	r2, #211	; 0xd3
 8000f92:	2100      	movs	r1, #0
 8000f94:	2078      	movs	r0, #120	; 0x78
 8000f96:	f000 fa3f 	bl	8001418 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	2100      	movs	r1, #0
 8000f9e:	2078      	movs	r0, #120	; 0x78
 8000fa0:	f000 fa3a 	bl	8001418 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8000fa4:	22d5      	movs	r2, #213	; 0xd5
 8000fa6:	2100      	movs	r1, #0
 8000fa8:	2078      	movs	r0, #120	; 0x78
 8000faa:	f000 fa35 	bl	8001418 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8000fae:	22f0      	movs	r2, #240	; 0xf0
 8000fb0:	2100      	movs	r1, #0
 8000fb2:	2078      	movs	r0, #120	; 0x78
 8000fb4:	f000 fa30 	bl	8001418 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8000fb8:	22d9      	movs	r2, #217	; 0xd9
 8000fba:	2100      	movs	r1, #0
 8000fbc:	2078      	movs	r0, #120	; 0x78
 8000fbe:	f000 fa2b 	bl	8001418 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8000fc2:	2222      	movs	r2, #34	; 0x22
 8000fc4:	2100      	movs	r1, #0
 8000fc6:	2078      	movs	r0, #120	; 0x78
 8000fc8:	f000 fa26 	bl	8001418 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8000fcc:	22da      	movs	r2, #218	; 0xda
 8000fce:	2100      	movs	r1, #0
 8000fd0:	2078      	movs	r0, #120	; 0x78
 8000fd2:	f000 fa21 	bl	8001418 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8000fd6:	2212      	movs	r2, #18
 8000fd8:	2100      	movs	r1, #0
 8000fda:	2078      	movs	r0, #120	; 0x78
 8000fdc:	f000 fa1c 	bl	8001418 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8000fe0:	22db      	movs	r2, #219	; 0xdb
 8000fe2:	2100      	movs	r1, #0
 8000fe4:	2078      	movs	r0, #120	; 0x78
 8000fe6:	f000 fa17 	bl	8001418 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8000fea:	2220      	movs	r2, #32
 8000fec:	2100      	movs	r1, #0
 8000fee:	2078      	movs	r0, #120	; 0x78
 8000ff0:	f000 fa12 	bl	8001418 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8000ff4:	228d      	movs	r2, #141	; 0x8d
 8000ff6:	2100      	movs	r1, #0
 8000ff8:	2078      	movs	r0, #120	; 0x78
 8000ffa:	f000 fa0d 	bl	8001418 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8000ffe:	2214      	movs	r2, #20
 8001000:	2100      	movs	r1, #0
 8001002:	2078      	movs	r0, #120	; 0x78
 8001004:	f000 fa08 	bl	8001418 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8001008:	22af      	movs	r2, #175	; 0xaf
 800100a:	2100      	movs	r1, #0
 800100c:	2078      	movs	r0, #120	; 0x78
 800100e:	f000 fa03 	bl	8001418 <ssd1306_I2C_Write>


	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8001012:	222e      	movs	r2, #46	; 0x2e
 8001014:	2100      	movs	r1, #0
 8001016:	2078      	movs	r0, #120	; 0x78
 8001018:	f000 f9fe 	bl	8001418 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 800101c:	2000      	movs	r0, #0
 800101e:	f000 f843 	bl	80010a8 <SSD1306_Fill>

	/* Update screen */
	SSD1306_UpdateScreen();
 8001022:	f000 f813 	bl	800104c <SSD1306_UpdateScreen>

	/* Set default values */
	SSD1306.CurrentX = 0;
 8001026:	4b08      	ldr	r3, [pc, #32]	; (8001048 <SSD1306_Init+0x184>)
 8001028:	2200      	movs	r2, #0
 800102a:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 800102c:	4b06      	ldr	r3, [pc, #24]	; (8001048 <SSD1306_Init+0x184>)
 800102e:	2200      	movs	r2, #0
 8001030:	805a      	strh	r2, [r3, #2]

	/* Initialized OK */
	SSD1306.Initialized = 1;
 8001032:	4b05      	ldr	r3, [pc, #20]	; (8001048 <SSD1306_Init+0x184>)
 8001034:	2201      	movs	r2, #1
 8001036:	715a      	strb	r2, [r3, #5]

	/* Return OK */
	return 1;
 8001038:	2301      	movs	r3, #1
}
 800103a:	4618      	mov	r0, r3
 800103c:	3708      	adds	r7, #8
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}
 8001042:	bf00      	nop
 8001044:	200002e8 	.word	0x200002e8
 8001048:	20000790 	.word	0x20000790

0800104c <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 800104c:	b580      	push	{r7, lr}
 800104e:	b082      	sub	sp, #8
 8001050:	af00      	add	r7, sp, #0
	uint8_t m;

	for (m = 0; m < 8; m++) {
 8001052:	2300      	movs	r3, #0
 8001054:	71fb      	strb	r3, [r7, #7]
 8001056:	e01d      	b.n	8001094 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8001058:	79fb      	ldrb	r3, [r7, #7]
 800105a:	3b50      	subs	r3, #80	; 0x50
 800105c:	b2db      	uxtb	r3, r3
 800105e:	461a      	mov	r2, r3
 8001060:	2100      	movs	r1, #0
 8001062:	2078      	movs	r0, #120	; 0x78
 8001064:	f000 f9d8 	bl	8001418 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8001068:	2200      	movs	r2, #0
 800106a:	2100      	movs	r1, #0
 800106c:	2078      	movs	r0, #120	; 0x78
 800106e:	f000 f9d3 	bl	8001418 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8001072:	2210      	movs	r2, #16
 8001074:	2100      	movs	r1, #0
 8001076:	2078      	movs	r0, #120	; 0x78
 8001078:	f000 f9ce 	bl	8001418 <ssd1306_I2C_Write>

		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 800107c:	79fb      	ldrb	r3, [r7, #7]
 800107e:	01db      	lsls	r3, r3, #7
 8001080:	4a08      	ldr	r2, [pc, #32]	; (80010a4 <SSD1306_UpdateScreen+0x58>)
 8001082:	441a      	add	r2, r3
 8001084:	2380      	movs	r3, #128	; 0x80
 8001086:	2140      	movs	r1, #64	; 0x40
 8001088:	2078      	movs	r0, #120	; 0x78
 800108a:	f000 f95f 	bl	800134c <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 800108e:	79fb      	ldrb	r3, [r7, #7]
 8001090:	3301      	adds	r3, #1
 8001092:	71fb      	strb	r3, [r7, #7]
 8001094:	79fb      	ldrb	r3, [r7, #7]
 8001096:	2b07      	cmp	r3, #7
 8001098:	d9de      	bls.n	8001058 <SSD1306_UpdateScreen+0xc>
	}
}
 800109a:	bf00      	nop
 800109c:	bf00      	nop
 800109e:	3708      	adds	r7, #8
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd80      	pop	{r7, pc}
 80010a4:	20000390 	.word	0x20000390

080010a8 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b082      	sub	sp, #8
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	4603      	mov	r3, r0
 80010b0:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 80010b2:	79fb      	ldrb	r3, [r7, #7]
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d101      	bne.n	80010bc <SSD1306_Fill+0x14>
 80010b8:	2300      	movs	r3, #0
 80010ba:	e000      	b.n	80010be <SSD1306_Fill+0x16>
 80010bc:	23ff      	movs	r3, #255	; 0xff
 80010be:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80010c2:	4619      	mov	r1, r3
 80010c4:	4803      	ldr	r0, [pc, #12]	; (80010d4 <SSD1306_Fill+0x2c>)
 80010c6:	f005 f9f1 	bl	80064ac <memset>
}
 80010ca:	bf00      	nop
 80010cc:	3708      	adds	r7, #8
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	bf00      	nop
 80010d4:	20000390 	.word	0x20000390

080010d8 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 80010d8:	b480      	push	{r7}
 80010da:	b083      	sub	sp, #12
 80010dc:	af00      	add	r7, sp, #0
 80010de:	4603      	mov	r3, r0
 80010e0:	80fb      	strh	r3, [r7, #6]
 80010e2:	460b      	mov	r3, r1
 80010e4:	80bb      	strh	r3, [r7, #4]
 80010e6:	4613      	mov	r3, r2
 80010e8:	70fb      	strb	r3, [r7, #3]
	if (
 80010ea:	88fb      	ldrh	r3, [r7, #6]
 80010ec:	2b7f      	cmp	r3, #127	; 0x7f
 80010ee:	d848      	bhi.n	8001182 <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 80010f0:	88bb      	ldrh	r3, [r7, #4]
 80010f2:	2b3f      	cmp	r3, #63	; 0x3f
 80010f4:	d845      	bhi.n	8001182 <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}

	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 80010f6:	4b26      	ldr	r3, [pc, #152]	; (8001190 <SSD1306_DrawPixel+0xb8>)
 80010f8:	791b      	ldrb	r3, [r3, #4]
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d006      	beq.n	800110c <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 80010fe:	78fb      	ldrb	r3, [r7, #3]
 8001100:	2b00      	cmp	r3, #0
 8001102:	bf0c      	ite	eq
 8001104:	2301      	moveq	r3, #1
 8001106:	2300      	movne	r3, #0
 8001108:	b2db      	uxtb	r3, r3
 800110a:	70fb      	strb	r3, [r7, #3]
	}

	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 800110c:	78fb      	ldrb	r3, [r7, #3]
 800110e:	2b01      	cmp	r3, #1
 8001110:	d11a      	bne.n	8001148 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001112:	88fa      	ldrh	r2, [r7, #6]
 8001114:	88bb      	ldrh	r3, [r7, #4]
 8001116:	08db      	lsrs	r3, r3, #3
 8001118:	b298      	uxth	r0, r3
 800111a:	4603      	mov	r3, r0
 800111c:	01db      	lsls	r3, r3, #7
 800111e:	4413      	add	r3, r2
 8001120:	4a1c      	ldr	r2, [pc, #112]	; (8001194 <SSD1306_DrawPixel+0xbc>)
 8001122:	5cd3      	ldrb	r3, [r2, r3]
 8001124:	b25a      	sxtb	r2, r3
 8001126:	88bb      	ldrh	r3, [r7, #4]
 8001128:	f003 0307 	and.w	r3, r3, #7
 800112c:	2101      	movs	r1, #1
 800112e:	fa01 f303 	lsl.w	r3, r1, r3
 8001132:	b25b      	sxtb	r3, r3
 8001134:	4313      	orrs	r3, r2
 8001136:	b259      	sxtb	r1, r3
 8001138:	88fa      	ldrh	r2, [r7, #6]
 800113a:	4603      	mov	r3, r0
 800113c:	01db      	lsls	r3, r3, #7
 800113e:	4413      	add	r3, r2
 8001140:	b2c9      	uxtb	r1, r1
 8001142:	4a14      	ldr	r2, [pc, #80]	; (8001194 <SSD1306_DrawPixel+0xbc>)
 8001144:	54d1      	strb	r1, [r2, r3]
 8001146:	e01d      	b.n	8001184 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001148:	88fa      	ldrh	r2, [r7, #6]
 800114a:	88bb      	ldrh	r3, [r7, #4]
 800114c:	08db      	lsrs	r3, r3, #3
 800114e:	b298      	uxth	r0, r3
 8001150:	4603      	mov	r3, r0
 8001152:	01db      	lsls	r3, r3, #7
 8001154:	4413      	add	r3, r2
 8001156:	4a0f      	ldr	r2, [pc, #60]	; (8001194 <SSD1306_DrawPixel+0xbc>)
 8001158:	5cd3      	ldrb	r3, [r2, r3]
 800115a:	b25a      	sxtb	r2, r3
 800115c:	88bb      	ldrh	r3, [r7, #4]
 800115e:	f003 0307 	and.w	r3, r3, #7
 8001162:	2101      	movs	r1, #1
 8001164:	fa01 f303 	lsl.w	r3, r1, r3
 8001168:	b25b      	sxtb	r3, r3
 800116a:	43db      	mvns	r3, r3
 800116c:	b25b      	sxtb	r3, r3
 800116e:	4013      	ands	r3, r2
 8001170:	b259      	sxtb	r1, r3
 8001172:	88fa      	ldrh	r2, [r7, #6]
 8001174:	4603      	mov	r3, r0
 8001176:	01db      	lsls	r3, r3, #7
 8001178:	4413      	add	r3, r2
 800117a:	b2c9      	uxtb	r1, r1
 800117c:	4a05      	ldr	r2, [pc, #20]	; (8001194 <SSD1306_DrawPixel+0xbc>)
 800117e:	54d1      	strb	r1, [r2, r3]
 8001180:	e000      	b.n	8001184 <SSD1306_DrawPixel+0xac>
		return;
 8001182:	bf00      	nop
	}
}
 8001184:	370c      	adds	r7, #12
 8001186:	46bd      	mov	sp, r7
 8001188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118c:	4770      	bx	lr
 800118e:	bf00      	nop
 8001190:	20000790 	.word	0x20000790
 8001194:	20000390 	.word	0x20000390

08001198 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8001198:	b480      	push	{r7}
 800119a:	b083      	sub	sp, #12
 800119c:	af00      	add	r7, sp, #0
 800119e:	4603      	mov	r3, r0
 80011a0:	460a      	mov	r2, r1
 80011a2:	80fb      	strh	r3, [r7, #6]
 80011a4:	4613      	mov	r3, r2
 80011a6:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 80011a8:	4a05      	ldr	r2, [pc, #20]	; (80011c0 <SSD1306_GotoXY+0x28>)
 80011aa:	88fb      	ldrh	r3, [r7, #6]
 80011ac:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 80011ae:	4a04      	ldr	r2, [pc, #16]	; (80011c0 <SSD1306_GotoXY+0x28>)
 80011b0:	88bb      	ldrh	r3, [r7, #4]
 80011b2:	8053      	strh	r3, [r2, #2]
}
 80011b4:	bf00      	nop
 80011b6:	370c      	adds	r7, #12
 80011b8:	46bd      	mov	sp, r7
 80011ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011be:	4770      	bx	lr
 80011c0:	20000790 	.word	0x20000790

080011c4 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b086      	sub	sp, #24
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	4603      	mov	r3, r0
 80011cc:	6039      	str	r1, [r7, #0]
 80011ce:	71fb      	strb	r3, [r7, #7]
 80011d0:	4613      	mov	r3, r2
 80011d2:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;

	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80011d4:	4b3a      	ldr	r3, [pc, #232]	; (80012c0 <SSD1306_Putc+0xfc>)
 80011d6:	881b      	ldrh	r3, [r3, #0]
 80011d8:	461a      	mov	r2, r3
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	781b      	ldrb	r3, [r3, #0]
 80011de:	4413      	add	r3, r2
	if (
 80011e0:	2b7f      	cmp	r3, #127	; 0x7f
 80011e2:	dc07      	bgt.n	80011f4 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 80011e4:	4b36      	ldr	r3, [pc, #216]	; (80012c0 <SSD1306_Putc+0xfc>)
 80011e6:	885b      	ldrh	r3, [r3, #2]
 80011e8:	461a      	mov	r2, r3
 80011ea:	683b      	ldr	r3, [r7, #0]
 80011ec:	785b      	ldrb	r3, [r3, #1]
 80011ee:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80011f0:	2b3f      	cmp	r3, #63	; 0x3f
 80011f2:	dd01      	ble.n	80011f8 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 80011f4:	2300      	movs	r3, #0
 80011f6:	e05e      	b.n	80012b6 <SSD1306_Putc+0xf2>
	}

	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 80011f8:	2300      	movs	r3, #0
 80011fa:	617b      	str	r3, [r7, #20]
 80011fc:	e04b      	b.n	8001296 <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 80011fe:	683b      	ldr	r3, [r7, #0]
 8001200:	685a      	ldr	r2, [r3, #4]
 8001202:	79fb      	ldrb	r3, [r7, #7]
 8001204:	3b20      	subs	r3, #32
 8001206:	6839      	ldr	r1, [r7, #0]
 8001208:	7849      	ldrb	r1, [r1, #1]
 800120a:	fb01 f303 	mul.w	r3, r1, r3
 800120e:	4619      	mov	r1, r3
 8001210:	697b      	ldr	r3, [r7, #20]
 8001212:	440b      	add	r3, r1
 8001214:	005b      	lsls	r3, r3, #1
 8001216:	4413      	add	r3, r2
 8001218:	881b      	ldrh	r3, [r3, #0]
 800121a:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 800121c:	2300      	movs	r3, #0
 800121e:	613b      	str	r3, [r7, #16]
 8001220:	e030      	b.n	8001284 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 8001222:	68fa      	ldr	r2, [r7, #12]
 8001224:	693b      	ldr	r3, [r7, #16]
 8001226:	fa02 f303 	lsl.w	r3, r2, r3
 800122a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800122e:	2b00      	cmp	r3, #0
 8001230:	d010      	beq.n	8001254 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8001232:	4b23      	ldr	r3, [pc, #140]	; (80012c0 <SSD1306_Putc+0xfc>)
 8001234:	881a      	ldrh	r2, [r3, #0]
 8001236:	693b      	ldr	r3, [r7, #16]
 8001238:	b29b      	uxth	r3, r3
 800123a:	4413      	add	r3, r2
 800123c:	b298      	uxth	r0, r3
 800123e:	4b20      	ldr	r3, [pc, #128]	; (80012c0 <SSD1306_Putc+0xfc>)
 8001240:	885a      	ldrh	r2, [r3, #2]
 8001242:	697b      	ldr	r3, [r7, #20]
 8001244:	b29b      	uxth	r3, r3
 8001246:	4413      	add	r3, r2
 8001248:	b29b      	uxth	r3, r3
 800124a:	79ba      	ldrb	r2, [r7, #6]
 800124c:	4619      	mov	r1, r3
 800124e:	f7ff ff43 	bl	80010d8 <SSD1306_DrawPixel>
 8001252:	e014      	b.n	800127e <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8001254:	4b1a      	ldr	r3, [pc, #104]	; (80012c0 <SSD1306_Putc+0xfc>)
 8001256:	881a      	ldrh	r2, [r3, #0]
 8001258:	693b      	ldr	r3, [r7, #16]
 800125a:	b29b      	uxth	r3, r3
 800125c:	4413      	add	r3, r2
 800125e:	b298      	uxth	r0, r3
 8001260:	4b17      	ldr	r3, [pc, #92]	; (80012c0 <SSD1306_Putc+0xfc>)
 8001262:	885a      	ldrh	r2, [r3, #2]
 8001264:	697b      	ldr	r3, [r7, #20]
 8001266:	b29b      	uxth	r3, r3
 8001268:	4413      	add	r3, r2
 800126a:	b299      	uxth	r1, r3
 800126c:	79bb      	ldrb	r3, [r7, #6]
 800126e:	2b00      	cmp	r3, #0
 8001270:	bf0c      	ite	eq
 8001272:	2301      	moveq	r3, #1
 8001274:	2300      	movne	r3, #0
 8001276:	b2db      	uxtb	r3, r3
 8001278:	461a      	mov	r2, r3
 800127a:	f7ff ff2d 	bl	80010d8 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 800127e:	693b      	ldr	r3, [r7, #16]
 8001280:	3301      	adds	r3, #1
 8001282:	613b      	str	r3, [r7, #16]
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	781b      	ldrb	r3, [r3, #0]
 8001288:	461a      	mov	r2, r3
 800128a:	693b      	ldr	r3, [r7, #16]
 800128c:	4293      	cmp	r3, r2
 800128e:	d3c8      	bcc.n	8001222 <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8001290:	697b      	ldr	r3, [r7, #20]
 8001292:	3301      	adds	r3, #1
 8001294:	617b      	str	r3, [r7, #20]
 8001296:	683b      	ldr	r3, [r7, #0]
 8001298:	785b      	ldrb	r3, [r3, #1]
 800129a:	461a      	mov	r2, r3
 800129c:	697b      	ldr	r3, [r7, #20]
 800129e:	4293      	cmp	r3, r2
 80012a0:	d3ad      	bcc.n	80011fe <SSD1306_Putc+0x3a>
			}
		}
	}

	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 80012a2:	4b07      	ldr	r3, [pc, #28]	; (80012c0 <SSD1306_Putc+0xfc>)
 80012a4:	881a      	ldrh	r2, [r3, #0]
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	781b      	ldrb	r3, [r3, #0]
 80012aa:	b29b      	uxth	r3, r3
 80012ac:	4413      	add	r3, r2
 80012ae:	b29a      	uxth	r2, r3
 80012b0:	4b03      	ldr	r3, [pc, #12]	; (80012c0 <SSD1306_Putc+0xfc>)
 80012b2:	801a      	strh	r2, [r3, #0]

	/* Return character written */
	return ch;
 80012b4:	79fb      	ldrb	r3, [r7, #7]
}
 80012b6:	4618      	mov	r0, r3
 80012b8:	3718      	adds	r7, #24
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	20000790 	.word	0x20000790

080012c4 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b084      	sub	sp, #16
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	60f8      	str	r0, [r7, #12]
 80012cc:	60b9      	str	r1, [r7, #8]
 80012ce:	4613      	mov	r3, r2
 80012d0:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 80012d2:	e012      	b.n	80012fa <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	781b      	ldrb	r3, [r3, #0]
 80012d8:	79fa      	ldrb	r2, [r7, #7]
 80012da:	68b9      	ldr	r1, [r7, #8]
 80012dc:	4618      	mov	r0, r3
 80012de:	f7ff ff71 	bl	80011c4 <SSD1306_Putc>
 80012e2:	4603      	mov	r3, r0
 80012e4:	461a      	mov	r2, r3
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	781b      	ldrb	r3, [r3, #0]
 80012ea:	429a      	cmp	r2, r3
 80012ec:	d002      	beq.n	80012f4 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	781b      	ldrb	r3, [r3, #0]
 80012f2:	e008      	b.n	8001306 <SSD1306_Puts+0x42>
		}

		/* Increase string pointer */
		str++;
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	3301      	adds	r3, #1
 80012f8:	60fb      	str	r3, [r7, #12]
	while (*str) {
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	781b      	ldrb	r3, [r3, #0]
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d1e8      	bne.n	80012d4 <SSD1306_Puts+0x10>
	}

	/* Everything OK, zero should be returned */
	return *str;
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	781b      	ldrb	r3, [r3, #0]
}
 8001306:	4618      	mov	r0, r3
 8001308:	3710      	adds	r7, #16
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}

0800130e <SSD1306_Clear>:
}



void SSD1306_Clear (void)
{
 800130e:	b580      	push	{r7, lr}
 8001310:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 8001312:	2000      	movs	r0, #0
 8001314:	f7ff fec8 	bl	80010a8 <SSD1306_Fill>
    SSD1306_UpdateScreen();
 8001318:	f7ff fe98 	bl	800104c <SSD1306_UpdateScreen>
}
 800131c:	bf00      	nop
 800131e:	bd80      	pop	{r7, pc}

08001320 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8001320:	b480      	push	{r7}
 8001322:	b083      	sub	sp, #12
 8001324:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8001326:	4b08      	ldr	r3, [pc, #32]	; (8001348 <ssd1306_I2C_Init+0x28>)
 8001328:	607b      	str	r3, [r7, #4]
	while(p>0)
 800132a:	e002      	b.n	8001332 <ssd1306_I2C_Init+0x12>
		p--;
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	3b01      	subs	r3, #1
 8001330:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	2b00      	cmp	r3, #0
 8001336:	d1f9      	bne.n	800132c <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8001338:	bf00      	nop
 800133a:	bf00      	nop
 800133c:	370c      	adds	r7, #12
 800133e:	46bd      	mov	sp, r7
 8001340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001344:	4770      	bx	lr
 8001346:	bf00      	nop
 8001348:	0003d090 	.word	0x0003d090

0800134c <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 800134c:	b590      	push	{r4, r7, lr}
 800134e:	b0c7      	sub	sp, #284	; 0x11c
 8001350:	af02      	add	r7, sp, #8
 8001352:	4604      	mov	r4, r0
 8001354:	4608      	mov	r0, r1
 8001356:	f507 7188 	add.w	r1, r7, #272	; 0x110
 800135a:	f5a1 7188 	sub.w	r1, r1, #272	; 0x110
 800135e:	600a      	str	r2, [r1, #0]
 8001360:	4619      	mov	r1, r3
 8001362:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001366:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 800136a:	4622      	mov	r2, r4
 800136c:	701a      	strb	r2, [r3, #0]
 800136e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001372:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 8001376:	4602      	mov	r2, r0
 8001378:	701a      	strb	r2, [r3, #0]
 800137a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800137e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001382:	460a      	mov	r2, r1
 8001384:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8001386:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800138a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800138e:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001392:	f5a2 7285 	sub.w	r2, r2, #266	; 0x10a
 8001396:	7812      	ldrb	r2, [r2, #0]
 8001398:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 800139a:	2300      	movs	r3, #0
 800139c:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 80013a0:	e015      	b.n	80013ce <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 80013a2:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80013a6:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80013aa:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 80013ae:	6812      	ldr	r2, [r2, #0]
 80013b0:	441a      	add	r2, r3
 80013b2:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80013b6:	3301      	adds	r3, #1
 80013b8:	7811      	ldrb	r1, [r2, #0]
 80013ba:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80013be:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 80013c2:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 80013c4:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80013c8:	3301      	adds	r3, #1
 80013ca:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 80013ce:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80013d2:	b29b      	uxth	r3, r3
 80013d4:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80013d8:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 80013dc:	8812      	ldrh	r2, [r2, #0]
 80013de:	429a      	cmp	r2, r3
 80013e0:	d8df      	bhi.n	80013a2 <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 80013e2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80013e6:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 80013ea:	781b      	ldrb	r3, [r3, #0]
 80013ec:	b299      	uxth	r1, r3
 80013ee:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80013f2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80013f6:	881b      	ldrh	r3, [r3, #0]
 80013f8:	3301      	adds	r3, #1
 80013fa:	b29b      	uxth	r3, r3
 80013fc:	f107 020c 	add.w	r2, r7, #12
 8001400:	200a      	movs	r0, #10
 8001402:	9000      	str	r0, [sp, #0]
 8001404:	4803      	ldr	r0, [pc, #12]	; (8001414 <ssd1306_I2C_WriteMulti+0xc8>)
 8001406:	f000 fec9 	bl	800219c <HAL_I2C_Master_Transmit>
}
 800140a:	bf00      	nop
 800140c:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8001410:	46bd      	mov	sp, r7
 8001412:	bd90      	pop	{r4, r7, pc}
 8001414:	200002e8 	.word	0x200002e8

08001418 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8001418:	b580      	push	{r7, lr}
 800141a:	b086      	sub	sp, #24
 800141c:	af02      	add	r7, sp, #8
 800141e:	4603      	mov	r3, r0
 8001420:	71fb      	strb	r3, [r7, #7]
 8001422:	460b      	mov	r3, r1
 8001424:	71bb      	strb	r3, [r7, #6]
 8001426:	4613      	mov	r3, r2
 8001428:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 800142a:	79bb      	ldrb	r3, [r7, #6]
 800142c:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 800142e:	797b      	ldrb	r3, [r7, #5]
 8001430:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8001432:	79fb      	ldrb	r3, [r7, #7]
 8001434:	b299      	uxth	r1, r3
 8001436:	f107 020c 	add.w	r2, r7, #12
 800143a:	230a      	movs	r3, #10
 800143c:	9300      	str	r3, [sp, #0]
 800143e:	2302      	movs	r3, #2
 8001440:	4803      	ldr	r0, [pc, #12]	; (8001450 <ssd1306_I2C_Write+0x38>)
 8001442:	f000 feab 	bl	800219c <HAL_I2C_Master_Transmit>
}
 8001446:	bf00      	nop
 8001448:	3710      	adds	r7, #16
 800144a:	46bd      	mov	sp, r7
 800144c:	bd80      	pop	{r7, pc}
 800144e:	bf00      	nop
 8001450:	200002e8 	.word	0x200002e8

08001454 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b082      	sub	sp, #8
 8001458:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800145a:	2300      	movs	r3, #0
 800145c:	607b      	str	r3, [r7, #4]
 800145e:	4b12      	ldr	r3, [pc, #72]	; (80014a8 <HAL_MspInit+0x54>)
 8001460:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001462:	4a11      	ldr	r2, [pc, #68]	; (80014a8 <HAL_MspInit+0x54>)
 8001464:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001468:	6453      	str	r3, [r2, #68]	; 0x44
 800146a:	4b0f      	ldr	r3, [pc, #60]	; (80014a8 <HAL_MspInit+0x54>)
 800146c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800146e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001472:	607b      	str	r3, [r7, #4]
 8001474:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001476:	2300      	movs	r3, #0
 8001478:	603b      	str	r3, [r7, #0]
 800147a:	4b0b      	ldr	r3, [pc, #44]	; (80014a8 <HAL_MspInit+0x54>)
 800147c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800147e:	4a0a      	ldr	r2, [pc, #40]	; (80014a8 <HAL_MspInit+0x54>)
 8001480:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001484:	6413      	str	r3, [r2, #64]	; 0x40
 8001486:	4b08      	ldr	r3, [pc, #32]	; (80014a8 <HAL_MspInit+0x54>)
 8001488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800148a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800148e:	603b      	str	r3, [r7, #0]
 8001490:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001492:	2200      	movs	r2, #0
 8001494:	210f      	movs	r1, #15
 8001496:	f06f 0001 	mvn.w	r0, #1
 800149a:	f000 fb31 	bl	8001b00 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800149e:	bf00      	nop
 80014a0:	3708      	adds	r7, #8
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}
 80014a6:	bf00      	nop
 80014a8:	40023800 	.word	0x40023800

080014ac <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b08a      	sub	sp, #40	; 0x28
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014b4:	f107 0314 	add.w	r3, r7, #20
 80014b8:	2200      	movs	r2, #0
 80014ba:	601a      	str	r2, [r3, #0]
 80014bc:	605a      	str	r2, [r3, #4]
 80014be:	609a      	str	r2, [r3, #8]
 80014c0:	60da      	str	r2, [r3, #12]
 80014c2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	4a19      	ldr	r2, [pc, #100]	; (8001530 <HAL_I2C_MspInit+0x84>)
 80014ca:	4293      	cmp	r3, r2
 80014cc:	d12c      	bne.n	8001528 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014ce:	2300      	movs	r3, #0
 80014d0:	613b      	str	r3, [r7, #16]
 80014d2:	4b18      	ldr	r3, [pc, #96]	; (8001534 <HAL_I2C_MspInit+0x88>)
 80014d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014d6:	4a17      	ldr	r2, [pc, #92]	; (8001534 <HAL_I2C_MspInit+0x88>)
 80014d8:	f043 0302 	orr.w	r3, r3, #2
 80014dc:	6313      	str	r3, [r2, #48]	; 0x30
 80014de:	4b15      	ldr	r3, [pc, #84]	; (8001534 <HAL_I2C_MspInit+0x88>)
 80014e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e2:	f003 0302 	and.w	r3, r3, #2
 80014e6:	613b      	str	r3, [r7, #16]
 80014e8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 80014ea:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80014ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014f0:	2312      	movs	r3, #18
 80014f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f4:	2300      	movs	r3, #0
 80014f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014f8:	2303      	movs	r3, #3
 80014fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80014fc:	2304      	movs	r3, #4
 80014fe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001500:	f107 0314 	add.w	r3, r7, #20
 8001504:	4619      	mov	r1, r3
 8001506:	480c      	ldr	r0, [pc, #48]	; (8001538 <HAL_I2C_MspInit+0x8c>)
 8001508:	f000 fb24 	bl	8001b54 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800150c:	2300      	movs	r3, #0
 800150e:	60fb      	str	r3, [r7, #12]
 8001510:	4b08      	ldr	r3, [pc, #32]	; (8001534 <HAL_I2C_MspInit+0x88>)
 8001512:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001514:	4a07      	ldr	r2, [pc, #28]	; (8001534 <HAL_I2C_MspInit+0x88>)
 8001516:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800151a:	6413      	str	r3, [r2, #64]	; 0x40
 800151c:	4b05      	ldr	r3, [pc, #20]	; (8001534 <HAL_I2C_MspInit+0x88>)
 800151e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001520:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001524:	60fb      	str	r3, [r7, #12]
 8001526:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001528:	bf00      	nop
 800152a:	3728      	adds	r7, #40	; 0x28
 800152c:	46bd      	mov	sp, r7
 800152e:	bd80      	pop	{r7, pc}
 8001530:	40005400 	.word	0x40005400
 8001534:	40023800 	.word	0x40023800
 8001538:	40020400 	.word	0x40020400

0800153c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b08a      	sub	sp, #40	; 0x28
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001544:	f107 0314 	add.w	r3, r7, #20
 8001548:	2200      	movs	r2, #0
 800154a:	601a      	str	r2, [r3, #0]
 800154c:	605a      	str	r2, [r3, #4]
 800154e:	609a      	str	r2, [r3, #8]
 8001550:	60da      	str	r2, [r3, #12]
 8001552:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	4a19      	ldr	r2, [pc, #100]	; (80015c0 <HAL_UART_MspInit+0x84>)
 800155a:	4293      	cmp	r3, r2
 800155c:	d12b      	bne.n	80015b6 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800155e:	2300      	movs	r3, #0
 8001560:	613b      	str	r3, [r7, #16]
 8001562:	4b18      	ldr	r3, [pc, #96]	; (80015c4 <HAL_UART_MspInit+0x88>)
 8001564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001566:	4a17      	ldr	r2, [pc, #92]	; (80015c4 <HAL_UART_MspInit+0x88>)
 8001568:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800156c:	6413      	str	r3, [r2, #64]	; 0x40
 800156e:	4b15      	ldr	r3, [pc, #84]	; (80015c4 <HAL_UART_MspInit+0x88>)
 8001570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001572:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001576:	613b      	str	r3, [r7, #16]
 8001578:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800157a:	2300      	movs	r3, #0
 800157c:	60fb      	str	r3, [r7, #12]
 800157e:	4b11      	ldr	r3, [pc, #68]	; (80015c4 <HAL_UART_MspInit+0x88>)
 8001580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001582:	4a10      	ldr	r2, [pc, #64]	; (80015c4 <HAL_UART_MspInit+0x88>)
 8001584:	f043 0301 	orr.w	r3, r3, #1
 8001588:	6313      	str	r3, [r2, #48]	; 0x30
 800158a:	4b0e      	ldr	r3, [pc, #56]	; (80015c4 <HAL_UART_MspInit+0x88>)
 800158c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800158e:	f003 0301 	and.w	r3, r3, #1
 8001592:	60fb      	str	r3, [r7, #12]
 8001594:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001596:	230c      	movs	r3, #12
 8001598:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800159a:	2302      	movs	r3, #2
 800159c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800159e:	2300      	movs	r3, #0
 80015a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015a2:	2303      	movs	r3, #3
 80015a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80015a6:	2307      	movs	r3, #7
 80015a8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015aa:	f107 0314 	add.w	r3, r7, #20
 80015ae:	4619      	mov	r1, r3
 80015b0:	4805      	ldr	r0, [pc, #20]	; (80015c8 <HAL_UART_MspInit+0x8c>)
 80015b2:	f000 facf 	bl	8001b54 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80015b6:	bf00      	nop
 80015b8:	3728      	adds	r7, #40	; 0x28
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}
 80015be:	bf00      	nop
 80015c0:	40004400 	.word	0x40004400
 80015c4:	40023800 	.word	0x40023800
 80015c8:	40020000 	.word	0x40020000

080015cc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b08e      	sub	sp, #56	; 0x38
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80015d4:	2300      	movs	r3, #0
 80015d6:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80015d8:	2300      	movs	r3, #0
 80015da:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80015dc:	2300      	movs	r3, #0
 80015de:	60fb      	str	r3, [r7, #12]
 80015e0:	4b33      	ldr	r3, [pc, #204]	; (80016b0 <HAL_InitTick+0xe4>)
 80015e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015e4:	4a32      	ldr	r2, [pc, #200]	; (80016b0 <HAL_InitTick+0xe4>)
 80015e6:	f043 0310 	orr.w	r3, r3, #16
 80015ea:	6413      	str	r3, [r2, #64]	; 0x40
 80015ec:	4b30      	ldr	r3, [pc, #192]	; (80016b0 <HAL_InitTick+0xe4>)
 80015ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015f0:	f003 0310 	and.w	r3, r3, #16
 80015f4:	60fb      	str	r3, [r7, #12]
 80015f6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80015f8:	f107 0210 	add.w	r2, r7, #16
 80015fc:	f107 0314 	add.w	r3, r7, #20
 8001600:	4611      	mov	r1, r2
 8001602:	4618      	mov	r0, r3
 8001604:	f001 fb6c 	bl	8002ce0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001608:	6a3b      	ldr	r3, [r7, #32]
 800160a:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800160c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800160e:	2b00      	cmp	r3, #0
 8001610:	d103      	bne.n	800161a <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001612:	f001 fb3d 	bl	8002c90 <HAL_RCC_GetPCLK1Freq>
 8001616:	6378      	str	r0, [r7, #52]	; 0x34
 8001618:	e004      	b.n	8001624 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800161a:	f001 fb39 	bl	8002c90 <HAL_RCC_GetPCLK1Freq>
 800161e:	4603      	mov	r3, r0
 8001620:	005b      	lsls	r3, r3, #1
 8001622:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001624:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001626:	4a23      	ldr	r2, [pc, #140]	; (80016b4 <HAL_InitTick+0xe8>)
 8001628:	fba2 2303 	umull	r2, r3, r2, r3
 800162c:	0c9b      	lsrs	r3, r3, #18
 800162e:	3b01      	subs	r3, #1
 8001630:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001632:	4b21      	ldr	r3, [pc, #132]	; (80016b8 <HAL_InitTick+0xec>)
 8001634:	4a21      	ldr	r2, [pc, #132]	; (80016bc <HAL_InitTick+0xf0>)
 8001636:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001638:	4b1f      	ldr	r3, [pc, #124]	; (80016b8 <HAL_InitTick+0xec>)
 800163a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800163e:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001640:	4a1d      	ldr	r2, [pc, #116]	; (80016b8 <HAL_InitTick+0xec>)
 8001642:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001644:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001646:	4b1c      	ldr	r3, [pc, #112]	; (80016b8 <HAL_InitTick+0xec>)
 8001648:	2200      	movs	r2, #0
 800164a:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800164c:	4b1a      	ldr	r3, [pc, #104]	; (80016b8 <HAL_InitTick+0xec>)
 800164e:	2200      	movs	r2, #0
 8001650:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001652:	4b19      	ldr	r3, [pc, #100]	; (80016b8 <HAL_InitTick+0xec>)
 8001654:	2200      	movs	r2, #0
 8001656:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001658:	4817      	ldr	r0, [pc, #92]	; (80016b8 <HAL_InitTick+0xec>)
 800165a:	f002 f841 	bl	80036e0 <HAL_TIM_Base_Init>
 800165e:	4603      	mov	r3, r0
 8001660:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001664:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001668:	2b00      	cmp	r3, #0
 800166a:	d11b      	bne.n	80016a4 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 800166c:	4812      	ldr	r0, [pc, #72]	; (80016b8 <HAL_InitTick+0xec>)
 800166e:	f002 f891 	bl	8003794 <HAL_TIM_Base_Start_IT>
 8001672:	4603      	mov	r3, r0
 8001674:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8001678:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800167c:	2b00      	cmp	r3, #0
 800167e:	d111      	bne.n	80016a4 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001680:	2036      	movs	r0, #54	; 0x36
 8001682:	f000 fa59 	bl	8001b38 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	2b0f      	cmp	r3, #15
 800168a:	d808      	bhi.n	800169e <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 800168c:	2200      	movs	r2, #0
 800168e:	6879      	ldr	r1, [r7, #4]
 8001690:	2036      	movs	r0, #54	; 0x36
 8001692:	f000 fa35 	bl	8001b00 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001696:	4a0a      	ldr	r2, [pc, #40]	; (80016c0 <HAL_InitTick+0xf4>)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	6013      	str	r3, [r2, #0]
 800169c:	e002      	b.n	80016a4 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 800169e:	2301      	movs	r3, #1
 80016a0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80016a4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80016a8:	4618      	mov	r0, r3
 80016aa:	3738      	adds	r7, #56	; 0x38
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bd80      	pop	{r7, pc}
 80016b0:	40023800 	.word	0x40023800
 80016b4:	431bde83 	.word	0x431bde83
 80016b8:	20000798 	.word	0x20000798
 80016bc:	40001000 	.word	0x40001000
 80016c0:	2000000c 	.word	0x2000000c

080016c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016c4:	b480      	push	{r7}
 80016c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80016c8:	e7fe      	b.n	80016c8 <NMI_Handler+0x4>

080016ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016ca:	b480      	push	{r7}
 80016cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016ce:	e7fe      	b.n	80016ce <HardFault_Handler+0x4>

080016d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016d0:	b480      	push	{r7}
 80016d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016d4:	e7fe      	b.n	80016d4 <MemManage_Handler+0x4>

080016d6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016d6:	b480      	push	{r7}
 80016d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016da:	e7fe      	b.n	80016da <BusFault_Handler+0x4>

080016dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016dc:	b480      	push	{r7}
 80016de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016e0:	e7fe      	b.n	80016e0 <UsageFault_Handler+0x4>

080016e2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016e2:	b480      	push	{r7}
 80016e4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016e6:	bf00      	nop
 80016e8:	46bd      	mov	sp, r7
 80016ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ee:	4770      	bx	lr

080016f0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80016f4:	4802      	ldr	r0, [pc, #8]	; (8001700 <TIM6_DAC_IRQHandler+0x10>)
 80016f6:	f002 f8bd 	bl	8003874 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80016fa:	bf00      	nop
 80016fc:	bd80      	pop	{r7, pc}
 80016fe:	bf00      	nop
 8001700:	20000798 	.word	0x20000798

08001704 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b086      	sub	sp, #24
 8001708:	af00      	add	r7, sp, #0
 800170a:	60f8      	str	r0, [r7, #12]
 800170c:	60b9      	str	r1, [r7, #8]
 800170e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001710:	2300      	movs	r3, #0
 8001712:	617b      	str	r3, [r7, #20]
 8001714:	e00a      	b.n	800172c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001716:	f3af 8000 	nop.w
 800171a:	4601      	mov	r1, r0
 800171c:	68bb      	ldr	r3, [r7, #8]
 800171e:	1c5a      	adds	r2, r3, #1
 8001720:	60ba      	str	r2, [r7, #8]
 8001722:	b2ca      	uxtb	r2, r1
 8001724:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001726:	697b      	ldr	r3, [r7, #20]
 8001728:	3301      	adds	r3, #1
 800172a:	617b      	str	r3, [r7, #20]
 800172c:	697a      	ldr	r2, [r7, #20]
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	429a      	cmp	r2, r3
 8001732:	dbf0      	blt.n	8001716 <_read+0x12>
  }

  return len;
 8001734:	687b      	ldr	r3, [r7, #4]
}
 8001736:	4618      	mov	r0, r3
 8001738:	3718      	adds	r7, #24
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}

0800173e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800173e:	b580      	push	{r7, lr}
 8001740:	b086      	sub	sp, #24
 8001742:	af00      	add	r7, sp, #0
 8001744:	60f8      	str	r0, [r7, #12]
 8001746:	60b9      	str	r1, [r7, #8]
 8001748:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800174a:	2300      	movs	r3, #0
 800174c:	617b      	str	r3, [r7, #20]
 800174e:	e009      	b.n	8001764 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001750:	68bb      	ldr	r3, [r7, #8]
 8001752:	1c5a      	adds	r2, r3, #1
 8001754:	60ba      	str	r2, [r7, #8]
 8001756:	781b      	ldrb	r3, [r3, #0]
 8001758:	4618      	mov	r0, r3
 800175a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800175e:	697b      	ldr	r3, [r7, #20]
 8001760:	3301      	adds	r3, #1
 8001762:	617b      	str	r3, [r7, #20]
 8001764:	697a      	ldr	r2, [r7, #20]
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	429a      	cmp	r2, r3
 800176a:	dbf1      	blt.n	8001750 <_write+0x12>
  }
  return len;
 800176c:	687b      	ldr	r3, [r7, #4]
}
 800176e:	4618      	mov	r0, r3
 8001770:	3718      	adds	r7, #24
 8001772:	46bd      	mov	sp, r7
 8001774:	bd80      	pop	{r7, pc}

08001776 <_close>:

int _close(int file)
{
 8001776:	b480      	push	{r7}
 8001778:	b083      	sub	sp, #12
 800177a:	af00      	add	r7, sp, #0
 800177c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800177e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001782:	4618      	mov	r0, r3
 8001784:	370c      	adds	r7, #12
 8001786:	46bd      	mov	sp, r7
 8001788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178c:	4770      	bx	lr

0800178e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800178e:	b480      	push	{r7}
 8001790:	b083      	sub	sp, #12
 8001792:	af00      	add	r7, sp, #0
 8001794:	6078      	str	r0, [r7, #4]
 8001796:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800179e:	605a      	str	r2, [r3, #4]
  return 0;
 80017a0:	2300      	movs	r3, #0
}
 80017a2:	4618      	mov	r0, r3
 80017a4:	370c      	adds	r7, #12
 80017a6:	46bd      	mov	sp, r7
 80017a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ac:	4770      	bx	lr

080017ae <_isatty>:

int _isatty(int file)
{
 80017ae:	b480      	push	{r7}
 80017b0:	b083      	sub	sp, #12
 80017b2:	af00      	add	r7, sp, #0
 80017b4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80017b6:	2301      	movs	r3, #1
}
 80017b8:	4618      	mov	r0, r3
 80017ba:	370c      	adds	r7, #12
 80017bc:	46bd      	mov	sp, r7
 80017be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c2:	4770      	bx	lr

080017c4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80017c4:	b480      	push	{r7}
 80017c6:	b085      	sub	sp, #20
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	60f8      	str	r0, [r7, #12]
 80017cc:	60b9      	str	r1, [r7, #8]
 80017ce:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80017d0:	2300      	movs	r3, #0
}
 80017d2:	4618      	mov	r0, r3
 80017d4:	3714      	adds	r7, #20
 80017d6:	46bd      	mov	sp, r7
 80017d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017dc:	4770      	bx	lr
	...

080017e0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b086      	sub	sp, #24
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80017e8:	4a14      	ldr	r2, [pc, #80]	; (800183c <_sbrk+0x5c>)
 80017ea:	4b15      	ldr	r3, [pc, #84]	; (8001840 <_sbrk+0x60>)
 80017ec:	1ad3      	subs	r3, r2, r3
 80017ee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80017f0:	697b      	ldr	r3, [r7, #20]
 80017f2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80017f4:	4b13      	ldr	r3, [pc, #76]	; (8001844 <_sbrk+0x64>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d102      	bne.n	8001802 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80017fc:	4b11      	ldr	r3, [pc, #68]	; (8001844 <_sbrk+0x64>)
 80017fe:	4a12      	ldr	r2, [pc, #72]	; (8001848 <_sbrk+0x68>)
 8001800:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001802:	4b10      	ldr	r3, [pc, #64]	; (8001844 <_sbrk+0x64>)
 8001804:	681a      	ldr	r2, [r3, #0]
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	4413      	add	r3, r2
 800180a:	693a      	ldr	r2, [r7, #16]
 800180c:	429a      	cmp	r2, r3
 800180e:	d207      	bcs.n	8001820 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001810:	f004 fe54 	bl	80064bc <__errno>
 8001814:	4603      	mov	r3, r0
 8001816:	220c      	movs	r2, #12
 8001818:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800181a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800181e:	e009      	b.n	8001834 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001820:	4b08      	ldr	r3, [pc, #32]	; (8001844 <_sbrk+0x64>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001826:	4b07      	ldr	r3, [pc, #28]	; (8001844 <_sbrk+0x64>)
 8001828:	681a      	ldr	r2, [r3, #0]
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	4413      	add	r3, r2
 800182e:	4a05      	ldr	r2, [pc, #20]	; (8001844 <_sbrk+0x64>)
 8001830:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001832:	68fb      	ldr	r3, [r7, #12]
}
 8001834:	4618      	mov	r0, r3
 8001836:	3718      	adds	r7, #24
 8001838:	46bd      	mov	sp, r7
 800183a:	bd80      	pop	{r7, pc}
 800183c:	20020000 	.word	0x20020000
 8001840:	00000400 	.word	0x00000400
 8001844:	200007e0 	.word	0x200007e0
 8001848:	20004688 	.word	0x20004688

0800184c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800184c:	b480      	push	{r7}
 800184e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001850:	4b06      	ldr	r3, [pc, #24]	; (800186c <SystemInit+0x20>)
 8001852:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001856:	4a05      	ldr	r2, [pc, #20]	; (800186c <SystemInit+0x20>)
 8001858:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800185c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001860:	bf00      	nop
 8001862:	46bd      	mov	sp, r7
 8001864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001868:	4770      	bx	lr
 800186a:	bf00      	nop
 800186c:	e000ed00 	.word	0xe000ed00

08001870 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001870:	f8df d034 	ldr.w	sp, [pc, #52]	; 80018a8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001874:	f7ff ffea 	bl	800184c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001878:	480c      	ldr	r0, [pc, #48]	; (80018ac <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800187a:	490d      	ldr	r1, [pc, #52]	; (80018b0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800187c:	4a0d      	ldr	r2, [pc, #52]	; (80018b4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800187e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001880:	e002      	b.n	8001888 <LoopCopyDataInit>

08001882 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001882:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001884:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001886:	3304      	adds	r3, #4

08001888 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001888:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800188a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800188c:	d3f9      	bcc.n	8001882 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800188e:	4a0a      	ldr	r2, [pc, #40]	; (80018b8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001890:	4c0a      	ldr	r4, [pc, #40]	; (80018bc <LoopFillZerobss+0x22>)
  movs r3, #0
 8001892:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001894:	e001      	b.n	800189a <LoopFillZerobss>

08001896 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001896:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001898:	3204      	adds	r2, #4

0800189a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800189a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800189c:	d3fb      	bcc.n	8001896 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800189e:	f004 fe13 	bl	80064c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80018a2:	f7ff f801 	bl	80008a8 <main>
  bx  lr    
 80018a6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80018a8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80018ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018b0:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80018b4:	08007a74 	.word	0x08007a74
  ldr r2, =_sbss
 80018b8:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 80018bc:	20004688 	.word	0x20004688

080018c0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80018c0:	e7fe      	b.n	80018c0 <ADC_IRQHandler>
	...

080018c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80018c8:	4b0e      	ldr	r3, [pc, #56]	; (8001904 <HAL_Init+0x40>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	4a0d      	ldr	r2, [pc, #52]	; (8001904 <HAL_Init+0x40>)
 80018ce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80018d2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80018d4:	4b0b      	ldr	r3, [pc, #44]	; (8001904 <HAL_Init+0x40>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	4a0a      	ldr	r2, [pc, #40]	; (8001904 <HAL_Init+0x40>)
 80018da:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80018de:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80018e0:	4b08      	ldr	r3, [pc, #32]	; (8001904 <HAL_Init+0x40>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	4a07      	ldr	r2, [pc, #28]	; (8001904 <HAL_Init+0x40>)
 80018e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018ea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018ec:	2003      	movs	r0, #3
 80018ee:	f000 f8fc 	bl	8001aea <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80018f2:	2000      	movs	r0, #0
 80018f4:	f7ff fe6a 	bl	80015cc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80018f8:	f7ff fdac 	bl	8001454 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80018fc:	2300      	movs	r3, #0
}
 80018fe:	4618      	mov	r0, r3
 8001900:	bd80      	pop	{r7, pc}
 8001902:	bf00      	nop
 8001904:	40023c00 	.word	0x40023c00

08001908 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001908:	b480      	push	{r7}
 800190a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800190c:	4b06      	ldr	r3, [pc, #24]	; (8001928 <HAL_IncTick+0x20>)
 800190e:	781b      	ldrb	r3, [r3, #0]
 8001910:	461a      	mov	r2, r3
 8001912:	4b06      	ldr	r3, [pc, #24]	; (800192c <HAL_IncTick+0x24>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	4413      	add	r3, r2
 8001918:	4a04      	ldr	r2, [pc, #16]	; (800192c <HAL_IncTick+0x24>)
 800191a:	6013      	str	r3, [r2, #0]
}
 800191c:	bf00      	nop
 800191e:	46bd      	mov	sp, r7
 8001920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001924:	4770      	bx	lr
 8001926:	bf00      	nop
 8001928:	20000010 	.word	0x20000010
 800192c:	200007e4 	.word	0x200007e4

08001930 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001930:	b480      	push	{r7}
 8001932:	af00      	add	r7, sp, #0
  return uwTick;
 8001934:	4b03      	ldr	r3, [pc, #12]	; (8001944 <HAL_GetTick+0x14>)
 8001936:	681b      	ldr	r3, [r3, #0]
}
 8001938:	4618      	mov	r0, r3
 800193a:	46bd      	mov	sp, r7
 800193c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001940:	4770      	bx	lr
 8001942:	bf00      	nop
 8001944:	200007e4 	.word	0x200007e4

08001948 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b084      	sub	sp, #16
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001950:	f7ff ffee 	bl	8001930 <HAL_GetTick>
 8001954:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001960:	d005      	beq.n	800196e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001962:	4b0a      	ldr	r3, [pc, #40]	; (800198c <HAL_Delay+0x44>)
 8001964:	781b      	ldrb	r3, [r3, #0]
 8001966:	461a      	mov	r2, r3
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	4413      	add	r3, r2
 800196c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800196e:	bf00      	nop
 8001970:	f7ff ffde 	bl	8001930 <HAL_GetTick>
 8001974:	4602      	mov	r2, r0
 8001976:	68bb      	ldr	r3, [r7, #8]
 8001978:	1ad3      	subs	r3, r2, r3
 800197a:	68fa      	ldr	r2, [r7, #12]
 800197c:	429a      	cmp	r2, r3
 800197e:	d8f7      	bhi.n	8001970 <HAL_Delay+0x28>
  {
  }
}
 8001980:	bf00      	nop
 8001982:	bf00      	nop
 8001984:	3710      	adds	r7, #16
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}
 800198a:	bf00      	nop
 800198c:	20000010 	.word	0x20000010

08001990 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001990:	b480      	push	{r7}
 8001992:	b085      	sub	sp, #20
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	f003 0307 	and.w	r3, r3, #7
 800199e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019a0:	4b0c      	ldr	r3, [pc, #48]	; (80019d4 <__NVIC_SetPriorityGrouping+0x44>)
 80019a2:	68db      	ldr	r3, [r3, #12]
 80019a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019a6:	68ba      	ldr	r2, [r7, #8]
 80019a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80019ac:	4013      	ands	r3, r2
 80019ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019b4:	68bb      	ldr	r3, [r7, #8]
 80019b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80019bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019c2:	4a04      	ldr	r2, [pc, #16]	; (80019d4 <__NVIC_SetPriorityGrouping+0x44>)
 80019c4:	68bb      	ldr	r3, [r7, #8]
 80019c6:	60d3      	str	r3, [r2, #12]
}
 80019c8:	bf00      	nop
 80019ca:	3714      	adds	r7, #20
 80019cc:	46bd      	mov	sp, r7
 80019ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d2:	4770      	bx	lr
 80019d4:	e000ed00 	.word	0xe000ed00

080019d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019d8:	b480      	push	{r7}
 80019da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019dc:	4b04      	ldr	r3, [pc, #16]	; (80019f0 <__NVIC_GetPriorityGrouping+0x18>)
 80019de:	68db      	ldr	r3, [r3, #12]
 80019e0:	0a1b      	lsrs	r3, r3, #8
 80019e2:	f003 0307 	and.w	r3, r3, #7
}
 80019e6:	4618      	mov	r0, r3
 80019e8:	46bd      	mov	sp, r7
 80019ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ee:	4770      	bx	lr
 80019f0:	e000ed00 	.word	0xe000ed00

080019f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019f4:	b480      	push	{r7}
 80019f6:	b083      	sub	sp, #12
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	4603      	mov	r3, r0
 80019fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	db0b      	blt.n	8001a1e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a06:	79fb      	ldrb	r3, [r7, #7]
 8001a08:	f003 021f 	and.w	r2, r3, #31
 8001a0c:	4907      	ldr	r1, [pc, #28]	; (8001a2c <__NVIC_EnableIRQ+0x38>)
 8001a0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a12:	095b      	lsrs	r3, r3, #5
 8001a14:	2001      	movs	r0, #1
 8001a16:	fa00 f202 	lsl.w	r2, r0, r2
 8001a1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001a1e:	bf00      	nop
 8001a20:	370c      	adds	r7, #12
 8001a22:	46bd      	mov	sp, r7
 8001a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a28:	4770      	bx	lr
 8001a2a:	bf00      	nop
 8001a2c:	e000e100 	.word	0xe000e100

08001a30 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a30:	b480      	push	{r7}
 8001a32:	b083      	sub	sp, #12
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	4603      	mov	r3, r0
 8001a38:	6039      	str	r1, [r7, #0]
 8001a3a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	db0a      	blt.n	8001a5a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	b2da      	uxtb	r2, r3
 8001a48:	490c      	ldr	r1, [pc, #48]	; (8001a7c <__NVIC_SetPriority+0x4c>)
 8001a4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a4e:	0112      	lsls	r2, r2, #4
 8001a50:	b2d2      	uxtb	r2, r2
 8001a52:	440b      	add	r3, r1
 8001a54:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a58:	e00a      	b.n	8001a70 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	b2da      	uxtb	r2, r3
 8001a5e:	4908      	ldr	r1, [pc, #32]	; (8001a80 <__NVIC_SetPriority+0x50>)
 8001a60:	79fb      	ldrb	r3, [r7, #7]
 8001a62:	f003 030f 	and.w	r3, r3, #15
 8001a66:	3b04      	subs	r3, #4
 8001a68:	0112      	lsls	r2, r2, #4
 8001a6a:	b2d2      	uxtb	r2, r2
 8001a6c:	440b      	add	r3, r1
 8001a6e:	761a      	strb	r2, [r3, #24]
}
 8001a70:	bf00      	nop
 8001a72:	370c      	adds	r7, #12
 8001a74:	46bd      	mov	sp, r7
 8001a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7a:	4770      	bx	lr
 8001a7c:	e000e100 	.word	0xe000e100
 8001a80:	e000ed00 	.word	0xe000ed00

08001a84 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a84:	b480      	push	{r7}
 8001a86:	b089      	sub	sp, #36	; 0x24
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	60f8      	str	r0, [r7, #12]
 8001a8c:	60b9      	str	r1, [r7, #8]
 8001a8e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	f003 0307 	and.w	r3, r3, #7
 8001a96:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a98:	69fb      	ldr	r3, [r7, #28]
 8001a9a:	f1c3 0307 	rsb	r3, r3, #7
 8001a9e:	2b04      	cmp	r3, #4
 8001aa0:	bf28      	it	cs
 8001aa2:	2304      	movcs	r3, #4
 8001aa4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001aa6:	69fb      	ldr	r3, [r7, #28]
 8001aa8:	3304      	adds	r3, #4
 8001aaa:	2b06      	cmp	r3, #6
 8001aac:	d902      	bls.n	8001ab4 <NVIC_EncodePriority+0x30>
 8001aae:	69fb      	ldr	r3, [r7, #28]
 8001ab0:	3b03      	subs	r3, #3
 8001ab2:	e000      	b.n	8001ab6 <NVIC_EncodePriority+0x32>
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ab8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001abc:	69bb      	ldr	r3, [r7, #24]
 8001abe:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac2:	43da      	mvns	r2, r3
 8001ac4:	68bb      	ldr	r3, [r7, #8]
 8001ac6:	401a      	ands	r2, r3
 8001ac8:	697b      	ldr	r3, [r7, #20]
 8001aca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001acc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001ad0:	697b      	ldr	r3, [r7, #20]
 8001ad2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ad6:	43d9      	mvns	r1, r3
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001adc:	4313      	orrs	r3, r2
         );
}
 8001ade:	4618      	mov	r0, r3
 8001ae0:	3724      	adds	r7, #36	; 0x24
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae8:	4770      	bx	lr

08001aea <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001aea:	b580      	push	{r7, lr}
 8001aec:	b082      	sub	sp, #8
 8001aee:	af00      	add	r7, sp, #0
 8001af0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001af2:	6878      	ldr	r0, [r7, #4]
 8001af4:	f7ff ff4c 	bl	8001990 <__NVIC_SetPriorityGrouping>
}
 8001af8:	bf00      	nop
 8001afa:	3708      	adds	r7, #8
 8001afc:	46bd      	mov	sp, r7
 8001afe:	bd80      	pop	{r7, pc}

08001b00 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b086      	sub	sp, #24
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	4603      	mov	r3, r0
 8001b08:	60b9      	str	r1, [r7, #8]
 8001b0a:	607a      	str	r2, [r7, #4]
 8001b0c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b12:	f7ff ff61 	bl	80019d8 <__NVIC_GetPriorityGrouping>
 8001b16:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b18:	687a      	ldr	r2, [r7, #4]
 8001b1a:	68b9      	ldr	r1, [r7, #8]
 8001b1c:	6978      	ldr	r0, [r7, #20]
 8001b1e:	f7ff ffb1 	bl	8001a84 <NVIC_EncodePriority>
 8001b22:	4602      	mov	r2, r0
 8001b24:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b28:	4611      	mov	r1, r2
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	f7ff ff80 	bl	8001a30 <__NVIC_SetPriority>
}
 8001b30:	bf00      	nop
 8001b32:	3718      	adds	r7, #24
 8001b34:	46bd      	mov	sp, r7
 8001b36:	bd80      	pop	{r7, pc}

08001b38 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b082      	sub	sp, #8
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	4603      	mov	r3, r0
 8001b40:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b46:	4618      	mov	r0, r3
 8001b48:	f7ff ff54 	bl	80019f4 <__NVIC_EnableIRQ>
}
 8001b4c:	bf00      	nop
 8001b4e:	3708      	adds	r7, #8
 8001b50:	46bd      	mov	sp, r7
 8001b52:	bd80      	pop	{r7, pc}

08001b54 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b54:	b480      	push	{r7}
 8001b56:	b089      	sub	sp, #36	; 0x24
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
 8001b5c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001b62:	2300      	movs	r3, #0
 8001b64:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001b66:	2300      	movs	r3, #0
 8001b68:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	61fb      	str	r3, [r7, #28]
 8001b6e:	e165      	b.n	8001e3c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001b70:	2201      	movs	r2, #1
 8001b72:	69fb      	ldr	r3, [r7, #28]
 8001b74:	fa02 f303 	lsl.w	r3, r2, r3
 8001b78:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	697a      	ldr	r2, [r7, #20]
 8001b80:	4013      	ands	r3, r2
 8001b82:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001b84:	693a      	ldr	r2, [r7, #16]
 8001b86:	697b      	ldr	r3, [r7, #20]
 8001b88:	429a      	cmp	r2, r3
 8001b8a:	f040 8154 	bne.w	8001e36 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	685b      	ldr	r3, [r3, #4]
 8001b92:	f003 0303 	and.w	r3, r3, #3
 8001b96:	2b01      	cmp	r3, #1
 8001b98:	d005      	beq.n	8001ba6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	685b      	ldr	r3, [r3, #4]
 8001b9e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ba2:	2b02      	cmp	r3, #2
 8001ba4:	d130      	bne.n	8001c08 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	689b      	ldr	r3, [r3, #8]
 8001baa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001bac:	69fb      	ldr	r3, [r7, #28]
 8001bae:	005b      	lsls	r3, r3, #1
 8001bb0:	2203      	movs	r2, #3
 8001bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb6:	43db      	mvns	r3, r3
 8001bb8:	69ba      	ldr	r2, [r7, #24]
 8001bba:	4013      	ands	r3, r2
 8001bbc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	68da      	ldr	r2, [r3, #12]
 8001bc2:	69fb      	ldr	r3, [r7, #28]
 8001bc4:	005b      	lsls	r3, r3, #1
 8001bc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bca:	69ba      	ldr	r2, [r7, #24]
 8001bcc:	4313      	orrs	r3, r2
 8001bce:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	69ba      	ldr	r2, [r7, #24]
 8001bd4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	685b      	ldr	r3, [r3, #4]
 8001bda:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001bdc:	2201      	movs	r2, #1
 8001bde:	69fb      	ldr	r3, [r7, #28]
 8001be0:	fa02 f303 	lsl.w	r3, r2, r3
 8001be4:	43db      	mvns	r3, r3
 8001be6:	69ba      	ldr	r2, [r7, #24]
 8001be8:	4013      	ands	r3, r2
 8001bea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	091b      	lsrs	r3, r3, #4
 8001bf2:	f003 0201 	and.w	r2, r3, #1
 8001bf6:	69fb      	ldr	r3, [r7, #28]
 8001bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bfc:	69ba      	ldr	r2, [r7, #24]
 8001bfe:	4313      	orrs	r3, r2
 8001c00:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	69ba      	ldr	r2, [r7, #24]
 8001c06:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	685b      	ldr	r3, [r3, #4]
 8001c0c:	f003 0303 	and.w	r3, r3, #3
 8001c10:	2b03      	cmp	r3, #3
 8001c12:	d017      	beq.n	8001c44 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	68db      	ldr	r3, [r3, #12]
 8001c18:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001c1a:	69fb      	ldr	r3, [r7, #28]
 8001c1c:	005b      	lsls	r3, r3, #1
 8001c1e:	2203      	movs	r2, #3
 8001c20:	fa02 f303 	lsl.w	r3, r2, r3
 8001c24:	43db      	mvns	r3, r3
 8001c26:	69ba      	ldr	r2, [r7, #24]
 8001c28:	4013      	ands	r3, r2
 8001c2a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	689a      	ldr	r2, [r3, #8]
 8001c30:	69fb      	ldr	r3, [r7, #28]
 8001c32:	005b      	lsls	r3, r3, #1
 8001c34:	fa02 f303 	lsl.w	r3, r2, r3
 8001c38:	69ba      	ldr	r2, [r7, #24]
 8001c3a:	4313      	orrs	r3, r2
 8001c3c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	69ba      	ldr	r2, [r7, #24]
 8001c42:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	685b      	ldr	r3, [r3, #4]
 8001c48:	f003 0303 	and.w	r3, r3, #3
 8001c4c:	2b02      	cmp	r3, #2
 8001c4e:	d123      	bne.n	8001c98 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001c50:	69fb      	ldr	r3, [r7, #28]
 8001c52:	08da      	lsrs	r2, r3, #3
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	3208      	adds	r2, #8
 8001c58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c5c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001c5e:	69fb      	ldr	r3, [r7, #28]
 8001c60:	f003 0307 	and.w	r3, r3, #7
 8001c64:	009b      	lsls	r3, r3, #2
 8001c66:	220f      	movs	r2, #15
 8001c68:	fa02 f303 	lsl.w	r3, r2, r3
 8001c6c:	43db      	mvns	r3, r3
 8001c6e:	69ba      	ldr	r2, [r7, #24]
 8001c70:	4013      	ands	r3, r2
 8001c72:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	691a      	ldr	r2, [r3, #16]
 8001c78:	69fb      	ldr	r3, [r7, #28]
 8001c7a:	f003 0307 	and.w	r3, r3, #7
 8001c7e:	009b      	lsls	r3, r3, #2
 8001c80:	fa02 f303 	lsl.w	r3, r2, r3
 8001c84:	69ba      	ldr	r2, [r7, #24]
 8001c86:	4313      	orrs	r3, r2
 8001c88:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001c8a:	69fb      	ldr	r3, [r7, #28]
 8001c8c:	08da      	lsrs	r2, r3, #3
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	3208      	adds	r2, #8
 8001c92:	69b9      	ldr	r1, [r7, #24]
 8001c94:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001c9e:	69fb      	ldr	r3, [r7, #28]
 8001ca0:	005b      	lsls	r3, r3, #1
 8001ca2:	2203      	movs	r2, #3
 8001ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca8:	43db      	mvns	r3, r3
 8001caa:	69ba      	ldr	r2, [r7, #24]
 8001cac:	4013      	ands	r3, r2
 8001cae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	685b      	ldr	r3, [r3, #4]
 8001cb4:	f003 0203 	and.w	r2, r3, #3
 8001cb8:	69fb      	ldr	r3, [r7, #28]
 8001cba:	005b      	lsls	r3, r3, #1
 8001cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc0:	69ba      	ldr	r2, [r7, #24]
 8001cc2:	4313      	orrs	r3, r2
 8001cc4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	69ba      	ldr	r2, [r7, #24]
 8001cca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	685b      	ldr	r3, [r3, #4]
 8001cd0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	f000 80ae 	beq.w	8001e36 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cda:	2300      	movs	r3, #0
 8001cdc:	60fb      	str	r3, [r7, #12]
 8001cde:	4b5d      	ldr	r3, [pc, #372]	; (8001e54 <HAL_GPIO_Init+0x300>)
 8001ce0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ce2:	4a5c      	ldr	r2, [pc, #368]	; (8001e54 <HAL_GPIO_Init+0x300>)
 8001ce4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ce8:	6453      	str	r3, [r2, #68]	; 0x44
 8001cea:	4b5a      	ldr	r3, [pc, #360]	; (8001e54 <HAL_GPIO_Init+0x300>)
 8001cec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001cf2:	60fb      	str	r3, [r7, #12]
 8001cf4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001cf6:	4a58      	ldr	r2, [pc, #352]	; (8001e58 <HAL_GPIO_Init+0x304>)
 8001cf8:	69fb      	ldr	r3, [r7, #28]
 8001cfa:	089b      	lsrs	r3, r3, #2
 8001cfc:	3302      	adds	r3, #2
 8001cfe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d02:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001d04:	69fb      	ldr	r3, [r7, #28]
 8001d06:	f003 0303 	and.w	r3, r3, #3
 8001d0a:	009b      	lsls	r3, r3, #2
 8001d0c:	220f      	movs	r2, #15
 8001d0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d12:	43db      	mvns	r3, r3
 8001d14:	69ba      	ldr	r2, [r7, #24]
 8001d16:	4013      	ands	r3, r2
 8001d18:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	4a4f      	ldr	r2, [pc, #316]	; (8001e5c <HAL_GPIO_Init+0x308>)
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d025      	beq.n	8001d6e <HAL_GPIO_Init+0x21a>
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	4a4e      	ldr	r2, [pc, #312]	; (8001e60 <HAL_GPIO_Init+0x30c>)
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d01f      	beq.n	8001d6a <HAL_GPIO_Init+0x216>
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	4a4d      	ldr	r2, [pc, #308]	; (8001e64 <HAL_GPIO_Init+0x310>)
 8001d2e:	4293      	cmp	r3, r2
 8001d30:	d019      	beq.n	8001d66 <HAL_GPIO_Init+0x212>
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	4a4c      	ldr	r2, [pc, #304]	; (8001e68 <HAL_GPIO_Init+0x314>)
 8001d36:	4293      	cmp	r3, r2
 8001d38:	d013      	beq.n	8001d62 <HAL_GPIO_Init+0x20e>
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	4a4b      	ldr	r2, [pc, #300]	; (8001e6c <HAL_GPIO_Init+0x318>)
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d00d      	beq.n	8001d5e <HAL_GPIO_Init+0x20a>
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	4a4a      	ldr	r2, [pc, #296]	; (8001e70 <HAL_GPIO_Init+0x31c>)
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d007      	beq.n	8001d5a <HAL_GPIO_Init+0x206>
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	4a49      	ldr	r2, [pc, #292]	; (8001e74 <HAL_GPIO_Init+0x320>)
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d101      	bne.n	8001d56 <HAL_GPIO_Init+0x202>
 8001d52:	2306      	movs	r3, #6
 8001d54:	e00c      	b.n	8001d70 <HAL_GPIO_Init+0x21c>
 8001d56:	2307      	movs	r3, #7
 8001d58:	e00a      	b.n	8001d70 <HAL_GPIO_Init+0x21c>
 8001d5a:	2305      	movs	r3, #5
 8001d5c:	e008      	b.n	8001d70 <HAL_GPIO_Init+0x21c>
 8001d5e:	2304      	movs	r3, #4
 8001d60:	e006      	b.n	8001d70 <HAL_GPIO_Init+0x21c>
 8001d62:	2303      	movs	r3, #3
 8001d64:	e004      	b.n	8001d70 <HAL_GPIO_Init+0x21c>
 8001d66:	2302      	movs	r3, #2
 8001d68:	e002      	b.n	8001d70 <HAL_GPIO_Init+0x21c>
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	e000      	b.n	8001d70 <HAL_GPIO_Init+0x21c>
 8001d6e:	2300      	movs	r3, #0
 8001d70:	69fa      	ldr	r2, [r7, #28]
 8001d72:	f002 0203 	and.w	r2, r2, #3
 8001d76:	0092      	lsls	r2, r2, #2
 8001d78:	4093      	lsls	r3, r2
 8001d7a:	69ba      	ldr	r2, [r7, #24]
 8001d7c:	4313      	orrs	r3, r2
 8001d7e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001d80:	4935      	ldr	r1, [pc, #212]	; (8001e58 <HAL_GPIO_Init+0x304>)
 8001d82:	69fb      	ldr	r3, [r7, #28]
 8001d84:	089b      	lsrs	r3, r3, #2
 8001d86:	3302      	adds	r3, #2
 8001d88:	69ba      	ldr	r2, [r7, #24]
 8001d8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d8e:	4b3a      	ldr	r3, [pc, #232]	; (8001e78 <HAL_GPIO_Init+0x324>)
 8001d90:	689b      	ldr	r3, [r3, #8]
 8001d92:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d94:	693b      	ldr	r3, [r7, #16]
 8001d96:	43db      	mvns	r3, r3
 8001d98:	69ba      	ldr	r2, [r7, #24]
 8001d9a:	4013      	ands	r3, r2
 8001d9c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	685b      	ldr	r3, [r3, #4]
 8001da2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d003      	beq.n	8001db2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001daa:	69ba      	ldr	r2, [r7, #24]
 8001dac:	693b      	ldr	r3, [r7, #16]
 8001dae:	4313      	orrs	r3, r2
 8001db0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001db2:	4a31      	ldr	r2, [pc, #196]	; (8001e78 <HAL_GPIO_Init+0x324>)
 8001db4:	69bb      	ldr	r3, [r7, #24]
 8001db6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001db8:	4b2f      	ldr	r3, [pc, #188]	; (8001e78 <HAL_GPIO_Init+0x324>)
 8001dba:	68db      	ldr	r3, [r3, #12]
 8001dbc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dbe:	693b      	ldr	r3, [r7, #16]
 8001dc0:	43db      	mvns	r3, r3
 8001dc2:	69ba      	ldr	r2, [r7, #24]
 8001dc4:	4013      	ands	r3, r2
 8001dc6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d003      	beq.n	8001ddc <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001dd4:	69ba      	ldr	r2, [r7, #24]
 8001dd6:	693b      	ldr	r3, [r7, #16]
 8001dd8:	4313      	orrs	r3, r2
 8001dda:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001ddc:	4a26      	ldr	r2, [pc, #152]	; (8001e78 <HAL_GPIO_Init+0x324>)
 8001dde:	69bb      	ldr	r3, [r7, #24]
 8001de0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001de2:	4b25      	ldr	r3, [pc, #148]	; (8001e78 <HAL_GPIO_Init+0x324>)
 8001de4:	685b      	ldr	r3, [r3, #4]
 8001de6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001de8:	693b      	ldr	r3, [r7, #16]
 8001dea:	43db      	mvns	r3, r3
 8001dec:	69ba      	ldr	r2, [r7, #24]
 8001dee:	4013      	ands	r3, r2
 8001df0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	685b      	ldr	r3, [r3, #4]
 8001df6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d003      	beq.n	8001e06 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001dfe:	69ba      	ldr	r2, [r7, #24]
 8001e00:	693b      	ldr	r3, [r7, #16]
 8001e02:	4313      	orrs	r3, r2
 8001e04:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001e06:	4a1c      	ldr	r2, [pc, #112]	; (8001e78 <HAL_GPIO_Init+0x324>)
 8001e08:	69bb      	ldr	r3, [r7, #24]
 8001e0a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e0c:	4b1a      	ldr	r3, [pc, #104]	; (8001e78 <HAL_GPIO_Init+0x324>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e12:	693b      	ldr	r3, [r7, #16]
 8001e14:	43db      	mvns	r3, r3
 8001e16:	69ba      	ldr	r2, [r7, #24]
 8001e18:	4013      	ands	r3, r2
 8001e1a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d003      	beq.n	8001e30 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001e28:	69ba      	ldr	r2, [r7, #24]
 8001e2a:	693b      	ldr	r3, [r7, #16]
 8001e2c:	4313      	orrs	r3, r2
 8001e2e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001e30:	4a11      	ldr	r2, [pc, #68]	; (8001e78 <HAL_GPIO_Init+0x324>)
 8001e32:	69bb      	ldr	r3, [r7, #24]
 8001e34:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e36:	69fb      	ldr	r3, [r7, #28]
 8001e38:	3301      	adds	r3, #1
 8001e3a:	61fb      	str	r3, [r7, #28]
 8001e3c:	69fb      	ldr	r3, [r7, #28]
 8001e3e:	2b0f      	cmp	r3, #15
 8001e40:	f67f ae96 	bls.w	8001b70 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001e44:	bf00      	nop
 8001e46:	bf00      	nop
 8001e48:	3724      	adds	r7, #36	; 0x24
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e50:	4770      	bx	lr
 8001e52:	bf00      	nop
 8001e54:	40023800 	.word	0x40023800
 8001e58:	40013800 	.word	0x40013800
 8001e5c:	40020000 	.word	0x40020000
 8001e60:	40020400 	.word	0x40020400
 8001e64:	40020800 	.word	0x40020800
 8001e68:	40020c00 	.word	0x40020c00
 8001e6c:	40021000 	.word	0x40021000
 8001e70:	40021400 	.word	0x40021400
 8001e74:	40021800 	.word	0x40021800
 8001e78:	40013c00 	.word	0x40013c00

08001e7c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	b085      	sub	sp, #20
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
 8001e84:	460b      	mov	r3, r1
 8001e86:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	691a      	ldr	r2, [r3, #16]
 8001e8c:	887b      	ldrh	r3, [r7, #2]
 8001e8e:	4013      	ands	r3, r2
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d002      	beq.n	8001e9a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001e94:	2301      	movs	r3, #1
 8001e96:	73fb      	strb	r3, [r7, #15]
 8001e98:	e001      	b.n	8001e9e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001e9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	3714      	adds	r7, #20
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eaa:	4770      	bx	lr

08001eac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001eac:	b480      	push	{r7}
 8001eae:	b083      	sub	sp, #12
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
 8001eb4:	460b      	mov	r3, r1
 8001eb6:	807b      	strh	r3, [r7, #2]
 8001eb8:	4613      	mov	r3, r2
 8001eba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ebc:	787b      	ldrb	r3, [r7, #1]
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d003      	beq.n	8001eca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ec2:	887a      	ldrh	r2, [r7, #2]
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001ec8:	e003      	b.n	8001ed2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001eca:	887b      	ldrh	r3, [r7, #2]
 8001ecc:	041a      	lsls	r2, r3, #16
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	619a      	str	r2, [r3, #24]
}
 8001ed2:	bf00      	nop
 8001ed4:	370c      	adds	r7, #12
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001edc:	4770      	bx	lr

08001ede <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001ede:	b480      	push	{r7}
 8001ee0:	b085      	sub	sp, #20
 8001ee2:	af00      	add	r7, sp, #0
 8001ee4:	6078      	str	r0, [r7, #4]
 8001ee6:	460b      	mov	r3, r1
 8001ee8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	695b      	ldr	r3, [r3, #20]
 8001eee:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001ef0:	887a      	ldrh	r2, [r7, #2]
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	4013      	ands	r3, r2
 8001ef6:	041a      	lsls	r2, r3, #16
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	43d9      	mvns	r1, r3
 8001efc:	887b      	ldrh	r3, [r7, #2]
 8001efe:	400b      	ands	r3, r1
 8001f00:	431a      	orrs	r2, r3
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	619a      	str	r2, [r3, #24]
}
 8001f06:	bf00      	nop
 8001f08:	3714      	adds	r7, #20
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f10:	4770      	bx	lr
	...

08001f14 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b084      	sub	sp, #16
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d101      	bne.n	8001f26 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001f22:	2301      	movs	r3, #1
 8001f24:	e12b      	b.n	800217e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f2c:	b2db      	uxtb	r3, r3
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d106      	bne.n	8001f40 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	2200      	movs	r2, #0
 8001f36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001f3a:	6878      	ldr	r0, [r7, #4]
 8001f3c:	f7ff fab6 	bl	80014ac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2224      	movs	r2, #36	; 0x24
 8001f44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	681a      	ldr	r2, [r3, #0]
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f022 0201 	bic.w	r2, r2, #1
 8001f56:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	681a      	ldr	r2, [r3, #0]
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001f66:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	681a      	ldr	r2, [r3, #0]
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001f76:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001f78:	f000 fe8a 	bl	8002c90 <HAL_RCC_GetPCLK1Freq>
 8001f7c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	685b      	ldr	r3, [r3, #4]
 8001f82:	4a81      	ldr	r2, [pc, #516]	; (8002188 <HAL_I2C_Init+0x274>)
 8001f84:	4293      	cmp	r3, r2
 8001f86:	d807      	bhi.n	8001f98 <HAL_I2C_Init+0x84>
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	4a80      	ldr	r2, [pc, #512]	; (800218c <HAL_I2C_Init+0x278>)
 8001f8c:	4293      	cmp	r3, r2
 8001f8e:	bf94      	ite	ls
 8001f90:	2301      	movls	r3, #1
 8001f92:	2300      	movhi	r3, #0
 8001f94:	b2db      	uxtb	r3, r3
 8001f96:	e006      	b.n	8001fa6 <HAL_I2C_Init+0x92>
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	4a7d      	ldr	r2, [pc, #500]	; (8002190 <HAL_I2C_Init+0x27c>)
 8001f9c:	4293      	cmp	r3, r2
 8001f9e:	bf94      	ite	ls
 8001fa0:	2301      	movls	r3, #1
 8001fa2:	2300      	movhi	r3, #0
 8001fa4:	b2db      	uxtb	r3, r3
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d001      	beq.n	8001fae <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001faa:	2301      	movs	r3, #1
 8001fac:	e0e7      	b.n	800217e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	4a78      	ldr	r2, [pc, #480]	; (8002194 <HAL_I2C_Init+0x280>)
 8001fb2:	fba2 2303 	umull	r2, r3, r2, r3
 8001fb6:	0c9b      	lsrs	r3, r3, #18
 8001fb8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	685b      	ldr	r3, [r3, #4]
 8001fc0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	68ba      	ldr	r2, [r7, #8]
 8001fca:	430a      	orrs	r2, r1
 8001fcc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	6a1b      	ldr	r3, [r3, #32]
 8001fd4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	4a6a      	ldr	r2, [pc, #424]	; (8002188 <HAL_I2C_Init+0x274>)
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d802      	bhi.n	8001fe8 <HAL_I2C_Init+0xd4>
 8001fe2:	68bb      	ldr	r3, [r7, #8]
 8001fe4:	3301      	adds	r3, #1
 8001fe6:	e009      	b.n	8001ffc <HAL_I2C_Init+0xe8>
 8001fe8:	68bb      	ldr	r3, [r7, #8]
 8001fea:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001fee:	fb02 f303 	mul.w	r3, r2, r3
 8001ff2:	4a69      	ldr	r2, [pc, #420]	; (8002198 <HAL_I2C_Init+0x284>)
 8001ff4:	fba2 2303 	umull	r2, r3, r2, r3
 8001ff8:	099b      	lsrs	r3, r3, #6
 8001ffa:	3301      	adds	r3, #1
 8001ffc:	687a      	ldr	r2, [r7, #4]
 8001ffe:	6812      	ldr	r2, [r2, #0]
 8002000:	430b      	orrs	r3, r1
 8002002:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	69db      	ldr	r3, [r3, #28]
 800200a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800200e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	685b      	ldr	r3, [r3, #4]
 8002016:	495c      	ldr	r1, [pc, #368]	; (8002188 <HAL_I2C_Init+0x274>)
 8002018:	428b      	cmp	r3, r1
 800201a:	d819      	bhi.n	8002050 <HAL_I2C_Init+0x13c>
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	1e59      	subs	r1, r3, #1
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	005b      	lsls	r3, r3, #1
 8002026:	fbb1 f3f3 	udiv	r3, r1, r3
 800202a:	1c59      	adds	r1, r3, #1
 800202c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002030:	400b      	ands	r3, r1
 8002032:	2b00      	cmp	r3, #0
 8002034:	d00a      	beq.n	800204c <HAL_I2C_Init+0x138>
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	1e59      	subs	r1, r3, #1
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	685b      	ldr	r3, [r3, #4]
 800203e:	005b      	lsls	r3, r3, #1
 8002040:	fbb1 f3f3 	udiv	r3, r1, r3
 8002044:	3301      	adds	r3, #1
 8002046:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800204a:	e051      	b.n	80020f0 <HAL_I2C_Init+0x1dc>
 800204c:	2304      	movs	r3, #4
 800204e:	e04f      	b.n	80020f0 <HAL_I2C_Init+0x1dc>
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	689b      	ldr	r3, [r3, #8]
 8002054:	2b00      	cmp	r3, #0
 8002056:	d111      	bne.n	800207c <HAL_I2C_Init+0x168>
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	1e58      	subs	r0, r3, #1
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6859      	ldr	r1, [r3, #4]
 8002060:	460b      	mov	r3, r1
 8002062:	005b      	lsls	r3, r3, #1
 8002064:	440b      	add	r3, r1
 8002066:	fbb0 f3f3 	udiv	r3, r0, r3
 800206a:	3301      	adds	r3, #1
 800206c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002070:	2b00      	cmp	r3, #0
 8002072:	bf0c      	ite	eq
 8002074:	2301      	moveq	r3, #1
 8002076:	2300      	movne	r3, #0
 8002078:	b2db      	uxtb	r3, r3
 800207a:	e012      	b.n	80020a2 <HAL_I2C_Init+0x18e>
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	1e58      	subs	r0, r3, #1
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6859      	ldr	r1, [r3, #4]
 8002084:	460b      	mov	r3, r1
 8002086:	009b      	lsls	r3, r3, #2
 8002088:	440b      	add	r3, r1
 800208a:	0099      	lsls	r1, r3, #2
 800208c:	440b      	add	r3, r1
 800208e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002092:	3301      	adds	r3, #1
 8002094:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002098:	2b00      	cmp	r3, #0
 800209a:	bf0c      	ite	eq
 800209c:	2301      	moveq	r3, #1
 800209e:	2300      	movne	r3, #0
 80020a0:	b2db      	uxtb	r3, r3
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d001      	beq.n	80020aa <HAL_I2C_Init+0x196>
 80020a6:	2301      	movs	r3, #1
 80020a8:	e022      	b.n	80020f0 <HAL_I2C_Init+0x1dc>
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	689b      	ldr	r3, [r3, #8]
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d10e      	bne.n	80020d0 <HAL_I2C_Init+0x1bc>
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	1e58      	subs	r0, r3, #1
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6859      	ldr	r1, [r3, #4]
 80020ba:	460b      	mov	r3, r1
 80020bc:	005b      	lsls	r3, r3, #1
 80020be:	440b      	add	r3, r1
 80020c0:	fbb0 f3f3 	udiv	r3, r0, r3
 80020c4:	3301      	adds	r3, #1
 80020c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80020ce:	e00f      	b.n	80020f0 <HAL_I2C_Init+0x1dc>
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	1e58      	subs	r0, r3, #1
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6859      	ldr	r1, [r3, #4]
 80020d8:	460b      	mov	r3, r1
 80020da:	009b      	lsls	r3, r3, #2
 80020dc:	440b      	add	r3, r1
 80020de:	0099      	lsls	r1, r3, #2
 80020e0:	440b      	add	r3, r1
 80020e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80020e6:	3301      	adds	r3, #1
 80020e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020ec:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80020f0:	6879      	ldr	r1, [r7, #4]
 80020f2:	6809      	ldr	r1, [r1, #0]
 80020f4:	4313      	orrs	r3, r2
 80020f6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	69da      	ldr	r2, [r3, #28]
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6a1b      	ldr	r3, [r3, #32]
 800210a:	431a      	orrs	r2, r3
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	430a      	orrs	r2, r1
 8002112:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	689b      	ldr	r3, [r3, #8]
 800211a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800211e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002122:	687a      	ldr	r2, [r7, #4]
 8002124:	6911      	ldr	r1, [r2, #16]
 8002126:	687a      	ldr	r2, [r7, #4]
 8002128:	68d2      	ldr	r2, [r2, #12]
 800212a:	4311      	orrs	r1, r2
 800212c:	687a      	ldr	r2, [r7, #4]
 800212e:	6812      	ldr	r2, [r2, #0]
 8002130:	430b      	orrs	r3, r1
 8002132:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	68db      	ldr	r3, [r3, #12]
 800213a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	695a      	ldr	r2, [r3, #20]
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	699b      	ldr	r3, [r3, #24]
 8002146:	431a      	orrs	r2, r3
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	430a      	orrs	r2, r1
 800214e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	681a      	ldr	r2, [r3, #0]
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f042 0201 	orr.w	r2, r2, #1
 800215e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	2200      	movs	r2, #0
 8002164:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	2220      	movs	r2, #32
 800216a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	2200      	movs	r2, #0
 8002172:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	2200      	movs	r2, #0
 8002178:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800217c:	2300      	movs	r3, #0
}
 800217e:	4618      	mov	r0, r3
 8002180:	3710      	adds	r7, #16
 8002182:	46bd      	mov	sp, r7
 8002184:	bd80      	pop	{r7, pc}
 8002186:	bf00      	nop
 8002188:	000186a0 	.word	0x000186a0
 800218c:	001e847f 	.word	0x001e847f
 8002190:	003d08ff 	.word	0x003d08ff
 8002194:	431bde83 	.word	0x431bde83
 8002198:	10624dd3 	.word	0x10624dd3

0800219c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b088      	sub	sp, #32
 80021a0:	af02      	add	r7, sp, #8
 80021a2:	60f8      	str	r0, [r7, #12]
 80021a4:	607a      	str	r2, [r7, #4]
 80021a6:	461a      	mov	r2, r3
 80021a8:	460b      	mov	r3, r1
 80021aa:	817b      	strh	r3, [r7, #10]
 80021ac:	4613      	mov	r3, r2
 80021ae:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80021b0:	f7ff fbbe 	bl	8001930 <HAL_GetTick>
 80021b4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021bc:	b2db      	uxtb	r3, r3
 80021be:	2b20      	cmp	r3, #32
 80021c0:	f040 80e0 	bne.w	8002384 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80021c4:	697b      	ldr	r3, [r7, #20]
 80021c6:	9300      	str	r3, [sp, #0]
 80021c8:	2319      	movs	r3, #25
 80021ca:	2201      	movs	r2, #1
 80021cc:	4970      	ldr	r1, [pc, #448]	; (8002390 <HAL_I2C_Master_Transmit+0x1f4>)
 80021ce:	68f8      	ldr	r0, [r7, #12]
 80021d0:	f000 fa92 	bl	80026f8 <I2C_WaitOnFlagUntilTimeout>
 80021d4:	4603      	mov	r3, r0
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d001      	beq.n	80021de <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80021da:	2302      	movs	r3, #2
 80021dc:	e0d3      	b.n	8002386 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80021e4:	2b01      	cmp	r3, #1
 80021e6:	d101      	bne.n	80021ec <HAL_I2C_Master_Transmit+0x50>
 80021e8:	2302      	movs	r3, #2
 80021ea:	e0cc      	b.n	8002386 <HAL_I2C_Master_Transmit+0x1ea>
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	2201      	movs	r2, #1
 80021f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f003 0301 	and.w	r3, r3, #1
 80021fe:	2b01      	cmp	r3, #1
 8002200:	d007      	beq.n	8002212 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	681a      	ldr	r2, [r3, #0]
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f042 0201 	orr.w	r2, r2, #1
 8002210:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	681a      	ldr	r2, [r3, #0]
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002220:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	2221      	movs	r2, #33	; 0x21
 8002226:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	2210      	movs	r2, #16
 800222e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	2200      	movs	r2, #0
 8002236:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	687a      	ldr	r2, [r7, #4]
 800223c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	893a      	ldrh	r2, [r7, #8]
 8002242:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002248:	b29a      	uxth	r2, r3
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	4a50      	ldr	r2, [pc, #320]	; (8002394 <HAL_I2C_Master_Transmit+0x1f8>)
 8002252:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002254:	8979      	ldrh	r1, [r7, #10]
 8002256:	697b      	ldr	r3, [r7, #20]
 8002258:	6a3a      	ldr	r2, [r7, #32]
 800225a:	68f8      	ldr	r0, [r7, #12]
 800225c:	f000 f9ca 	bl	80025f4 <I2C_MasterRequestWrite>
 8002260:	4603      	mov	r3, r0
 8002262:	2b00      	cmp	r3, #0
 8002264:	d001      	beq.n	800226a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002266:	2301      	movs	r3, #1
 8002268:	e08d      	b.n	8002386 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800226a:	2300      	movs	r3, #0
 800226c:	613b      	str	r3, [r7, #16]
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	695b      	ldr	r3, [r3, #20]
 8002274:	613b      	str	r3, [r7, #16]
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	699b      	ldr	r3, [r3, #24]
 800227c:	613b      	str	r3, [r7, #16]
 800227e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002280:	e066      	b.n	8002350 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002282:	697a      	ldr	r2, [r7, #20]
 8002284:	6a39      	ldr	r1, [r7, #32]
 8002286:	68f8      	ldr	r0, [r7, #12]
 8002288:	f000 fb50 	bl	800292c <I2C_WaitOnTXEFlagUntilTimeout>
 800228c:	4603      	mov	r3, r0
 800228e:	2b00      	cmp	r3, #0
 8002290:	d00d      	beq.n	80022ae <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002296:	2b04      	cmp	r3, #4
 8002298:	d107      	bne.n	80022aa <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	681a      	ldr	r2, [r3, #0]
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80022a8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80022aa:	2301      	movs	r3, #1
 80022ac:	e06b      	b.n	8002386 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022b2:	781a      	ldrb	r2, [r3, #0]
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022be:	1c5a      	adds	r2, r3, #1
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022c8:	b29b      	uxth	r3, r3
 80022ca:	3b01      	subs	r3, #1
 80022cc:	b29a      	uxth	r2, r3
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022d6:	3b01      	subs	r3, #1
 80022d8:	b29a      	uxth	r2, r3
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	695b      	ldr	r3, [r3, #20]
 80022e4:	f003 0304 	and.w	r3, r3, #4
 80022e8:	2b04      	cmp	r3, #4
 80022ea:	d11b      	bne.n	8002324 <HAL_I2C_Master_Transmit+0x188>
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d017      	beq.n	8002324 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022f8:	781a      	ldrb	r2, [r3, #0]
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002304:	1c5a      	adds	r2, r3, #1
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800230e:	b29b      	uxth	r3, r3
 8002310:	3b01      	subs	r3, #1
 8002312:	b29a      	uxth	r2, r3
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800231c:	3b01      	subs	r3, #1
 800231e:	b29a      	uxth	r2, r3
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002324:	697a      	ldr	r2, [r7, #20]
 8002326:	6a39      	ldr	r1, [r7, #32]
 8002328:	68f8      	ldr	r0, [r7, #12]
 800232a:	f000 fb47 	bl	80029bc <I2C_WaitOnBTFFlagUntilTimeout>
 800232e:	4603      	mov	r3, r0
 8002330:	2b00      	cmp	r3, #0
 8002332:	d00d      	beq.n	8002350 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002338:	2b04      	cmp	r3, #4
 800233a:	d107      	bne.n	800234c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	681a      	ldr	r2, [r3, #0]
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800234a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800234c:	2301      	movs	r3, #1
 800234e:	e01a      	b.n	8002386 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002354:	2b00      	cmp	r3, #0
 8002356:	d194      	bne.n	8002282 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	681a      	ldr	r2, [r3, #0]
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002366:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	2220      	movs	r2, #32
 800236c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	2200      	movs	r2, #0
 8002374:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	2200      	movs	r2, #0
 800237c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002380:	2300      	movs	r3, #0
 8002382:	e000      	b.n	8002386 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002384:	2302      	movs	r3, #2
  }
}
 8002386:	4618      	mov	r0, r3
 8002388:	3718      	adds	r7, #24
 800238a:	46bd      	mov	sp, r7
 800238c:	bd80      	pop	{r7, pc}
 800238e:	bf00      	nop
 8002390:	00100002 	.word	0x00100002
 8002394:	ffff0000 	.word	0xffff0000

08002398 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b08a      	sub	sp, #40	; 0x28
 800239c:	af02      	add	r7, sp, #8
 800239e:	60f8      	str	r0, [r7, #12]
 80023a0:	607a      	str	r2, [r7, #4]
 80023a2:	603b      	str	r3, [r7, #0]
 80023a4:	460b      	mov	r3, r1
 80023a6:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80023a8:	f7ff fac2 	bl	8001930 <HAL_GetTick>
 80023ac:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 80023ae:	2300      	movs	r3, #0
 80023b0:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023b8:	b2db      	uxtb	r3, r3
 80023ba:	2b20      	cmp	r3, #32
 80023bc:	f040 8111 	bne.w	80025e2 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80023c0:	69fb      	ldr	r3, [r7, #28]
 80023c2:	9300      	str	r3, [sp, #0]
 80023c4:	2319      	movs	r3, #25
 80023c6:	2201      	movs	r2, #1
 80023c8:	4988      	ldr	r1, [pc, #544]	; (80025ec <HAL_I2C_IsDeviceReady+0x254>)
 80023ca:	68f8      	ldr	r0, [r7, #12]
 80023cc:	f000 f994 	bl	80026f8 <I2C_WaitOnFlagUntilTimeout>
 80023d0:	4603      	mov	r3, r0
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d001      	beq.n	80023da <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80023d6:	2302      	movs	r3, #2
 80023d8:	e104      	b.n	80025e4 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80023e0:	2b01      	cmp	r3, #1
 80023e2:	d101      	bne.n	80023e8 <HAL_I2C_IsDeviceReady+0x50>
 80023e4:	2302      	movs	r3, #2
 80023e6:	e0fd      	b.n	80025e4 <HAL_I2C_IsDeviceReady+0x24c>
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	2201      	movs	r2, #1
 80023ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f003 0301 	and.w	r3, r3, #1
 80023fa:	2b01      	cmp	r3, #1
 80023fc:	d007      	beq.n	800240e <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	681a      	ldr	r2, [r3, #0]
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f042 0201 	orr.w	r2, r2, #1
 800240c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	681a      	ldr	r2, [r3, #0]
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800241c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	2224      	movs	r2, #36	; 0x24
 8002422:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	2200      	movs	r2, #0
 800242a:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	4a70      	ldr	r2, [pc, #448]	; (80025f0 <HAL_I2C_IsDeviceReady+0x258>)
 8002430:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	681a      	ldr	r2, [r3, #0]
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002440:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8002442:	69fb      	ldr	r3, [r7, #28]
 8002444:	9300      	str	r3, [sp, #0]
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	2200      	movs	r2, #0
 800244a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800244e:	68f8      	ldr	r0, [r7, #12]
 8002450:	f000 f952 	bl	80026f8 <I2C_WaitOnFlagUntilTimeout>
 8002454:	4603      	mov	r3, r0
 8002456:	2b00      	cmp	r3, #0
 8002458:	d00d      	beq.n	8002476 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002464:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002468:	d103      	bne.n	8002472 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002470:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8002472:	2303      	movs	r3, #3
 8002474:	e0b6      	b.n	80025e4 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002476:	897b      	ldrh	r3, [r7, #10]
 8002478:	b2db      	uxtb	r3, r3
 800247a:	461a      	mov	r2, r3
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002484:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8002486:	f7ff fa53 	bl	8001930 <HAL_GetTick>
 800248a:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	695b      	ldr	r3, [r3, #20]
 8002492:	f003 0302 	and.w	r3, r3, #2
 8002496:	2b02      	cmp	r3, #2
 8002498:	bf0c      	ite	eq
 800249a:	2301      	moveq	r3, #1
 800249c:	2300      	movne	r3, #0
 800249e:	b2db      	uxtb	r3, r3
 80024a0:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	695b      	ldr	r3, [r3, #20]
 80024a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80024b0:	bf0c      	ite	eq
 80024b2:	2301      	moveq	r3, #1
 80024b4:	2300      	movne	r3, #0
 80024b6:	b2db      	uxtb	r3, r3
 80024b8:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80024ba:	e025      	b.n	8002508 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80024bc:	f7ff fa38 	bl	8001930 <HAL_GetTick>
 80024c0:	4602      	mov	r2, r0
 80024c2:	69fb      	ldr	r3, [r7, #28]
 80024c4:	1ad3      	subs	r3, r2, r3
 80024c6:	683a      	ldr	r2, [r7, #0]
 80024c8:	429a      	cmp	r2, r3
 80024ca:	d302      	bcc.n	80024d2 <HAL_I2C_IsDeviceReady+0x13a>
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d103      	bne.n	80024da <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	22a0      	movs	r2, #160	; 0xa0
 80024d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	695b      	ldr	r3, [r3, #20]
 80024e0:	f003 0302 	and.w	r3, r3, #2
 80024e4:	2b02      	cmp	r3, #2
 80024e6:	bf0c      	ite	eq
 80024e8:	2301      	moveq	r3, #1
 80024ea:	2300      	movne	r3, #0
 80024ec:	b2db      	uxtb	r3, r3
 80024ee:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	695b      	ldr	r3, [r3, #20]
 80024f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80024fe:	bf0c      	ite	eq
 8002500:	2301      	moveq	r3, #1
 8002502:	2300      	movne	r3, #0
 8002504:	b2db      	uxtb	r3, r3
 8002506:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800250e:	b2db      	uxtb	r3, r3
 8002510:	2ba0      	cmp	r3, #160	; 0xa0
 8002512:	d005      	beq.n	8002520 <HAL_I2C_IsDeviceReady+0x188>
 8002514:	7dfb      	ldrb	r3, [r7, #23]
 8002516:	2b00      	cmp	r3, #0
 8002518:	d102      	bne.n	8002520 <HAL_I2C_IsDeviceReady+0x188>
 800251a:	7dbb      	ldrb	r3, [r7, #22]
 800251c:	2b00      	cmp	r3, #0
 800251e:	d0cd      	beq.n	80024bc <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	2220      	movs	r2, #32
 8002524:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	695b      	ldr	r3, [r3, #20]
 800252e:	f003 0302 	and.w	r3, r3, #2
 8002532:	2b02      	cmp	r3, #2
 8002534:	d129      	bne.n	800258a <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	681a      	ldr	r2, [r3, #0]
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002544:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002546:	2300      	movs	r3, #0
 8002548:	613b      	str	r3, [r7, #16]
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	695b      	ldr	r3, [r3, #20]
 8002550:	613b      	str	r3, [r7, #16]
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	699b      	ldr	r3, [r3, #24]
 8002558:	613b      	str	r3, [r7, #16]
 800255a:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800255c:	69fb      	ldr	r3, [r7, #28]
 800255e:	9300      	str	r3, [sp, #0]
 8002560:	2319      	movs	r3, #25
 8002562:	2201      	movs	r2, #1
 8002564:	4921      	ldr	r1, [pc, #132]	; (80025ec <HAL_I2C_IsDeviceReady+0x254>)
 8002566:	68f8      	ldr	r0, [r7, #12]
 8002568:	f000 f8c6 	bl	80026f8 <I2C_WaitOnFlagUntilTimeout>
 800256c:	4603      	mov	r3, r0
 800256e:	2b00      	cmp	r3, #0
 8002570:	d001      	beq.n	8002576 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8002572:	2301      	movs	r3, #1
 8002574:	e036      	b.n	80025e4 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	2220      	movs	r2, #32
 800257a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	2200      	movs	r2, #0
 8002582:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8002586:	2300      	movs	r3, #0
 8002588:	e02c      	b.n	80025e4 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	681a      	ldr	r2, [r3, #0]
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002598:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80025a2:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80025a4:	69fb      	ldr	r3, [r7, #28]
 80025a6:	9300      	str	r3, [sp, #0]
 80025a8:	2319      	movs	r3, #25
 80025aa:	2201      	movs	r2, #1
 80025ac:	490f      	ldr	r1, [pc, #60]	; (80025ec <HAL_I2C_IsDeviceReady+0x254>)
 80025ae:	68f8      	ldr	r0, [r7, #12]
 80025b0:	f000 f8a2 	bl	80026f8 <I2C_WaitOnFlagUntilTimeout>
 80025b4:	4603      	mov	r3, r0
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d001      	beq.n	80025be <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80025ba:	2301      	movs	r3, #1
 80025bc:	e012      	b.n	80025e4 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80025be:	69bb      	ldr	r3, [r7, #24]
 80025c0:	3301      	adds	r3, #1
 80025c2:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80025c4:	69ba      	ldr	r2, [r7, #24]
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	429a      	cmp	r2, r3
 80025ca:	f4ff af32 	bcc.w	8002432 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	2220      	movs	r2, #32
 80025d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	2200      	movs	r2, #0
 80025da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80025de:	2301      	movs	r3, #1
 80025e0:	e000      	b.n	80025e4 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80025e2:	2302      	movs	r3, #2
  }
}
 80025e4:	4618      	mov	r0, r3
 80025e6:	3720      	adds	r7, #32
 80025e8:	46bd      	mov	sp, r7
 80025ea:	bd80      	pop	{r7, pc}
 80025ec:	00100002 	.word	0x00100002
 80025f0:	ffff0000 	.word	0xffff0000

080025f4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b088      	sub	sp, #32
 80025f8:	af02      	add	r7, sp, #8
 80025fa:	60f8      	str	r0, [r7, #12]
 80025fc:	607a      	str	r2, [r7, #4]
 80025fe:	603b      	str	r3, [r7, #0]
 8002600:	460b      	mov	r3, r1
 8002602:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002608:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800260a:	697b      	ldr	r3, [r7, #20]
 800260c:	2b08      	cmp	r3, #8
 800260e:	d006      	beq.n	800261e <I2C_MasterRequestWrite+0x2a>
 8002610:	697b      	ldr	r3, [r7, #20]
 8002612:	2b01      	cmp	r3, #1
 8002614:	d003      	beq.n	800261e <I2C_MasterRequestWrite+0x2a>
 8002616:	697b      	ldr	r3, [r7, #20]
 8002618:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800261c:	d108      	bne.n	8002630 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	681a      	ldr	r2, [r3, #0]
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800262c:	601a      	str	r2, [r3, #0]
 800262e:	e00b      	b.n	8002648 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002634:	2b12      	cmp	r3, #18
 8002636:	d107      	bne.n	8002648 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	681a      	ldr	r2, [r3, #0]
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002646:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	9300      	str	r3, [sp, #0]
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2200      	movs	r2, #0
 8002650:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002654:	68f8      	ldr	r0, [r7, #12]
 8002656:	f000 f84f 	bl	80026f8 <I2C_WaitOnFlagUntilTimeout>
 800265a:	4603      	mov	r3, r0
 800265c:	2b00      	cmp	r3, #0
 800265e:	d00d      	beq.n	800267c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800266a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800266e:	d103      	bne.n	8002678 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002676:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002678:	2303      	movs	r3, #3
 800267a:	e035      	b.n	80026e8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	691b      	ldr	r3, [r3, #16]
 8002680:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002684:	d108      	bne.n	8002698 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002686:	897b      	ldrh	r3, [r7, #10]
 8002688:	b2db      	uxtb	r3, r3
 800268a:	461a      	mov	r2, r3
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002694:	611a      	str	r2, [r3, #16]
 8002696:	e01b      	b.n	80026d0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002698:	897b      	ldrh	r3, [r7, #10]
 800269a:	11db      	asrs	r3, r3, #7
 800269c:	b2db      	uxtb	r3, r3
 800269e:	f003 0306 	and.w	r3, r3, #6
 80026a2:	b2db      	uxtb	r3, r3
 80026a4:	f063 030f 	orn	r3, r3, #15
 80026a8:	b2da      	uxtb	r2, r3
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	687a      	ldr	r2, [r7, #4]
 80026b4:	490e      	ldr	r1, [pc, #56]	; (80026f0 <I2C_MasterRequestWrite+0xfc>)
 80026b6:	68f8      	ldr	r0, [r7, #12]
 80026b8:	f000 f898 	bl	80027ec <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80026bc:	4603      	mov	r3, r0
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d001      	beq.n	80026c6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80026c2:	2301      	movs	r3, #1
 80026c4:	e010      	b.n	80026e8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80026c6:	897b      	ldrh	r3, [r7, #10]
 80026c8:	b2da      	uxtb	r2, r3
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	687a      	ldr	r2, [r7, #4]
 80026d4:	4907      	ldr	r1, [pc, #28]	; (80026f4 <I2C_MasterRequestWrite+0x100>)
 80026d6:	68f8      	ldr	r0, [r7, #12]
 80026d8:	f000 f888 	bl	80027ec <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80026dc:	4603      	mov	r3, r0
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d001      	beq.n	80026e6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80026e2:	2301      	movs	r3, #1
 80026e4:	e000      	b.n	80026e8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80026e6:	2300      	movs	r3, #0
}
 80026e8:	4618      	mov	r0, r3
 80026ea:	3718      	adds	r7, #24
 80026ec:	46bd      	mov	sp, r7
 80026ee:	bd80      	pop	{r7, pc}
 80026f0:	00010008 	.word	0x00010008
 80026f4:	00010002 	.word	0x00010002

080026f8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b084      	sub	sp, #16
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	60f8      	str	r0, [r7, #12]
 8002700:	60b9      	str	r1, [r7, #8]
 8002702:	603b      	str	r3, [r7, #0]
 8002704:	4613      	mov	r3, r2
 8002706:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002708:	e048      	b.n	800279c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002710:	d044      	beq.n	800279c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002712:	f7ff f90d 	bl	8001930 <HAL_GetTick>
 8002716:	4602      	mov	r2, r0
 8002718:	69bb      	ldr	r3, [r7, #24]
 800271a:	1ad3      	subs	r3, r2, r3
 800271c:	683a      	ldr	r2, [r7, #0]
 800271e:	429a      	cmp	r2, r3
 8002720:	d302      	bcc.n	8002728 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	2b00      	cmp	r3, #0
 8002726:	d139      	bne.n	800279c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002728:	68bb      	ldr	r3, [r7, #8]
 800272a:	0c1b      	lsrs	r3, r3, #16
 800272c:	b2db      	uxtb	r3, r3
 800272e:	2b01      	cmp	r3, #1
 8002730:	d10d      	bne.n	800274e <I2C_WaitOnFlagUntilTimeout+0x56>
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	695b      	ldr	r3, [r3, #20]
 8002738:	43da      	mvns	r2, r3
 800273a:	68bb      	ldr	r3, [r7, #8]
 800273c:	4013      	ands	r3, r2
 800273e:	b29b      	uxth	r3, r3
 8002740:	2b00      	cmp	r3, #0
 8002742:	bf0c      	ite	eq
 8002744:	2301      	moveq	r3, #1
 8002746:	2300      	movne	r3, #0
 8002748:	b2db      	uxtb	r3, r3
 800274a:	461a      	mov	r2, r3
 800274c:	e00c      	b.n	8002768 <I2C_WaitOnFlagUntilTimeout+0x70>
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	699b      	ldr	r3, [r3, #24]
 8002754:	43da      	mvns	r2, r3
 8002756:	68bb      	ldr	r3, [r7, #8]
 8002758:	4013      	ands	r3, r2
 800275a:	b29b      	uxth	r3, r3
 800275c:	2b00      	cmp	r3, #0
 800275e:	bf0c      	ite	eq
 8002760:	2301      	moveq	r3, #1
 8002762:	2300      	movne	r3, #0
 8002764:	b2db      	uxtb	r3, r3
 8002766:	461a      	mov	r2, r3
 8002768:	79fb      	ldrb	r3, [r7, #7]
 800276a:	429a      	cmp	r2, r3
 800276c:	d116      	bne.n	800279c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	2200      	movs	r2, #0
 8002772:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	2220      	movs	r2, #32
 8002778:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	2200      	movs	r2, #0
 8002780:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002788:	f043 0220 	orr.w	r2, r3, #32
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	2200      	movs	r2, #0
 8002794:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002798:	2301      	movs	r3, #1
 800279a:	e023      	b.n	80027e4 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800279c:	68bb      	ldr	r3, [r7, #8]
 800279e:	0c1b      	lsrs	r3, r3, #16
 80027a0:	b2db      	uxtb	r3, r3
 80027a2:	2b01      	cmp	r3, #1
 80027a4:	d10d      	bne.n	80027c2 <I2C_WaitOnFlagUntilTimeout+0xca>
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	695b      	ldr	r3, [r3, #20]
 80027ac:	43da      	mvns	r2, r3
 80027ae:	68bb      	ldr	r3, [r7, #8]
 80027b0:	4013      	ands	r3, r2
 80027b2:	b29b      	uxth	r3, r3
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	bf0c      	ite	eq
 80027b8:	2301      	moveq	r3, #1
 80027ba:	2300      	movne	r3, #0
 80027bc:	b2db      	uxtb	r3, r3
 80027be:	461a      	mov	r2, r3
 80027c0:	e00c      	b.n	80027dc <I2C_WaitOnFlagUntilTimeout+0xe4>
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	699b      	ldr	r3, [r3, #24]
 80027c8:	43da      	mvns	r2, r3
 80027ca:	68bb      	ldr	r3, [r7, #8]
 80027cc:	4013      	ands	r3, r2
 80027ce:	b29b      	uxth	r3, r3
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	bf0c      	ite	eq
 80027d4:	2301      	moveq	r3, #1
 80027d6:	2300      	movne	r3, #0
 80027d8:	b2db      	uxtb	r3, r3
 80027da:	461a      	mov	r2, r3
 80027dc:	79fb      	ldrb	r3, [r7, #7]
 80027de:	429a      	cmp	r2, r3
 80027e0:	d093      	beq.n	800270a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80027e2:	2300      	movs	r3, #0
}
 80027e4:	4618      	mov	r0, r3
 80027e6:	3710      	adds	r7, #16
 80027e8:	46bd      	mov	sp, r7
 80027ea:	bd80      	pop	{r7, pc}

080027ec <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b084      	sub	sp, #16
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	60f8      	str	r0, [r7, #12]
 80027f4:	60b9      	str	r1, [r7, #8]
 80027f6:	607a      	str	r2, [r7, #4]
 80027f8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80027fa:	e071      	b.n	80028e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	695b      	ldr	r3, [r3, #20]
 8002802:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002806:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800280a:	d123      	bne.n	8002854 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	681a      	ldr	r2, [r3, #0]
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800281a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002824:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	2200      	movs	r2, #0
 800282a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	2220      	movs	r2, #32
 8002830:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	2200      	movs	r2, #0
 8002838:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002840:	f043 0204 	orr.w	r2, r3, #4
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	2200      	movs	r2, #0
 800284c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002850:	2301      	movs	r3, #1
 8002852:	e067      	b.n	8002924 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800285a:	d041      	beq.n	80028e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800285c:	f7ff f868 	bl	8001930 <HAL_GetTick>
 8002860:	4602      	mov	r2, r0
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	1ad3      	subs	r3, r2, r3
 8002866:	687a      	ldr	r2, [r7, #4]
 8002868:	429a      	cmp	r2, r3
 800286a:	d302      	bcc.n	8002872 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2b00      	cmp	r3, #0
 8002870:	d136      	bne.n	80028e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002872:	68bb      	ldr	r3, [r7, #8]
 8002874:	0c1b      	lsrs	r3, r3, #16
 8002876:	b2db      	uxtb	r3, r3
 8002878:	2b01      	cmp	r3, #1
 800287a:	d10c      	bne.n	8002896 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	695b      	ldr	r3, [r3, #20]
 8002882:	43da      	mvns	r2, r3
 8002884:	68bb      	ldr	r3, [r7, #8]
 8002886:	4013      	ands	r3, r2
 8002888:	b29b      	uxth	r3, r3
 800288a:	2b00      	cmp	r3, #0
 800288c:	bf14      	ite	ne
 800288e:	2301      	movne	r3, #1
 8002890:	2300      	moveq	r3, #0
 8002892:	b2db      	uxtb	r3, r3
 8002894:	e00b      	b.n	80028ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	699b      	ldr	r3, [r3, #24]
 800289c:	43da      	mvns	r2, r3
 800289e:	68bb      	ldr	r3, [r7, #8]
 80028a0:	4013      	ands	r3, r2
 80028a2:	b29b      	uxth	r3, r3
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	bf14      	ite	ne
 80028a8:	2301      	movne	r3, #1
 80028aa:	2300      	moveq	r3, #0
 80028ac:	b2db      	uxtb	r3, r3
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d016      	beq.n	80028e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	2200      	movs	r2, #0
 80028b6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	2220      	movs	r2, #32
 80028bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	2200      	movs	r2, #0
 80028c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028cc:	f043 0220 	orr.w	r2, r3, #32
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	2200      	movs	r2, #0
 80028d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80028dc:	2301      	movs	r3, #1
 80028de:	e021      	b.n	8002924 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80028e0:	68bb      	ldr	r3, [r7, #8]
 80028e2:	0c1b      	lsrs	r3, r3, #16
 80028e4:	b2db      	uxtb	r3, r3
 80028e6:	2b01      	cmp	r3, #1
 80028e8:	d10c      	bne.n	8002904 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	695b      	ldr	r3, [r3, #20]
 80028f0:	43da      	mvns	r2, r3
 80028f2:	68bb      	ldr	r3, [r7, #8]
 80028f4:	4013      	ands	r3, r2
 80028f6:	b29b      	uxth	r3, r3
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	bf14      	ite	ne
 80028fc:	2301      	movne	r3, #1
 80028fe:	2300      	moveq	r3, #0
 8002900:	b2db      	uxtb	r3, r3
 8002902:	e00b      	b.n	800291c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	699b      	ldr	r3, [r3, #24]
 800290a:	43da      	mvns	r2, r3
 800290c:	68bb      	ldr	r3, [r7, #8]
 800290e:	4013      	ands	r3, r2
 8002910:	b29b      	uxth	r3, r3
 8002912:	2b00      	cmp	r3, #0
 8002914:	bf14      	ite	ne
 8002916:	2301      	movne	r3, #1
 8002918:	2300      	moveq	r3, #0
 800291a:	b2db      	uxtb	r3, r3
 800291c:	2b00      	cmp	r3, #0
 800291e:	f47f af6d 	bne.w	80027fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002922:	2300      	movs	r3, #0
}
 8002924:	4618      	mov	r0, r3
 8002926:	3710      	adds	r7, #16
 8002928:	46bd      	mov	sp, r7
 800292a:	bd80      	pop	{r7, pc}

0800292c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b084      	sub	sp, #16
 8002930:	af00      	add	r7, sp, #0
 8002932:	60f8      	str	r0, [r7, #12]
 8002934:	60b9      	str	r1, [r7, #8]
 8002936:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002938:	e034      	b.n	80029a4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800293a:	68f8      	ldr	r0, [r7, #12]
 800293c:	f000 f886 	bl	8002a4c <I2C_IsAcknowledgeFailed>
 8002940:	4603      	mov	r3, r0
 8002942:	2b00      	cmp	r3, #0
 8002944:	d001      	beq.n	800294a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002946:	2301      	movs	r3, #1
 8002948:	e034      	b.n	80029b4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800294a:	68bb      	ldr	r3, [r7, #8]
 800294c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002950:	d028      	beq.n	80029a4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002952:	f7fe ffed 	bl	8001930 <HAL_GetTick>
 8002956:	4602      	mov	r2, r0
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	1ad3      	subs	r3, r2, r3
 800295c:	68ba      	ldr	r2, [r7, #8]
 800295e:	429a      	cmp	r2, r3
 8002960:	d302      	bcc.n	8002968 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002962:	68bb      	ldr	r3, [r7, #8]
 8002964:	2b00      	cmp	r3, #0
 8002966:	d11d      	bne.n	80029a4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	695b      	ldr	r3, [r3, #20]
 800296e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002972:	2b80      	cmp	r3, #128	; 0x80
 8002974:	d016      	beq.n	80029a4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	2200      	movs	r2, #0
 800297a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	2220      	movs	r2, #32
 8002980:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	2200      	movs	r2, #0
 8002988:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002990:	f043 0220 	orr.w	r2, r3, #32
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	2200      	movs	r2, #0
 800299c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80029a0:	2301      	movs	r3, #1
 80029a2:	e007      	b.n	80029b4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	695b      	ldr	r3, [r3, #20]
 80029aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029ae:	2b80      	cmp	r3, #128	; 0x80
 80029b0:	d1c3      	bne.n	800293a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80029b2:	2300      	movs	r3, #0
}
 80029b4:	4618      	mov	r0, r3
 80029b6:	3710      	adds	r7, #16
 80029b8:	46bd      	mov	sp, r7
 80029ba:	bd80      	pop	{r7, pc}

080029bc <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	b084      	sub	sp, #16
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	60f8      	str	r0, [r7, #12]
 80029c4:	60b9      	str	r1, [r7, #8]
 80029c6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80029c8:	e034      	b.n	8002a34 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80029ca:	68f8      	ldr	r0, [r7, #12]
 80029cc:	f000 f83e 	bl	8002a4c <I2C_IsAcknowledgeFailed>
 80029d0:	4603      	mov	r3, r0
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d001      	beq.n	80029da <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80029d6:	2301      	movs	r3, #1
 80029d8:	e034      	b.n	8002a44 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80029da:	68bb      	ldr	r3, [r7, #8]
 80029dc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80029e0:	d028      	beq.n	8002a34 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029e2:	f7fe ffa5 	bl	8001930 <HAL_GetTick>
 80029e6:	4602      	mov	r2, r0
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	1ad3      	subs	r3, r2, r3
 80029ec:	68ba      	ldr	r2, [r7, #8]
 80029ee:	429a      	cmp	r2, r3
 80029f0:	d302      	bcc.n	80029f8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80029f2:	68bb      	ldr	r3, [r7, #8]
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d11d      	bne.n	8002a34 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	695b      	ldr	r3, [r3, #20]
 80029fe:	f003 0304 	and.w	r3, r3, #4
 8002a02:	2b04      	cmp	r3, #4
 8002a04:	d016      	beq.n	8002a34 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	2200      	movs	r2, #0
 8002a0a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	2220      	movs	r2, #32
 8002a10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	2200      	movs	r2, #0
 8002a18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a20:	f043 0220 	orr.w	r2, r3, #32
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002a30:	2301      	movs	r3, #1
 8002a32:	e007      	b.n	8002a44 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	695b      	ldr	r3, [r3, #20]
 8002a3a:	f003 0304 	and.w	r3, r3, #4
 8002a3e:	2b04      	cmp	r3, #4
 8002a40:	d1c3      	bne.n	80029ca <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002a42:	2300      	movs	r3, #0
}
 8002a44:	4618      	mov	r0, r3
 8002a46:	3710      	adds	r7, #16
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	bd80      	pop	{r7, pc}

08002a4c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	b083      	sub	sp, #12
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	695b      	ldr	r3, [r3, #20]
 8002a5a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a5e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a62:	d11b      	bne.n	8002a9c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002a6c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	2200      	movs	r2, #0
 8002a72:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2220      	movs	r2, #32
 8002a78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2200      	movs	r2, #0
 8002a80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a88:	f043 0204 	orr.w	r2, r3, #4
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2200      	movs	r2, #0
 8002a94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002a98:	2301      	movs	r3, #1
 8002a9a:	e000      	b.n	8002a9e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002a9c:	2300      	movs	r3, #0
}
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	370c      	adds	r7, #12
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa8:	4770      	bx	lr
	...

08002aac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b084      	sub	sp, #16
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
 8002ab4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d101      	bne.n	8002ac0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002abc:	2301      	movs	r3, #1
 8002abe:	e0cc      	b.n	8002c5a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002ac0:	4b68      	ldr	r3, [pc, #416]	; (8002c64 <HAL_RCC_ClockConfig+0x1b8>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f003 030f 	and.w	r3, r3, #15
 8002ac8:	683a      	ldr	r2, [r7, #0]
 8002aca:	429a      	cmp	r2, r3
 8002acc:	d90c      	bls.n	8002ae8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ace:	4b65      	ldr	r3, [pc, #404]	; (8002c64 <HAL_RCC_ClockConfig+0x1b8>)
 8002ad0:	683a      	ldr	r2, [r7, #0]
 8002ad2:	b2d2      	uxtb	r2, r2
 8002ad4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ad6:	4b63      	ldr	r3, [pc, #396]	; (8002c64 <HAL_RCC_ClockConfig+0x1b8>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f003 030f 	and.w	r3, r3, #15
 8002ade:	683a      	ldr	r2, [r7, #0]
 8002ae0:	429a      	cmp	r2, r3
 8002ae2:	d001      	beq.n	8002ae8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002ae4:	2301      	movs	r3, #1
 8002ae6:	e0b8      	b.n	8002c5a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f003 0302 	and.w	r3, r3, #2
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d020      	beq.n	8002b36 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f003 0304 	and.w	r3, r3, #4
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d005      	beq.n	8002b0c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002b00:	4b59      	ldr	r3, [pc, #356]	; (8002c68 <HAL_RCC_ClockConfig+0x1bc>)
 8002b02:	689b      	ldr	r3, [r3, #8]
 8002b04:	4a58      	ldr	r2, [pc, #352]	; (8002c68 <HAL_RCC_ClockConfig+0x1bc>)
 8002b06:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002b0a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f003 0308 	and.w	r3, r3, #8
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d005      	beq.n	8002b24 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002b18:	4b53      	ldr	r3, [pc, #332]	; (8002c68 <HAL_RCC_ClockConfig+0x1bc>)
 8002b1a:	689b      	ldr	r3, [r3, #8]
 8002b1c:	4a52      	ldr	r2, [pc, #328]	; (8002c68 <HAL_RCC_ClockConfig+0x1bc>)
 8002b1e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002b22:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b24:	4b50      	ldr	r3, [pc, #320]	; (8002c68 <HAL_RCC_ClockConfig+0x1bc>)
 8002b26:	689b      	ldr	r3, [r3, #8]
 8002b28:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	689b      	ldr	r3, [r3, #8]
 8002b30:	494d      	ldr	r1, [pc, #308]	; (8002c68 <HAL_RCC_ClockConfig+0x1bc>)
 8002b32:	4313      	orrs	r3, r2
 8002b34:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f003 0301 	and.w	r3, r3, #1
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d044      	beq.n	8002bcc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	685b      	ldr	r3, [r3, #4]
 8002b46:	2b01      	cmp	r3, #1
 8002b48:	d107      	bne.n	8002b5a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b4a:	4b47      	ldr	r3, [pc, #284]	; (8002c68 <HAL_RCC_ClockConfig+0x1bc>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d119      	bne.n	8002b8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b56:	2301      	movs	r3, #1
 8002b58:	e07f      	b.n	8002c5a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	685b      	ldr	r3, [r3, #4]
 8002b5e:	2b02      	cmp	r3, #2
 8002b60:	d003      	beq.n	8002b6a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b66:	2b03      	cmp	r3, #3
 8002b68:	d107      	bne.n	8002b7a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b6a:	4b3f      	ldr	r3, [pc, #252]	; (8002c68 <HAL_RCC_ClockConfig+0x1bc>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d109      	bne.n	8002b8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b76:	2301      	movs	r3, #1
 8002b78:	e06f      	b.n	8002c5a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b7a:	4b3b      	ldr	r3, [pc, #236]	; (8002c68 <HAL_RCC_ClockConfig+0x1bc>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f003 0302 	and.w	r3, r3, #2
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d101      	bne.n	8002b8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b86:	2301      	movs	r3, #1
 8002b88:	e067      	b.n	8002c5a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b8a:	4b37      	ldr	r3, [pc, #220]	; (8002c68 <HAL_RCC_ClockConfig+0x1bc>)
 8002b8c:	689b      	ldr	r3, [r3, #8]
 8002b8e:	f023 0203 	bic.w	r2, r3, #3
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	685b      	ldr	r3, [r3, #4]
 8002b96:	4934      	ldr	r1, [pc, #208]	; (8002c68 <HAL_RCC_ClockConfig+0x1bc>)
 8002b98:	4313      	orrs	r3, r2
 8002b9a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002b9c:	f7fe fec8 	bl	8001930 <HAL_GetTick>
 8002ba0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ba2:	e00a      	b.n	8002bba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ba4:	f7fe fec4 	bl	8001930 <HAL_GetTick>
 8002ba8:	4602      	mov	r2, r0
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	1ad3      	subs	r3, r2, r3
 8002bae:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d901      	bls.n	8002bba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002bb6:	2303      	movs	r3, #3
 8002bb8:	e04f      	b.n	8002c5a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bba:	4b2b      	ldr	r3, [pc, #172]	; (8002c68 <HAL_RCC_ClockConfig+0x1bc>)
 8002bbc:	689b      	ldr	r3, [r3, #8]
 8002bbe:	f003 020c 	and.w	r2, r3, #12
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	685b      	ldr	r3, [r3, #4]
 8002bc6:	009b      	lsls	r3, r3, #2
 8002bc8:	429a      	cmp	r2, r3
 8002bca:	d1eb      	bne.n	8002ba4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002bcc:	4b25      	ldr	r3, [pc, #148]	; (8002c64 <HAL_RCC_ClockConfig+0x1b8>)
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f003 030f 	and.w	r3, r3, #15
 8002bd4:	683a      	ldr	r2, [r7, #0]
 8002bd6:	429a      	cmp	r2, r3
 8002bd8:	d20c      	bcs.n	8002bf4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bda:	4b22      	ldr	r3, [pc, #136]	; (8002c64 <HAL_RCC_ClockConfig+0x1b8>)
 8002bdc:	683a      	ldr	r2, [r7, #0]
 8002bde:	b2d2      	uxtb	r2, r2
 8002be0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002be2:	4b20      	ldr	r3, [pc, #128]	; (8002c64 <HAL_RCC_ClockConfig+0x1b8>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f003 030f 	and.w	r3, r3, #15
 8002bea:	683a      	ldr	r2, [r7, #0]
 8002bec:	429a      	cmp	r2, r3
 8002bee:	d001      	beq.n	8002bf4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002bf0:	2301      	movs	r3, #1
 8002bf2:	e032      	b.n	8002c5a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f003 0304 	and.w	r3, r3, #4
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d008      	beq.n	8002c12 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c00:	4b19      	ldr	r3, [pc, #100]	; (8002c68 <HAL_RCC_ClockConfig+0x1bc>)
 8002c02:	689b      	ldr	r3, [r3, #8]
 8002c04:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	68db      	ldr	r3, [r3, #12]
 8002c0c:	4916      	ldr	r1, [pc, #88]	; (8002c68 <HAL_RCC_ClockConfig+0x1bc>)
 8002c0e:	4313      	orrs	r3, r2
 8002c10:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f003 0308 	and.w	r3, r3, #8
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d009      	beq.n	8002c32 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002c1e:	4b12      	ldr	r3, [pc, #72]	; (8002c68 <HAL_RCC_ClockConfig+0x1bc>)
 8002c20:	689b      	ldr	r3, [r3, #8]
 8002c22:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	691b      	ldr	r3, [r3, #16]
 8002c2a:	00db      	lsls	r3, r3, #3
 8002c2c:	490e      	ldr	r1, [pc, #56]	; (8002c68 <HAL_RCC_ClockConfig+0x1bc>)
 8002c2e:	4313      	orrs	r3, r2
 8002c30:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002c32:	f000 f887 	bl	8002d44 <HAL_RCC_GetSysClockFreq>
 8002c36:	4602      	mov	r2, r0
 8002c38:	4b0b      	ldr	r3, [pc, #44]	; (8002c68 <HAL_RCC_ClockConfig+0x1bc>)
 8002c3a:	689b      	ldr	r3, [r3, #8]
 8002c3c:	091b      	lsrs	r3, r3, #4
 8002c3e:	f003 030f 	and.w	r3, r3, #15
 8002c42:	490a      	ldr	r1, [pc, #40]	; (8002c6c <HAL_RCC_ClockConfig+0x1c0>)
 8002c44:	5ccb      	ldrb	r3, [r1, r3]
 8002c46:	fa22 f303 	lsr.w	r3, r2, r3
 8002c4a:	4a09      	ldr	r2, [pc, #36]	; (8002c70 <HAL_RCC_ClockConfig+0x1c4>)
 8002c4c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002c4e:	4b09      	ldr	r3, [pc, #36]	; (8002c74 <HAL_RCC_ClockConfig+0x1c8>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	4618      	mov	r0, r3
 8002c54:	f7fe fcba 	bl	80015cc <HAL_InitTick>

  return HAL_OK;
 8002c58:	2300      	movs	r3, #0
}
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	3710      	adds	r7, #16
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	bd80      	pop	{r7, pc}
 8002c62:	bf00      	nop
 8002c64:	40023c00 	.word	0x40023c00
 8002c68:	40023800 	.word	0x40023800
 8002c6c:	08007a4c 	.word	0x08007a4c
 8002c70:	20000008 	.word	0x20000008
 8002c74:	2000000c 	.word	0x2000000c

08002c78 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c78:	b480      	push	{r7}
 8002c7a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c7c:	4b03      	ldr	r3, [pc, #12]	; (8002c8c <HAL_RCC_GetHCLKFreq+0x14>)
 8002c7e:	681b      	ldr	r3, [r3, #0]
}
 8002c80:	4618      	mov	r0, r3
 8002c82:	46bd      	mov	sp, r7
 8002c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c88:	4770      	bx	lr
 8002c8a:	bf00      	nop
 8002c8c:	20000008 	.word	0x20000008

08002c90 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002c94:	f7ff fff0 	bl	8002c78 <HAL_RCC_GetHCLKFreq>
 8002c98:	4602      	mov	r2, r0
 8002c9a:	4b05      	ldr	r3, [pc, #20]	; (8002cb0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002c9c:	689b      	ldr	r3, [r3, #8]
 8002c9e:	0a9b      	lsrs	r3, r3, #10
 8002ca0:	f003 0307 	and.w	r3, r3, #7
 8002ca4:	4903      	ldr	r1, [pc, #12]	; (8002cb4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002ca6:	5ccb      	ldrb	r3, [r1, r3]
 8002ca8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002cac:	4618      	mov	r0, r3
 8002cae:	bd80      	pop	{r7, pc}
 8002cb0:	40023800 	.word	0x40023800
 8002cb4:	08007a5c 	.word	0x08007a5c

08002cb8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002cbc:	f7ff ffdc 	bl	8002c78 <HAL_RCC_GetHCLKFreq>
 8002cc0:	4602      	mov	r2, r0
 8002cc2:	4b05      	ldr	r3, [pc, #20]	; (8002cd8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002cc4:	689b      	ldr	r3, [r3, #8]
 8002cc6:	0b5b      	lsrs	r3, r3, #13
 8002cc8:	f003 0307 	and.w	r3, r3, #7
 8002ccc:	4903      	ldr	r1, [pc, #12]	; (8002cdc <HAL_RCC_GetPCLK2Freq+0x24>)
 8002cce:	5ccb      	ldrb	r3, [r1, r3]
 8002cd0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	bd80      	pop	{r7, pc}
 8002cd8:	40023800 	.word	0x40023800
 8002cdc:	08007a5c 	.word	0x08007a5c

08002ce0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002ce0:	b480      	push	{r7}
 8002ce2:	b083      	sub	sp, #12
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
 8002ce8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	220f      	movs	r2, #15
 8002cee:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002cf0:	4b12      	ldr	r3, [pc, #72]	; (8002d3c <HAL_RCC_GetClockConfig+0x5c>)
 8002cf2:	689b      	ldr	r3, [r3, #8]
 8002cf4:	f003 0203 	and.w	r2, r3, #3
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002cfc:	4b0f      	ldr	r3, [pc, #60]	; (8002d3c <HAL_RCC_GetClockConfig+0x5c>)
 8002cfe:	689b      	ldr	r3, [r3, #8]
 8002d00:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002d08:	4b0c      	ldr	r3, [pc, #48]	; (8002d3c <HAL_RCC_GetClockConfig+0x5c>)
 8002d0a:	689b      	ldr	r3, [r3, #8]
 8002d0c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002d14:	4b09      	ldr	r3, [pc, #36]	; (8002d3c <HAL_RCC_GetClockConfig+0x5c>)
 8002d16:	689b      	ldr	r3, [r3, #8]
 8002d18:	08db      	lsrs	r3, r3, #3
 8002d1a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002d22:	4b07      	ldr	r3, [pc, #28]	; (8002d40 <HAL_RCC_GetClockConfig+0x60>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f003 020f 	and.w	r2, r3, #15
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	601a      	str	r2, [r3, #0]
}
 8002d2e:	bf00      	nop
 8002d30:	370c      	adds	r7, #12
 8002d32:	46bd      	mov	sp, r7
 8002d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d38:	4770      	bx	lr
 8002d3a:	bf00      	nop
 8002d3c:	40023800 	.word	0x40023800
 8002d40:	40023c00 	.word	0x40023c00

08002d44 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d44:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002d48:	b0ae      	sub	sp, #184	; 0xb8
 8002d4a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8002d52:	2300      	movs	r3, #0
 8002d54:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8002d58:	2300      	movs	r3, #0
 8002d5a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8002d5e:	2300      	movs	r3, #0
 8002d60:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8002d64:	2300      	movs	r3, #0
 8002d66:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002d6a:	4bcb      	ldr	r3, [pc, #812]	; (8003098 <HAL_RCC_GetSysClockFreq+0x354>)
 8002d6c:	689b      	ldr	r3, [r3, #8]
 8002d6e:	f003 030c 	and.w	r3, r3, #12
 8002d72:	2b0c      	cmp	r3, #12
 8002d74:	f200 8206 	bhi.w	8003184 <HAL_RCC_GetSysClockFreq+0x440>
 8002d78:	a201      	add	r2, pc, #4	; (adr r2, 8002d80 <HAL_RCC_GetSysClockFreq+0x3c>)
 8002d7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d7e:	bf00      	nop
 8002d80:	08002db5 	.word	0x08002db5
 8002d84:	08003185 	.word	0x08003185
 8002d88:	08003185 	.word	0x08003185
 8002d8c:	08003185 	.word	0x08003185
 8002d90:	08002dbd 	.word	0x08002dbd
 8002d94:	08003185 	.word	0x08003185
 8002d98:	08003185 	.word	0x08003185
 8002d9c:	08003185 	.word	0x08003185
 8002da0:	08002dc5 	.word	0x08002dc5
 8002da4:	08003185 	.word	0x08003185
 8002da8:	08003185 	.word	0x08003185
 8002dac:	08003185 	.word	0x08003185
 8002db0:	08002fb5 	.word	0x08002fb5
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002db4:	4bb9      	ldr	r3, [pc, #740]	; (800309c <HAL_RCC_GetSysClockFreq+0x358>)
 8002db6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8002dba:	e1e7      	b.n	800318c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002dbc:	4bb8      	ldr	r3, [pc, #736]	; (80030a0 <HAL_RCC_GetSysClockFreq+0x35c>)
 8002dbe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002dc2:	e1e3      	b.n	800318c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002dc4:	4bb4      	ldr	r3, [pc, #720]	; (8003098 <HAL_RCC_GetSysClockFreq+0x354>)
 8002dc6:	685b      	ldr	r3, [r3, #4]
 8002dc8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002dcc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002dd0:	4bb1      	ldr	r3, [pc, #708]	; (8003098 <HAL_RCC_GetSysClockFreq+0x354>)
 8002dd2:	685b      	ldr	r3, [r3, #4]
 8002dd4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d071      	beq.n	8002ec0 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ddc:	4bae      	ldr	r3, [pc, #696]	; (8003098 <HAL_RCC_GetSysClockFreq+0x354>)
 8002dde:	685b      	ldr	r3, [r3, #4]
 8002de0:	099b      	lsrs	r3, r3, #6
 8002de2:	2200      	movs	r2, #0
 8002de4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002de8:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8002dec:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002df0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002df4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002df8:	2300      	movs	r3, #0
 8002dfa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002dfe:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002e02:	4622      	mov	r2, r4
 8002e04:	462b      	mov	r3, r5
 8002e06:	f04f 0000 	mov.w	r0, #0
 8002e0a:	f04f 0100 	mov.w	r1, #0
 8002e0e:	0159      	lsls	r1, r3, #5
 8002e10:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002e14:	0150      	lsls	r0, r2, #5
 8002e16:	4602      	mov	r2, r0
 8002e18:	460b      	mov	r3, r1
 8002e1a:	4621      	mov	r1, r4
 8002e1c:	1a51      	subs	r1, r2, r1
 8002e1e:	6439      	str	r1, [r7, #64]	; 0x40
 8002e20:	4629      	mov	r1, r5
 8002e22:	eb63 0301 	sbc.w	r3, r3, r1
 8002e26:	647b      	str	r3, [r7, #68]	; 0x44
 8002e28:	f04f 0200 	mov.w	r2, #0
 8002e2c:	f04f 0300 	mov.w	r3, #0
 8002e30:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8002e34:	4649      	mov	r1, r9
 8002e36:	018b      	lsls	r3, r1, #6
 8002e38:	4641      	mov	r1, r8
 8002e3a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002e3e:	4641      	mov	r1, r8
 8002e40:	018a      	lsls	r2, r1, #6
 8002e42:	4641      	mov	r1, r8
 8002e44:	1a51      	subs	r1, r2, r1
 8002e46:	63b9      	str	r1, [r7, #56]	; 0x38
 8002e48:	4649      	mov	r1, r9
 8002e4a:	eb63 0301 	sbc.w	r3, r3, r1
 8002e4e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002e50:	f04f 0200 	mov.w	r2, #0
 8002e54:	f04f 0300 	mov.w	r3, #0
 8002e58:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8002e5c:	4649      	mov	r1, r9
 8002e5e:	00cb      	lsls	r3, r1, #3
 8002e60:	4641      	mov	r1, r8
 8002e62:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002e66:	4641      	mov	r1, r8
 8002e68:	00ca      	lsls	r2, r1, #3
 8002e6a:	4610      	mov	r0, r2
 8002e6c:	4619      	mov	r1, r3
 8002e6e:	4603      	mov	r3, r0
 8002e70:	4622      	mov	r2, r4
 8002e72:	189b      	adds	r3, r3, r2
 8002e74:	633b      	str	r3, [r7, #48]	; 0x30
 8002e76:	462b      	mov	r3, r5
 8002e78:	460a      	mov	r2, r1
 8002e7a:	eb42 0303 	adc.w	r3, r2, r3
 8002e7e:	637b      	str	r3, [r7, #52]	; 0x34
 8002e80:	f04f 0200 	mov.w	r2, #0
 8002e84:	f04f 0300 	mov.w	r3, #0
 8002e88:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002e8c:	4629      	mov	r1, r5
 8002e8e:	024b      	lsls	r3, r1, #9
 8002e90:	4621      	mov	r1, r4
 8002e92:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002e96:	4621      	mov	r1, r4
 8002e98:	024a      	lsls	r2, r1, #9
 8002e9a:	4610      	mov	r0, r2
 8002e9c:	4619      	mov	r1, r3
 8002e9e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002ea8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002eac:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8002eb0:	f7fd f9ae 	bl	8000210 <__aeabi_uldivmod>
 8002eb4:	4602      	mov	r2, r0
 8002eb6:	460b      	mov	r3, r1
 8002eb8:	4613      	mov	r3, r2
 8002eba:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002ebe:	e067      	b.n	8002f90 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ec0:	4b75      	ldr	r3, [pc, #468]	; (8003098 <HAL_RCC_GetSysClockFreq+0x354>)
 8002ec2:	685b      	ldr	r3, [r3, #4]
 8002ec4:	099b      	lsrs	r3, r3, #6
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002ecc:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8002ed0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002ed4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ed8:	67bb      	str	r3, [r7, #120]	; 0x78
 8002eda:	2300      	movs	r3, #0
 8002edc:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002ede:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8002ee2:	4622      	mov	r2, r4
 8002ee4:	462b      	mov	r3, r5
 8002ee6:	f04f 0000 	mov.w	r0, #0
 8002eea:	f04f 0100 	mov.w	r1, #0
 8002eee:	0159      	lsls	r1, r3, #5
 8002ef0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002ef4:	0150      	lsls	r0, r2, #5
 8002ef6:	4602      	mov	r2, r0
 8002ef8:	460b      	mov	r3, r1
 8002efa:	4621      	mov	r1, r4
 8002efc:	1a51      	subs	r1, r2, r1
 8002efe:	62b9      	str	r1, [r7, #40]	; 0x28
 8002f00:	4629      	mov	r1, r5
 8002f02:	eb63 0301 	sbc.w	r3, r3, r1
 8002f06:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002f08:	f04f 0200 	mov.w	r2, #0
 8002f0c:	f04f 0300 	mov.w	r3, #0
 8002f10:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8002f14:	4649      	mov	r1, r9
 8002f16:	018b      	lsls	r3, r1, #6
 8002f18:	4641      	mov	r1, r8
 8002f1a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002f1e:	4641      	mov	r1, r8
 8002f20:	018a      	lsls	r2, r1, #6
 8002f22:	4641      	mov	r1, r8
 8002f24:	ebb2 0a01 	subs.w	sl, r2, r1
 8002f28:	4649      	mov	r1, r9
 8002f2a:	eb63 0b01 	sbc.w	fp, r3, r1
 8002f2e:	f04f 0200 	mov.w	r2, #0
 8002f32:	f04f 0300 	mov.w	r3, #0
 8002f36:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002f3a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002f3e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002f42:	4692      	mov	sl, r2
 8002f44:	469b      	mov	fp, r3
 8002f46:	4623      	mov	r3, r4
 8002f48:	eb1a 0303 	adds.w	r3, sl, r3
 8002f4c:	623b      	str	r3, [r7, #32]
 8002f4e:	462b      	mov	r3, r5
 8002f50:	eb4b 0303 	adc.w	r3, fp, r3
 8002f54:	627b      	str	r3, [r7, #36]	; 0x24
 8002f56:	f04f 0200 	mov.w	r2, #0
 8002f5a:	f04f 0300 	mov.w	r3, #0
 8002f5e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002f62:	4629      	mov	r1, r5
 8002f64:	028b      	lsls	r3, r1, #10
 8002f66:	4621      	mov	r1, r4
 8002f68:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002f6c:	4621      	mov	r1, r4
 8002f6e:	028a      	lsls	r2, r1, #10
 8002f70:	4610      	mov	r0, r2
 8002f72:	4619      	mov	r1, r3
 8002f74:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002f78:	2200      	movs	r2, #0
 8002f7a:	673b      	str	r3, [r7, #112]	; 0x70
 8002f7c:	677a      	str	r2, [r7, #116]	; 0x74
 8002f7e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8002f82:	f7fd f945 	bl	8000210 <__aeabi_uldivmod>
 8002f86:	4602      	mov	r2, r0
 8002f88:	460b      	mov	r3, r1
 8002f8a:	4613      	mov	r3, r2
 8002f8c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002f90:	4b41      	ldr	r3, [pc, #260]	; (8003098 <HAL_RCC_GetSysClockFreq+0x354>)
 8002f92:	685b      	ldr	r3, [r3, #4]
 8002f94:	0c1b      	lsrs	r3, r3, #16
 8002f96:	f003 0303 	and.w	r3, r3, #3
 8002f9a:	3301      	adds	r3, #1
 8002f9c:	005b      	lsls	r3, r3, #1
 8002f9e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8002fa2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002fa6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002faa:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fae:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002fb2:	e0eb      	b.n	800318c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002fb4:	4b38      	ldr	r3, [pc, #224]	; (8003098 <HAL_RCC_GetSysClockFreq+0x354>)
 8002fb6:	685b      	ldr	r3, [r3, #4]
 8002fb8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002fbc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002fc0:	4b35      	ldr	r3, [pc, #212]	; (8003098 <HAL_RCC_GetSysClockFreq+0x354>)
 8002fc2:	685b      	ldr	r3, [r3, #4]
 8002fc4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d06b      	beq.n	80030a4 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002fcc:	4b32      	ldr	r3, [pc, #200]	; (8003098 <HAL_RCC_GetSysClockFreq+0x354>)
 8002fce:	685b      	ldr	r3, [r3, #4]
 8002fd0:	099b      	lsrs	r3, r3, #6
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	66bb      	str	r3, [r7, #104]	; 0x68
 8002fd6:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002fd8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002fda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002fde:	663b      	str	r3, [r7, #96]	; 0x60
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	667b      	str	r3, [r7, #100]	; 0x64
 8002fe4:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8002fe8:	4622      	mov	r2, r4
 8002fea:	462b      	mov	r3, r5
 8002fec:	f04f 0000 	mov.w	r0, #0
 8002ff0:	f04f 0100 	mov.w	r1, #0
 8002ff4:	0159      	lsls	r1, r3, #5
 8002ff6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002ffa:	0150      	lsls	r0, r2, #5
 8002ffc:	4602      	mov	r2, r0
 8002ffe:	460b      	mov	r3, r1
 8003000:	4621      	mov	r1, r4
 8003002:	1a51      	subs	r1, r2, r1
 8003004:	61b9      	str	r1, [r7, #24]
 8003006:	4629      	mov	r1, r5
 8003008:	eb63 0301 	sbc.w	r3, r3, r1
 800300c:	61fb      	str	r3, [r7, #28]
 800300e:	f04f 0200 	mov.w	r2, #0
 8003012:	f04f 0300 	mov.w	r3, #0
 8003016:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800301a:	4659      	mov	r1, fp
 800301c:	018b      	lsls	r3, r1, #6
 800301e:	4651      	mov	r1, sl
 8003020:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003024:	4651      	mov	r1, sl
 8003026:	018a      	lsls	r2, r1, #6
 8003028:	4651      	mov	r1, sl
 800302a:	ebb2 0801 	subs.w	r8, r2, r1
 800302e:	4659      	mov	r1, fp
 8003030:	eb63 0901 	sbc.w	r9, r3, r1
 8003034:	f04f 0200 	mov.w	r2, #0
 8003038:	f04f 0300 	mov.w	r3, #0
 800303c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003040:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003044:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003048:	4690      	mov	r8, r2
 800304a:	4699      	mov	r9, r3
 800304c:	4623      	mov	r3, r4
 800304e:	eb18 0303 	adds.w	r3, r8, r3
 8003052:	613b      	str	r3, [r7, #16]
 8003054:	462b      	mov	r3, r5
 8003056:	eb49 0303 	adc.w	r3, r9, r3
 800305a:	617b      	str	r3, [r7, #20]
 800305c:	f04f 0200 	mov.w	r2, #0
 8003060:	f04f 0300 	mov.w	r3, #0
 8003064:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8003068:	4629      	mov	r1, r5
 800306a:	024b      	lsls	r3, r1, #9
 800306c:	4621      	mov	r1, r4
 800306e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003072:	4621      	mov	r1, r4
 8003074:	024a      	lsls	r2, r1, #9
 8003076:	4610      	mov	r0, r2
 8003078:	4619      	mov	r1, r3
 800307a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800307e:	2200      	movs	r2, #0
 8003080:	65bb      	str	r3, [r7, #88]	; 0x58
 8003082:	65fa      	str	r2, [r7, #92]	; 0x5c
 8003084:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003088:	f7fd f8c2 	bl	8000210 <__aeabi_uldivmod>
 800308c:	4602      	mov	r2, r0
 800308e:	460b      	mov	r3, r1
 8003090:	4613      	mov	r3, r2
 8003092:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003096:	e065      	b.n	8003164 <HAL_RCC_GetSysClockFreq+0x420>
 8003098:	40023800 	.word	0x40023800
 800309c:	00f42400 	.word	0x00f42400
 80030a0:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80030a4:	4b3d      	ldr	r3, [pc, #244]	; (800319c <HAL_RCC_GetSysClockFreq+0x458>)
 80030a6:	685b      	ldr	r3, [r3, #4]
 80030a8:	099b      	lsrs	r3, r3, #6
 80030aa:	2200      	movs	r2, #0
 80030ac:	4618      	mov	r0, r3
 80030ae:	4611      	mov	r1, r2
 80030b0:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80030b4:	653b      	str	r3, [r7, #80]	; 0x50
 80030b6:	2300      	movs	r3, #0
 80030b8:	657b      	str	r3, [r7, #84]	; 0x54
 80030ba:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 80030be:	4642      	mov	r2, r8
 80030c0:	464b      	mov	r3, r9
 80030c2:	f04f 0000 	mov.w	r0, #0
 80030c6:	f04f 0100 	mov.w	r1, #0
 80030ca:	0159      	lsls	r1, r3, #5
 80030cc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80030d0:	0150      	lsls	r0, r2, #5
 80030d2:	4602      	mov	r2, r0
 80030d4:	460b      	mov	r3, r1
 80030d6:	4641      	mov	r1, r8
 80030d8:	1a51      	subs	r1, r2, r1
 80030da:	60b9      	str	r1, [r7, #8]
 80030dc:	4649      	mov	r1, r9
 80030de:	eb63 0301 	sbc.w	r3, r3, r1
 80030e2:	60fb      	str	r3, [r7, #12]
 80030e4:	f04f 0200 	mov.w	r2, #0
 80030e8:	f04f 0300 	mov.w	r3, #0
 80030ec:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80030f0:	4659      	mov	r1, fp
 80030f2:	018b      	lsls	r3, r1, #6
 80030f4:	4651      	mov	r1, sl
 80030f6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80030fa:	4651      	mov	r1, sl
 80030fc:	018a      	lsls	r2, r1, #6
 80030fe:	4651      	mov	r1, sl
 8003100:	1a54      	subs	r4, r2, r1
 8003102:	4659      	mov	r1, fp
 8003104:	eb63 0501 	sbc.w	r5, r3, r1
 8003108:	f04f 0200 	mov.w	r2, #0
 800310c:	f04f 0300 	mov.w	r3, #0
 8003110:	00eb      	lsls	r3, r5, #3
 8003112:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003116:	00e2      	lsls	r2, r4, #3
 8003118:	4614      	mov	r4, r2
 800311a:	461d      	mov	r5, r3
 800311c:	4643      	mov	r3, r8
 800311e:	18e3      	adds	r3, r4, r3
 8003120:	603b      	str	r3, [r7, #0]
 8003122:	464b      	mov	r3, r9
 8003124:	eb45 0303 	adc.w	r3, r5, r3
 8003128:	607b      	str	r3, [r7, #4]
 800312a:	f04f 0200 	mov.w	r2, #0
 800312e:	f04f 0300 	mov.w	r3, #0
 8003132:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003136:	4629      	mov	r1, r5
 8003138:	028b      	lsls	r3, r1, #10
 800313a:	4621      	mov	r1, r4
 800313c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003140:	4621      	mov	r1, r4
 8003142:	028a      	lsls	r2, r1, #10
 8003144:	4610      	mov	r0, r2
 8003146:	4619      	mov	r1, r3
 8003148:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800314c:	2200      	movs	r2, #0
 800314e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003150:	64fa      	str	r2, [r7, #76]	; 0x4c
 8003152:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003156:	f7fd f85b 	bl	8000210 <__aeabi_uldivmod>
 800315a:	4602      	mov	r2, r0
 800315c:	460b      	mov	r3, r1
 800315e:	4613      	mov	r3, r2
 8003160:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003164:	4b0d      	ldr	r3, [pc, #52]	; (800319c <HAL_RCC_GetSysClockFreq+0x458>)
 8003166:	685b      	ldr	r3, [r3, #4]
 8003168:	0f1b      	lsrs	r3, r3, #28
 800316a:	f003 0307 	and.w	r3, r3, #7
 800316e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8003172:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003176:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800317a:	fbb2 f3f3 	udiv	r3, r2, r3
 800317e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003182:	e003      	b.n	800318c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003184:	4b06      	ldr	r3, [pc, #24]	; (80031a0 <HAL_RCC_GetSysClockFreq+0x45c>)
 8003186:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800318a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800318c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8003190:	4618      	mov	r0, r3
 8003192:	37b8      	adds	r7, #184	; 0xb8
 8003194:	46bd      	mov	sp, r7
 8003196:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800319a:	bf00      	nop
 800319c:	40023800 	.word	0x40023800
 80031a0:	00f42400 	.word	0x00f42400

080031a4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b086      	sub	sp, #24
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d101      	bne.n	80031b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80031b2:	2301      	movs	r3, #1
 80031b4:	e28d      	b.n	80036d2 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f003 0301 	and.w	r3, r3, #1
 80031be:	2b00      	cmp	r3, #0
 80031c0:	f000 8083 	beq.w	80032ca <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80031c4:	4b94      	ldr	r3, [pc, #592]	; (8003418 <HAL_RCC_OscConfig+0x274>)
 80031c6:	689b      	ldr	r3, [r3, #8]
 80031c8:	f003 030c 	and.w	r3, r3, #12
 80031cc:	2b04      	cmp	r3, #4
 80031ce:	d019      	beq.n	8003204 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80031d0:	4b91      	ldr	r3, [pc, #580]	; (8003418 <HAL_RCC_OscConfig+0x274>)
 80031d2:	689b      	ldr	r3, [r3, #8]
 80031d4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80031d8:	2b08      	cmp	r3, #8
 80031da:	d106      	bne.n	80031ea <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80031dc:	4b8e      	ldr	r3, [pc, #568]	; (8003418 <HAL_RCC_OscConfig+0x274>)
 80031de:	685b      	ldr	r3, [r3, #4]
 80031e0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031e4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80031e8:	d00c      	beq.n	8003204 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80031ea:	4b8b      	ldr	r3, [pc, #556]	; (8003418 <HAL_RCC_OscConfig+0x274>)
 80031ec:	689b      	ldr	r3, [r3, #8]
 80031ee:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80031f2:	2b0c      	cmp	r3, #12
 80031f4:	d112      	bne.n	800321c <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80031f6:	4b88      	ldr	r3, [pc, #544]	; (8003418 <HAL_RCC_OscConfig+0x274>)
 80031f8:	685b      	ldr	r3, [r3, #4]
 80031fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031fe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003202:	d10b      	bne.n	800321c <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003204:	4b84      	ldr	r3, [pc, #528]	; (8003418 <HAL_RCC_OscConfig+0x274>)
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800320c:	2b00      	cmp	r3, #0
 800320e:	d05b      	beq.n	80032c8 <HAL_RCC_OscConfig+0x124>
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	685b      	ldr	r3, [r3, #4]
 8003214:	2b00      	cmp	r3, #0
 8003216:	d157      	bne.n	80032c8 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003218:	2301      	movs	r3, #1
 800321a:	e25a      	b.n	80036d2 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	685b      	ldr	r3, [r3, #4]
 8003220:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003224:	d106      	bne.n	8003234 <HAL_RCC_OscConfig+0x90>
 8003226:	4b7c      	ldr	r3, [pc, #496]	; (8003418 <HAL_RCC_OscConfig+0x274>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	4a7b      	ldr	r2, [pc, #492]	; (8003418 <HAL_RCC_OscConfig+0x274>)
 800322c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003230:	6013      	str	r3, [r2, #0]
 8003232:	e01d      	b.n	8003270 <HAL_RCC_OscConfig+0xcc>
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	685b      	ldr	r3, [r3, #4]
 8003238:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800323c:	d10c      	bne.n	8003258 <HAL_RCC_OscConfig+0xb4>
 800323e:	4b76      	ldr	r3, [pc, #472]	; (8003418 <HAL_RCC_OscConfig+0x274>)
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	4a75      	ldr	r2, [pc, #468]	; (8003418 <HAL_RCC_OscConfig+0x274>)
 8003244:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003248:	6013      	str	r3, [r2, #0]
 800324a:	4b73      	ldr	r3, [pc, #460]	; (8003418 <HAL_RCC_OscConfig+0x274>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	4a72      	ldr	r2, [pc, #456]	; (8003418 <HAL_RCC_OscConfig+0x274>)
 8003250:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003254:	6013      	str	r3, [r2, #0]
 8003256:	e00b      	b.n	8003270 <HAL_RCC_OscConfig+0xcc>
 8003258:	4b6f      	ldr	r3, [pc, #444]	; (8003418 <HAL_RCC_OscConfig+0x274>)
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	4a6e      	ldr	r2, [pc, #440]	; (8003418 <HAL_RCC_OscConfig+0x274>)
 800325e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003262:	6013      	str	r3, [r2, #0]
 8003264:	4b6c      	ldr	r3, [pc, #432]	; (8003418 <HAL_RCC_OscConfig+0x274>)
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	4a6b      	ldr	r2, [pc, #428]	; (8003418 <HAL_RCC_OscConfig+0x274>)
 800326a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800326e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	685b      	ldr	r3, [r3, #4]
 8003274:	2b00      	cmp	r3, #0
 8003276:	d013      	beq.n	80032a0 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003278:	f7fe fb5a 	bl	8001930 <HAL_GetTick>
 800327c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800327e:	e008      	b.n	8003292 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003280:	f7fe fb56 	bl	8001930 <HAL_GetTick>
 8003284:	4602      	mov	r2, r0
 8003286:	693b      	ldr	r3, [r7, #16]
 8003288:	1ad3      	subs	r3, r2, r3
 800328a:	2b64      	cmp	r3, #100	; 0x64
 800328c:	d901      	bls.n	8003292 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800328e:	2303      	movs	r3, #3
 8003290:	e21f      	b.n	80036d2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003292:	4b61      	ldr	r3, [pc, #388]	; (8003418 <HAL_RCC_OscConfig+0x274>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800329a:	2b00      	cmp	r3, #0
 800329c:	d0f0      	beq.n	8003280 <HAL_RCC_OscConfig+0xdc>
 800329e:	e014      	b.n	80032ca <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032a0:	f7fe fb46 	bl	8001930 <HAL_GetTick>
 80032a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032a6:	e008      	b.n	80032ba <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80032a8:	f7fe fb42 	bl	8001930 <HAL_GetTick>
 80032ac:	4602      	mov	r2, r0
 80032ae:	693b      	ldr	r3, [r7, #16]
 80032b0:	1ad3      	subs	r3, r2, r3
 80032b2:	2b64      	cmp	r3, #100	; 0x64
 80032b4:	d901      	bls.n	80032ba <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80032b6:	2303      	movs	r3, #3
 80032b8:	e20b      	b.n	80036d2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032ba:	4b57      	ldr	r3, [pc, #348]	; (8003418 <HAL_RCC_OscConfig+0x274>)
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d1f0      	bne.n	80032a8 <HAL_RCC_OscConfig+0x104>
 80032c6:	e000      	b.n	80032ca <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f003 0302 	and.w	r3, r3, #2
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d06f      	beq.n	80033b6 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80032d6:	4b50      	ldr	r3, [pc, #320]	; (8003418 <HAL_RCC_OscConfig+0x274>)
 80032d8:	689b      	ldr	r3, [r3, #8]
 80032da:	f003 030c 	and.w	r3, r3, #12
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d017      	beq.n	8003312 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80032e2:	4b4d      	ldr	r3, [pc, #308]	; (8003418 <HAL_RCC_OscConfig+0x274>)
 80032e4:	689b      	ldr	r3, [r3, #8]
 80032e6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80032ea:	2b08      	cmp	r3, #8
 80032ec:	d105      	bne.n	80032fa <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80032ee:	4b4a      	ldr	r3, [pc, #296]	; (8003418 <HAL_RCC_OscConfig+0x274>)
 80032f0:	685b      	ldr	r3, [r3, #4]
 80032f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d00b      	beq.n	8003312 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80032fa:	4b47      	ldr	r3, [pc, #284]	; (8003418 <HAL_RCC_OscConfig+0x274>)
 80032fc:	689b      	ldr	r3, [r3, #8]
 80032fe:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003302:	2b0c      	cmp	r3, #12
 8003304:	d11c      	bne.n	8003340 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003306:	4b44      	ldr	r3, [pc, #272]	; (8003418 <HAL_RCC_OscConfig+0x274>)
 8003308:	685b      	ldr	r3, [r3, #4]
 800330a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800330e:	2b00      	cmp	r3, #0
 8003310:	d116      	bne.n	8003340 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003312:	4b41      	ldr	r3, [pc, #260]	; (8003418 <HAL_RCC_OscConfig+0x274>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f003 0302 	and.w	r3, r3, #2
 800331a:	2b00      	cmp	r3, #0
 800331c:	d005      	beq.n	800332a <HAL_RCC_OscConfig+0x186>
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	68db      	ldr	r3, [r3, #12]
 8003322:	2b01      	cmp	r3, #1
 8003324:	d001      	beq.n	800332a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003326:	2301      	movs	r3, #1
 8003328:	e1d3      	b.n	80036d2 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800332a:	4b3b      	ldr	r3, [pc, #236]	; (8003418 <HAL_RCC_OscConfig+0x274>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	691b      	ldr	r3, [r3, #16]
 8003336:	00db      	lsls	r3, r3, #3
 8003338:	4937      	ldr	r1, [pc, #220]	; (8003418 <HAL_RCC_OscConfig+0x274>)
 800333a:	4313      	orrs	r3, r2
 800333c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800333e:	e03a      	b.n	80033b6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	68db      	ldr	r3, [r3, #12]
 8003344:	2b00      	cmp	r3, #0
 8003346:	d020      	beq.n	800338a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003348:	4b34      	ldr	r3, [pc, #208]	; (800341c <HAL_RCC_OscConfig+0x278>)
 800334a:	2201      	movs	r2, #1
 800334c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800334e:	f7fe faef 	bl	8001930 <HAL_GetTick>
 8003352:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003354:	e008      	b.n	8003368 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003356:	f7fe faeb 	bl	8001930 <HAL_GetTick>
 800335a:	4602      	mov	r2, r0
 800335c:	693b      	ldr	r3, [r7, #16]
 800335e:	1ad3      	subs	r3, r2, r3
 8003360:	2b02      	cmp	r3, #2
 8003362:	d901      	bls.n	8003368 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003364:	2303      	movs	r3, #3
 8003366:	e1b4      	b.n	80036d2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003368:	4b2b      	ldr	r3, [pc, #172]	; (8003418 <HAL_RCC_OscConfig+0x274>)
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f003 0302 	and.w	r3, r3, #2
 8003370:	2b00      	cmp	r3, #0
 8003372:	d0f0      	beq.n	8003356 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003374:	4b28      	ldr	r3, [pc, #160]	; (8003418 <HAL_RCC_OscConfig+0x274>)
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	691b      	ldr	r3, [r3, #16]
 8003380:	00db      	lsls	r3, r3, #3
 8003382:	4925      	ldr	r1, [pc, #148]	; (8003418 <HAL_RCC_OscConfig+0x274>)
 8003384:	4313      	orrs	r3, r2
 8003386:	600b      	str	r3, [r1, #0]
 8003388:	e015      	b.n	80033b6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800338a:	4b24      	ldr	r3, [pc, #144]	; (800341c <HAL_RCC_OscConfig+0x278>)
 800338c:	2200      	movs	r2, #0
 800338e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003390:	f7fe face 	bl	8001930 <HAL_GetTick>
 8003394:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003396:	e008      	b.n	80033aa <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003398:	f7fe faca 	bl	8001930 <HAL_GetTick>
 800339c:	4602      	mov	r2, r0
 800339e:	693b      	ldr	r3, [r7, #16]
 80033a0:	1ad3      	subs	r3, r2, r3
 80033a2:	2b02      	cmp	r3, #2
 80033a4:	d901      	bls.n	80033aa <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80033a6:	2303      	movs	r3, #3
 80033a8:	e193      	b.n	80036d2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033aa:	4b1b      	ldr	r3, [pc, #108]	; (8003418 <HAL_RCC_OscConfig+0x274>)
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f003 0302 	and.w	r3, r3, #2
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d1f0      	bne.n	8003398 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f003 0308 	and.w	r3, r3, #8
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d036      	beq.n	8003430 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	695b      	ldr	r3, [r3, #20]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d016      	beq.n	80033f8 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80033ca:	4b15      	ldr	r3, [pc, #84]	; (8003420 <HAL_RCC_OscConfig+0x27c>)
 80033cc:	2201      	movs	r2, #1
 80033ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033d0:	f7fe faae 	bl	8001930 <HAL_GetTick>
 80033d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033d6:	e008      	b.n	80033ea <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80033d8:	f7fe faaa 	bl	8001930 <HAL_GetTick>
 80033dc:	4602      	mov	r2, r0
 80033de:	693b      	ldr	r3, [r7, #16]
 80033e0:	1ad3      	subs	r3, r2, r3
 80033e2:	2b02      	cmp	r3, #2
 80033e4:	d901      	bls.n	80033ea <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80033e6:	2303      	movs	r3, #3
 80033e8:	e173      	b.n	80036d2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033ea:	4b0b      	ldr	r3, [pc, #44]	; (8003418 <HAL_RCC_OscConfig+0x274>)
 80033ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033ee:	f003 0302 	and.w	r3, r3, #2
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d0f0      	beq.n	80033d8 <HAL_RCC_OscConfig+0x234>
 80033f6:	e01b      	b.n	8003430 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80033f8:	4b09      	ldr	r3, [pc, #36]	; (8003420 <HAL_RCC_OscConfig+0x27c>)
 80033fa:	2200      	movs	r2, #0
 80033fc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033fe:	f7fe fa97 	bl	8001930 <HAL_GetTick>
 8003402:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003404:	e00e      	b.n	8003424 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003406:	f7fe fa93 	bl	8001930 <HAL_GetTick>
 800340a:	4602      	mov	r2, r0
 800340c:	693b      	ldr	r3, [r7, #16]
 800340e:	1ad3      	subs	r3, r2, r3
 8003410:	2b02      	cmp	r3, #2
 8003412:	d907      	bls.n	8003424 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003414:	2303      	movs	r3, #3
 8003416:	e15c      	b.n	80036d2 <HAL_RCC_OscConfig+0x52e>
 8003418:	40023800 	.word	0x40023800
 800341c:	42470000 	.word	0x42470000
 8003420:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003424:	4b8a      	ldr	r3, [pc, #552]	; (8003650 <HAL_RCC_OscConfig+0x4ac>)
 8003426:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003428:	f003 0302 	and.w	r3, r3, #2
 800342c:	2b00      	cmp	r3, #0
 800342e:	d1ea      	bne.n	8003406 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f003 0304 	and.w	r3, r3, #4
 8003438:	2b00      	cmp	r3, #0
 800343a:	f000 8097 	beq.w	800356c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800343e:	2300      	movs	r3, #0
 8003440:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003442:	4b83      	ldr	r3, [pc, #524]	; (8003650 <HAL_RCC_OscConfig+0x4ac>)
 8003444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003446:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800344a:	2b00      	cmp	r3, #0
 800344c:	d10f      	bne.n	800346e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800344e:	2300      	movs	r3, #0
 8003450:	60bb      	str	r3, [r7, #8]
 8003452:	4b7f      	ldr	r3, [pc, #508]	; (8003650 <HAL_RCC_OscConfig+0x4ac>)
 8003454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003456:	4a7e      	ldr	r2, [pc, #504]	; (8003650 <HAL_RCC_OscConfig+0x4ac>)
 8003458:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800345c:	6413      	str	r3, [r2, #64]	; 0x40
 800345e:	4b7c      	ldr	r3, [pc, #496]	; (8003650 <HAL_RCC_OscConfig+0x4ac>)
 8003460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003462:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003466:	60bb      	str	r3, [r7, #8]
 8003468:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800346a:	2301      	movs	r3, #1
 800346c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800346e:	4b79      	ldr	r3, [pc, #484]	; (8003654 <HAL_RCC_OscConfig+0x4b0>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003476:	2b00      	cmp	r3, #0
 8003478:	d118      	bne.n	80034ac <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800347a:	4b76      	ldr	r3, [pc, #472]	; (8003654 <HAL_RCC_OscConfig+0x4b0>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	4a75      	ldr	r2, [pc, #468]	; (8003654 <HAL_RCC_OscConfig+0x4b0>)
 8003480:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003484:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003486:	f7fe fa53 	bl	8001930 <HAL_GetTick>
 800348a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800348c:	e008      	b.n	80034a0 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800348e:	f7fe fa4f 	bl	8001930 <HAL_GetTick>
 8003492:	4602      	mov	r2, r0
 8003494:	693b      	ldr	r3, [r7, #16]
 8003496:	1ad3      	subs	r3, r2, r3
 8003498:	2b02      	cmp	r3, #2
 800349a:	d901      	bls.n	80034a0 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800349c:	2303      	movs	r3, #3
 800349e:	e118      	b.n	80036d2 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034a0:	4b6c      	ldr	r3, [pc, #432]	; (8003654 <HAL_RCC_OscConfig+0x4b0>)
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d0f0      	beq.n	800348e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	689b      	ldr	r3, [r3, #8]
 80034b0:	2b01      	cmp	r3, #1
 80034b2:	d106      	bne.n	80034c2 <HAL_RCC_OscConfig+0x31e>
 80034b4:	4b66      	ldr	r3, [pc, #408]	; (8003650 <HAL_RCC_OscConfig+0x4ac>)
 80034b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034b8:	4a65      	ldr	r2, [pc, #404]	; (8003650 <HAL_RCC_OscConfig+0x4ac>)
 80034ba:	f043 0301 	orr.w	r3, r3, #1
 80034be:	6713      	str	r3, [r2, #112]	; 0x70
 80034c0:	e01c      	b.n	80034fc <HAL_RCC_OscConfig+0x358>
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	689b      	ldr	r3, [r3, #8]
 80034c6:	2b05      	cmp	r3, #5
 80034c8:	d10c      	bne.n	80034e4 <HAL_RCC_OscConfig+0x340>
 80034ca:	4b61      	ldr	r3, [pc, #388]	; (8003650 <HAL_RCC_OscConfig+0x4ac>)
 80034cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034ce:	4a60      	ldr	r2, [pc, #384]	; (8003650 <HAL_RCC_OscConfig+0x4ac>)
 80034d0:	f043 0304 	orr.w	r3, r3, #4
 80034d4:	6713      	str	r3, [r2, #112]	; 0x70
 80034d6:	4b5e      	ldr	r3, [pc, #376]	; (8003650 <HAL_RCC_OscConfig+0x4ac>)
 80034d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034da:	4a5d      	ldr	r2, [pc, #372]	; (8003650 <HAL_RCC_OscConfig+0x4ac>)
 80034dc:	f043 0301 	orr.w	r3, r3, #1
 80034e0:	6713      	str	r3, [r2, #112]	; 0x70
 80034e2:	e00b      	b.n	80034fc <HAL_RCC_OscConfig+0x358>
 80034e4:	4b5a      	ldr	r3, [pc, #360]	; (8003650 <HAL_RCC_OscConfig+0x4ac>)
 80034e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034e8:	4a59      	ldr	r2, [pc, #356]	; (8003650 <HAL_RCC_OscConfig+0x4ac>)
 80034ea:	f023 0301 	bic.w	r3, r3, #1
 80034ee:	6713      	str	r3, [r2, #112]	; 0x70
 80034f0:	4b57      	ldr	r3, [pc, #348]	; (8003650 <HAL_RCC_OscConfig+0x4ac>)
 80034f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034f4:	4a56      	ldr	r2, [pc, #344]	; (8003650 <HAL_RCC_OscConfig+0x4ac>)
 80034f6:	f023 0304 	bic.w	r3, r3, #4
 80034fa:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	689b      	ldr	r3, [r3, #8]
 8003500:	2b00      	cmp	r3, #0
 8003502:	d015      	beq.n	8003530 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003504:	f7fe fa14 	bl	8001930 <HAL_GetTick>
 8003508:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800350a:	e00a      	b.n	8003522 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800350c:	f7fe fa10 	bl	8001930 <HAL_GetTick>
 8003510:	4602      	mov	r2, r0
 8003512:	693b      	ldr	r3, [r7, #16]
 8003514:	1ad3      	subs	r3, r2, r3
 8003516:	f241 3288 	movw	r2, #5000	; 0x1388
 800351a:	4293      	cmp	r3, r2
 800351c:	d901      	bls.n	8003522 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800351e:	2303      	movs	r3, #3
 8003520:	e0d7      	b.n	80036d2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003522:	4b4b      	ldr	r3, [pc, #300]	; (8003650 <HAL_RCC_OscConfig+0x4ac>)
 8003524:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003526:	f003 0302 	and.w	r3, r3, #2
 800352a:	2b00      	cmp	r3, #0
 800352c:	d0ee      	beq.n	800350c <HAL_RCC_OscConfig+0x368>
 800352e:	e014      	b.n	800355a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003530:	f7fe f9fe 	bl	8001930 <HAL_GetTick>
 8003534:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003536:	e00a      	b.n	800354e <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003538:	f7fe f9fa 	bl	8001930 <HAL_GetTick>
 800353c:	4602      	mov	r2, r0
 800353e:	693b      	ldr	r3, [r7, #16]
 8003540:	1ad3      	subs	r3, r2, r3
 8003542:	f241 3288 	movw	r2, #5000	; 0x1388
 8003546:	4293      	cmp	r3, r2
 8003548:	d901      	bls.n	800354e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800354a:	2303      	movs	r3, #3
 800354c:	e0c1      	b.n	80036d2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800354e:	4b40      	ldr	r3, [pc, #256]	; (8003650 <HAL_RCC_OscConfig+0x4ac>)
 8003550:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003552:	f003 0302 	and.w	r3, r3, #2
 8003556:	2b00      	cmp	r3, #0
 8003558:	d1ee      	bne.n	8003538 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800355a:	7dfb      	ldrb	r3, [r7, #23]
 800355c:	2b01      	cmp	r3, #1
 800355e:	d105      	bne.n	800356c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003560:	4b3b      	ldr	r3, [pc, #236]	; (8003650 <HAL_RCC_OscConfig+0x4ac>)
 8003562:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003564:	4a3a      	ldr	r2, [pc, #232]	; (8003650 <HAL_RCC_OscConfig+0x4ac>)
 8003566:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800356a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	699b      	ldr	r3, [r3, #24]
 8003570:	2b00      	cmp	r3, #0
 8003572:	f000 80ad 	beq.w	80036d0 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003576:	4b36      	ldr	r3, [pc, #216]	; (8003650 <HAL_RCC_OscConfig+0x4ac>)
 8003578:	689b      	ldr	r3, [r3, #8]
 800357a:	f003 030c 	and.w	r3, r3, #12
 800357e:	2b08      	cmp	r3, #8
 8003580:	d060      	beq.n	8003644 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	699b      	ldr	r3, [r3, #24]
 8003586:	2b02      	cmp	r3, #2
 8003588:	d145      	bne.n	8003616 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800358a:	4b33      	ldr	r3, [pc, #204]	; (8003658 <HAL_RCC_OscConfig+0x4b4>)
 800358c:	2200      	movs	r2, #0
 800358e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003590:	f7fe f9ce 	bl	8001930 <HAL_GetTick>
 8003594:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003596:	e008      	b.n	80035aa <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003598:	f7fe f9ca 	bl	8001930 <HAL_GetTick>
 800359c:	4602      	mov	r2, r0
 800359e:	693b      	ldr	r3, [r7, #16]
 80035a0:	1ad3      	subs	r3, r2, r3
 80035a2:	2b02      	cmp	r3, #2
 80035a4:	d901      	bls.n	80035aa <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80035a6:	2303      	movs	r3, #3
 80035a8:	e093      	b.n	80036d2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035aa:	4b29      	ldr	r3, [pc, #164]	; (8003650 <HAL_RCC_OscConfig+0x4ac>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d1f0      	bne.n	8003598 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	69da      	ldr	r2, [r3, #28]
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6a1b      	ldr	r3, [r3, #32]
 80035be:	431a      	orrs	r2, r3
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035c4:	019b      	lsls	r3, r3, #6
 80035c6:	431a      	orrs	r2, r3
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035cc:	085b      	lsrs	r3, r3, #1
 80035ce:	3b01      	subs	r3, #1
 80035d0:	041b      	lsls	r3, r3, #16
 80035d2:	431a      	orrs	r2, r3
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035d8:	061b      	lsls	r3, r3, #24
 80035da:	431a      	orrs	r2, r3
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035e0:	071b      	lsls	r3, r3, #28
 80035e2:	491b      	ldr	r1, [pc, #108]	; (8003650 <HAL_RCC_OscConfig+0x4ac>)
 80035e4:	4313      	orrs	r3, r2
 80035e6:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80035e8:	4b1b      	ldr	r3, [pc, #108]	; (8003658 <HAL_RCC_OscConfig+0x4b4>)
 80035ea:	2201      	movs	r2, #1
 80035ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035ee:	f7fe f99f 	bl	8001930 <HAL_GetTick>
 80035f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035f4:	e008      	b.n	8003608 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035f6:	f7fe f99b 	bl	8001930 <HAL_GetTick>
 80035fa:	4602      	mov	r2, r0
 80035fc:	693b      	ldr	r3, [r7, #16]
 80035fe:	1ad3      	subs	r3, r2, r3
 8003600:	2b02      	cmp	r3, #2
 8003602:	d901      	bls.n	8003608 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003604:	2303      	movs	r3, #3
 8003606:	e064      	b.n	80036d2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003608:	4b11      	ldr	r3, [pc, #68]	; (8003650 <HAL_RCC_OscConfig+0x4ac>)
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003610:	2b00      	cmp	r3, #0
 8003612:	d0f0      	beq.n	80035f6 <HAL_RCC_OscConfig+0x452>
 8003614:	e05c      	b.n	80036d0 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003616:	4b10      	ldr	r3, [pc, #64]	; (8003658 <HAL_RCC_OscConfig+0x4b4>)
 8003618:	2200      	movs	r2, #0
 800361a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800361c:	f7fe f988 	bl	8001930 <HAL_GetTick>
 8003620:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003622:	e008      	b.n	8003636 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003624:	f7fe f984 	bl	8001930 <HAL_GetTick>
 8003628:	4602      	mov	r2, r0
 800362a:	693b      	ldr	r3, [r7, #16]
 800362c:	1ad3      	subs	r3, r2, r3
 800362e:	2b02      	cmp	r3, #2
 8003630:	d901      	bls.n	8003636 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003632:	2303      	movs	r3, #3
 8003634:	e04d      	b.n	80036d2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003636:	4b06      	ldr	r3, [pc, #24]	; (8003650 <HAL_RCC_OscConfig+0x4ac>)
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800363e:	2b00      	cmp	r3, #0
 8003640:	d1f0      	bne.n	8003624 <HAL_RCC_OscConfig+0x480>
 8003642:	e045      	b.n	80036d0 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	699b      	ldr	r3, [r3, #24]
 8003648:	2b01      	cmp	r3, #1
 800364a:	d107      	bne.n	800365c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800364c:	2301      	movs	r3, #1
 800364e:	e040      	b.n	80036d2 <HAL_RCC_OscConfig+0x52e>
 8003650:	40023800 	.word	0x40023800
 8003654:	40007000 	.word	0x40007000
 8003658:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800365c:	4b1f      	ldr	r3, [pc, #124]	; (80036dc <HAL_RCC_OscConfig+0x538>)
 800365e:	685b      	ldr	r3, [r3, #4]
 8003660:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	699b      	ldr	r3, [r3, #24]
 8003666:	2b01      	cmp	r3, #1
 8003668:	d030      	beq.n	80036cc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003674:	429a      	cmp	r2, r3
 8003676:	d129      	bne.n	80036cc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003682:	429a      	cmp	r2, r3
 8003684:	d122      	bne.n	80036cc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003686:	68fa      	ldr	r2, [r7, #12]
 8003688:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800368c:	4013      	ands	r3, r2
 800368e:	687a      	ldr	r2, [r7, #4]
 8003690:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003692:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003694:	4293      	cmp	r3, r2
 8003696:	d119      	bne.n	80036cc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036a2:	085b      	lsrs	r3, r3, #1
 80036a4:	3b01      	subs	r3, #1
 80036a6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80036a8:	429a      	cmp	r2, r3
 80036aa:	d10f      	bne.n	80036cc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036b6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80036b8:	429a      	cmp	r2, r3
 80036ba:	d107      	bne.n	80036cc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036c6:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80036c8:	429a      	cmp	r2, r3
 80036ca:	d001      	beq.n	80036d0 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80036cc:	2301      	movs	r3, #1
 80036ce:	e000      	b.n	80036d2 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80036d0:	2300      	movs	r3, #0
}
 80036d2:	4618      	mov	r0, r3
 80036d4:	3718      	adds	r7, #24
 80036d6:	46bd      	mov	sp, r7
 80036d8:	bd80      	pop	{r7, pc}
 80036da:	bf00      	nop
 80036dc:	40023800 	.word	0x40023800

080036e0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b082      	sub	sp, #8
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d101      	bne.n	80036f2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80036ee:	2301      	movs	r3, #1
 80036f0:	e041      	b.n	8003776 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036f8:	b2db      	uxtb	r3, r3
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d106      	bne.n	800370c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	2200      	movs	r2, #0
 8003702:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003706:	6878      	ldr	r0, [r7, #4]
 8003708:	f000 f839 	bl	800377e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2202      	movs	r2, #2
 8003710:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681a      	ldr	r2, [r3, #0]
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	3304      	adds	r3, #4
 800371c:	4619      	mov	r1, r3
 800371e:	4610      	mov	r0, r2
 8003720:	f000 f9c0 	bl	8003aa4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2201      	movs	r2, #1
 8003728:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2201      	movs	r2, #1
 8003730:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2201      	movs	r2, #1
 8003738:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2201      	movs	r2, #1
 8003740:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2201      	movs	r2, #1
 8003748:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2201      	movs	r2, #1
 8003750:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2201      	movs	r2, #1
 8003758:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2201      	movs	r2, #1
 8003760:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2201      	movs	r2, #1
 8003768:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2201      	movs	r2, #1
 8003770:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003774:	2300      	movs	r3, #0
}
 8003776:	4618      	mov	r0, r3
 8003778:	3708      	adds	r7, #8
 800377a:	46bd      	mov	sp, r7
 800377c:	bd80      	pop	{r7, pc}

0800377e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800377e:	b480      	push	{r7}
 8003780:	b083      	sub	sp, #12
 8003782:	af00      	add	r7, sp, #0
 8003784:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003786:	bf00      	nop
 8003788:	370c      	adds	r7, #12
 800378a:	46bd      	mov	sp, r7
 800378c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003790:	4770      	bx	lr
	...

08003794 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003794:	b480      	push	{r7}
 8003796:	b085      	sub	sp, #20
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037a2:	b2db      	uxtb	r3, r3
 80037a4:	2b01      	cmp	r3, #1
 80037a6:	d001      	beq.n	80037ac <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80037a8:	2301      	movs	r3, #1
 80037aa:	e04e      	b.n	800384a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2202      	movs	r2, #2
 80037b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	68da      	ldr	r2, [r3, #12]
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f042 0201 	orr.w	r2, r2, #1
 80037c2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	4a23      	ldr	r2, [pc, #140]	; (8003858 <HAL_TIM_Base_Start_IT+0xc4>)
 80037ca:	4293      	cmp	r3, r2
 80037cc:	d022      	beq.n	8003814 <HAL_TIM_Base_Start_IT+0x80>
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037d6:	d01d      	beq.n	8003814 <HAL_TIM_Base_Start_IT+0x80>
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	4a1f      	ldr	r2, [pc, #124]	; (800385c <HAL_TIM_Base_Start_IT+0xc8>)
 80037de:	4293      	cmp	r3, r2
 80037e0:	d018      	beq.n	8003814 <HAL_TIM_Base_Start_IT+0x80>
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	4a1e      	ldr	r2, [pc, #120]	; (8003860 <HAL_TIM_Base_Start_IT+0xcc>)
 80037e8:	4293      	cmp	r3, r2
 80037ea:	d013      	beq.n	8003814 <HAL_TIM_Base_Start_IT+0x80>
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	4a1c      	ldr	r2, [pc, #112]	; (8003864 <HAL_TIM_Base_Start_IT+0xd0>)
 80037f2:	4293      	cmp	r3, r2
 80037f4:	d00e      	beq.n	8003814 <HAL_TIM_Base_Start_IT+0x80>
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	4a1b      	ldr	r2, [pc, #108]	; (8003868 <HAL_TIM_Base_Start_IT+0xd4>)
 80037fc:	4293      	cmp	r3, r2
 80037fe:	d009      	beq.n	8003814 <HAL_TIM_Base_Start_IT+0x80>
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	4a19      	ldr	r2, [pc, #100]	; (800386c <HAL_TIM_Base_Start_IT+0xd8>)
 8003806:	4293      	cmp	r3, r2
 8003808:	d004      	beq.n	8003814 <HAL_TIM_Base_Start_IT+0x80>
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	4a18      	ldr	r2, [pc, #96]	; (8003870 <HAL_TIM_Base_Start_IT+0xdc>)
 8003810:	4293      	cmp	r3, r2
 8003812:	d111      	bne.n	8003838 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	689b      	ldr	r3, [r3, #8]
 800381a:	f003 0307 	and.w	r3, r3, #7
 800381e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	2b06      	cmp	r3, #6
 8003824:	d010      	beq.n	8003848 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	681a      	ldr	r2, [r3, #0]
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f042 0201 	orr.w	r2, r2, #1
 8003834:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003836:	e007      	b.n	8003848 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	681a      	ldr	r2, [r3, #0]
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f042 0201 	orr.w	r2, r2, #1
 8003846:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003848:	2300      	movs	r3, #0
}
 800384a:	4618      	mov	r0, r3
 800384c:	3714      	adds	r7, #20
 800384e:	46bd      	mov	sp, r7
 8003850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003854:	4770      	bx	lr
 8003856:	bf00      	nop
 8003858:	40010000 	.word	0x40010000
 800385c:	40000400 	.word	0x40000400
 8003860:	40000800 	.word	0x40000800
 8003864:	40000c00 	.word	0x40000c00
 8003868:	40010400 	.word	0x40010400
 800386c:	40014000 	.word	0x40014000
 8003870:	40001800 	.word	0x40001800

08003874 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	b084      	sub	sp, #16
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	68db      	ldr	r3, [r3, #12]
 8003882:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	691b      	ldr	r3, [r3, #16]
 800388a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800388c:	68bb      	ldr	r3, [r7, #8]
 800388e:	f003 0302 	and.w	r3, r3, #2
 8003892:	2b00      	cmp	r3, #0
 8003894:	d020      	beq.n	80038d8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	f003 0302 	and.w	r3, r3, #2
 800389c:	2b00      	cmp	r3, #0
 800389e:	d01b      	beq.n	80038d8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f06f 0202 	mvn.w	r2, #2
 80038a8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	2201      	movs	r2, #1
 80038ae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	699b      	ldr	r3, [r3, #24]
 80038b6:	f003 0303 	and.w	r3, r3, #3
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d003      	beq.n	80038c6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80038be:	6878      	ldr	r0, [r7, #4]
 80038c0:	f000 f8d2 	bl	8003a68 <HAL_TIM_IC_CaptureCallback>
 80038c4:	e005      	b.n	80038d2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80038c6:	6878      	ldr	r0, [r7, #4]
 80038c8:	f000 f8c4 	bl	8003a54 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038cc:	6878      	ldr	r0, [r7, #4]
 80038ce:	f000 f8d5 	bl	8003a7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2200      	movs	r2, #0
 80038d6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80038d8:	68bb      	ldr	r3, [r7, #8]
 80038da:	f003 0304 	and.w	r3, r3, #4
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d020      	beq.n	8003924 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	f003 0304 	and.w	r3, r3, #4
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d01b      	beq.n	8003924 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f06f 0204 	mvn.w	r2, #4
 80038f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	2202      	movs	r2, #2
 80038fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	699b      	ldr	r3, [r3, #24]
 8003902:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003906:	2b00      	cmp	r3, #0
 8003908:	d003      	beq.n	8003912 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800390a:	6878      	ldr	r0, [r7, #4]
 800390c:	f000 f8ac 	bl	8003a68 <HAL_TIM_IC_CaptureCallback>
 8003910:	e005      	b.n	800391e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003912:	6878      	ldr	r0, [r7, #4]
 8003914:	f000 f89e 	bl	8003a54 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003918:	6878      	ldr	r0, [r7, #4]
 800391a:	f000 f8af 	bl	8003a7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	2200      	movs	r2, #0
 8003922:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003924:	68bb      	ldr	r3, [r7, #8]
 8003926:	f003 0308 	and.w	r3, r3, #8
 800392a:	2b00      	cmp	r3, #0
 800392c:	d020      	beq.n	8003970 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	f003 0308 	and.w	r3, r3, #8
 8003934:	2b00      	cmp	r3, #0
 8003936:	d01b      	beq.n	8003970 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f06f 0208 	mvn.w	r2, #8
 8003940:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	2204      	movs	r2, #4
 8003946:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	69db      	ldr	r3, [r3, #28]
 800394e:	f003 0303 	and.w	r3, r3, #3
 8003952:	2b00      	cmp	r3, #0
 8003954:	d003      	beq.n	800395e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003956:	6878      	ldr	r0, [r7, #4]
 8003958:	f000 f886 	bl	8003a68 <HAL_TIM_IC_CaptureCallback>
 800395c:	e005      	b.n	800396a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800395e:	6878      	ldr	r0, [r7, #4]
 8003960:	f000 f878 	bl	8003a54 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003964:	6878      	ldr	r0, [r7, #4]
 8003966:	f000 f889 	bl	8003a7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	2200      	movs	r2, #0
 800396e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003970:	68bb      	ldr	r3, [r7, #8]
 8003972:	f003 0310 	and.w	r3, r3, #16
 8003976:	2b00      	cmp	r3, #0
 8003978:	d020      	beq.n	80039bc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	f003 0310 	and.w	r3, r3, #16
 8003980:	2b00      	cmp	r3, #0
 8003982:	d01b      	beq.n	80039bc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f06f 0210 	mvn.w	r2, #16
 800398c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	2208      	movs	r2, #8
 8003992:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	69db      	ldr	r3, [r3, #28]
 800399a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d003      	beq.n	80039aa <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80039a2:	6878      	ldr	r0, [r7, #4]
 80039a4:	f000 f860 	bl	8003a68 <HAL_TIM_IC_CaptureCallback>
 80039a8:	e005      	b.n	80039b6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80039aa:	6878      	ldr	r0, [r7, #4]
 80039ac:	f000 f852 	bl	8003a54 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039b0:	6878      	ldr	r0, [r7, #4]
 80039b2:	f000 f863 	bl	8003a7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2200      	movs	r2, #0
 80039ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80039bc:	68bb      	ldr	r3, [r7, #8]
 80039be:	f003 0301 	and.w	r3, r3, #1
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d00c      	beq.n	80039e0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	f003 0301 	and.w	r3, r3, #1
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d007      	beq.n	80039e0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f06f 0201 	mvn.w	r2, #1
 80039d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80039da:	6878      	ldr	r0, [r7, #4]
 80039dc:	f7fd fa5a 	bl	8000e94 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80039e0:	68bb      	ldr	r3, [r7, #8]
 80039e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d00c      	beq.n	8003a04 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d007      	beq.n	8003a04 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80039fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80039fe:	6878      	ldr	r0, [r7, #4]
 8003a00:	f000 f906 	bl	8003c10 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003a04:	68bb      	ldr	r3, [r7, #8]
 8003a06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d00c      	beq.n	8003a28 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d007      	beq.n	8003a28 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003a20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003a22:	6878      	ldr	r0, [r7, #4]
 8003a24:	f000 f834 	bl	8003a90 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003a28:	68bb      	ldr	r3, [r7, #8]
 8003a2a:	f003 0320 	and.w	r3, r3, #32
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d00c      	beq.n	8003a4c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	f003 0320 	and.w	r3, r3, #32
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d007      	beq.n	8003a4c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f06f 0220 	mvn.w	r2, #32
 8003a44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003a46:	6878      	ldr	r0, [r7, #4]
 8003a48:	f000 f8d8 	bl	8003bfc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003a4c:	bf00      	nop
 8003a4e:	3710      	adds	r7, #16
 8003a50:	46bd      	mov	sp, r7
 8003a52:	bd80      	pop	{r7, pc}

08003a54 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003a54:	b480      	push	{r7}
 8003a56:	b083      	sub	sp, #12
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003a5c:	bf00      	nop
 8003a5e:	370c      	adds	r7, #12
 8003a60:	46bd      	mov	sp, r7
 8003a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a66:	4770      	bx	lr

08003a68 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003a68:	b480      	push	{r7}
 8003a6a:	b083      	sub	sp, #12
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003a70:	bf00      	nop
 8003a72:	370c      	adds	r7, #12
 8003a74:	46bd      	mov	sp, r7
 8003a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7a:	4770      	bx	lr

08003a7c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003a7c:	b480      	push	{r7}
 8003a7e:	b083      	sub	sp, #12
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003a84:	bf00      	nop
 8003a86:	370c      	adds	r7, #12
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8e:	4770      	bx	lr

08003a90 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003a90:	b480      	push	{r7}
 8003a92:	b083      	sub	sp, #12
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003a98:	bf00      	nop
 8003a9a:	370c      	adds	r7, #12
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa2:	4770      	bx	lr

08003aa4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003aa4:	b480      	push	{r7}
 8003aa6:	b085      	sub	sp, #20
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
 8003aac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	4a46      	ldr	r2, [pc, #280]	; (8003bd0 <TIM_Base_SetConfig+0x12c>)
 8003ab8:	4293      	cmp	r3, r2
 8003aba:	d013      	beq.n	8003ae4 <TIM_Base_SetConfig+0x40>
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ac2:	d00f      	beq.n	8003ae4 <TIM_Base_SetConfig+0x40>
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	4a43      	ldr	r2, [pc, #268]	; (8003bd4 <TIM_Base_SetConfig+0x130>)
 8003ac8:	4293      	cmp	r3, r2
 8003aca:	d00b      	beq.n	8003ae4 <TIM_Base_SetConfig+0x40>
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	4a42      	ldr	r2, [pc, #264]	; (8003bd8 <TIM_Base_SetConfig+0x134>)
 8003ad0:	4293      	cmp	r3, r2
 8003ad2:	d007      	beq.n	8003ae4 <TIM_Base_SetConfig+0x40>
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	4a41      	ldr	r2, [pc, #260]	; (8003bdc <TIM_Base_SetConfig+0x138>)
 8003ad8:	4293      	cmp	r3, r2
 8003ada:	d003      	beq.n	8003ae4 <TIM_Base_SetConfig+0x40>
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	4a40      	ldr	r2, [pc, #256]	; (8003be0 <TIM_Base_SetConfig+0x13c>)
 8003ae0:	4293      	cmp	r3, r2
 8003ae2:	d108      	bne.n	8003af6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003aea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003aec:	683b      	ldr	r3, [r7, #0]
 8003aee:	685b      	ldr	r3, [r3, #4]
 8003af0:	68fa      	ldr	r2, [r7, #12]
 8003af2:	4313      	orrs	r3, r2
 8003af4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	4a35      	ldr	r2, [pc, #212]	; (8003bd0 <TIM_Base_SetConfig+0x12c>)
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d02b      	beq.n	8003b56 <TIM_Base_SetConfig+0xb2>
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b04:	d027      	beq.n	8003b56 <TIM_Base_SetConfig+0xb2>
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	4a32      	ldr	r2, [pc, #200]	; (8003bd4 <TIM_Base_SetConfig+0x130>)
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d023      	beq.n	8003b56 <TIM_Base_SetConfig+0xb2>
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	4a31      	ldr	r2, [pc, #196]	; (8003bd8 <TIM_Base_SetConfig+0x134>)
 8003b12:	4293      	cmp	r3, r2
 8003b14:	d01f      	beq.n	8003b56 <TIM_Base_SetConfig+0xb2>
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	4a30      	ldr	r2, [pc, #192]	; (8003bdc <TIM_Base_SetConfig+0x138>)
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d01b      	beq.n	8003b56 <TIM_Base_SetConfig+0xb2>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	4a2f      	ldr	r2, [pc, #188]	; (8003be0 <TIM_Base_SetConfig+0x13c>)
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d017      	beq.n	8003b56 <TIM_Base_SetConfig+0xb2>
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	4a2e      	ldr	r2, [pc, #184]	; (8003be4 <TIM_Base_SetConfig+0x140>)
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d013      	beq.n	8003b56 <TIM_Base_SetConfig+0xb2>
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	4a2d      	ldr	r2, [pc, #180]	; (8003be8 <TIM_Base_SetConfig+0x144>)
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d00f      	beq.n	8003b56 <TIM_Base_SetConfig+0xb2>
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	4a2c      	ldr	r2, [pc, #176]	; (8003bec <TIM_Base_SetConfig+0x148>)
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	d00b      	beq.n	8003b56 <TIM_Base_SetConfig+0xb2>
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	4a2b      	ldr	r2, [pc, #172]	; (8003bf0 <TIM_Base_SetConfig+0x14c>)
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d007      	beq.n	8003b56 <TIM_Base_SetConfig+0xb2>
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	4a2a      	ldr	r2, [pc, #168]	; (8003bf4 <TIM_Base_SetConfig+0x150>)
 8003b4a:	4293      	cmp	r3, r2
 8003b4c:	d003      	beq.n	8003b56 <TIM_Base_SetConfig+0xb2>
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	4a29      	ldr	r2, [pc, #164]	; (8003bf8 <TIM_Base_SetConfig+0x154>)
 8003b52:	4293      	cmp	r3, r2
 8003b54:	d108      	bne.n	8003b68 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b5c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003b5e:	683b      	ldr	r3, [r7, #0]
 8003b60:	68db      	ldr	r3, [r3, #12]
 8003b62:	68fa      	ldr	r2, [r7, #12]
 8003b64:	4313      	orrs	r3, r2
 8003b66:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003b6e:	683b      	ldr	r3, [r7, #0]
 8003b70:	695b      	ldr	r3, [r3, #20]
 8003b72:	4313      	orrs	r3, r2
 8003b74:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	68fa      	ldr	r2, [r7, #12]
 8003b7a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	689a      	ldr	r2, [r3, #8]
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003b84:	683b      	ldr	r3, [r7, #0]
 8003b86:	681a      	ldr	r2, [r3, #0]
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	4a10      	ldr	r2, [pc, #64]	; (8003bd0 <TIM_Base_SetConfig+0x12c>)
 8003b90:	4293      	cmp	r3, r2
 8003b92:	d003      	beq.n	8003b9c <TIM_Base_SetConfig+0xf8>
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	4a12      	ldr	r2, [pc, #72]	; (8003be0 <TIM_Base_SetConfig+0x13c>)
 8003b98:	4293      	cmp	r3, r2
 8003b9a:	d103      	bne.n	8003ba4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003b9c:	683b      	ldr	r3, [r7, #0]
 8003b9e:	691a      	ldr	r2, [r3, #16]
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2201      	movs	r2, #1
 8003ba8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	691b      	ldr	r3, [r3, #16]
 8003bae:	f003 0301 	and.w	r3, r3, #1
 8003bb2:	2b01      	cmp	r3, #1
 8003bb4:	d105      	bne.n	8003bc2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	691b      	ldr	r3, [r3, #16]
 8003bba:	f023 0201 	bic.w	r2, r3, #1
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	611a      	str	r2, [r3, #16]
  }
}
 8003bc2:	bf00      	nop
 8003bc4:	3714      	adds	r7, #20
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bcc:	4770      	bx	lr
 8003bce:	bf00      	nop
 8003bd0:	40010000 	.word	0x40010000
 8003bd4:	40000400 	.word	0x40000400
 8003bd8:	40000800 	.word	0x40000800
 8003bdc:	40000c00 	.word	0x40000c00
 8003be0:	40010400 	.word	0x40010400
 8003be4:	40014000 	.word	0x40014000
 8003be8:	40014400 	.word	0x40014400
 8003bec:	40014800 	.word	0x40014800
 8003bf0:	40001800 	.word	0x40001800
 8003bf4:	40001c00 	.word	0x40001c00
 8003bf8:	40002000 	.word	0x40002000

08003bfc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003bfc:	b480      	push	{r7}
 8003bfe:	b083      	sub	sp, #12
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003c04:	bf00      	nop
 8003c06:	370c      	adds	r7, #12
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0e:	4770      	bx	lr

08003c10 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003c10:	b480      	push	{r7}
 8003c12:	b083      	sub	sp, #12
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003c18:	bf00      	nop
 8003c1a:	370c      	adds	r7, #12
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c22:	4770      	bx	lr

08003c24 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003c24:	b580      	push	{r7, lr}
 8003c26:	b082      	sub	sp, #8
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d101      	bne.n	8003c36 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003c32:	2301      	movs	r3, #1
 8003c34:	e042      	b.n	8003cbc <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c3c:	b2db      	uxtb	r3, r3
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d106      	bne.n	8003c50 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	2200      	movs	r2, #0
 8003c46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003c4a:	6878      	ldr	r0, [r7, #4]
 8003c4c:	f7fd fc76 	bl	800153c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2224      	movs	r2, #36	; 0x24
 8003c54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	68da      	ldr	r2, [r3, #12]
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003c66:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003c68:	6878      	ldr	r0, [r7, #4]
 8003c6a:	f000 f82b 	bl	8003cc4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	691a      	ldr	r2, [r3, #16]
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003c7c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	695a      	ldr	r2, [r3, #20]
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003c8c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	68da      	ldr	r2, [r3, #12]
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003c9c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2220      	movs	r2, #32
 8003ca8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2220      	movs	r2, #32
 8003cb0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003cba:	2300      	movs	r3, #0
}
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	3708      	adds	r7, #8
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	bd80      	pop	{r7, pc}

08003cc4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003cc4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003cc8:	b0c0      	sub	sp, #256	; 0x100
 8003cca:	af00      	add	r7, sp, #0
 8003ccc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003cd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	691b      	ldr	r3, [r3, #16]
 8003cd8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003cdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ce0:	68d9      	ldr	r1, [r3, #12]
 8003ce2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ce6:	681a      	ldr	r2, [r3, #0]
 8003ce8:	ea40 0301 	orr.w	r3, r0, r1
 8003cec:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003cee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cf2:	689a      	ldr	r2, [r3, #8]
 8003cf4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cf8:	691b      	ldr	r3, [r3, #16]
 8003cfa:	431a      	orrs	r2, r3
 8003cfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d00:	695b      	ldr	r3, [r3, #20]
 8003d02:	431a      	orrs	r2, r3
 8003d04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d08:	69db      	ldr	r3, [r3, #28]
 8003d0a:	4313      	orrs	r3, r2
 8003d0c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003d10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	68db      	ldr	r3, [r3, #12]
 8003d18:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003d1c:	f021 010c 	bic.w	r1, r1, #12
 8003d20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d24:	681a      	ldr	r2, [r3, #0]
 8003d26:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003d2a:	430b      	orrs	r3, r1
 8003d2c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003d2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	695b      	ldr	r3, [r3, #20]
 8003d36:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003d3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d3e:	6999      	ldr	r1, [r3, #24]
 8003d40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d44:	681a      	ldr	r2, [r3, #0]
 8003d46:	ea40 0301 	orr.w	r3, r0, r1
 8003d4a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003d4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d50:	681a      	ldr	r2, [r3, #0]
 8003d52:	4b8f      	ldr	r3, [pc, #572]	; (8003f90 <UART_SetConfig+0x2cc>)
 8003d54:	429a      	cmp	r2, r3
 8003d56:	d005      	beq.n	8003d64 <UART_SetConfig+0xa0>
 8003d58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d5c:	681a      	ldr	r2, [r3, #0]
 8003d5e:	4b8d      	ldr	r3, [pc, #564]	; (8003f94 <UART_SetConfig+0x2d0>)
 8003d60:	429a      	cmp	r2, r3
 8003d62:	d104      	bne.n	8003d6e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003d64:	f7fe ffa8 	bl	8002cb8 <HAL_RCC_GetPCLK2Freq>
 8003d68:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003d6c:	e003      	b.n	8003d76 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003d6e:	f7fe ff8f 	bl	8002c90 <HAL_RCC_GetPCLK1Freq>
 8003d72:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003d76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d7a:	69db      	ldr	r3, [r3, #28]
 8003d7c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d80:	f040 810c 	bne.w	8003f9c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003d84:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003d88:	2200      	movs	r2, #0
 8003d8a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003d8e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003d92:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003d96:	4622      	mov	r2, r4
 8003d98:	462b      	mov	r3, r5
 8003d9a:	1891      	adds	r1, r2, r2
 8003d9c:	65b9      	str	r1, [r7, #88]	; 0x58
 8003d9e:	415b      	adcs	r3, r3
 8003da0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003da2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003da6:	4621      	mov	r1, r4
 8003da8:	eb12 0801 	adds.w	r8, r2, r1
 8003dac:	4629      	mov	r1, r5
 8003dae:	eb43 0901 	adc.w	r9, r3, r1
 8003db2:	f04f 0200 	mov.w	r2, #0
 8003db6:	f04f 0300 	mov.w	r3, #0
 8003dba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003dbe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003dc2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003dc6:	4690      	mov	r8, r2
 8003dc8:	4699      	mov	r9, r3
 8003dca:	4623      	mov	r3, r4
 8003dcc:	eb18 0303 	adds.w	r3, r8, r3
 8003dd0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003dd4:	462b      	mov	r3, r5
 8003dd6:	eb49 0303 	adc.w	r3, r9, r3
 8003dda:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003dde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003de2:	685b      	ldr	r3, [r3, #4]
 8003de4:	2200      	movs	r2, #0
 8003de6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003dea:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003dee:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003df2:	460b      	mov	r3, r1
 8003df4:	18db      	adds	r3, r3, r3
 8003df6:	653b      	str	r3, [r7, #80]	; 0x50
 8003df8:	4613      	mov	r3, r2
 8003dfa:	eb42 0303 	adc.w	r3, r2, r3
 8003dfe:	657b      	str	r3, [r7, #84]	; 0x54
 8003e00:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003e04:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003e08:	f7fc fa02 	bl	8000210 <__aeabi_uldivmod>
 8003e0c:	4602      	mov	r2, r0
 8003e0e:	460b      	mov	r3, r1
 8003e10:	4b61      	ldr	r3, [pc, #388]	; (8003f98 <UART_SetConfig+0x2d4>)
 8003e12:	fba3 2302 	umull	r2, r3, r3, r2
 8003e16:	095b      	lsrs	r3, r3, #5
 8003e18:	011c      	lsls	r4, r3, #4
 8003e1a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003e1e:	2200      	movs	r2, #0
 8003e20:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003e24:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003e28:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003e2c:	4642      	mov	r2, r8
 8003e2e:	464b      	mov	r3, r9
 8003e30:	1891      	adds	r1, r2, r2
 8003e32:	64b9      	str	r1, [r7, #72]	; 0x48
 8003e34:	415b      	adcs	r3, r3
 8003e36:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003e38:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003e3c:	4641      	mov	r1, r8
 8003e3e:	eb12 0a01 	adds.w	sl, r2, r1
 8003e42:	4649      	mov	r1, r9
 8003e44:	eb43 0b01 	adc.w	fp, r3, r1
 8003e48:	f04f 0200 	mov.w	r2, #0
 8003e4c:	f04f 0300 	mov.w	r3, #0
 8003e50:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003e54:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003e58:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003e5c:	4692      	mov	sl, r2
 8003e5e:	469b      	mov	fp, r3
 8003e60:	4643      	mov	r3, r8
 8003e62:	eb1a 0303 	adds.w	r3, sl, r3
 8003e66:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003e6a:	464b      	mov	r3, r9
 8003e6c:	eb4b 0303 	adc.w	r3, fp, r3
 8003e70:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003e74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e78:	685b      	ldr	r3, [r3, #4]
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003e80:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003e84:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003e88:	460b      	mov	r3, r1
 8003e8a:	18db      	adds	r3, r3, r3
 8003e8c:	643b      	str	r3, [r7, #64]	; 0x40
 8003e8e:	4613      	mov	r3, r2
 8003e90:	eb42 0303 	adc.w	r3, r2, r3
 8003e94:	647b      	str	r3, [r7, #68]	; 0x44
 8003e96:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003e9a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003e9e:	f7fc f9b7 	bl	8000210 <__aeabi_uldivmod>
 8003ea2:	4602      	mov	r2, r0
 8003ea4:	460b      	mov	r3, r1
 8003ea6:	4611      	mov	r1, r2
 8003ea8:	4b3b      	ldr	r3, [pc, #236]	; (8003f98 <UART_SetConfig+0x2d4>)
 8003eaa:	fba3 2301 	umull	r2, r3, r3, r1
 8003eae:	095b      	lsrs	r3, r3, #5
 8003eb0:	2264      	movs	r2, #100	; 0x64
 8003eb2:	fb02 f303 	mul.w	r3, r2, r3
 8003eb6:	1acb      	subs	r3, r1, r3
 8003eb8:	00db      	lsls	r3, r3, #3
 8003eba:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003ebe:	4b36      	ldr	r3, [pc, #216]	; (8003f98 <UART_SetConfig+0x2d4>)
 8003ec0:	fba3 2302 	umull	r2, r3, r3, r2
 8003ec4:	095b      	lsrs	r3, r3, #5
 8003ec6:	005b      	lsls	r3, r3, #1
 8003ec8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003ecc:	441c      	add	r4, r3
 8003ece:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003ed8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003edc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003ee0:	4642      	mov	r2, r8
 8003ee2:	464b      	mov	r3, r9
 8003ee4:	1891      	adds	r1, r2, r2
 8003ee6:	63b9      	str	r1, [r7, #56]	; 0x38
 8003ee8:	415b      	adcs	r3, r3
 8003eea:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003eec:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003ef0:	4641      	mov	r1, r8
 8003ef2:	1851      	adds	r1, r2, r1
 8003ef4:	6339      	str	r1, [r7, #48]	; 0x30
 8003ef6:	4649      	mov	r1, r9
 8003ef8:	414b      	adcs	r3, r1
 8003efa:	637b      	str	r3, [r7, #52]	; 0x34
 8003efc:	f04f 0200 	mov.w	r2, #0
 8003f00:	f04f 0300 	mov.w	r3, #0
 8003f04:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003f08:	4659      	mov	r1, fp
 8003f0a:	00cb      	lsls	r3, r1, #3
 8003f0c:	4651      	mov	r1, sl
 8003f0e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003f12:	4651      	mov	r1, sl
 8003f14:	00ca      	lsls	r2, r1, #3
 8003f16:	4610      	mov	r0, r2
 8003f18:	4619      	mov	r1, r3
 8003f1a:	4603      	mov	r3, r0
 8003f1c:	4642      	mov	r2, r8
 8003f1e:	189b      	adds	r3, r3, r2
 8003f20:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003f24:	464b      	mov	r3, r9
 8003f26:	460a      	mov	r2, r1
 8003f28:	eb42 0303 	adc.w	r3, r2, r3
 8003f2c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003f30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f34:	685b      	ldr	r3, [r3, #4]
 8003f36:	2200      	movs	r2, #0
 8003f38:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003f3c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003f40:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003f44:	460b      	mov	r3, r1
 8003f46:	18db      	adds	r3, r3, r3
 8003f48:	62bb      	str	r3, [r7, #40]	; 0x28
 8003f4a:	4613      	mov	r3, r2
 8003f4c:	eb42 0303 	adc.w	r3, r2, r3
 8003f50:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003f52:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003f56:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003f5a:	f7fc f959 	bl	8000210 <__aeabi_uldivmod>
 8003f5e:	4602      	mov	r2, r0
 8003f60:	460b      	mov	r3, r1
 8003f62:	4b0d      	ldr	r3, [pc, #52]	; (8003f98 <UART_SetConfig+0x2d4>)
 8003f64:	fba3 1302 	umull	r1, r3, r3, r2
 8003f68:	095b      	lsrs	r3, r3, #5
 8003f6a:	2164      	movs	r1, #100	; 0x64
 8003f6c:	fb01 f303 	mul.w	r3, r1, r3
 8003f70:	1ad3      	subs	r3, r2, r3
 8003f72:	00db      	lsls	r3, r3, #3
 8003f74:	3332      	adds	r3, #50	; 0x32
 8003f76:	4a08      	ldr	r2, [pc, #32]	; (8003f98 <UART_SetConfig+0x2d4>)
 8003f78:	fba2 2303 	umull	r2, r3, r2, r3
 8003f7c:	095b      	lsrs	r3, r3, #5
 8003f7e:	f003 0207 	and.w	r2, r3, #7
 8003f82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	4422      	add	r2, r4
 8003f8a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003f8c:	e106      	b.n	800419c <UART_SetConfig+0x4d8>
 8003f8e:	bf00      	nop
 8003f90:	40011000 	.word	0x40011000
 8003f94:	40011400 	.word	0x40011400
 8003f98:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003f9c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003fa6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003faa:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003fae:	4642      	mov	r2, r8
 8003fb0:	464b      	mov	r3, r9
 8003fb2:	1891      	adds	r1, r2, r2
 8003fb4:	6239      	str	r1, [r7, #32]
 8003fb6:	415b      	adcs	r3, r3
 8003fb8:	627b      	str	r3, [r7, #36]	; 0x24
 8003fba:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003fbe:	4641      	mov	r1, r8
 8003fc0:	1854      	adds	r4, r2, r1
 8003fc2:	4649      	mov	r1, r9
 8003fc4:	eb43 0501 	adc.w	r5, r3, r1
 8003fc8:	f04f 0200 	mov.w	r2, #0
 8003fcc:	f04f 0300 	mov.w	r3, #0
 8003fd0:	00eb      	lsls	r3, r5, #3
 8003fd2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003fd6:	00e2      	lsls	r2, r4, #3
 8003fd8:	4614      	mov	r4, r2
 8003fda:	461d      	mov	r5, r3
 8003fdc:	4643      	mov	r3, r8
 8003fde:	18e3      	adds	r3, r4, r3
 8003fe0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003fe4:	464b      	mov	r3, r9
 8003fe6:	eb45 0303 	adc.w	r3, r5, r3
 8003fea:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003fee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ff2:	685b      	ldr	r3, [r3, #4]
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003ffa:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003ffe:	f04f 0200 	mov.w	r2, #0
 8004002:	f04f 0300 	mov.w	r3, #0
 8004006:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800400a:	4629      	mov	r1, r5
 800400c:	008b      	lsls	r3, r1, #2
 800400e:	4621      	mov	r1, r4
 8004010:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004014:	4621      	mov	r1, r4
 8004016:	008a      	lsls	r2, r1, #2
 8004018:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800401c:	f7fc f8f8 	bl	8000210 <__aeabi_uldivmod>
 8004020:	4602      	mov	r2, r0
 8004022:	460b      	mov	r3, r1
 8004024:	4b60      	ldr	r3, [pc, #384]	; (80041a8 <UART_SetConfig+0x4e4>)
 8004026:	fba3 2302 	umull	r2, r3, r3, r2
 800402a:	095b      	lsrs	r3, r3, #5
 800402c:	011c      	lsls	r4, r3, #4
 800402e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004032:	2200      	movs	r2, #0
 8004034:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004038:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800403c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004040:	4642      	mov	r2, r8
 8004042:	464b      	mov	r3, r9
 8004044:	1891      	adds	r1, r2, r2
 8004046:	61b9      	str	r1, [r7, #24]
 8004048:	415b      	adcs	r3, r3
 800404a:	61fb      	str	r3, [r7, #28]
 800404c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004050:	4641      	mov	r1, r8
 8004052:	1851      	adds	r1, r2, r1
 8004054:	6139      	str	r1, [r7, #16]
 8004056:	4649      	mov	r1, r9
 8004058:	414b      	adcs	r3, r1
 800405a:	617b      	str	r3, [r7, #20]
 800405c:	f04f 0200 	mov.w	r2, #0
 8004060:	f04f 0300 	mov.w	r3, #0
 8004064:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004068:	4659      	mov	r1, fp
 800406a:	00cb      	lsls	r3, r1, #3
 800406c:	4651      	mov	r1, sl
 800406e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004072:	4651      	mov	r1, sl
 8004074:	00ca      	lsls	r2, r1, #3
 8004076:	4610      	mov	r0, r2
 8004078:	4619      	mov	r1, r3
 800407a:	4603      	mov	r3, r0
 800407c:	4642      	mov	r2, r8
 800407e:	189b      	adds	r3, r3, r2
 8004080:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004084:	464b      	mov	r3, r9
 8004086:	460a      	mov	r2, r1
 8004088:	eb42 0303 	adc.w	r3, r2, r3
 800408c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004090:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004094:	685b      	ldr	r3, [r3, #4]
 8004096:	2200      	movs	r2, #0
 8004098:	67bb      	str	r3, [r7, #120]	; 0x78
 800409a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800409c:	f04f 0200 	mov.w	r2, #0
 80040a0:	f04f 0300 	mov.w	r3, #0
 80040a4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80040a8:	4649      	mov	r1, r9
 80040aa:	008b      	lsls	r3, r1, #2
 80040ac:	4641      	mov	r1, r8
 80040ae:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80040b2:	4641      	mov	r1, r8
 80040b4:	008a      	lsls	r2, r1, #2
 80040b6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80040ba:	f7fc f8a9 	bl	8000210 <__aeabi_uldivmod>
 80040be:	4602      	mov	r2, r0
 80040c0:	460b      	mov	r3, r1
 80040c2:	4611      	mov	r1, r2
 80040c4:	4b38      	ldr	r3, [pc, #224]	; (80041a8 <UART_SetConfig+0x4e4>)
 80040c6:	fba3 2301 	umull	r2, r3, r3, r1
 80040ca:	095b      	lsrs	r3, r3, #5
 80040cc:	2264      	movs	r2, #100	; 0x64
 80040ce:	fb02 f303 	mul.w	r3, r2, r3
 80040d2:	1acb      	subs	r3, r1, r3
 80040d4:	011b      	lsls	r3, r3, #4
 80040d6:	3332      	adds	r3, #50	; 0x32
 80040d8:	4a33      	ldr	r2, [pc, #204]	; (80041a8 <UART_SetConfig+0x4e4>)
 80040da:	fba2 2303 	umull	r2, r3, r2, r3
 80040de:	095b      	lsrs	r3, r3, #5
 80040e0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80040e4:	441c      	add	r4, r3
 80040e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80040ea:	2200      	movs	r2, #0
 80040ec:	673b      	str	r3, [r7, #112]	; 0x70
 80040ee:	677a      	str	r2, [r7, #116]	; 0x74
 80040f0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80040f4:	4642      	mov	r2, r8
 80040f6:	464b      	mov	r3, r9
 80040f8:	1891      	adds	r1, r2, r2
 80040fa:	60b9      	str	r1, [r7, #8]
 80040fc:	415b      	adcs	r3, r3
 80040fe:	60fb      	str	r3, [r7, #12]
 8004100:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004104:	4641      	mov	r1, r8
 8004106:	1851      	adds	r1, r2, r1
 8004108:	6039      	str	r1, [r7, #0]
 800410a:	4649      	mov	r1, r9
 800410c:	414b      	adcs	r3, r1
 800410e:	607b      	str	r3, [r7, #4]
 8004110:	f04f 0200 	mov.w	r2, #0
 8004114:	f04f 0300 	mov.w	r3, #0
 8004118:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800411c:	4659      	mov	r1, fp
 800411e:	00cb      	lsls	r3, r1, #3
 8004120:	4651      	mov	r1, sl
 8004122:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004126:	4651      	mov	r1, sl
 8004128:	00ca      	lsls	r2, r1, #3
 800412a:	4610      	mov	r0, r2
 800412c:	4619      	mov	r1, r3
 800412e:	4603      	mov	r3, r0
 8004130:	4642      	mov	r2, r8
 8004132:	189b      	adds	r3, r3, r2
 8004134:	66bb      	str	r3, [r7, #104]	; 0x68
 8004136:	464b      	mov	r3, r9
 8004138:	460a      	mov	r2, r1
 800413a:	eb42 0303 	adc.w	r3, r2, r3
 800413e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004140:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004144:	685b      	ldr	r3, [r3, #4]
 8004146:	2200      	movs	r2, #0
 8004148:	663b      	str	r3, [r7, #96]	; 0x60
 800414a:	667a      	str	r2, [r7, #100]	; 0x64
 800414c:	f04f 0200 	mov.w	r2, #0
 8004150:	f04f 0300 	mov.w	r3, #0
 8004154:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004158:	4649      	mov	r1, r9
 800415a:	008b      	lsls	r3, r1, #2
 800415c:	4641      	mov	r1, r8
 800415e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004162:	4641      	mov	r1, r8
 8004164:	008a      	lsls	r2, r1, #2
 8004166:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800416a:	f7fc f851 	bl	8000210 <__aeabi_uldivmod>
 800416e:	4602      	mov	r2, r0
 8004170:	460b      	mov	r3, r1
 8004172:	4b0d      	ldr	r3, [pc, #52]	; (80041a8 <UART_SetConfig+0x4e4>)
 8004174:	fba3 1302 	umull	r1, r3, r3, r2
 8004178:	095b      	lsrs	r3, r3, #5
 800417a:	2164      	movs	r1, #100	; 0x64
 800417c:	fb01 f303 	mul.w	r3, r1, r3
 8004180:	1ad3      	subs	r3, r2, r3
 8004182:	011b      	lsls	r3, r3, #4
 8004184:	3332      	adds	r3, #50	; 0x32
 8004186:	4a08      	ldr	r2, [pc, #32]	; (80041a8 <UART_SetConfig+0x4e4>)
 8004188:	fba2 2303 	umull	r2, r3, r2, r3
 800418c:	095b      	lsrs	r3, r3, #5
 800418e:	f003 020f 	and.w	r2, r3, #15
 8004192:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	4422      	add	r2, r4
 800419a:	609a      	str	r2, [r3, #8]
}
 800419c:	bf00      	nop
 800419e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80041a2:	46bd      	mov	sp, r7
 80041a4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80041a8:	51eb851f 	.word	0x51eb851f

080041ac <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80041ac:	b480      	push	{r7}
 80041ae:	b085      	sub	sp, #20
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	4603      	mov	r3, r0
 80041b4:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80041b6:	2300      	movs	r3, #0
 80041b8:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80041ba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80041be:	2b84      	cmp	r3, #132	; 0x84
 80041c0:	d005      	beq.n	80041ce <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80041c2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	4413      	add	r3, r2
 80041ca:	3303      	adds	r3, #3
 80041cc:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80041ce:	68fb      	ldr	r3, [r7, #12]
}
 80041d0:	4618      	mov	r0, r3
 80041d2:	3714      	adds	r7, #20
 80041d4:	46bd      	mov	sp, r7
 80041d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041da:	4770      	bx	lr

080041dc <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80041e0:	f000 ff30 	bl	8005044 <vTaskStartScheduler>
  
  return osOK;
 80041e4:	2300      	movs	r3, #0
}
 80041e6:	4618      	mov	r0, r3
 80041e8:	bd80      	pop	{r7, pc}

080041ea <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80041ea:	b5f0      	push	{r4, r5, r6, r7, lr}
 80041ec:	b089      	sub	sp, #36	; 0x24
 80041ee:	af04      	add	r7, sp, #16
 80041f0:	6078      	str	r0, [r7, #4]
 80041f2:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	695b      	ldr	r3, [r3, #20]
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d020      	beq.n	800423e <osThreadCreate+0x54>
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	699b      	ldr	r3, [r3, #24]
 8004200:	2b00      	cmp	r3, #0
 8004202:	d01c      	beq.n	800423e <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	685c      	ldr	r4, [r3, #4]
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	691e      	ldr	r6, [r3, #16]
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004216:	4618      	mov	r0, r3
 8004218:	f7ff ffc8 	bl	80041ac <makeFreeRtosPriority>
 800421c:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	695b      	ldr	r3, [r3, #20]
 8004222:	687a      	ldr	r2, [r7, #4]
 8004224:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004226:	9202      	str	r2, [sp, #8]
 8004228:	9301      	str	r3, [sp, #4]
 800422a:	9100      	str	r1, [sp, #0]
 800422c:	683b      	ldr	r3, [r7, #0]
 800422e:	4632      	mov	r2, r6
 8004230:	4629      	mov	r1, r5
 8004232:	4620      	mov	r0, r4
 8004234:	f000 fd3e 	bl	8004cb4 <xTaskCreateStatic>
 8004238:	4603      	mov	r3, r0
 800423a:	60fb      	str	r3, [r7, #12]
 800423c:	e01c      	b.n	8004278 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	685c      	ldr	r4, [r3, #4]
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800424a:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004252:	4618      	mov	r0, r3
 8004254:	f7ff ffaa 	bl	80041ac <makeFreeRtosPriority>
 8004258:	4602      	mov	r2, r0
 800425a:	f107 030c 	add.w	r3, r7, #12
 800425e:	9301      	str	r3, [sp, #4]
 8004260:	9200      	str	r2, [sp, #0]
 8004262:	683b      	ldr	r3, [r7, #0]
 8004264:	4632      	mov	r2, r6
 8004266:	4629      	mov	r1, r5
 8004268:	4620      	mov	r0, r4
 800426a:	f000 fd80 	bl	8004d6e <xTaskCreate>
 800426e:	4603      	mov	r3, r0
 8004270:	2b01      	cmp	r3, #1
 8004272:	d001      	beq.n	8004278 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8004274:	2300      	movs	r3, #0
 8004276:	e000      	b.n	800427a <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8004278:	68fb      	ldr	r3, [r7, #12]
}
 800427a:	4618      	mov	r0, r3
 800427c:	3714      	adds	r7, #20
 800427e:	46bd      	mov	sp, r7
 8004280:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004282 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8004282:	b580      	push	{r7, lr}
 8004284:	b084      	sub	sp, #16
 8004286:	af00      	add	r7, sp, #0
 8004288:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	2b00      	cmp	r3, #0
 8004292:	d001      	beq.n	8004298 <osDelay+0x16>
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	e000      	b.n	800429a <osDelay+0x18>
 8004298:	2301      	movs	r3, #1
 800429a:	4618      	mov	r0, r3
 800429c:	f000 fe9e 	bl	8004fdc <vTaskDelay>
  
  return osOK;
 80042a0:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80042a2:	4618      	mov	r0, r3
 80042a4:	3710      	adds	r7, #16
 80042a6:	46bd      	mov	sp, r7
 80042a8:	bd80      	pop	{r7, pc}

080042aa <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 80042aa:	b590      	push	{r4, r7, lr}
 80042ac:	b085      	sub	sp, #20
 80042ae:	af02      	add	r7, sp, #8
 80042b0:	6078      	str	r0, [r7, #4]
 80042b2:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	689b      	ldr	r3, [r3, #8]
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d011      	beq.n	80042e0 <osMessageCreate+0x36>
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	68db      	ldr	r3, [r3, #12]
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d00d      	beq.n	80042e0 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6818      	ldr	r0, [r3, #0]
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	6859      	ldr	r1, [r3, #4]
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	689a      	ldr	r2, [r3, #8]
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	68db      	ldr	r3, [r3, #12]
 80042d4:	2400      	movs	r4, #0
 80042d6:	9400      	str	r4, [sp, #0]
 80042d8:	f000 f92c 	bl	8004534 <xQueueGenericCreateStatic>
 80042dc:	4603      	mov	r3, r0
 80042de:	e008      	b.n	80042f2 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	6818      	ldr	r0, [r3, #0]
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	685b      	ldr	r3, [r3, #4]
 80042e8:	2200      	movs	r2, #0
 80042ea:	4619      	mov	r1, r3
 80042ec:	f000 f99a 	bl	8004624 <xQueueGenericCreate>
 80042f0:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 80042f2:	4618      	mov	r0, r3
 80042f4:	370c      	adds	r7, #12
 80042f6:	46bd      	mov	sp, r7
 80042f8:	bd90      	pop	{r4, r7, pc}

080042fa <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80042fa:	b480      	push	{r7}
 80042fc:	b083      	sub	sp, #12
 80042fe:	af00      	add	r7, sp, #0
 8004300:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	f103 0208 	add.w	r2, r3, #8
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004312:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	f103 0208 	add.w	r2, r3, #8
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	f103 0208 	add.w	r2, r3, #8
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2200      	movs	r2, #0
 800432c:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800432e:	bf00      	nop
 8004330:	370c      	adds	r7, #12
 8004332:	46bd      	mov	sp, r7
 8004334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004338:	4770      	bx	lr

0800433a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800433a:	b480      	push	{r7}
 800433c:	b083      	sub	sp, #12
 800433e:	af00      	add	r7, sp, #0
 8004340:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	2200      	movs	r2, #0
 8004346:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004348:	bf00      	nop
 800434a:	370c      	adds	r7, #12
 800434c:	46bd      	mov	sp, r7
 800434e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004352:	4770      	bx	lr

08004354 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004354:	b480      	push	{r7}
 8004356:	b085      	sub	sp, #20
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
 800435c:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	685b      	ldr	r3, [r3, #4]
 8004362:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	68fa      	ldr	r2, [r7, #12]
 8004368:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	689a      	ldr	r2, [r3, #8]
 800436e:	683b      	ldr	r3, [r7, #0]
 8004370:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	689b      	ldr	r3, [r3, #8]
 8004376:	683a      	ldr	r2, [r7, #0]
 8004378:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	683a      	ldr	r2, [r7, #0]
 800437e:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004380:	683b      	ldr	r3, [r7, #0]
 8004382:	687a      	ldr	r2, [r7, #4]
 8004384:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	1c5a      	adds	r2, r3, #1
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	601a      	str	r2, [r3, #0]
}
 8004390:	bf00      	nop
 8004392:	3714      	adds	r7, #20
 8004394:	46bd      	mov	sp, r7
 8004396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439a:	4770      	bx	lr

0800439c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800439c:	b480      	push	{r7}
 800439e:	b085      	sub	sp, #20
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]
 80043a4:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80043a6:	683b      	ldr	r3, [r7, #0]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80043ac:	68bb      	ldr	r3, [r7, #8]
 80043ae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80043b2:	d103      	bne.n	80043bc <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	691b      	ldr	r3, [r3, #16]
 80043b8:	60fb      	str	r3, [r7, #12]
 80043ba:	e00c      	b.n	80043d6 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	3308      	adds	r3, #8
 80043c0:	60fb      	str	r3, [r7, #12]
 80043c2:	e002      	b.n	80043ca <vListInsert+0x2e>
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	685b      	ldr	r3, [r3, #4]
 80043c8:	60fb      	str	r3, [r7, #12]
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	685b      	ldr	r3, [r3, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	68ba      	ldr	r2, [r7, #8]
 80043d2:	429a      	cmp	r2, r3
 80043d4:	d2f6      	bcs.n	80043c4 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	685a      	ldr	r2, [r3, #4]
 80043da:	683b      	ldr	r3, [r7, #0]
 80043dc:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80043de:	683b      	ldr	r3, [r7, #0]
 80043e0:	685b      	ldr	r3, [r3, #4]
 80043e2:	683a      	ldr	r2, [r7, #0]
 80043e4:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80043e6:	683b      	ldr	r3, [r7, #0]
 80043e8:	68fa      	ldr	r2, [r7, #12]
 80043ea:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	683a      	ldr	r2, [r7, #0]
 80043f0:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80043f2:	683b      	ldr	r3, [r7, #0]
 80043f4:	687a      	ldr	r2, [r7, #4]
 80043f6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	1c5a      	adds	r2, r3, #1
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	601a      	str	r2, [r3, #0]
}
 8004402:	bf00      	nop
 8004404:	3714      	adds	r7, #20
 8004406:	46bd      	mov	sp, r7
 8004408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440c:	4770      	bx	lr

0800440e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800440e:	b480      	push	{r7}
 8004410:	b085      	sub	sp, #20
 8004412:	af00      	add	r7, sp, #0
 8004414:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	691b      	ldr	r3, [r3, #16]
 800441a:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	685b      	ldr	r3, [r3, #4]
 8004420:	687a      	ldr	r2, [r7, #4]
 8004422:	6892      	ldr	r2, [r2, #8]
 8004424:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	689b      	ldr	r3, [r3, #8]
 800442a:	687a      	ldr	r2, [r7, #4]
 800442c:	6852      	ldr	r2, [r2, #4]
 800442e:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	685b      	ldr	r3, [r3, #4]
 8004434:	687a      	ldr	r2, [r7, #4]
 8004436:	429a      	cmp	r2, r3
 8004438:	d103      	bne.n	8004442 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	689a      	ldr	r2, [r3, #8]
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	2200      	movs	r2, #0
 8004446:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	1e5a      	subs	r2, r3, #1
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	681b      	ldr	r3, [r3, #0]
}
 8004456:	4618      	mov	r0, r3
 8004458:	3714      	adds	r7, #20
 800445a:	46bd      	mov	sp, r7
 800445c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004460:	4770      	bx	lr
	...

08004464 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004464:	b580      	push	{r7, lr}
 8004466:	b084      	sub	sp, #16
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
 800446c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	2b00      	cmp	r3, #0
 8004476:	d10a      	bne.n	800448e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004478:	f04f 0350 	mov.w	r3, #80	; 0x50
 800447c:	f383 8811 	msr	BASEPRI, r3
 8004480:	f3bf 8f6f 	isb	sy
 8004484:	f3bf 8f4f 	dsb	sy
 8004488:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800448a:	bf00      	nop
 800448c:	e7fe      	b.n	800448c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800448e:	f001 fc11 	bl	8005cb4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	681a      	ldr	r2, [r3, #0]
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800449a:	68f9      	ldr	r1, [r7, #12]
 800449c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800449e:	fb01 f303 	mul.w	r3, r1, r3
 80044a2:	441a      	add	r2, r3
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	2200      	movs	r2, #0
 80044ac:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	681a      	ldr	r2, [r3, #0]
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	681a      	ldr	r2, [r3, #0]
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044be:	3b01      	subs	r3, #1
 80044c0:	68f9      	ldr	r1, [r7, #12]
 80044c2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80044c4:	fb01 f303 	mul.w	r3, r1, r3
 80044c8:	441a      	add	r2, r3
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	22ff      	movs	r2, #255	; 0xff
 80044d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	22ff      	movs	r2, #255	; 0xff
 80044da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80044de:	683b      	ldr	r3, [r7, #0]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d114      	bne.n	800450e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	691b      	ldr	r3, [r3, #16]
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d01a      	beq.n	8004522 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	3310      	adds	r3, #16
 80044f0:	4618      	mov	r0, r3
 80044f2:	f000 ffe9 	bl	80054c8 <xTaskRemoveFromEventList>
 80044f6:	4603      	mov	r3, r0
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d012      	beq.n	8004522 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80044fc:	4b0c      	ldr	r3, [pc, #48]	; (8004530 <xQueueGenericReset+0xcc>)
 80044fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004502:	601a      	str	r2, [r3, #0]
 8004504:	f3bf 8f4f 	dsb	sy
 8004508:	f3bf 8f6f 	isb	sy
 800450c:	e009      	b.n	8004522 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	3310      	adds	r3, #16
 8004512:	4618      	mov	r0, r3
 8004514:	f7ff fef1 	bl	80042fa <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	3324      	adds	r3, #36	; 0x24
 800451c:	4618      	mov	r0, r3
 800451e:	f7ff feec 	bl	80042fa <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004522:	f001 fbf7 	bl	8005d14 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004526:	2301      	movs	r3, #1
}
 8004528:	4618      	mov	r0, r3
 800452a:	3710      	adds	r7, #16
 800452c:	46bd      	mov	sp, r7
 800452e:	bd80      	pop	{r7, pc}
 8004530:	e000ed04 	.word	0xe000ed04

08004534 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004534:	b580      	push	{r7, lr}
 8004536:	b08e      	sub	sp, #56	; 0x38
 8004538:	af02      	add	r7, sp, #8
 800453a:	60f8      	str	r0, [r7, #12]
 800453c:	60b9      	str	r1, [r7, #8]
 800453e:	607a      	str	r2, [r7, #4]
 8004540:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	2b00      	cmp	r3, #0
 8004546:	d10a      	bne.n	800455e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8004548:	f04f 0350 	mov.w	r3, #80	; 0x50
 800454c:	f383 8811 	msr	BASEPRI, r3
 8004550:	f3bf 8f6f 	isb	sy
 8004554:	f3bf 8f4f 	dsb	sy
 8004558:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800455a:	bf00      	nop
 800455c:	e7fe      	b.n	800455c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800455e:	683b      	ldr	r3, [r7, #0]
 8004560:	2b00      	cmp	r3, #0
 8004562:	d10a      	bne.n	800457a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8004564:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004568:	f383 8811 	msr	BASEPRI, r3
 800456c:	f3bf 8f6f 	isb	sy
 8004570:	f3bf 8f4f 	dsb	sy
 8004574:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004576:	bf00      	nop
 8004578:	e7fe      	b.n	8004578 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	2b00      	cmp	r3, #0
 800457e:	d002      	beq.n	8004586 <xQueueGenericCreateStatic+0x52>
 8004580:	68bb      	ldr	r3, [r7, #8]
 8004582:	2b00      	cmp	r3, #0
 8004584:	d001      	beq.n	800458a <xQueueGenericCreateStatic+0x56>
 8004586:	2301      	movs	r3, #1
 8004588:	e000      	b.n	800458c <xQueueGenericCreateStatic+0x58>
 800458a:	2300      	movs	r3, #0
 800458c:	2b00      	cmp	r3, #0
 800458e:	d10a      	bne.n	80045a6 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8004590:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004594:	f383 8811 	msr	BASEPRI, r3
 8004598:	f3bf 8f6f 	isb	sy
 800459c:	f3bf 8f4f 	dsb	sy
 80045a0:	623b      	str	r3, [r7, #32]
}
 80045a2:	bf00      	nop
 80045a4:	e7fe      	b.n	80045a4 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d102      	bne.n	80045b2 <xQueueGenericCreateStatic+0x7e>
 80045ac:	68bb      	ldr	r3, [r7, #8]
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d101      	bne.n	80045b6 <xQueueGenericCreateStatic+0x82>
 80045b2:	2301      	movs	r3, #1
 80045b4:	e000      	b.n	80045b8 <xQueueGenericCreateStatic+0x84>
 80045b6:	2300      	movs	r3, #0
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d10a      	bne.n	80045d2 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80045bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045c0:	f383 8811 	msr	BASEPRI, r3
 80045c4:	f3bf 8f6f 	isb	sy
 80045c8:	f3bf 8f4f 	dsb	sy
 80045cc:	61fb      	str	r3, [r7, #28]
}
 80045ce:	bf00      	nop
 80045d0:	e7fe      	b.n	80045d0 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80045d2:	2348      	movs	r3, #72	; 0x48
 80045d4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80045d6:	697b      	ldr	r3, [r7, #20]
 80045d8:	2b48      	cmp	r3, #72	; 0x48
 80045da:	d00a      	beq.n	80045f2 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80045dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045e0:	f383 8811 	msr	BASEPRI, r3
 80045e4:	f3bf 8f6f 	isb	sy
 80045e8:	f3bf 8f4f 	dsb	sy
 80045ec:	61bb      	str	r3, [r7, #24]
}
 80045ee:	bf00      	nop
 80045f0:	e7fe      	b.n	80045f0 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80045f2:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80045f4:	683b      	ldr	r3, [r7, #0]
 80045f6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80045f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d00d      	beq.n	800461a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80045fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004600:	2201      	movs	r2, #1
 8004602:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004606:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800460a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800460c:	9300      	str	r3, [sp, #0]
 800460e:	4613      	mov	r3, r2
 8004610:	687a      	ldr	r2, [r7, #4]
 8004612:	68b9      	ldr	r1, [r7, #8]
 8004614:	68f8      	ldr	r0, [r7, #12]
 8004616:	f000 f83f 	bl	8004698 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800461a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800461c:	4618      	mov	r0, r3
 800461e:	3730      	adds	r7, #48	; 0x30
 8004620:	46bd      	mov	sp, r7
 8004622:	bd80      	pop	{r7, pc}

08004624 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004624:	b580      	push	{r7, lr}
 8004626:	b08a      	sub	sp, #40	; 0x28
 8004628:	af02      	add	r7, sp, #8
 800462a:	60f8      	str	r0, [r7, #12]
 800462c:	60b9      	str	r1, [r7, #8]
 800462e:	4613      	mov	r3, r2
 8004630:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	2b00      	cmp	r3, #0
 8004636:	d10a      	bne.n	800464e <xQueueGenericCreate+0x2a>
	__asm volatile
 8004638:	f04f 0350 	mov.w	r3, #80	; 0x50
 800463c:	f383 8811 	msr	BASEPRI, r3
 8004640:	f3bf 8f6f 	isb	sy
 8004644:	f3bf 8f4f 	dsb	sy
 8004648:	613b      	str	r3, [r7, #16]
}
 800464a:	bf00      	nop
 800464c:	e7fe      	b.n	800464c <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	68ba      	ldr	r2, [r7, #8]
 8004652:	fb02 f303 	mul.w	r3, r2, r3
 8004656:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004658:	69fb      	ldr	r3, [r7, #28]
 800465a:	3348      	adds	r3, #72	; 0x48
 800465c:	4618      	mov	r0, r3
 800465e:	f001 fc0b 	bl	8005e78 <pvPortMalloc>
 8004662:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004664:	69bb      	ldr	r3, [r7, #24]
 8004666:	2b00      	cmp	r3, #0
 8004668:	d011      	beq.n	800468e <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800466a:	69bb      	ldr	r3, [r7, #24]
 800466c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800466e:	697b      	ldr	r3, [r7, #20]
 8004670:	3348      	adds	r3, #72	; 0x48
 8004672:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004674:	69bb      	ldr	r3, [r7, #24]
 8004676:	2200      	movs	r2, #0
 8004678:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800467c:	79fa      	ldrb	r2, [r7, #7]
 800467e:	69bb      	ldr	r3, [r7, #24]
 8004680:	9300      	str	r3, [sp, #0]
 8004682:	4613      	mov	r3, r2
 8004684:	697a      	ldr	r2, [r7, #20]
 8004686:	68b9      	ldr	r1, [r7, #8]
 8004688:	68f8      	ldr	r0, [r7, #12]
 800468a:	f000 f805 	bl	8004698 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800468e:	69bb      	ldr	r3, [r7, #24]
	}
 8004690:	4618      	mov	r0, r3
 8004692:	3720      	adds	r7, #32
 8004694:	46bd      	mov	sp, r7
 8004696:	bd80      	pop	{r7, pc}

08004698 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004698:	b580      	push	{r7, lr}
 800469a:	b084      	sub	sp, #16
 800469c:	af00      	add	r7, sp, #0
 800469e:	60f8      	str	r0, [r7, #12]
 80046a0:	60b9      	str	r1, [r7, #8]
 80046a2:	607a      	str	r2, [r7, #4]
 80046a4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80046a6:	68bb      	ldr	r3, [r7, #8]
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d103      	bne.n	80046b4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80046ac:	69bb      	ldr	r3, [r7, #24]
 80046ae:	69ba      	ldr	r2, [r7, #24]
 80046b0:	601a      	str	r2, [r3, #0]
 80046b2:	e002      	b.n	80046ba <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80046b4:	69bb      	ldr	r3, [r7, #24]
 80046b6:	687a      	ldr	r2, [r7, #4]
 80046b8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80046ba:	69bb      	ldr	r3, [r7, #24]
 80046bc:	68fa      	ldr	r2, [r7, #12]
 80046be:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80046c0:	69bb      	ldr	r3, [r7, #24]
 80046c2:	68ba      	ldr	r2, [r7, #8]
 80046c4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80046c6:	2101      	movs	r1, #1
 80046c8:	69b8      	ldr	r0, [r7, #24]
 80046ca:	f7ff fecb 	bl	8004464 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80046ce:	bf00      	nop
 80046d0:	3710      	adds	r7, #16
 80046d2:	46bd      	mov	sp, r7
 80046d4:	bd80      	pop	{r7, pc}
	...

080046d8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80046d8:	b580      	push	{r7, lr}
 80046da:	b08e      	sub	sp, #56	; 0x38
 80046dc:	af00      	add	r7, sp, #0
 80046de:	60f8      	str	r0, [r7, #12]
 80046e0:	60b9      	str	r1, [r7, #8]
 80046e2:	607a      	str	r2, [r7, #4]
 80046e4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80046e6:	2300      	movs	r3, #0
 80046e8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80046ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d10a      	bne.n	800470a <xQueueGenericSend+0x32>
	__asm volatile
 80046f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046f8:	f383 8811 	msr	BASEPRI, r3
 80046fc:	f3bf 8f6f 	isb	sy
 8004700:	f3bf 8f4f 	dsb	sy
 8004704:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004706:	bf00      	nop
 8004708:	e7fe      	b.n	8004708 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800470a:	68bb      	ldr	r3, [r7, #8]
 800470c:	2b00      	cmp	r3, #0
 800470e:	d103      	bne.n	8004718 <xQueueGenericSend+0x40>
 8004710:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004712:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004714:	2b00      	cmp	r3, #0
 8004716:	d101      	bne.n	800471c <xQueueGenericSend+0x44>
 8004718:	2301      	movs	r3, #1
 800471a:	e000      	b.n	800471e <xQueueGenericSend+0x46>
 800471c:	2300      	movs	r3, #0
 800471e:	2b00      	cmp	r3, #0
 8004720:	d10a      	bne.n	8004738 <xQueueGenericSend+0x60>
	__asm volatile
 8004722:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004726:	f383 8811 	msr	BASEPRI, r3
 800472a:	f3bf 8f6f 	isb	sy
 800472e:	f3bf 8f4f 	dsb	sy
 8004732:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004734:	bf00      	nop
 8004736:	e7fe      	b.n	8004736 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004738:	683b      	ldr	r3, [r7, #0]
 800473a:	2b02      	cmp	r3, #2
 800473c:	d103      	bne.n	8004746 <xQueueGenericSend+0x6e>
 800473e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004740:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004742:	2b01      	cmp	r3, #1
 8004744:	d101      	bne.n	800474a <xQueueGenericSend+0x72>
 8004746:	2301      	movs	r3, #1
 8004748:	e000      	b.n	800474c <xQueueGenericSend+0x74>
 800474a:	2300      	movs	r3, #0
 800474c:	2b00      	cmp	r3, #0
 800474e:	d10a      	bne.n	8004766 <xQueueGenericSend+0x8e>
	__asm volatile
 8004750:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004754:	f383 8811 	msr	BASEPRI, r3
 8004758:	f3bf 8f6f 	isb	sy
 800475c:	f3bf 8f4f 	dsb	sy
 8004760:	623b      	str	r3, [r7, #32]
}
 8004762:	bf00      	nop
 8004764:	e7fe      	b.n	8004764 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004766:	f001 f86b 	bl	8005840 <xTaskGetSchedulerState>
 800476a:	4603      	mov	r3, r0
 800476c:	2b00      	cmp	r3, #0
 800476e:	d102      	bne.n	8004776 <xQueueGenericSend+0x9e>
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2b00      	cmp	r3, #0
 8004774:	d101      	bne.n	800477a <xQueueGenericSend+0xa2>
 8004776:	2301      	movs	r3, #1
 8004778:	e000      	b.n	800477c <xQueueGenericSend+0xa4>
 800477a:	2300      	movs	r3, #0
 800477c:	2b00      	cmp	r3, #0
 800477e:	d10a      	bne.n	8004796 <xQueueGenericSend+0xbe>
	__asm volatile
 8004780:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004784:	f383 8811 	msr	BASEPRI, r3
 8004788:	f3bf 8f6f 	isb	sy
 800478c:	f3bf 8f4f 	dsb	sy
 8004790:	61fb      	str	r3, [r7, #28]
}
 8004792:	bf00      	nop
 8004794:	e7fe      	b.n	8004794 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004796:	f001 fa8d 	bl	8005cb4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800479a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800479c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800479e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047a2:	429a      	cmp	r2, r3
 80047a4:	d302      	bcc.n	80047ac <xQueueGenericSend+0xd4>
 80047a6:	683b      	ldr	r3, [r7, #0]
 80047a8:	2b02      	cmp	r3, #2
 80047aa:	d129      	bne.n	8004800 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80047ac:	683a      	ldr	r2, [r7, #0]
 80047ae:	68b9      	ldr	r1, [r7, #8]
 80047b0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80047b2:	f000 f96f 	bl	8004a94 <prvCopyDataToQueue>
 80047b6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80047b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d010      	beq.n	80047e2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80047c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047c2:	3324      	adds	r3, #36	; 0x24
 80047c4:	4618      	mov	r0, r3
 80047c6:	f000 fe7f 	bl	80054c8 <xTaskRemoveFromEventList>
 80047ca:	4603      	mov	r3, r0
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d013      	beq.n	80047f8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80047d0:	4b3f      	ldr	r3, [pc, #252]	; (80048d0 <xQueueGenericSend+0x1f8>)
 80047d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80047d6:	601a      	str	r2, [r3, #0]
 80047d8:	f3bf 8f4f 	dsb	sy
 80047dc:	f3bf 8f6f 	isb	sy
 80047e0:	e00a      	b.n	80047f8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80047e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d007      	beq.n	80047f8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80047e8:	4b39      	ldr	r3, [pc, #228]	; (80048d0 <xQueueGenericSend+0x1f8>)
 80047ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80047ee:	601a      	str	r2, [r3, #0]
 80047f0:	f3bf 8f4f 	dsb	sy
 80047f4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80047f8:	f001 fa8c 	bl	8005d14 <vPortExitCritical>
				return pdPASS;
 80047fc:	2301      	movs	r3, #1
 80047fe:	e063      	b.n	80048c8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2b00      	cmp	r3, #0
 8004804:	d103      	bne.n	800480e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004806:	f001 fa85 	bl	8005d14 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800480a:	2300      	movs	r3, #0
 800480c:	e05c      	b.n	80048c8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800480e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004810:	2b00      	cmp	r3, #0
 8004812:	d106      	bne.n	8004822 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004814:	f107 0314 	add.w	r3, r7, #20
 8004818:	4618      	mov	r0, r3
 800481a:	f000 feb7 	bl	800558c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800481e:	2301      	movs	r3, #1
 8004820:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004822:	f001 fa77 	bl	8005d14 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004826:	f000 fc6d 	bl	8005104 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800482a:	f001 fa43 	bl	8005cb4 <vPortEnterCritical>
 800482e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004830:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004834:	b25b      	sxtb	r3, r3
 8004836:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800483a:	d103      	bne.n	8004844 <xQueueGenericSend+0x16c>
 800483c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800483e:	2200      	movs	r2, #0
 8004840:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004844:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004846:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800484a:	b25b      	sxtb	r3, r3
 800484c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004850:	d103      	bne.n	800485a <xQueueGenericSend+0x182>
 8004852:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004854:	2200      	movs	r2, #0
 8004856:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800485a:	f001 fa5b 	bl	8005d14 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800485e:	1d3a      	adds	r2, r7, #4
 8004860:	f107 0314 	add.w	r3, r7, #20
 8004864:	4611      	mov	r1, r2
 8004866:	4618      	mov	r0, r3
 8004868:	f000 fea6 	bl	80055b8 <xTaskCheckForTimeOut>
 800486c:	4603      	mov	r3, r0
 800486e:	2b00      	cmp	r3, #0
 8004870:	d124      	bne.n	80048bc <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004872:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004874:	f000 fa06 	bl	8004c84 <prvIsQueueFull>
 8004878:	4603      	mov	r3, r0
 800487a:	2b00      	cmp	r3, #0
 800487c:	d018      	beq.n	80048b0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800487e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004880:	3310      	adds	r3, #16
 8004882:	687a      	ldr	r2, [r7, #4]
 8004884:	4611      	mov	r1, r2
 8004886:	4618      	mov	r0, r3
 8004888:	f000 fdfa 	bl	8005480 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800488c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800488e:	f000 f991 	bl	8004bb4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004892:	f000 fc45 	bl	8005120 <xTaskResumeAll>
 8004896:	4603      	mov	r3, r0
 8004898:	2b00      	cmp	r3, #0
 800489a:	f47f af7c 	bne.w	8004796 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800489e:	4b0c      	ldr	r3, [pc, #48]	; (80048d0 <xQueueGenericSend+0x1f8>)
 80048a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80048a4:	601a      	str	r2, [r3, #0]
 80048a6:	f3bf 8f4f 	dsb	sy
 80048aa:	f3bf 8f6f 	isb	sy
 80048ae:	e772      	b.n	8004796 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80048b0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80048b2:	f000 f97f 	bl	8004bb4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80048b6:	f000 fc33 	bl	8005120 <xTaskResumeAll>
 80048ba:	e76c      	b.n	8004796 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80048bc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80048be:	f000 f979 	bl	8004bb4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80048c2:	f000 fc2d 	bl	8005120 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80048c6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80048c8:	4618      	mov	r0, r3
 80048ca:	3738      	adds	r7, #56	; 0x38
 80048cc:	46bd      	mov	sp, r7
 80048ce:	bd80      	pop	{r7, pc}
 80048d0:	e000ed04 	.word	0xe000ed04

080048d4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80048d4:	b580      	push	{r7, lr}
 80048d6:	b08c      	sub	sp, #48	; 0x30
 80048d8:	af00      	add	r7, sp, #0
 80048da:	60f8      	str	r0, [r7, #12]
 80048dc:	60b9      	str	r1, [r7, #8]
 80048de:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80048e0:	2300      	movs	r3, #0
 80048e2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80048e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d10a      	bne.n	8004904 <xQueueReceive+0x30>
	__asm volatile
 80048ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048f2:	f383 8811 	msr	BASEPRI, r3
 80048f6:	f3bf 8f6f 	isb	sy
 80048fa:	f3bf 8f4f 	dsb	sy
 80048fe:	623b      	str	r3, [r7, #32]
}
 8004900:	bf00      	nop
 8004902:	e7fe      	b.n	8004902 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004904:	68bb      	ldr	r3, [r7, #8]
 8004906:	2b00      	cmp	r3, #0
 8004908:	d103      	bne.n	8004912 <xQueueReceive+0x3e>
 800490a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800490c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800490e:	2b00      	cmp	r3, #0
 8004910:	d101      	bne.n	8004916 <xQueueReceive+0x42>
 8004912:	2301      	movs	r3, #1
 8004914:	e000      	b.n	8004918 <xQueueReceive+0x44>
 8004916:	2300      	movs	r3, #0
 8004918:	2b00      	cmp	r3, #0
 800491a:	d10a      	bne.n	8004932 <xQueueReceive+0x5e>
	__asm volatile
 800491c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004920:	f383 8811 	msr	BASEPRI, r3
 8004924:	f3bf 8f6f 	isb	sy
 8004928:	f3bf 8f4f 	dsb	sy
 800492c:	61fb      	str	r3, [r7, #28]
}
 800492e:	bf00      	nop
 8004930:	e7fe      	b.n	8004930 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004932:	f000 ff85 	bl	8005840 <xTaskGetSchedulerState>
 8004936:	4603      	mov	r3, r0
 8004938:	2b00      	cmp	r3, #0
 800493a:	d102      	bne.n	8004942 <xQueueReceive+0x6e>
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2b00      	cmp	r3, #0
 8004940:	d101      	bne.n	8004946 <xQueueReceive+0x72>
 8004942:	2301      	movs	r3, #1
 8004944:	e000      	b.n	8004948 <xQueueReceive+0x74>
 8004946:	2300      	movs	r3, #0
 8004948:	2b00      	cmp	r3, #0
 800494a:	d10a      	bne.n	8004962 <xQueueReceive+0x8e>
	__asm volatile
 800494c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004950:	f383 8811 	msr	BASEPRI, r3
 8004954:	f3bf 8f6f 	isb	sy
 8004958:	f3bf 8f4f 	dsb	sy
 800495c:	61bb      	str	r3, [r7, #24]
}
 800495e:	bf00      	nop
 8004960:	e7fe      	b.n	8004960 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004962:	f001 f9a7 	bl	8005cb4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004966:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004968:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800496a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800496c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800496e:	2b00      	cmp	r3, #0
 8004970:	d01f      	beq.n	80049b2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004972:	68b9      	ldr	r1, [r7, #8]
 8004974:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004976:	f000 f8f7 	bl	8004b68 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800497a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800497c:	1e5a      	subs	r2, r3, #1
 800497e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004980:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004982:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004984:	691b      	ldr	r3, [r3, #16]
 8004986:	2b00      	cmp	r3, #0
 8004988:	d00f      	beq.n	80049aa <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800498a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800498c:	3310      	adds	r3, #16
 800498e:	4618      	mov	r0, r3
 8004990:	f000 fd9a 	bl	80054c8 <xTaskRemoveFromEventList>
 8004994:	4603      	mov	r3, r0
 8004996:	2b00      	cmp	r3, #0
 8004998:	d007      	beq.n	80049aa <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800499a:	4b3d      	ldr	r3, [pc, #244]	; (8004a90 <xQueueReceive+0x1bc>)
 800499c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80049a0:	601a      	str	r2, [r3, #0]
 80049a2:	f3bf 8f4f 	dsb	sy
 80049a6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80049aa:	f001 f9b3 	bl	8005d14 <vPortExitCritical>
				return pdPASS;
 80049ae:	2301      	movs	r3, #1
 80049b0:	e069      	b.n	8004a86 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d103      	bne.n	80049c0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80049b8:	f001 f9ac 	bl	8005d14 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80049bc:	2300      	movs	r3, #0
 80049be:	e062      	b.n	8004a86 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80049c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d106      	bne.n	80049d4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80049c6:	f107 0310 	add.w	r3, r7, #16
 80049ca:	4618      	mov	r0, r3
 80049cc:	f000 fdde 	bl	800558c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80049d0:	2301      	movs	r3, #1
 80049d2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80049d4:	f001 f99e 	bl	8005d14 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80049d8:	f000 fb94 	bl	8005104 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80049dc:	f001 f96a 	bl	8005cb4 <vPortEnterCritical>
 80049e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049e2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80049e6:	b25b      	sxtb	r3, r3
 80049e8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80049ec:	d103      	bne.n	80049f6 <xQueueReceive+0x122>
 80049ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049f0:	2200      	movs	r2, #0
 80049f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80049f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049f8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80049fc:	b25b      	sxtb	r3, r3
 80049fe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004a02:	d103      	bne.n	8004a0c <xQueueReceive+0x138>
 8004a04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a06:	2200      	movs	r2, #0
 8004a08:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004a0c:	f001 f982 	bl	8005d14 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004a10:	1d3a      	adds	r2, r7, #4
 8004a12:	f107 0310 	add.w	r3, r7, #16
 8004a16:	4611      	mov	r1, r2
 8004a18:	4618      	mov	r0, r3
 8004a1a:	f000 fdcd 	bl	80055b8 <xTaskCheckForTimeOut>
 8004a1e:	4603      	mov	r3, r0
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d123      	bne.n	8004a6c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004a24:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004a26:	f000 f917 	bl	8004c58 <prvIsQueueEmpty>
 8004a2a:	4603      	mov	r3, r0
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d017      	beq.n	8004a60 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004a30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a32:	3324      	adds	r3, #36	; 0x24
 8004a34:	687a      	ldr	r2, [r7, #4]
 8004a36:	4611      	mov	r1, r2
 8004a38:	4618      	mov	r0, r3
 8004a3a:	f000 fd21 	bl	8005480 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004a3e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004a40:	f000 f8b8 	bl	8004bb4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004a44:	f000 fb6c 	bl	8005120 <xTaskResumeAll>
 8004a48:	4603      	mov	r3, r0
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d189      	bne.n	8004962 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8004a4e:	4b10      	ldr	r3, [pc, #64]	; (8004a90 <xQueueReceive+0x1bc>)
 8004a50:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a54:	601a      	str	r2, [r3, #0]
 8004a56:	f3bf 8f4f 	dsb	sy
 8004a5a:	f3bf 8f6f 	isb	sy
 8004a5e:	e780      	b.n	8004962 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004a60:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004a62:	f000 f8a7 	bl	8004bb4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004a66:	f000 fb5b 	bl	8005120 <xTaskResumeAll>
 8004a6a:	e77a      	b.n	8004962 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004a6c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004a6e:	f000 f8a1 	bl	8004bb4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004a72:	f000 fb55 	bl	8005120 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004a76:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004a78:	f000 f8ee 	bl	8004c58 <prvIsQueueEmpty>
 8004a7c:	4603      	mov	r3, r0
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	f43f af6f 	beq.w	8004962 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004a84:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004a86:	4618      	mov	r0, r3
 8004a88:	3730      	adds	r7, #48	; 0x30
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	bd80      	pop	{r7, pc}
 8004a8e:	bf00      	nop
 8004a90:	e000ed04 	.word	0xe000ed04

08004a94 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004a94:	b580      	push	{r7, lr}
 8004a96:	b086      	sub	sp, #24
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	60f8      	str	r0, [r7, #12]
 8004a9c:	60b9      	str	r1, [r7, #8]
 8004a9e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004aa0:	2300      	movs	r3, #0
 8004aa2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004aa8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d10d      	bne.n	8004ace <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d14d      	bne.n	8004b56 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	689b      	ldr	r3, [r3, #8]
 8004abe:	4618      	mov	r0, r3
 8004ac0:	f000 fedc 	bl	800587c <xTaskPriorityDisinherit>
 8004ac4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	2200      	movs	r2, #0
 8004aca:	609a      	str	r2, [r3, #8]
 8004acc:	e043      	b.n	8004b56 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d119      	bne.n	8004b08 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	6858      	ldr	r0, [r3, #4]
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004adc:	461a      	mov	r2, r3
 8004ade:	68b9      	ldr	r1, [r7, #8]
 8004ae0:	f001 fd19 	bl	8006516 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	685a      	ldr	r2, [r3, #4]
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aec:	441a      	add	r2, r3
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	685a      	ldr	r2, [r3, #4]
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	689b      	ldr	r3, [r3, #8]
 8004afa:	429a      	cmp	r2, r3
 8004afc:	d32b      	bcc.n	8004b56 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	681a      	ldr	r2, [r3, #0]
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	605a      	str	r2, [r3, #4]
 8004b06:	e026      	b.n	8004b56 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	68d8      	ldr	r0, [r3, #12]
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b10:	461a      	mov	r2, r3
 8004b12:	68b9      	ldr	r1, [r7, #8]
 8004b14:	f001 fcff 	bl	8006516 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	68da      	ldr	r2, [r3, #12]
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b20:	425b      	negs	r3, r3
 8004b22:	441a      	add	r2, r3
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	68da      	ldr	r2, [r3, #12]
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	429a      	cmp	r2, r3
 8004b32:	d207      	bcs.n	8004b44 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	689a      	ldr	r2, [r3, #8]
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b3c:	425b      	negs	r3, r3
 8004b3e:	441a      	add	r2, r3
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2b02      	cmp	r3, #2
 8004b48:	d105      	bne.n	8004b56 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004b4a:	693b      	ldr	r3, [r7, #16]
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d002      	beq.n	8004b56 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004b50:	693b      	ldr	r3, [r7, #16]
 8004b52:	3b01      	subs	r3, #1
 8004b54:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004b56:	693b      	ldr	r3, [r7, #16]
 8004b58:	1c5a      	adds	r2, r3, #1
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004b5e:	697b      	ldr	r3, [r7, #20]
}
 8004b60:	4618      	mov	r0, r3
 8004b62:	3718      	adds	r7, #24
 8004b64:	46bd      	mov	sp, r7
 8004b66:	bd80      	pop	{r7, pc}

08004b68 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004b68:	b580      	push	{r7, lr}
 8004b6a:	b082      	sub	sp, #8
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]
 8004b70:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d018      	beq.n	8004bac <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	68da      	ldr	r2, [r3, #12]
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b82:	441a      	add	r2, r3
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	68da      	ldr	r2, [r3, #12]
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	689b      	ldr	r3, [r3, #8]
 8004b90:	429a      	cmp	r2, r3
 8004b92:	d303      	bcc.n	8004b9c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681a      	ldr	r2, [r3, #0]
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	68d9      	ldr	r1, [r3, #12]
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ba4:	461a      	mov	r2, r3
 8004ba6:	6838      	ldr	r0, [r7, #0]
 8004ba8:	f001 fcb5 	bl	8006516 <memcpy>
	}
}
 8004bac:	bf00      	nop
 8004bae:	3708      	adds	r7, #8
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	bd80      	pop	{r7, pc}

08004bb4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004bb4:	b580      	push	{r7, lr}
 8004bb6:	b084      	sub	sp, #16
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004bbc:	f001 f87a 	bl	8005cb4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004bc6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004bc8:	e011      	b.n	8004bee <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d012      	beq.n	8004bf8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	3324      	adds	r3, #36	; 0x24
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	f000 fc76 	bl	80054c8 <xTaskRemoveFromEventList>
 8004bdc:	4603      	mov	r3, r0
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d001      	beq.n	8004be6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004be2:	f000 fd4b 	bl	800567c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004be6:	7bfb      	ldrb	r3, [r7, #15]
 8004be8:	3b01      	subs	r3, #1
 8004bea:	b2db      	uxtb	r3, r3
 8004bec:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004bee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	dce9      	bgt.n	8004bca <prvUnlockQueue+0x16>
 8004bf6:	e000      	b.n	8004bfa <prvUnlockQueue+0x46>
					break;
 8004bf8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	22ff      	movs	r2, #255	; 0xff
 8004bfe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004c02:	f001 f887 	bl	8005d14 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004c06:	f001 f855 	bl	8005cb4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004c10:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004c12:	e011      	b.n	8004c38 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	691b      	ldr	r3, [r3, #16]
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d012      	beq.n	8004c42 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	3310      	adds	r3, #16
 8004c20:	4618      	mov	r0, r3
 8004c22:	f000 fc51 	bl	80054c8 <xTaskRemoveFromEventList>
 8004c26:	4603      	mov	r3, r0
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d001      	beq.n	8004c30 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004c2c:	f000 fd26 	bl	800567c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004c30:	7bbb      	ldrb	r3, [r7, #14]
 8004c32:	3b01      	subs	r3, #1
 8004c34:	b2db      	uxtb	r3, r3
 8004c36:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004c38:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	dce9      	bgt.n	8004c14 <prvUnlockQueue+0x60>
 8004c40:	e000      	b.n	8004c44 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004c42:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	22ff      	movs	r2, #255	; 0xff
 8004c48:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004c4c:	f001 f862 	bl	8005d14 <vPortExitCritical>
}
 8004c50:	bf00      	nop
 8004c52:	3710      	adds	r7, #16
 8004c54:	46bd      	mov	sp, r7
 8004c56:	bd80      	pop	{r7, pc}

08004c58 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004c58:	b580      	push	{r7, lr}
 8004c5a:	b084      	sub	sp, #16
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004c60:	f001 f828 	bl	8005cb4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d102      	bne.n	8004c72 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004c6c:	2301      	movs	r3, #1
 8004c6e:	60fb      	str	r3, [r7, #12]
 8004c70:	e001      	b.n	8004c76 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004c72:	2300      	movs	r3, #0
 8004c74:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004c76:	f001 f84d 	bl	8005d14 <vPortExitCritical>

	return xReturn;
 8004c7a:	68fb      	ldr	r3, [r7, #12]
}
 8004c7c:	4618      	mov	r0, r3
 8004c7e:	3710      	adds	r7, #16
 8004c80:	46bd      	mov	sp, r7
 8004c82:	bd80      	pop	{r7, pc}

08004c84 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004c84:	b580      	push	{r7, lr}
 8004c86:	b084      	sub	sp, #16
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004c8c:	f001 f812 	bl	8005cb4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c98:	429a      	cmp	r2, r3
 8004c9a:	d102      	bne.n	8004ca2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004c9c:	2301      	movs	r3, #1
 8004c9e:	60fb      	str	r3, [r7, #12]
 8004ca0:	e001      	b.n	8004ca6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004ca2:	2300      	movs	r3, #0
 8004ca4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004ca6:	f001 f835 	bl	8005d14 <vPortExitCritical>

	return xReturn;
 8004caa:	68fb      	ldr	r3, [r7, #12]
}
 8004cac:	4618      	mov	r0, r3
 8004cae:	3710      	adds	r7, #16
 8004cb0:	46bd      	mov	sp, r7
 8004cb2:	bd80      	pop	{r7, pc}

08004cb4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004cb4:	b580      	push	{r7, lr}
 8004cb6:	b08e      	sub	sp, #56	; 0x38
 8004cb8:	af04      	add	r7, sp, #16
 8004cba:	60f8      	str	r0, [r7, #12]
 8004cbc:	60b9      	str	r1, [r7, #8]
 8004cbe:	607a      	str	r2, [r7, #4]
 8004cc0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004cc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d10a      	bne.n	8004cde <xTaskCreateStatic+0x2a>
	__asm volatile
 8004cc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ccc:	f383 8811 	msr	BASEPRI, r3
 8004cd0:	f3bf 8f6f 	isb	sy
 8004cd4:	f3bf 8f4f 	dsb	sy
 8004cd8:	623b      	str	r3, [r7, #32]
}
 8004cda:	bf00      	nop
 8004cdc:	e7fe      	b.n	8004cdc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004cde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d10a      	bne.n	8004cfa <xTaskCreateStatic+0x46>
	__asm volatile
 8004ce4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ce8:	f383 8811 	msr	BASEPRI, r3
 8004cec:	f3bf 8f6f 	isb	sy
 8004cf0:	f3bf 8f4f 	dsb	sy
 8004cf4:	61fb      	str	r3, [r7, #28]
}
 8004cf6:	bf00      	nop
 8004cf8:	e7fe      	b.n	8004cf8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004cfa:	2354      	movs	r3, #84	; 0x54
 8004cfc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004cfe:	693b      	ldr	r3, [r7, #16]
 8004d00:	2b54      	cmp	r3, #84	; 0x54
 8004d02:	d00a      	beq.n	8004d1a <xTaskCreateStatic+0x66>
	__asm volatile
 8004d04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d08:	f383 8811 	msr	BASEPRI, r3
 8004d0c:	f3bf 8f6f 	isb	sy
 8004d10:	f3bf 8f4f 	dsb	sy
 8004d14:	61bb      	str	r3, [r7, #24]
}
 8004d16:	bf00      	nop
 8004d18:	e7fe      	b.n	8004d18 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004d1a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004d1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d01e      	beq.n	8004d60 <xTaskCreateStatic+0xac>
 8004d22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d01b      	beq.n	8004d60 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004d28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d2a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d2e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004d30:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d34:	2202      	movs	r2, #2
 8004d36:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004d3a:	2300      	movs	r3, #0
 8004d3c:	9303      	str	r3, [sp, #12]
 8004d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d40:	9302      	str	r3, [sp, #8]
 8004d42:	f107 0314 	add.w	r3, r7, #20
 8004d46:	9301      	str	r3, [sp, #4]
 8004d48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d4a:	9300      	str	r3, [sp, #0]
 8004d4c:	683b      	ldr	r3, [r7, #0]
 8004d4e:	687a      	ldr	r2, [r7, #4]
 8004d50:	68b9      	ldr	r1, [r7, #8]
 8004d52:	68f8      	ldr	r0, [r7, #12]
 8004d54:	f000 f850 	bl	8004df8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004d58:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004d5a:	f000 f8d5 	bl	8004f08 <prvAddNewTaskToReadyList>
 8004d5e:	e001      	b.n	8004d64 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8004d60:	2300      	movs	r3, #0
 8004d62:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004d64:	697b      	ldr	r3, [r7, #20]
	}
 8004d66:	4618      	mov	r0, r3
 8004d68:	3728      	adds	r7, #40	; 0x28
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	bd80      	pop	{r7, pc}

08004d6e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004d6e:	b580      	push	{r7, lr}
 8004d70:	b08c      	sub	sp, #48	; 0x30
 8004d72:	af04      	add	r7, sp, #16
 8004d74:	60f8      	str	r0, [r7, #12]
 8004d76:	60b9      	str	r1, [r7, #8]
 8004d78:	603b      	str	r3, [r7, #0]
 8004d7a:	4613      	mov	r3, r2
 8004d7c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004d7e:	88fb      	ldrh	r3, [r7, #6]
 8004d80:	009b      	lsls	r3, r3, #2
 8004d82:	4618      	mov	r0, r3
 8004d84:	f001 f878 	bl	8005e78 <pvPortMalloc>
 8004d88:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004d8a:	697b      	ldr	r3, [r7, #20]
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d00e      	beq.n	8004dae <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004d90:	2054      	movs	r0, #84	; 0x54
 8004d92:	f001 f871 	bl	8005e78 <pvPortMalloc>
 8004d96:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004d98:	69fb      	ldr	r3, [r7, #28]
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d003      	beq.n	8004da6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004d9e:	69fb      	ldr	r3, [r7, #28]
 8004da0:	697a      	ldr	r2, [r7, #20]
 8004da2:	631a      	str	r2, [r3, #48]	; 0x30
 8004da4:	e005      	b.n	8004db2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004da6:	6978      	ldr	r0, [r7, #20]
 8004da8:	f001 f932 	bl	8006010 <vPortFree>
 8004dac:	e001      	b.n	8004db2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004dae:	2300      	movs	r3, #0
 8004db0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004db2:	69fb      	ldr	r3, [r7, #28]
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d017      	beq.n	8004de8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004db8:	69fb      	ldr	r3, [r7, #28]
 8004dba:	2200      	movs	r2, #0
 8004dbc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004dc0:	88fa      	ldrh	r2, [r7, #6]
 8004dc2:	2300      	movs	r3, #0
 8004dc4:	9303      	str	r3, [sp, #12]
 8004dc6:	69fb      	ldr	r3, [r7, #28]
 8004dc8:	9302      	str	r3, [sp, #8]
 8004dca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dcc:	9301      	str	r3, [sp, #4]
 8004dce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dd0:	9300      	str	r3, [sp, #0]
 8004dd2:	683b      	ldr	r3, [r7, #0]
 8004dd4:	68b9      	ldr	r1, [r7, #8]
 8004dd6:	68f8      	ldr	r0, [r7, #12]
 8004dd8:	f000 f80e 	bl	8004df8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004ddc:	69f8      	ldr	r0, [r7, #28]
 8004dde:	f000 f893 	bl	8004f08 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004de2:	2301      	movs	r3, #1
 8004de4:	61bb      	str	r3, [r7, #24]
 8004de6:	e002      	b.n	8004dee <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004de8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004dec:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004dee:	69bb      	ldr	r3, [r7, #24]
	}
 8004df0:	4618      	mov	r0, r3
 8004df2:	3720      	adds	r7, #32
 8004df4:	46bd      	mov	sp, r7
 8004df6:	bd80      	pop	{r7, pc}

08004df8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	b088      	sub	sp, #32
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	60f8      	str	r0, [r7, #12]
 8004e00:	60b9      	str	r1, [r7, #8]
 8004e02:	607a      	str	r2, [r7, #4]
 8004e04:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004e06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e08:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004e10:	3b01      	subs	r3, #1
 8004e12:	009b      	lsls	r3, r3, #2
 8004e14:	4413      	add	r3, r2
 8004e16:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004e18:	69bb      	ldr	r3, [r7, #24]
 8004e1a:	f023 0307 	bic.w	r3, r3, #7
 8004e1e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004e20:	69bb      	ldr	r3, [r7, #24]
 8004e22:	f003 0307 	and.w	r3, r3, #7
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d00a      	beq.n	8004e40 <prvInitialiseNewTask+0x48>
	__asm volatile
 8004e2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e2e:	f383 8811 	msr	BASEPRI, r3
 8004e32:	f3bf 8f6f 	isb	sy
 8004e36:	f3bf 8f4f 	dsb	sy
 8004e3a:	617b      	str	r3, [r7, #20]
}
 8004e3c:	bf00      	nop
 8004e3e:	e7fe      	b.n	8004e3e <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004e40:	68bb      	ldr	r3, [r7, #8]
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d01f      	beq.n	8004e86 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004e46:	2300      	movs	r3, #0
 8004e48:	61fb      	str	r3, [r7, #28]
 8004e4a:	e012      	b.n	8004e72 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004e4c:	68ba      	ldr	r2, [r7, #8]
 8004e4e:	69fb      	ldr	r3, [r7, #28]
 8004e50:	4413      	add	r3, r2
 8004e52:	7819      	ldrb	r1, [r3, #0]
 8004e54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004e56:	69fb      	ldr	r3, [r7, #28]
 8004e58:	4413      	add	r3, r2
 8004e5a:	3334      	adds	r3, #52	; 0x34
 8004e5c:	460a      	mov	r2, r1
 8004e5e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004e60:	68ba      	ldr	r2, [r7, #8]
 8004e62:	69fb      	ldr	r3, [r7, #28]
 8004e64:	4413      	add	r3, r2
 8004e66:	781b      	ldrb	r3, [r3, #0]
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d006      	beq.n	8004e7a <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004e6c:	69fb      	ldr	r3, [r7, #28]
 8004e6e:	3301      	adds	r3, #1
 8004e70:	61fb      	str	r3, [r7, #28]
 8004e72:	69fb      	ldr	r3, [r7, #28]
 8004e74:	2b0f      	cmp	r3, #15
 8004e76:	d9e9      	bls.n	8004e4c <prvInitialiseNewTask+0x54>
 8004e78:	e000      	b.n	8004e7c <prvInitialiseNewTask+0x84>
			{
				break;
 8004e7a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004e7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e7e:	2200      	movs	r2, #0
 8004e80:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004e84:	e003      	b.n	8004e8e <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004e86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e88:	2200      	movs	r2, #0
 8004e8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004e8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e90:	2b06      	cmp	r3, #6
 8004e92:	d901      	bls.n	8004e98 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004e94:	2306      	movs	r3, #6
 8004e96:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004e98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e9a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004e9c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004e9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ea0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004ea2:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8004ea4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ea6:	2200      	movs	r2, #0
 8004ea8:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004eaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004eac:	3304      	adds	r3, #4
 8004eae:	4618      	mov	r0, r3
 8004eb0:	f7ff fa43 	bl	800433a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004eb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004eb6:	3318      	adds	r3, #24
 8004eb8:	4618      	mov	r0, r3
 8004eba:	f7ff fa3e 	bl	800433a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004ebe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ec0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ec2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004ec4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ec6:	f1c3 0207 	rsb	r2, r3, #7
 8004eca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ecc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004ece:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ed0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ed2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004ed4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ed6:	2200      	movs	r2, #0
 8004ed8:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004eda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004edc:	2200      	movs	r2, #0
 8004ede:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004ee2:	683a      	ldr	r2, [r7, #0]
 8004ee4:	68f9      	ldr	r1, [r7, #12]
 8004ee6:	69b8      	ldr	r0, [r7, #24]
 8004ee8:	f000 fdb4 	bl	8005a54 <pxPortInitialiseStack>
 8004eec:	4602      	mov	r2, r0
 8004eee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ef0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004ef2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d002      	beq.n	8004efe <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004ef8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004efa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004efc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004efe:	bf00      	nop
 8004f00:	3720      	adds	r7, #32
 8004f02:	46bd      	mov	sp, r7
 8004f04:	bd80      	pop	{r7, pc}
	...

08004f08 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004f08:	b580      	push	{r7, lr}
 8004f0a:	b082      	sub	sp, #8
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004f10:	f000 fed0 	bl	8005cb4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004f14:	4b2a      	ldr	r3, [pc, #168]	; (8004fc0 <prvAddNewTaskToReadyList+0xb8>)
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	3301      	adds	r3, #1
 8004f1a:	4a29      	ldr	r2, [pc, #164]	; (8004fc0 <prvAddNewTaskToReadyList+0xb8>)
 8004f1c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004f1e:	4b29      	ldr	r3, [pc, #164]	; (8004fc4 <prvAddNewTaskToReadyList+0xbc>)
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d109      	bne.n	8004f3a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004f26:	4a27      	ldr	r2, [pc, #156]	; (8004fc4 <prvAddNewTaskToReadyList+0xbc>)
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004f2c:	4b24      	ldr	r3, [pc, #144]	; (8004fc0 <prvAddNewTaskToReadyList+0xb8>)
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	2b01      	cmp	r3, #1
 8004f32:	d110      	bne.n	8004f56 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004f34:	f000 fbc6 	bl	80056c4 <prvInitialiseTaskLists>
 8004f38:	e00d      	b.n	8004f56 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004f3a:	4b23      	ldr	r3, [pc, #140]	; (8004fc8 <prvAddNewTaskToReadyList+0xc0>)
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d109      	bne.n	8004f56 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004f42:	4b20      	ldr	r3, [pc, #128]	; (8004fc4 <prvAddNewTaskToReadyList+0xbc>)
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f4c:	429a      	cmp	r2, r3
 8004f4e:	d802      	bhi.n	8004f56 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004f50:	4a1c      	ldr	r2, [pc, #112]	; (8004fc4 <prvAddNewTaskToReadyList+0xbc>)
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004f56:	4b1d      	ldr	r3, [pc, #116]	; (8004fcc <prvAddNewTaskToReadyList+0xc4>)
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	3301      	adds	r3, #1
 8004f5c:	4a1b      	ldr	r2, [pc, #108]	; (8004fcc <prvAddNewTaskToReadyList+0xc4>)
 8004f5e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f64:	2201      	movs	r2, #1
 8004f66:	409a      	lsls	r2, r3
 8004f68:	4b19      	ldr	r3, [pc, #100]	; (8004fd0 <prvAddNewTaskToReadyList+0xc8>)
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	4313      	orrs	r3, r2
 8004f6e:	4a18      	ldr	r2, [pc, #96]	; (8004fd0 <prvAddNewTaskToReadyList+0xc8>)
 8004f70:	6013      	str	r3, [r2, #0]
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f76:	4613      	mov	r3, r2
 8004f78:	009b      	lsls	r3, r3, #2
 8004f7a:	4413      	add	r3, r2
 8004f7c:	009b      	lsls	r3, r3, #2
 8004f7e:	4a15      	ldr	r2, [pc, #84]	; (8004fd4 <prvAddNewTaskToReadyList+0xcc>)
 8004f80:	441a      	add	r2, r3
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	3304      	adds	r3, #4
 8004f86:	4619      	mov	r1, r3
 8004f88:	4610      	mov	r0, r2
 8004f8a:	f7ff f9e3 	bl	8004354 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004f8e:	f000 fec1 	bl	8005d14 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004f92:	4b0d      	ldr	r3, [pc, #52]	; (8004fc8 <prvAddNewTaskToReadyList+0xc0>)
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d00e      	beq.n	8004fb8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004f9a:	4b0a      	ldr	r3, [pc, #40]	; (8004fc4 <prvAddNewTaskToReadyList+0xbc>)
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fa4:	429a      	cmp	r2, r3
 8004fa6:	d207      	bcs.n	8004fb8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004fa8:	4b0b      	ldr	r3, [pc, #44]	; (8004fd8 <prvAddNewTaskToReadyList+0xd0>)
 8004faa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004fae:	601a      	str	r2, [r3, #0]
 8004fb0:	f3bf 8f4f 	dsb	sy
 8004fb4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004fb8:	bf00      	nop
 8004fba:	3708      	adds	r7, #8
 8004fbc:	46bd      	mov	sp, r7
 8004fbe:	bd80      	pop	{r7, pc}
 8004fc0:	200008e8 	.word	0x200008e8
 8004fc4:	200007e8 	.word	0x200007e8
 8004fc8:	200008f4 	.word	0x200008f4
 8004fcc:	20000904 	.word	0x20000904
 8004fd0:	200008f0 	.word	0x200008f0
 8004fd4:	200007ec 	.word	0x200007ec
 8004fd8:	e000ed04 	.word	0xe000ed04

08004fdc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004fdc:	b580      	push	{r7, lr}
 8004fde:	b084      	sub	sp, #16
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004fe4:	2300      	movs	r3, #0
 8004fe6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d017      	beq.n	800501e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004fee:	4b13      	ldr	r3, [pc, #76]	; (800503c <vTaskDelay+0x60>)
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d00a      	beq.n	800500c <vTaskDelay+0x30>
	__asm volatile
 8004ff6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ffa:	f383 8811 	msr	BASEPRI, r3
 8004ffe:	f3bf 8f6f 	isb	sy
 8005002:	f3bf 8f4f 	dsb	sy
 8005006:	60bb      	str	r3, [r7, #8]
}
 8005008:	bf00      	nop
 800500a:	e7fe      	b.n	800500a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800500c:	f000 f87a 	bl	8005104 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005010:	2100      	movs	r1, #0
 8005012:	6878      	ldr	r0, [r7, #4]
 8005014:	f000 fcb8 	bl	8005988 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005018:	f000 f882 	bl	8005120 <xTaskResumeAll>
 800501c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	2b00      	cmp	r3, #0
 8005022:	d107      	bne.n	8005034 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8005024:	4b06      	ldr	r3, [pc, #24]	; (8005040 <vTaskDelay+0x64>)
 8005026:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800502a:	601a      	str	r2, [r3, #0]
 800502c:	f3bf 8f4f 	dsb	sy
 8005030:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005034:	bf00      	nop
 8005036:	3710      	adds	r7, #16
 8005038:	46bd      	mov	sp, r7
 800503a:	bd80      	pop	{r7, pc}
 800503c:	20000910 	.word	0x20000910
 8005040:	e000ed04 	.word	0xe000ed04

08005044 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005044:	b580      	push	{r7, lr}
 8005046:	b08a      	sub	sp, #40	; 0x28
 8005048:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800504a:	2300      	movs	r3, #0
 800504c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800504e:	2300      	movs	r3, #0
 8005050:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005052:	463a      	mov	r2, r7
 8005054:	1d39      	adds	r1, r7, #4
 8005056:	f107 0308 	add.w	r3, r7, #8
 800505a:	4618      	mov	r0, r3
 800505c:	f7fb fc0a 	bl	8000874 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005060:	6839      	ldr	r1, [r7, #0]
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	68ba      	ldr	r2, [r7, #8]
 8005066:	9202      	str	r2, [sp, #8]
 8005068:	9301      	str	r3, [sp, #4]
 800506a:	2300      	movs	r3, #0
 800506c:	9300      	str	r3, [sp, #0]
 800506e:	2300      	movs	r3, #0
 8005070:	460a      	mov	r2, r1
 8005072:	491e      	ldr	r1, [pc, #120]	; (80050ec <vTaskStartScheduler+0xa8>)
 8005074:	481e      	ldr	r0, [pc, #120]	; (80050f0 <vTaskStartScheduler+0xac>)
 8005076:	f7ff fe1d 	bl	8004cb4 <xTaskCreateStatic>
 800507a:	4603      	mov	r3, r0
 800507c:	4a1d      	ldr	r2, [pc, #116]	; (80050f4 <vTaskStartScheduler+0xb0>)
 800507e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005080:	4b1c      	ldr	r3, [pc, #112]	; (80050f4 <vTaskStartScheduler+0xb0>)
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	2b00      	cmp	r3, #0
 8005086:	d002      	beq.n	800508e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005088:	2301      	movs	r3, #1
 800508a:	617b      	str	r3, [r7, #20]
 800508c:	e001      	b.n	8005092 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800508e:	2300      	movs	r3, #0
 8005090:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005092:	697b      	ldr	r3, [r7, #20]
 8005094:	2b01      	cmp	r3, #1
 8005096:	d116      	bne.n	80050c6 <vTaskStartScheduler+0x82>
	__asm volatile
 8005098:	f04f 0350 	mov.w	r3, #80	; 0x50
 800509c:	f383 8811 	msr	BASEPRI, r3
 80050a0:	f3bf 8f6f 	isb	sy
 80050a4:	f3bf 8f4f 	dsb	sy
 80050a8:	613b      	str	r3, [r7, #16]
}
 80050aa:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80050ac:	4b12      	ldr	r3, [pc, #72]	; (80050f8 <vTaskStartScheduler+0xb4>)
 80050ae:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80050b2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80050b4:	4b11      	ldr	r3, [pc, #68]	; (80050fc <vTaskStartScheduler+0xb8>)
 80050b6:	2201      	movs	r2, #1
 80050b8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80050ba:	4b11      	ldr	r3, [pc, #68]	; (8005100 <vTaskStartScheduler+0xbc>)
 80050bc:	2200      	movs	r2, #0
 80050be:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80050c0:	f000 fd56 	bl	8005b70 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80050c4:	e00e      	b.n	80050e4 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80050c6:	697b      	ldr	r3, [r7, #20]
 80050c8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80050cc:	d10a      	bne.n	80050e4 <vTaskStartScheduler+0xa0>
	__asm volatile
 80050ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050d2:	f383 8811 	msr	BASEPRI, r3
 80050d6:	f3bf 8f6f 	isb	sy
 80050da:	f3bf 8f4f 	dsb	sy
 80050de:	60fb      	str	r3, [r7, #12]
}
 80050e0:	bf00      	nop
 80050e2:	e7fe      	b.n	80050e2 <vTaskStartScheduler+0x9e>
}
 80050e4:	bf00      	nop
 80050e6:	3718      	adds	r7, #24
 80050e8:	46bd      	mov	sp, r7
 80050ea:	bd80      	pop	{r7, pc}
 80050ec:	08006ce8 	.word	0x08006ce8
 80050f0:	08005695 	.word	0x08005695
 80050f4:	2000090c 	.word	0x2000090c
 80050f8:	20000908 	.word	0x20000908
 80050fc:	200008f4 	.word	0x200008f4
 8005100:	200008ec 	.word	0x200008ec

08005104 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005104:	b480      	push	{r7}
 8005106:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005108:	4b04      	ldr	r3, [pc, #16]	; (800511c <vTaskSuspendAll+0x18>)
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	3301      	adds	r3, #1
 800510e:	4a03      	ldr	r2, [pc, #12]	; (800511c <vTaskSuspendAll+0x18>)
 8005110:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005112:	bf00      	nop
 8005114:	46bd      	mov	sp, r7
 8005116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511a:	4770      	bx	lr
 800511c:	20000910 	.word	0x20000910

08005120 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005120:	b580      	push	{r7, lr}
 8005122:	b084      	sub	sp, #16
 8005124:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005126:	2300      	movs	r3, #0
 8005128:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800512a:	2300      	movs	r3, #0
 800512c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800512e:	4b41      	ldr	r3, [pc, #260]	; (8005234 <xTaskResumeAll+0x114>)
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	2b00      	cmp	r3, #0
 8005134:	d10a      	bne.n	800514c <xTaskResumeAll+0x2c>
	__asm volatile
 8005136:	f04f 0350 	mov.w	r3, #80	; 0x50
 800513a:	f383 8811 	msr	BASEPRI, r3
 800513e:	f3bf 8f6f 	isb	sy
 8005142:	f3bf 8f4f 	dsb	sy
 8005146:	603b      	str	r3, [r7, #0]
}
 8005148:	bf00      	nop
 800514a:	e7fe      	b.n	800514a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800514c:	f000 fdb2 	bl	8005cb4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005150:	4b38      	ldr	r3, [pc, #224]	; (8005234 <xTaskResumeAll+0x114>)
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	3b01      	subs	r3, #1
 8005156:	4a37      	ldr	r2, [pc, #220]	; (8005234 <xTaskResumeAll+0x114>)
 8005158:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800515a:	4b36      	ldr	r3, [pc, #216]	; (8005234 <xTaskResumeAll+0x114>)
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	2b00      	cmp	r3, #0
 8005160:	d161      	bne.n	8005226 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005162:	4b35      	ldr	r3, [pc, #212]	; (8005238 <xTaskResumeAll+0x118>)
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	2b00      	cmp	r3, #0
 8005168:	d05d      	beq.n	8005226 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800516a:	e02e      	b.n	80051ca <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800516c:	4b33      	ldr	r3, [pc, #204]	; (800523c <xTaskResumeAll+0x11c>)
 800516e:	68db      	ldr	r3, [r3, #12]
 8005170:	68db      	ldr	r3, [r3, #12]
 8005172:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	3318      	adds	r3, #24
 8005178:	4618      	mov	r0, r3
 800517a:	f7ff f948 	bl	800440e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	3304      	adds	r3, #4
 8005182:	4618      	mov	r0, r3
 8005184:	f7ff f943 	bl	800440e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800518c:	2201      	movs	r2, #1
 800518e:	409a      	lsls	r2, r3
 8005190:	4b2b      	ldr	r3, [pc, #172]	; (8005240 <xTaskResumeAll+0x120>)
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	4313      	orrs	r3, r2
 8005196:	4a2a      	ldr	r2, [pc, #168]	; (8005240 <xTaskResumeAll+0x120>)
 8005198:	6013      	str	r3, [r2, #0]
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800519e:	4613      	mov	r3, r2
 80051a0:	009b      	lsls	r3, r3, #2
 80051a2:	4413      	add	r3, r2
 80051a4:	009b      	lsls	r3, r3, #2
 80051a6:	4a27      	ldr	r2, [pc, #156]	; (8005244 <xTaskResumeAll+0x124>)
 80051a8:	441a      	add	r2, r3
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	3304      	adds	r3, #4
 80051ae:	4619      	mov	r1, r3
 80051b0:	4610      	mov	r0, r2
 80051b2:	f7ff f8cf 	bl	8004354 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051ba:	4b23      	ldr	r3, [pc, #140]	; (8005248 <xTaskResumeAll+0x128>)
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051c0:	429a      	cmp	r2, r3
 80051c2:	d302      	bcc.n	80051ca <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80051c4:	4b21      	ldr	r3, [pc, #132]	; (800524c <xTaskResumeAll+0x12c>)
 80051c6:	2201      	movs	r2, #1
 80051c8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80051ca:	4b1c      	ldr	r3, [pc, #112]	; (800523c <xTaskResumeAll+0x11c>)
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d1cc      	bne.n	800516c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d001      	beq.n	80051dc <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80051d8:	f000 fb12 	bl	8005800 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80051dc:	4b1c      	ldr	r3, [pc, #112]	; (8005250 <xTaskResumeAll+0x130>)
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d010      	beq.n	800520a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80051e8:	f000 f836 	bl	8005258 <xTaskIncrementTick>
 80051ec:	4603      	mov	r3, r0
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d002      	beq.n	80051f8 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80051f2:	4b16      	ldr	r3, [pc, #88]	; (800524c <xTaskResumeAll+0x12c>)
 80051f4:	2201      	movs	r2, #1
 80051f6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	3b01      	subs	r3, #1
 80051fc:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	2b00      	cmp	r3, #0
 8005202:	d1f1      	bne.n	80051e8 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8005204:	4b12      	ldr	r3, [pc, #72]	; (8005250 <xTaskResumeAll+0x130>)
 8005206:	2200      	movs	r2, #0
 8005208:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800520a:	4b10      	ldr	r3, [pc, #64]	; (800524c <xTaskResumeAll+0x12c>)
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	2b00      	cmp	r3, #0
 8005210:	d009      	beq.n	8005226 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005212:	2301      	movs	r3, #1
 8005214:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005216:	4b0f      	ldr	r3, [pc, #60]	; (8005254 <xTaskResumeAll+0x134>)
 8005218:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800521c:	601a      	str	r2, [r3, #0]
 800521e:	f3bf 8f4f 	dsb	sy
 8005222:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005226:	f000 fd75 	bl	8005d14 <vPortExitCritical>

	return xAlreadyYielded;
 800522a:	68bb      	ldr	r3, [r7, #8]
}
 800522c:	4618      	mov	r0, r3
 800522e:	3710      	adds	r7, #16
 8005230:	46bd      	mov	sp, r7
 8005232:	bd80      	pop	{r7, pc}
 8005234:	20000910 	.word	0x20000910
 8005238:	200008e8 	.word	0x200008e8
 800523c:	200008a8 	.word	0x200008a8
 8005240:	200008f0 	.word	0x200008f0
 8005244:	200007ec 	.word	0x200007ec
 8005248:	200007e8 	.word	0x200007e8
 800524c:	200008fc 	.word	0x200008fc
 8005250:	200008f8 	.word	0x200008f8
 8005254:	e000ed04 	.word	0xe000ed04

08005258 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005258:	b580      	push	{r7, lr}
 800525a:	b086      	sub	sp, #24
 800525c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800525e:	2300      	movs	r3, #0
 8005260:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005262:	4b4e      	ldr	r3, [pc, #312]	; (800539c <xTaskIncrementTick+0x144>)
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	2b00      	cmp	r3, #0
 8005268:	f040 808e 	bne.w	8005388 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800526c:	4b4c      	ldr	r3, [pc, #304]	; (80053a0 <xTaskIncrementTick+0x148>)
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	3301      	adds	r3, #1
 8005272:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005274:	4a4a      	ldr	r2, [pc, #296]	; (80053a0 <xTaskIncrementTick+0x148>)
 8005276:	693b      	ldr	r3, [r7, #16]
 8005278:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800527a:	693b      	ldr	r3, [r7, #16]
 800527c:	2b00      	cmp	r3, #0
 800527e:	d120      	bne.n	80052c2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005280:	4b48      	ldr	r3, [pc, #288]	; (80053a4 <xTaskIncrementTick+0x14c>)
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	2b00      	cmp	r3, #0
 8005288:	d00a      	beq.n	80052a0 <xTaskIncrementTick+0x48>
	__asm volatile
 800528a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800528e:	f383 8811 	msr	BASEPRI, r3
 8005292:	f3bf 8f6f 	isb	sy
 8005296:	f3bf 8f4f 	dsb	sy
 800529a:	603b      	str	r3, [r7, #0]
}
 800529c:	bf00      	nop
 800529e:	e7fe      	b.n	800529e <xTaskIncrementTick+0x46>
 80052a0:	4b40      	ldr	r3, [pc, #256]	; (80053a4 <xTaskIncrementTick+0x14c>)
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	60fb      	str	r3, [r7, #12]
 80052a6:	4b40      	ldr	r3, [pc, #256]	; (80053a8 <xTaskIncrementTick+0x150>)
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	4a3e      	ldr	r2, [pc, #248]	; (80053a4 <xTaskIncrementTick+0x14c>)
 80052ac:	6013      	str	r3, [r2, #0]
 80052ae:	4a3e      	ldr	r2, [pc, #248]	; (80053a8 <xTaskIncrementTick+0x150>)
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	6013      	str	r3, [r2, #0]
 80052b4:	4b3d      	ldr	r3, [pc, #244]	; (80053ac <xTaskIncrementTick+0x154>)
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	3301      	adds	r3, #1
 80052ba:	4a3c      	ldr	r2, [pc, #240]	; (80053ac <xTaskIncrementTick+0x154>)
 80052bc:	6013      	str	r3, [r2, #0]
 80052be:	f000 fa9f 	bl	8005800 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80052c2:	4b3b      	ldr	r3, [pc, #236]	; (80053b0 <xTaskIncrementTick+0x158>)
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	693a      	ldr	r2, [r7, #16]
 80052c8:	429a      	cmp	r2, r3
 80052ca:	d348      	bcc.n	800535e <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80052cc:	4b35      	ldr	r3, [pc, #212]	; (80053a4 <xTaskIncrementTick+0x14c>)
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d104      	bne.n	80052e0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80052d6:	4b36      	ldr	r3, [pc, #216]	; (80053b0 <xTaskIncrementTick+0x158>)
 80052d8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80052dc:	601a      	str	r2, [r3, #0]
					break;
 80052de:	e03e      	b.n	800535e <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80052e0:	4b30      	ldr	r3, [pc, #192]	; (80053a4 <xTaskIncrementTick+0x14c>)
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	68db      	ldr	r3, [r3, #12]
 80052e6:	68db      	ldr	r3, [r3, #12]
 80052e8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80052ea:	68bb      	ldr	r3, [r7, #8]
 80052ec:	685b      	ldr	r3, [r3, #4]
 80052ee:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80052f0:	693a      	ldr	r2, [r7, #16]
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	429a      	cmp	r2, r3
 80052f6:	d203      	bcs.n	8005300 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80052f8:	4a2d      	ldr	r2, [pc, #180]	; (80053b0 <xTaskIncrementTick+0x158>)
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80052fe:	e02e      	b.n	800535e <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005300:	68bb      	ldr	r3, [r7, #8]
 8005302:	3304      	adds	r3, #4
 8005304:	4618      	mov	r0, r3
 8005306:	f7ff f882 	bl	800440e <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800530a:	68bb      	ldr	r3, [r7, #8]
 800530c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800530e:	2b00      	cmp	r3, #0
 8005310:	d004      	beq.n	800531c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005312:	68bb      	ldr	r3, [r7, #8]
 8005314:	3318      	adds	r3, #24
 8005316:	4618      	mov	r0, r3
 8005318:	f7ff f879 	bl	800440e <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800531c:	68bb      	ldr	r3, [r7, #8]
 800531e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005320:	2201      	movs	r2, #1
 8005322:	409a      	lsls	r2, r3
 8005324:	4b23      	ldr	r3, [pc, #140]	; (80053b4 <xTaskIncrementTick+0x15c>)
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	4313      	orrs	r3, r2
 800532a:	4a22      	ldr	r2, [pc, #136]	; (80053b4 <xTaskIncrementTick+0x15c>)
 800532c:	6013      	str	r3, [r2, #0]
 800532e:	68bb      	ldr	r3, [r7, #8]
 8005330:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005332:	4613      	mov	r3, r2
 8005334:	009b      	lsls	r3, r3, #2
 8005336:	4413      	add	r3, r2
 8005338:	009b      	lsls	r3, r3, #2
 800533a:	4a1f      	ldr	r2, [pc, #124]	; (80053b8 <xTaskIncrementTick+0x160>)
 800533c:	441a      	add	r2, r3
 800533e:	68bb      	ldr	r3, [r7, #8]
 8005340:	3304      	adds	r3, #4
 8005342:	4619      	mov	r1, r3
 8005344:	4610      	mov	r0, r2
 8005346:	f7ff f805 	bl	8004354 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800534a:	68bb      	ldr	r3, [r7, #8]
 800534c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800534e:	4b1b      	ldr	r3, [pc, #108]	; (80053bc <xTaskIncrementTick+0x164>)
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005354:	429a      	cmp	r2, r3
 8005356:	d3b9      	bcc.n	80052cc <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8005358:	2301      	movs	r3, #1
 800535a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800535c:	e7b6      	b.n	80052cc <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800535e:	4b17      	ldr	r3, [pc, #92]	; (80053bc <xTaskIncrementTick+0x164>)
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005364:	4914      	ldr	r1, [pc, #80]	; (80053b8 <xTaskIncrementTick+0x160>)
 8005366:	4613      	mov	r3, r2
 8005368:	009b      	lsls	r3, r3, #2
 800536a:	4413      	add	r3, r2
 800536c:	009b      	lsls	r3, r3, #2
 800536e:	440b      	add	r3, r1
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	2b01      	cmp	r3, #1
 8005374:	d901      	bls.n	800537a <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8005376:	2301      	movs	r3, #1
 8005378:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800537a:	4b11      	ldr	r3, [pc, #68]	; (80053c0 <xTaskIncrementTick+0x168>)
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	2b00      	cmp	r3, #0
 8005380:	d007      	beq.n	8005392 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8005382:	2301      	movs	r3, #1
 8005384:	617b      	str	r3, [r7, #20]
 8005386:	e004      	b.n	8005392 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005388:	4b0e      	ldr	r3, [pc, #56]	; (80053c4 <xTaskIncrementTick+0x16c>)
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	3301      	adds	r3, #1
 800538e:	4a0d      	ldr	r2, [pc, #52]	; (80053c4 <xTaskIncrementTick+0x16c>)
 8005390:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005392:	697b      	ldr	r3, [r7, #20]
}
 8005394:	4618      	mov	r0, r3
 8005396:	3718      	adds	r7, #24
 8005398:	46bd      	mov	sp, r7
 800539a:	bd80      	pop	{r7, pc}
 800539c:	20000910 	.word	0x20000910
 80053a0:	200008ec 	.word	0x200008ec
 80053a4:	200008a0 	.word	0x200008a0
 80053a8:	200008a4 	.word	0x200008a4
 80053ac:	20000900 	.word	0x20000900
 80053b0:	20000908 	.word	0x20000908
 80053b4:	200008f0 	.word	0x200008f0
 80053b8:	200007ec 	.word	0x200007ec
 80053bc:	200007e8 	.word	0x200007e8
 80053c0:	200008fc 	.word	0x200008fc
 80053c4:	200008f8 	.word	0x200008f8

080053c8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80053c8:	b480      	push	{r7}
 80053ca:	b087      	sub	sp, #28
 80053cc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80053ce:	4b27      	ldr	r3, [pc, #156]	; (800546c <vTaskSwitchContext+0xa4>)
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d003      	beq.n	80053de <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80053d6:	4b26      	ldr	r3, [pc, #152]	; (8005470 <vTaskSwitchContext+0xa8>)
 80053d8:	2201      	movs	r2, #1
 80053da:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80053dc:	e03f      	b.n	800545e <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 80053de:	4b24      	ldr	r3, [pc, #144]	; (8005470 <vTaskSwitchContext+0xa8>)
 80053e0:	2200      	movs	r2, #0
 80053e2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80053e4:	4b23      	ldr	r3, [pc, #140]	; (8005474 <vTaskSwitchContext+0xac>)
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	fab3 f383 	clz	r3, r3
 80053f0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80053f2:	7afb      	ldrb	r3, [r7, #11]
 80053f4:	f1c3 031f 	rsb	r3, r3, #31
 80053f8:	617b      	str	r3, [r7, #20]
 80053fa:	491f      	ldr	r1, [pc, #124]	; (8005478 <vTaskSwitchContext+0xb0>)
 80053fc:	697a      	ldr	r2, [r7, #20]
 80053fe:	4613      	mov	r3, r2
 8005400:	009b      	lsls	r3, r3, #2
 8005402:	4413      	add	r3, r2
 8005404:	009b      	lsls	r3, r3, #2
 8005406:	440b      	add	r3, r1
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	2b00      	cmp	r3, #0
 800540c:	d10a      	bne.n	8005424 <vTaskSwitchContext+0x5c>
	__asm volatile
 800540e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005412:	f383 8811 	msr	BASEPRI, r3
 8005416:	f3bf 8f6f 	isb	sy
 800541a:	f3bf 8f4f 	dsb	sy
 800541e:	607b      	str	r3, [r7, #4]
}
 8005420:	bf00      	nop
 8005422:	e7fe      	b.n	8005422 <vTaskSwitchContext+0x5a>
 8005424:	697a      	ldr	r2, [r7, #20]
 8005426:	4613      	mov	r3, r2
 8005428:	009b      	lsls	r3, r3, #2
 800542a:	4413      	add	r3, r2
 800542c:	009b      	lsls	r3, r3, #2
 800542e:	4a12      	ldr	r2, [pc, #72]	; (8005478 <vTaskSwitchContext+0xb0>)
 8005430:	4413      	add	r3, r2
 8005432:	613b      	str	r3, [r7, #16]
 8005434:	693b      	ldr	r3, [r7, #16]
 8005436:	685b      	ldr	r3, [r3, #4]
 8005438:	685a      	ldr	r2, [r3, #4]
 800543a:	693b      	ldr	r3, [r7, #16]
 800543c:	605a      	str	r2, [r3, #4]
 800543e:	693b      	ldr	r3, [r7, #16]
 8005440:	685a      	ldr	r2, [r3, #4]
 8005442:	693b      	ldr	r3, [r7, #16]
 8005444:	3308      	adds	r3, #8
 8005446:	429a      	cmp	r2, r3
 8005448:	d104      	bne.n	8005454 <vTaskSwitchContext+0x8c>
 800544a:	693b      	ldr	r3, [r7, #16]
 800544c:	685b      	ldr	r3, [r3, #4]
 800544e:	685a      	ldr	r2, [r3, #4]
 8005450:	693b      	ldr	r3, [r7, #16]
 8005452:	605a      	str	r2, [r3, #4]
 8005454:	693b      	ldr	r3, [r7, #16]
 8005456:	685b      	ldr	r3, [r3, #4]
 8005458:	68db      	ldr	r3, [r3, #12]
 800545a:	4a08      	ldr	r2, [pc, #32]	; (800547c <vTaskSwitchContext+0xb4>)
 800545c:	6013      	str	r3, [r2, #0]
}
 800545e:	bf00      	nop
 8005460:	371c      	adds	r7, #28
 8005462:	46bd      	mov	sp, r7
 8005464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005468:	4770      	bx	lr
 800546a:	bf00      	nop
 800546c:	20000910 	.word	0x20000910
 8005470:	200008fc 	.word	0x200008fc
 8005474:	200008f0 	.word	0x200008f0
 8005478:	200007ec 	.word	0x200007ec
 800547c:	200007e8 	.word	0x200007e8

08005480 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005480:	b580      	push	{r7, lr}
 8005482:	b084      	sub	sp, #16
 8005484:	af00      	add	r7, sp, #0
 8005486:	6078      	str	r0, [r7, #4]
 8005488:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	2b00      	cmp	r3, #0
 800548e:	d10a      	bne.n	80054a6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8005490:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005494:	f383 8811 	msr	BASEPRI, r3
 8005498:	f3bf 8f6f 	isb	sy
 800549c:	f3bf 8f4f 	dsb	sy
 80054a0:	60fb      	str	r3, [r7, #12]
}
 80054a2:	bf00      	nop
 80054a4:	e7fe      	b.n	80054a4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80054a6:	4b07      	ldr	r3, [pc, #28]	; (80054c4 <vTaskPlaceOnEventList+0x44>)
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	3318      	adds	r3, #24
 80054ac:	4619      	mov	r1, r3
 80054ae:	6878      	ldr	r0, [r7, #4]
 80054b0:	f7fe ff74 	bl	800439c <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80054b4:	2101      	movs	r1, #1
 80054b6:	6838      	ldr	r0, [r7, #0]
 80054b8:	f000 fa66 	bl	8005988 <prvAddCurrentTaskToDelayedList>
}
 80054bc:	bf00      	nop
 80054be:	3710      	adds	r7, #16
 80054c0:	46bd      	mov	sp, r7
 80054c2:	bd80      	pop	{r7, pc}
 80054c4:	200007e8 	.word	0x200007e8

080054c8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80054c8:	b580      	push	{r7, lr}
 80054ca:	b086      	sub	sp, #24
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	68db      	ldr	r3, [r3, #12]
 80054d4:	68db      	ldr	r3, [r3, #12]
 80054d6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80054d8:	693b      	ldr	r3, [r7, #16]
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d10a      	bne.n	80054f4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80054de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054e2:	f383 8811 	msr	BASEPRI, r3
 80054e6:	f3bf 8f6f 	isb	sy
 80054ea:	f3bf 8f4f 	dsb	sy
 80054ee:	60fb      	str	r3, [r7, #12]
}
 80054f0:	bf00      	nop
 80054f2:	e7fe      	b.n	80054f2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80054f4:	693b      	ldr	r3, [r7, #16]
 80054f6:	3318      	adds	r3, #24
 80054f8:	4618      	mov	r0, r3
 80054fa:	f7fe ff88 	bl	800440e <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80054fe:	4b1d      	ldr	r3, [pc, #116]	; (8005574 <xTaskRemoveFromEventList+0xac>)
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	2b00      	cmp	r3, #0
 8005504:	d11c      	bne.n	8005540 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005506:	693b      	ldr	r3, [r7, #16]
 8005508:	3304      	adds	r3, #4
 800550a:	4618      	mov	r0, r3
 800550c:	f7fe ff7f 	bl	800440e <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005510:	693b      	ldr	r3, [r7, #16]
 8005512:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005514:	2201      	movs	r2, #1
 8005516:	409a      	lsls	r2, r3
 8005518:	4b17      	ldr	r3, [pc, #92]	; (8005578 <xTaskRemoveFromEventList+0xb0>)
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	4313      	orrs	r3, r2
 800551e:	4a16      	ldr	r2, [pc, #88]	; (8005578 <xTaskRemoveFromEventList+0xb0>)
 8005520:	6013      	str	r3, [r2, #0]
 8005522:	693b      	ldr	r3, [r7, #16]
 8005524:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005526:	4613      	mov	r3, r2
 8005528:	009b      	lsls	r3, r3, #2
 800552a:	4413      	add	r3, r2
 800552c:	009b      	lsls	r3, r3, #2
 800552e:	4a13      	ldr	r2, [pc, #76]	; (800557c <xTaskRemoveFromEventList+0xb4>)
 8005530:	441a      	add	r2, r3
 8005532:	693b      	ldr	r3, [r7, #16]
 8005534:	3304      	adds	r3, #4
 8005536:	4619      	mov	r1, r3
 8005538:	4610      	mov	r0, r2
 800553a:	f7fe ff0b 	bl	8004354 <vListInsertEnd>
 800553e:	e005      	b.n	800554c <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005540:	693b      	ldr	r3, [r7, #16]
 8005542:	3318      	adds	r3, #24
 8005544:	4619      	mov	r1, r3
 8005546:	480e      	ldr	r0, [pc, #56]	; (8005580 <xTaskRemoveFromEventList+0xb8>)
 8005548:	f7fe ff04 	bl	8004354 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800554c:	693b      	ldr	r3, [r7, #16]
 800554e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005550:	4b0c      	ldr	r3, [pc, #48]	; (8005584 <xTaskRemoveFromEventList+0xbc>)
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005556:	429a      	cmp	r2, r3
 8005558:	d905      	bls.n	8005566 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800555a:	2301      	movs	r3, #1
 800555c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800555e:	4b0a      	ldr	r3, [pc, #40]	; (8005588 <xTaskRemoveFromEventList+0xc0>)
 8005560:	2201      	movs	r2, #1
 8005562:	601a      	str	r2, [r3, #0]
 8005564:	e001      	b.n	800556a <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8005566:	2300      	movs	r3, #0
 8005568:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800556a:	697b      	ldr	r3, [r7, #20]
}
 800556c:	4618      	mov	r0, r3
 800556e:	3718      	adds	r7, #24
 8005570:	46bd      	mov	sp, r7
 8005572:	bd80      	pop	{r7, pc}
 8005574:	20000910 	.word	0x20000910
 8005578:	200008f0 	.word	0x200008f0
 800557c:	200007ec 	.word	0x200007ec
 8005580:	200008a8 	.word	0x200008a8
 8005584:	200007e8 	.word	0x200007e8
 8005588:	200008fc 	.word	0x200008fc

0800558c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800558c:	b480      	push	{r7}
 800558e:	b083      	sub	sp, #12
 8005590:	af00      	add	r7, sp, #0
 8005592:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005594:	4b06      	ldr	r3, [pc, #24]	; (80055b0 <vTaskInternalSetTimeOutState+0x24>)
 8005596:	681a      	ldr	r2, [r3, #0]
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800559c:	4b05      	ldr	r3, [pc, #20]	; (80055b4 <vTaskInternalSetTimeOutState+0x28>)
 800559e:	681a      	ldr	r2, [r3, #0]
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	605a      	str	r2, [r3, #4]
}
 80055a4:	bf00      	nop
 80055a6:	370c      	adds	r7, #12
 80055a8:	46bd      	mov	sp, r7
 80055aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ae:	4770      	bx	lr
 80055b0:	20000900 	.word	0x20000900
 80055b4:	200008ec 	.word	0x200008ec

080055b8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80055b8:	b580      	push	{r7, lr}
 80055ba:	b088      	sub	sp, #32
 80055bc:	af00      	add	r7, sp, #0
 80055be:	6078      	str	r0, [r7, #4]
 80055c0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d10a      	bne.n	80055de <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80055c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055cc:	f383 8811 	msr	BASEPRI, r3
 80055d0:	f3bf 8f6f 	isb	sy
 80055d4:	f3bf 8f4f 	dsb	sy
 80055d8:	613b      	str	r3, [r7, #16]
}
 80055da:	bf00      	nop
 80055dc:	e7fe      	b.n	80055dc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80055de:	683b      	ldr	r3, [r7, #0]
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d10a      	bne.n	80055fa <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80055e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055e8:	f383 8811 	msr	BASEPRI, r3
 80055ec:	f3bf 8f6f 	isb	sy
 80055f0:	f3bf 8f4f 	dsb	sy
 80055f4:	60fb      	str	r3, [r7, #12]
}
 80055f6:	bf00      	nop
 80055f8:	e7fe      	b.n	80055f8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80055fa:	f000 fb5b 	bl	8005cb4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80055fe:	4b1d      	ldr	r3, [pc, #116]	; (8005674 <xTaskCheckForTimeOut+0xbc>)
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	685b      	ldr	r3, [r3, #4]
 8005608:	69ba      	ldr	r2, [r7, #24]
 800560a:	1ad3      	subs	r3, r2, r3
 800560c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800560e:	683b      	ldr	r3, [r7, #0]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005616:	d102      	bne.n	800561e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005618:	2300      	movs	r3, #0
 800561a:	61fb      	str	r3, [r7, #28]
 800561c:	e023      	b.n	8005666 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681a      	ldr	r2, [r3, #0]
 8005622:	4b15      	ldr	r3, [pc, #84]	; (8005678 <xTaskCheckForTimeOut+0xc0>)
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	429a      	cmp	r2, r3
 8005628:	d007      	beq.n	800563a <xTaskCheckForTimeOut+0x82>
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	685b      	ldr	r3, [r3, #4]
 800562e:	69ba      	ldr	r2, [r7, #24]
 8005630:	429a      	cmp	r2, r3
 8005632:	d302      	bcc.n	800563a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005634:	2301      	movs	r3, #1
 8005636:	61fb      	str	r3, [r7, #28]
 8005638:	e015      	b.n	8005666 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800563a:	683b      	ldr	r3, [r7, #0]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	697a      	ldr	r2, [r7, #20]
 8005640:	429a      	cmp	r2, r3
 8005642:	d20b      	bcs.n	800565c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005644:	683b      	ldr	r3, [r7, #0]
 8005646:	681a      	ldr	r2, [r3, #0]
 8005648:	697b      	ldr	r3, [r7, #20]
 800564a:	1ad2      	subs	r2, r2, r3
 800564c:	683b      	ldr	r3, [r7, #0]
 800564e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005650:	6878      	ldr	r0, [r7, #4]
 8005652:	f7ff ff9b 	bl	800558c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005656:	2300      	movs	r3, #0
 8005658:	61fb      	str	r3, [r7, #28]
 800565a:	e004      	b.n	8005666 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800565c:	683b      	ldr	r3, [r7, #0]
 800565e:	2200      	movs	r2, #0
 8005660:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005662:	2301      	movs	r3, #1
 8005664:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005666:	f000 fb55 	bl	8005d14 <vPortExitCritical>

	return xReturn;
 800566a:	69fb      	ldr	r3, [r7, #28]
}
 800566c:	4618      	mov	r0, r3
 800566e:	3720      	adds	r7, #32
 8005670:	46bd      	mov	sp, r7
 8005672:	bd80      	pop	{r7, pc}
 8005674:	200008ec 	.word	0x200008ec
 8005678:	20000900 	.word	0x20000900

0800567c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800567c:	b480      	push	{r7}
 800567e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005680:	4b03      	ldr	r3, [pc, #12]	; (8005690 <vTaskMissedYield+0x14>)
 8005682:	2201      	movs	r2, #1
 8005684:	601a      	str	r2, [r3, #0]
}
 8005686:	bf00      	nop
 8005688:	46bd      	mov	sp, r7
 800568a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568e:	4770      	bx	lr
 8005690:	200008fc 	.word	0x200008fc

08005694 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005694:	b580      	push	{r7, lr}
 8005696:	b082      	sub	sp, #8
 8005698:	af00      	add	r7, sp, #0
 800569a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800569c:	f000 f852 	bl	8005744 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80056a0:	4b06      	ldr	r3, [pc, #24]	; (80056bc <prvIdleTask+0x28>)
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	2b01      	cmp	r3, #1
 80056a6:	d9f9      	bls.n	800569c <prvIdleTask+0x8>
			{
				taskYIELD();
 80056a8:	4b05      	ldr	r3, [pc, #20]	; (80056c0 <prvIdleTask+0x2c>)
 80056aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80056ae:	601a      	str	r2, [r3, #0]
 80056b0:	f3bf 8f4f 	dsb	sy
 80056b4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80056b8:	e7f0      	b.n	800569c <prvIdleTask+0x8>
 80056ba:	bf00      	nop
 80056bc:	200007ec 	.word	0x200007ec
 80056c0:	e000ed04 	.word	0xe000ed04

080056c4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80056c4:	b580      	push	{r7, lr}
 80056c6:	b082      	sub	sp, #8
 80056c8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80056ca:	2300      	movs	r3, #0
 80056cc:	607b      	str	r3, [r7, #4]
 80056ce:	e00c      	b.n	80056ea <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80056d0:	687a      	ldr	r2, [r7, #4]
 80056d2:	4613      	mov	r3, r2
 80056d4:	009b      	lsls	r3, r3, #2
 80056d6:	4413      	add	r3, r2
 80056d8:	009b      	lsls	r3, r3, #2
 80056da:	4a12      	ldr	r2, [pc, #72]	; (8005724 <prvInitialiseTaskLists+0x60>)
 80056dc:	4413      	add	r3, r2
 80056de:	4618      	mov	r0, r3
 80056e0:	f7fe fe0b 	bl	80042fa <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	3301      	adds	r3, #1
 80056e8:	607b      	str	r3, [r7, #4]
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	2b06      	cmp	r3, #6
 80056ee:	d9ef      	bls.n	80056d0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80056f0:	480d      	ldr	r0, [pc, #52]	; (8005728 <prvInitialiseTaskLists+0x64>)
 80056f2:	f7fe fe02 	bl	80042fa <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80056f6:	480d      	ldr	r0, [pc, #52]	; (800572c <prvInitialiseTaskLists+0x68>)
 80056f8:	f7fe fdff 	bl	80042fa <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80056fc:	480c      	ldr	r0, [pc, #48]	; (8005730 <prvInitialiseTaskLists+0x6c>)
 80056fe:	f7fe fdfc 	bl	80042fa <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005702:	480c      	ldr	r0, [pc, #48]	; (8005734 <prvInitialiseTaskLists+0x70>)
 8005704:	f7fe fdf9 	bl	80042fa <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005708:	480b      	ldr	r0, [pc, #44]	; (8005738 <prvInitialiseTaskLists+0x74>)
 800570a:	f7fe fdf6 	bl	80042fa <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800570e:	4b0b      	ldr	r3, [pc, #44]	; (800573c <prvInitialiseTaskLists+0x78>)
 8005710:	4a05      	ldr	r2, [pc, #20]	; (8005728 <prvInitialiseTaskLists+0x64>)
 8005712:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005714:	4b0a      	ldr	r3, [pc, #40]	; (8005740 <prvInitialiseTaskLists+0x7c>)
 8005716:	4a05      	ldr	r2, [pc, #20]	; (800572c <prvInitialiseTaskLists+0x68>)
 8005718:	601a      	str	r2, [r3, #0]
}
 800571a:	bf00      	nop
 800571c:	3708      	adds	r7, #8
 800571e:	46bd      	mov	sp, r7
 8005720:	bd80      	pop	{r7, pc}
 8005722:	bf00      	nop
 8005724:	200007ec 	.word	0x200007ec
 8005728:	20000878 	.word	0x20000878
 800572c:	2000088c 	.word	0x2000088c
 8005730:	200008a8 	.word	0x200008a8
 8005734:	200008bc 	.word	0x200008bc
 8005738:	200008d4 	.word	0x200008d4
 800573c:	200008a0 	.word	0x200008a0
 8005740:	200008a4 	.word	0x200008a4

08005744 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005744:	b580      	push	{r7, lr}
 8005746:	b082      	sub	sp, #8
 8005748:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800574a:	e019      	b.n	8005780 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800574c:	f000 fab2 	bl	8005cb4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005750:	4b10      	ldr	r3, [pc, #64]	; (8005794 <prvCheckTasksWaitingTermination+0x50>)
 8005752:	68db      	ldr	r3, [r3, #12]
 8005754:	68db      	ldr	r3, [r3, #12]
 8005756:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	3304      	adds	r3, #4
 800575c:	4618      	mov	r0, r3
 800575e:	f7fe fe56 	bl	800440e <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005762:	4b0d      	ldr	r3, [pc, #52]	; (8005798 <prvCheckTasksWaitingTermination+0x54>)
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	3b01      	subs	r3, #1
 8005768:	4a0b      	ldr	r2, [pc, #44]	; (8005798 <prvCheckTasksWaitingTermination+0x54>)
 800576a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800576c:	4b0b      	ldr	r3, [pc, #44]	; (800579c <prvCheckTasksWaitingTermination+0x58>)
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	3b01      	subs	r3, #1
 8005772:	4a0a      	ldr	r2, [pc, #40]	; (800579c <prvCheckTasksWaitingTermination+0x58>)
 8005774:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005776:	f000 facd 	bl	8005d14 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800577a:	6878      	ldr	r0, [r7, #4]
 800577c:	f000 f810 	bl	80057a0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005780:	4b06      	ldr	r3, [pc, #24]	; (800579c <prvCheckTasksWaitingTermination+0x58>)
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	2b00      	cmp	r3, #0
 8005786:	d1e1      	bne.n	800574c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005788:	bf00      	nop
 800578a:	bf00      	nop
 800578c:	3708      	adds	r7, #8
 800578e:	46bd      	mov	sp, r7
 8005790:	bd80      	pop	{r7, pc}
 8005792:	bf00      	nop
 8005794:	200008bc 	.word	0x200008bc
 8005798:	200008e8 	.word	0x200008e8
 800579c:	200008d0 	.word	0x200008d0

080057a0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80057a0:	b580      	push	{r7, lr}
 80057a2:	b084      	sub	sp, #16
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d108      	bne.n	80057c4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057b6:	4618      	mov	r0, r3
 80057b8:	f000 fc2a 	bl	8006010 <vPortFree>
				vPortFree( pxTCB );
 80057bc:	6878      	ldr	r0, [r7, #4]
 80057be:	f000 fc27 	bl	8006010 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80057c2:	e018      	b.n	80057f6 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80057ca:	2b01      	cmp	r3, #1
 80057cc:	d103      	bne.n	80057d6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80057ce:	6878      	ldr	r0, [r7, #4]
 80057d0:	f000 fc1e 	bl	8006010 <vPortFree>
	}
 80057d4:	e00f      	b.n	80057f6 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80057dc:	2b02      	cmp	r3, #2
 80057de:	d00a      	beq.n	80057f6 <prvDeleteTCB+0x56>
	__asm volatile
 80057e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057e4:	f383 8811 	msr	BASEPRI, r3
 80057e8:	f3bf 8f6f 	isb	sy
 80057ec:	f3bf 8f4f 	dsb	sy
 80057f0:	60fb      	str	r3, [r7, #12]
}
 80057f2:	bf00      	nop
 80057f4:	e7fe      	b.n	80057f4 <prvDeleteTCB+0x54>
	}
 80057f6:	bf00      	nop
 80057f8:	3710      	adds	r7, #16
 80057fa:	46bd      	mov	sp, r7
 80057fc:	bd80      	pop	{r7, pc}
	...

08005800 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005800:	b480      	push	{r7}
 8005802:	b083      	sub	sp, #12
 8005804:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005806:	4b0c      	ldr	r3, [pc, #48]	; (8005838 <prvResetNextTaskUnblockTime+0x38>)
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	2b00      	cmp	r3, #0
 800580e:	d104      	bne.n	800581a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005810:	4b0a      	ldr	r3, [pc, #40]	; (800583c <prvResetNextTaskUnblockTime+0x3c>)
 8005812:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005816:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005818:	e008      	b.n	800582c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800581a:	4b07      	ldr	r3, [pc, #28]	; (8005838 <prvResetNextTaskUnblockTime+0x38>)
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	68db      	ldr	r3, [r3, #12]
 8005820:	68db      	ldr	r3, [r3, #12]
 8005822:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	685b      	ldr	r3, [r3, #4]
 8005828:	4a04      	ldr	r2, [pc, #16]	; (800583c <prvResetNextTaskUnblockTime+0x3c>)
 800582a:	6013      	str	r3, [r2, #0]
}
 800582c:	bf00      	nop
 800582e:	370c      	adds	r7, #12
 8005830:	46bd      	mov	sp, r7
 8005832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005836:	4770      	bx	lr
 8005838:	200008a0 	.word	0x200008a0
 800583c:	20000908 	.word	0x20000908

08005840 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005840:	b480      	push	{r7}
 8005842:	b083      	sub	sp, #12
 8005844:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005846:	4b0b      	ldr	r3, [pc, #44]	; (8005874 <xTaskGetSchedulerState+0x34>)
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	2b00      	cmp	r3, #0
 800584c:	d102      	bne.n	8005854 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800584e:	2301      	movs	r3, #1
 8005850:	607b      	str	r3, [r7, #4]
 8005852:	e008      	b.n	8005866 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005854:	4b08      	ldr	r3, [pc, #32]	; (8005878 <xTaskGetSchedulerState+0x38>)
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	2b00      	cmp	r3, #0
 800585a:	d102      	bne.n	8005862 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800585c:	2302      	movs	r3, #2
 800585e:	607b      	str	r3, [r7, #4]
 8005860:	e001      	b.n	8005866 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005862:	2300      	movs	r3, #0
 8005864:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005866:	687b      	ldr	r3, [r7, #4]
	}
 8005868:	4618      	mov	r0, r3
 800586a:	370c      	adds	r7, #12
 800586c:	46bd      	mov	sp, r7
 800586e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005872:	4770      	bx	lr
 8005874:	200008f4 	.word	0x200008f4
 8005878:	20000910 	.word	0x20000910

0800587c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800587c:	b580      	push	{r7, lr}
 800587e:	b086      	sub	sp, #24
 8005880:	af00      	add	r7, sp, #0
 8005882:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005888:	2300      	movs	r3, #0
 800588a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	2b00      	cmp	r3, #0
 8005890:	d06e      	beq.n	8005970 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005892:	4b3a      	ldr	r3, [pc, #232]	; (800597c <xTaskPriorityDisinherit+0x100>)
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	693a      	ldr	r2, [r7, #16]
 8005898:	429a      	cmp	r2, r3
 800589a:	d00a      	beq.n	80058b2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800589c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058a0:	f383 8811 	msr	BASEPRI, r3
 80058a4:	f3bf 8f6f 	isb	sy
 80058a8:	f3bf 8f4f 	dsb	sy
 80058ac:	60fb      	str	r3, [r7, #12]
}
 80058ae:	bf00      	nop
 80058b0:	e7fe      	b.n	80058b0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80058b2:	693b      	ldr	r3, [r7, #16]
 80058b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d10a      	bne.n	80058d0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80058ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058be:	f383 8811 	msr	BASEPRI, r3
 80058c2:	f3bf 8f6f 	isb	sy
 80058c6:	f3bf 8f4f 	dsb	sy
 80058ca:	60bb      	str	r3, [r7, #8]
}
 80058cc:	bf00      	nop
 80058ce:	e7fe      	b.n	80058ce <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80058d0:	693b      	ldr	r3, [r7, #16]
 80058d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80058d4:	1e5a      	subs	r2, r3, #1
 80058d6:	693b      	ldr	r3, [r7, #16]
 80058d8:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80058da:	693b      	ldr	r3, [r7, #16]
 80058dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058de:	693b      	ldr	r3, [r7, #16]
 80058e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058e2:	429a      	cmp	r2, r3
 80058e4:	d044      	beq.n	8005970 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80058e6:	693b      	ldr	r3, [r7, #16]
 80058e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d140      	bne.n	8005970 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80058ee:	693b      	ldr	r3, [r7, #16]
 80058f0:	3304      	adds	r3, #4
 80058f2:	4618      	mov	r0, r3
 80058f4:	f7fe fd8b 	bl	800440e <uxListRemove>
 80058f8:	4603      	mov	r3, r0
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d115      	bne.n	800592a <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80058fe:	693b      	ldr	r3, [r7, #16]
 8005900:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005902:	491f      	ldr	r1, [pc, #124]	; (8005980 <xTaskPriorityDisinherit+0x104>)
 8005904:	4613      	mov	r3, r2
 8005906:	009b      	lsls	r3, r3, #2
 8005908:	4413      	add	r3, r2
 800590a:	009b      	lsls	r3, r3, #2
 800590c:	440b      	add	r3, r1
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	2b00      	cmp	r3, #0
 8005912:	d10a      	bne.n	800592a <xTaskPriorityDisinherit+0xae>
 8005914:	693b      	ldr	r3, [r7, #16]
 8005916:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005918:	2201      	movs	r2, #1
 800591a:	fa02 f303 	lsl.w	r3, r2, r3
 800591e:	43da      	mvns	r2, r3
 8005920:	4b18      	ldr	r3, [pc, #96]	; (8005984 <xTaskPriorityDisinherit+0x108>)
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	4013      	ands	r3, r2
 8005926:	4a17      	ldr	r2, [pc, #92]	; (8005984 <xTaskPriorityDisinherit+0x108>)
 8005928:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800592a:	693b      	ldr	r3, [r7, #16]
 800592c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800592e:	693b      	ldr	r3, [r7, #16]
 8005930:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005932:	693b      	ldr	r3, [r7, #16]
 8005934:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005936:	f1c3 0207 	rsb	r2, r3, #7
 800593a:	693b      	ldr	r3, [r7, #16]
 800593c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800593e:	693b      	ldr	r3, [r7, #16]
 8005940:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005942:	2201      	movs	r2, #1
 8005944:	409a      	lsls	r2, r3
 8005946:	4b0f      	ldr	r3, [pc, #60]	; (8005984 <xTaskPriorityDisinherit+0x108>)
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	4313      	orrs	r3, r2
 800594c:	4a0d      	ldr	r2, [pc, #52]	; (8005984 <xTaskPriorityDisinherit+0x108>)
 800594e:	6013      	str	r3, [r2, #0]
 8005950:	693b      	ldr	r3, [r7, #16]
 8005952:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005954:	4613      	mov	r3, r2
 8005956:	009b      	lsls	r3, r3, #2
 8005958:	4413      	add	r3, r2
 800595a:	009b      	lsls	r3, r3, #2
 800595c:	4a08      	ldr	r2, [pc, #32]	; (8005980 <xTaskPriorityDisinherit+0x104>)
 800595e:	441a      	add	r2, r3
 8005960:	693b      	ldr	r3, [r7, #16]
 8005962:	3304      	adds	r3, #4
 8005964:	4619      	mov	r1, r3
 8005966:	4610      	mov	r0, r2
 8005968:	f7fe fcf4 	bl	8004354 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800596c:	2301      	movs	r3, #1
 800596e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005970:	697b      	ldr	r3, [r7, #20]
	}
 8005972:	4618      	mov	r0, r3
 8005974:	3718      	adds	r7, #24
 8005976:	46bd      	mov	sp, r7
 8005978:	bd80      	pop	{r7, pc}
 800597a:	bf00      	nop
 800597c:	200007e8 	.word	0x200007e8
 8005980:	200007ec 	.word	0x200007ec
 8005984:	200008f0 	.word	0x200008f0

08005988 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005988:	b580      	push	{r7, lr}
 800598a:	b084      	sub	sp, #16
 800598c:	af00      	add	r7, sp, #0
 800598e:	6078      	str	r0, [r7, #4]
 8005990:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005992:	4b29      	ldr	r3, [pc, #164]	; (8005a38 <prvAddCurrentTaskToDelayedList+0xb0>)
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005998:	4b28      	ldr	r3, [pc, #160]	; (8005a3c <prvAddCurrentTaskToDelayedList+0xb4>)
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	3304      	adds	r3, #4
 800599e:	4618      	mov	r0, r3
 80059a0:	f7fe fd35 	bl	800440e <uxListRemove>
 80059a4:	4603      	mov	r3, r0
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d10b      	bne.n	80059c2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80059aa:	4b24      	ldr	r3, [pc, #144]	; (8005a3c <prvAddCurrentTaskToDelayedList+0xb4>)
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059b0:	2201      	movs	r2, #1
 80059b2:	fa02 f303 	lsl.w	r3, r2, r3
 80059b6:	43da      	mvns	r2, r3
 80059b8:	4b21      	ldr	r3, [pc, #132]	; (8005a40 <prvAddCurrentTaskToDelayedList+0xb8>)
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	4013      	ands	r3, r2
 80059be:	4a20      	ldr	r2, [pc, #128]	; (8005a40 <prvAddCurrentTaskToDelayedList+0xb8>)
 80059c0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80059c8:	d10a      	bne.n	80059e0 <prvAddCurrentTaskToDelayedList+0x58>
 80059ca:	683b      	ldr	r3, [r7, #0]
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d007      	beq.n	80059e0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80059d0:	4b1a      	ldr	r3, [pc, #104]	; (8005a3c <prvAddCurrentTaskToDelayedList+0xb4>)
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	3304      	adds	r3, #4
 80059d6:	4619      	mov	r1, r3
 80059d8:	481a      	ldr	r0, [pc, #104]	; (8005a44 <prvAddCurrentTaskToDelayedList+0xbc>)
 80059da:	f7fe fcbb 	bl	8004354 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80059de:	e026      	b.n	8005a2e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80059e0:	68fa      	ldr	r2, [r7, #12]
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	4413      	add	r3, r2
 80059e6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80059e8:	4b14      	ldr	r3, [pc, #80]	; (8005a3c <prvAddCurrentTaskToDelayedList+0xb4>)
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	68ba      	ldr	r2, [r7, #8]
 80059ee:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80059f0:	68ba      	ldr	r2, [r7, #8]
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	429a      	cmp	r2, r3
 80059f6:	d209      	bcs.n	8005a0c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80059f8:	4b13      	ldr	r3, [pc, #76]	; (8005a48 <prvAddCurrentTaskToDelayedList+0xc0>)
 80059fa:	681a      	ldr	r2, [r3, #0]
 80059fc:	4b0f      	ldr	r3, [pc, #60]	; (8005a3c <prvAddCurrentTaskToDelayedList+0xb4>)
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	3304      	adds	r3, #4
 8005a02:	4619      	mov	r1, r3
 8005a04:	4610      	mov	r0, r2
 8005a06:	f7fe fcc9 	bl	800439c <vListInsert>
}
 8005a0a:	e010      	b.n	8005a2e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005a0c:	4b0f      	ldr	r3, [pc, #60]	; (8005a4c <prvAddCurrentTaskToDelayedList+0xc4>)
 8005a0e:	681a      	ldr	r2, [r3, #0]
 8005a10:	4b0a      	ldr	r3, [pc, #40]	; (8005a3c <prvAddCurrentTaskToDelayedList+0xb4>)
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	3304      	adds	r3, #4
 8005a16:	4619      	mov	r1, r3
 8005a18:	4610      	mov	r0, r2
 8005a1a:	f7fe fcbf 	bl	800439c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005a1e:	4b0c      	ldr	r3, [pc, #48]	; (8005a50 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	68ba      	ldr	r2, [r7, #8]
 8005a24:	429a      	cmp	r2, r3
 8005a26:	d202      	bcs.n	8005a2e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8005a28:	4a09      	ldr	r2, [pc, #36]	; (8005a50 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005a2a:	68bb      	ldr	r3, [r7, #8]
 8005a2c:	6013      	str	r3, [r2, #0]
}
 8005a2e:	bf00      	nop
 8005a30:	3710      	adds	r7, #16
 8005a32:	46bd      	mov	sp, r7
 8005a34:	bd80      	pop	{r7, pc}
 8005a36:	bf00      	nop
 8005a38:	200008ec 	.word	0x200008ec
 8005a3c:	200007e8 	.word	0x200007e8
 8005a40:	200008f0 	.word	0x200008f0
 8005a44:	200008d4 	.word	0x200008d4
 8005a48:	200008a4 	.word	0x200008a4
 8005a4c:	200008a0 	.word	0x200008a0
 8005a50:	20000908 	.word	0x20000908

08005a54 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005a54:	b480      	push	{r7}
 8005a56:	b085      	sub	sp, #20
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	60f8      	str	r0, [r7, #12]
 8005a5c:	60b9      	str	r1, [r7, #8]
 8005a5e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	3b04      	subs	r3, #4
 8005a64:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005a6c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	3b04      	subs	r3, #4
 8005a72:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005a74:	68bb      	ldr	r3, [r7, #8]
 8005a76:	f023 0201 	bic.w	r2, r3, #1
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	3b04      	subs	r3, #4
 8005a82:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005a84:	4a0c      	ldr	r2, [pc, #48]	; (8005ab8 <pxPortInitialiseStack+0x64>)
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	3b14      	subs	r3, #20
 8005a8e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005a90:	687a      	ldr	r2, [r7, #4]
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	3b04      	subs	r3, #4
 8005a9a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	f06f 0202 	mvn.w	r2, #2
 8005aa2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	3b20      	subs	r3, #32
 8005aa8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005aaa:	68fb      	ldr	r3, [r7, #12]
}
 8005aac:	4618      	mov	r0, r3
 8005aae:	3714      	adds	r7, #20
 8005ab0:	46bd      	mov	sp, r7
 8005ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab6:	4770      	bx	lr
 8005ab8:	08005abd 	.word	0x08005abd

08005abc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005abc:	b480      	push	{r7}
 8005abe:	b085      	sub	sp, #20
 8005ac0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005ac2:	2300      	movs	r3, #0
 8005ac4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005ac6:	4b12      	ldr	r3, [pc, #72]	; (8005b10 <prvTaskExitError+0x54>)
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005ace:	d00a      	beq.n	8005ae6 <prvTaskExitError+0x2a>
	__asm volatile
 8005ad0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ad4:	f383 8811 	msr	BASEPRI, r3
 8005ad8:	f3bf 8f6f 	isb	sy
 8005adc:	f3bf 8f4f 	dsb	sy
 8005ae0:	60fb      	str	r3, [r7, #12]
}
 8005ae2:	bf00      	nop
 8005ae4:	e7fe      	b.n	8005ae4 <prvTaskExitError+0x28>
	__asm volatile
 8005ae6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005aea:	f383 8811 	msr	BASEPRI, r3
 8005aee:	f3bf 8f6f 	isb	sy
 8005af2:	f3bf 8f4f 	dsb	sy
 8005af6:	60bb      	str	r3, [r7, #8]
}
 8005af8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005afa:	bf00      	nop
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d0fc      	beq.n	8005afc <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005b02:	bf00      	nop
 8005b04:	bf00      	nop
 8005b06:	3714      	adds	r7, #20
 8005b08:	46bd      	mov	sp, r7
 8005b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0e:	4770      	bx	lr
 8005b10:	20000014 	.word	0x20000014
	...

08005b20 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005b20:	4b07      	ldr	r3, [pc, #28]	; (8005b40 <pxCurrentTCBConst2>)
 8005b22:	6819      	ldr	r1, [r3, #0]
 8005b24:	6808      	ldr	r0, [r1, #0]
 8005b26:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b2a:	f380 8809 	msr	PSP, r0
 8005b2e:	f3bf 8f6f 	isb	sy
 8005b32:	f04f 0000 	mov.w	r0, #0
 8005b36:	f380 8811 	msr	BASEPRI, r0
 8005b3a:	4770      	bx	lr
 8005b3c:	f3af 8000 	nop.w

08005b40 <pxCurrentTCBConst2>:
 8005b40:	200007e8 	.word	0x200007e8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005b44:	bf00      	nop
 8005b46:	bf00      	nop

08005b48 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005b48:	4808      	ldr	r0, [pc, #32]	; (8005b6c <prvPortStartFirstTask+0x24>)
 8005b4a:	6800      	ldr	r0, [r0, #0]
 8005b4c:	6800      	ldr	r0, [r0, #0]
 8005b4e:	f380 8808 	msr	MSP, r0
 8005b52:	f04f 0000 	mov.w	r0, #0
 8005b56:	f380 8814 	msr	CONTROL, r0
 8005b5a:	b662      	cpsie	i
 8005b5c:	b661      	cpsie	f
 8005b5e:	f3bf 8f4f 	dsb	sy
 8005b62:	f3bf 8f6f 	isb	sy
 8005b66:	df00      	svc	0
 8005b68:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005b6a:	bf00      	nop
 8005b6c:	e000ed08 	.word	0xe000ed08

08005b70 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005b70:	b580      	push	{r7, lr}
 8005b72:	b086      	sub	sp, #24
 8005b74:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005b76:	4b46      	ldr	r3, [pc, #280]	; (8005c90 <xPortStartScheduler+0x120>)
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	4a46      	ldr	r2, [pc, #280]	; (8005c94 <xPortStartScheduler+0x124>)
 8005b7c:	4293      	cmp	r3, r2
 8005b7e:	d10a      	bne.n	8005b96 <xPortStartScheduler+0x26>
	__asm volatile
 8005b80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b84:	f383 8811 	msr	BASEPRI, r3
 8005b88:	f3bf 8f6f 	isb	sy
 8005b8c:	f3bf 8f4f 	dsb	sy
 8005b90:	613b      	str	r3, [r7, #16]
}
 8005b92:	bf00      	nop
 8005b94:	e7fe      	b.n	8005b94 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005b96:	4b3e      	ldr	r3, [pc, #248]	; (8005c90 <xPortStartScheduler+0x120>)
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	4a3f      	ldr	r2, [pc, #252]	; (8005c98 <xPortStartScheduler+0x128>)
 8005b9c:	4293      	cmp	r3, r2
 8005b9e:	d10a      	bne.n	8005bb6 <xPortStartScheduler+0x46>
	__asm volatile
 8005ba0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ba4:	f383 8811 	msr	BASEPRI, r3
 8005ba8:	f3bf 8f6f 	isb	sy
 8005bac:	f3bf 8f4f 	dsb	sy
 8005bb0:	60fb      	str	r3, [r7, #12]
}
 8005bb2:	bf00      	nop
 8005bb4:	e7fe      	b.n	8005bb4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005bb6:	4b39      	ldr	r3, [pc, #228]	; (8005c9c <xPortStartScheduler+0x12c>)
 8005bb8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005bba:	697b      	ldr	r3, [r7, #20]
 8005bbc:	781b      	ldrb	r3, [r3, #0]
 8005bbe:	b2db      	uxtb	r3, r3
 8005bc0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005bc2:	697b      	ldr	r3, [r7, #20]
 8005bc4:	22ff      	movs	r2, #255	; 0xff
 8005bc6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005bc8:	697b      	ldr	r3, [r7, #20]
 8005bca:	781b      	ldrb	r3, [r3, #0]
 8005bcc:	b2db      	uxtb	r3, r3
 8005bce:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005bd0:	78fb      	ldrb	r3, [r7, #3]
 8005bd2:	b2db      	uxtb	r3, r3
 8005bd4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005bd8:	b2da      	uxtb	r2, r3
 8005bda:	4b31      	ldr	r3, [pc, #196]	; (8005ca0 <xPortStartScheduler+0x130>)
 8005bdc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005bde:	4b31      	ldr	r3, [pc, #196]	; (8005ca4 <xPortStartScheduler+0x134>)
 8005be0:	2207      	movs	r2, #7
 8005be2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005be4:	e009      	b.n	8005bfa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8005be6:	4b2f      	ldr	r3, [pc, #188]	; (8005ca4 <xPortStartScheduler+0x134>)
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	3b01      	subs	r3, #1
 8005bec:	4a2d      	ldr	r2, [pc, #180]	; (8005ca4 <xPortStartScheduler+0x134>)
 8005bee:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005bf0:	78fb      	ldrb	r3, [r7, #3]
 8005bf2:	b2db      	uxtb	r3, r3
 8005bf4:	005b      	lsls	r3, r3, #1
 8005bf6:	b2db      	uxtb	r3, r3
 8005bf8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005bfa:	78fb      	ldrb	r3, [r7, #3]
 8005bfc:	b2db      	uxtb	r3, r3
 8005bfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c02:	2b80      	cmp	r3, #128	; 0x80
 8005c04:	d0ef      	beq.n	8005be6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005c06:	4b27      	ldr	r3, [pc, #156]	; (8005ca4 <xPortStartScheduler+0x134>)
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	f1c3 0307 	rsb	r3, r3, #7
 8005c0e:	2b04      	cmp	r3, #4
 8005c10:	d00a      	beq.n	8005c28 <xPortStartScheduler+0xb8>
	__asm volatile
 8005c12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c16:	f383 8811 	msr	BASEPRI, r3
 8005c1a:	f3bf 8f6f 	isb	sy
 8005c1e:	f3bf 8f4f 	dsb	sy
 8005c22:	60bb      	str	r3, [r7, #8]
}
 8005c24:	bf00      	nop
 8005c26:	e7fe      	b.n	8005c26 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005c28:	4b1e      	ldr	r3, [pc, #120]	; (8005ca4 <xPortStartScheduler+0x134>)
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	021b      	lsls	r3, r3, #8
 8005c2e:	4a1d      	ldr	r2, [pc, #116]	; (8005ca4 <xPortStartScheduler+0x134>)
 8005c30:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005c32:	4b1c      	ldr	r3, [pc, #112]	; (8005ca4 <xPortStartScheduler+0x134>)
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005c3a:	4a1a      	ldr	r2, [pc, #104]	; (8005ca4 <xPortStartScheduler+0x134>)
 8005c3c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	b2da      	uxtb	r2, r3
 8005c42:	697b      	ldr	r3, [r7, #20]
 8005c44:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005c46:	4b18      	ldr	r3, [pc, #96]	; (8005ca8 <xPortStartScheduler+0x138>)
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	4a17      	ldr	r2, [pc, #92]	; (8005ca8 <xPortStartScheduler+0x138>)
 8005c4c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005c50:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005c52:	4b15      	ldr	r3, [pc, #84]	; (8005ca8 <xPortStartScheduler+0x138>)
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	4a14      	ldr	r2, [pc, #80]	; (8005ca8 <xPortStartScheduler+0x138>)
 8005c58:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005c5c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005c5e:	f000 f8dd 	bl	8005e1c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005c62:	4b12      	ldr	r3, [pc, #72]	; (8005cac <xPortStartScheduler+0x13c>)
 8005c64:	2200      	movs	r2, #0
 8005c66:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005c68:	f000 f8fc 	bl	8005e64 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005c6c:	4b10      	ldr	r3, [pc, #64]	; (8005cb0 <xPortStartScheduler+0x140>)
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	4a0f      	ldr	r2, [pc, #60]	; (8005cb0 <xPortStartScheduler+0x140>)
 8005c72:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005c76:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005c78:	f7ff ff66 	bl	8005b48 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005c7c:	f7ff fba4 	bl	80053c8 <vTaskSwitchContext>
	prvTaskExitError();
 8005c80:	f7ff ff1c 	bl	8005abc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005c84:	2300      	movs	r3, #0
}
 8005c86:	4618      	mov	r0, r3
 8005c88:	3718      	adds	r7, #24
 8005c8a:	46bd      	mov	sp, r7
 8005c8c:	bd80      	pop	{r7, pc}
 8005c8e:	bf00      	nop
 8005c90:	e000ed00 	.word	0xe000ed00
 8005c94:	410fc271 	.word	0x410fc271
 8005c98:	410fc270 	.word	0x410fc270
 8005c9c:	e000e400 	.word	0xe000e400
 8005ca0:	20000914 	.word	0x20000914
 8005ca4:	20000918 	.word	0x20000918
 8005ca8:	e000ed20 	.word	0xe000ed20
 8005cac:	20000014 	.word	0x20000014
 8005cb0:	e000ef34 	.word	0xe000ef34

08005cb4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005cb4:	b480      	push	{r7}
 8005cb6:	b083      	sub	sp, #12
 8005cb8:	af00      	add	r7, sp, #0
	__asm volatile
 8005cba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cbe:	f383 8811 	msr	BASEPRI, r3
 8005cc2:	f3bf 8f6f 	isb	sy
 8005cc6:	f3bf 8f4f 	dsb	sy
 8005cca:	607b      	str	r3, [r7, #4]
}
 8005ccc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005cce:	4b0f      	ldr	r3, [pc, #60]	; (8005d0c <vPortEnterCritical+0x58>)
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	3301      	adds	r3, #1
 8005cd4:	4a0d      	ldr	r2, [pc, #52]	; (8005d0c <vPortEnterCritical+0x58>)
 8005cd6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005cd8:	4b0c      	ldr	r3, [pc, #48]	; (8005d0c <vPortEnterCritical+0x58>)
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	2b01      	cmp	r3, #1
 8005cde:	d10f      	bne.n	8005d00 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005ce0:	4b0b      	ldr	r3, [pc, #44]	; (8005d10 <vPortEnterCritical+0x5c>)
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	b2db      	uxtb	r3, r3
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d00a      	beq.n	8005d00 <vPortEnterCritical+0x4c>
	__asm volatile
 8005cea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cee:	f383 8811 	msr	BASEPRI, r3
 8005cf2:	f3bf 8f6f 	isb	sy
 8005cf6:	f3bf 8f4f 	dsb	sy
 8005cfa:	603b      	str	r3, [r7, #0]
}
 8005cfc:	bf00      	nop
 8005cfe:	e7fe      	b.n	8005cfe <vPortEnterCritical+0x4a>
	}
}
 8005d00:	bf00      	nop
 8005d02:	370c      	adds	r7, #12
 8005d04:	46bd      	mov	sp, r7
 8005d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d0a:	4770      	bx	lr
 8005d0c:	20000014 	.word	0x20000014
 8005d10:	e000ed04 	.word	0xe000ed04

08005d14 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005d14:	b480      	push	{r7}
 8005d16:	b083      	sub	sp, #12
 8005d18:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005d1a:	4b12      	ldr	r3, [pc, #72]	; (8005d64 <vPortExitCritical+0x50>)
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d10a      	bne.n	8005d38 <vPortExitCritical+0x24>
	__asm volatile
 8005d22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d26:	f383 8811 	msr	BASEPRI, r3
 8005d2a:	f3bf 8f6f 	isb	sy
 8005d2e:	f3bf 8f4f 	dsb	sy
 8005d32:	607b      	str	r3, [r7, #4]
}
 8005d34:	bf00      	nop
 8005d36:	e7fe      	b.n	8005d36 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005d38:	4b0a      	ldr	r3, [pc, #40]	; (8005d64 <vPortExitCritical+0x50>)
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	3b01      	subs	r3, #1
 8005d3e:	4a09      	ldr	r2, [pc, #36]	; (8005d64 <vPortExitCritical+0x50>)
 8005d40:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005d42:	4b08      	ldr	r3, [pc, #32]	; (8005d64 <vPortExitCritical+0x50>)
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d105      	bne.n	8005d56 <vPortExitCritical+0x42>
 8005d4a:	2300      	movs	r3, #0
 8005d4c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005d4e:	683b      	ldr	r3, [r7, #0]
 8005d50:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005d54:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005d56:	bf00      	nop
 8005d58:	370c      	adds	r7, #12
 8005d5a:	46bd      	mov	sp, r7
 8005d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d60:	4770      	bx	lr
 8005d62:	bf00      	nop
 8005d64:	20000014 	.word	0x20000014
	...

08005d70 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005d70:	f3ef 8009 	mrs	r0, PSP
 8005d74:	f3bf 8f6f 	isb	sy
 8005d78:	4b15      	ldr	r3, [pc, #84]	; (8005dd0 <pxCurrentTCBConst>)
 8005d7a:	681a      	ldr	r2, [r3, #0]
 8005d7c:	f01e 0f10 	tst.w	lr, #16
 8005d80:	bf08      	it	eq
 8005d82:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005d86:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d8a:	6010      	str	r0, [r2, #0]
 8005d8c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005d90:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005d94:	f380 8811 	msr	BASEPRI, r0
 8005d98:	f3bf 8f4f 	dsb	sy
 8005d9c:	f3bf 8f6f 	isb	sy
 8005da0:	f7ff fb12 	bl	80053c8 <vTaskSwitchContext>
 8005da4:	f04f 0000 	mov.w	r0, #0
 8005da8:	f380 8811 	msr	BASEPRI, r0
 8005dac:	bc09      	pop	{r0, r3}
 8005dae:	6819      	ldr	r1, [r3, #0]
 8005db0:	6808      	ldr	r0, [r1, #0]
 8005db2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005db6:	f01e 0f10 	tst.w	lr, #16
 8005dba:	bf08      	it	eq
 8005dbc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005dc0:	f380 8809 	msr	PSP, r0
 8005dc4:	f3bf 8f6f 	isb	sy
 8005dc8:	4770      	bx	lr
 8005dca:	bf00      	nop
 8005dcc:	f3af 8000 	nop.w

08005dd0 <pxCurrentTCBConst>:
 8005dd0:	200007e8 	.word	0x200007e8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005dd4:	bf00      	nop
 8005dd6:	bf00      	nop

08005dd8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005dd8:	b580      	push	{r7, lr}
 8005dda:	b082      	sub	sp, #8
 8005ddc:	af00      	add	r7, sp, #0
	__asm volatile
 8005dde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005de2:	f383 8811 	msr	BASEPRI, r3
 8005de6:	f3bf 8f6f 	isb	sy
 8005dea:	f3bf 8f4f 	dsb	sy
 8005dee:	607b      	str	r3, [r7, #4]
}
 8005df0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005df2:	f7ff fa31 	bl	8005258 <xTaskIncrementTick>
 8005df6:	4603      	mov	r3, r0
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d003      	beq.n	8005e04 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005dfc:	4b06      	ldr	r3, [pc, #24]	; (8005e18 <SysTick_Handler+0x40>)
 8005dfe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e02:	601a      	str	r2, [r3, #0]
 8005e04:	2300      	movs	r3, #0
 8005e06:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005e08:	683b      	ldr	r3, [r7, #0]
 8005e0a:	f383 8811 	msr	BASEPRI, r3
}
 8005e0e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005e10:	bf00      	nop
 8005e12:	3708      	adds	r7, #8
 8005e14:	46bd      	mov	sp, r7
 8005e16:	bd80      	pop	{r7, pc}
 8005e18:	e000ed04 	.word	0xe000ed04

08005e1c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005e1c:	b480      	push	{r7}
 8005e1e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005e20:	4b0b      	ldr	r3, [pc, #44]	; (8005e50 <vPortSetupTimerInterrupt+0x34>)
 8005e22:	2200      	movs	r2, #0
 8005e24:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005e26:	4b0b      	ldr	r3, [pc, #44]	; (8005e54 <vPortSetupTimerInterrupt+0x38>)
 8005e28:	2200      	movs	r2, #0
 8005e2a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005e2c:	4b0a      	ldr	r3, [pc, #40]	; (8005e58 <vPortSetupTimerInterrupt+0x3c>)
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	4a0a      	ldr	r2, [pc, #40]	; (8005e5c <vPortSetupTimerInterrupt+0x40>)
 8005e32:	fba2 2303 	umull	r2, r3, r2, r3
 8005e36:	099b      	lsrs	r3, r3, #6
 8005e38:	4a09      	ldr	r2, [pc, #36]	; (8005e60 <vPortSetupTimerInterrupt+0x44>)
 8005e3a:	3b01      	subs	r3, #1
 8005e3c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005e3e:	4b04      	ldr	r3, [pc, #16]	; (8005e50 <vPortSetupTimerInterrupt+0x34>)
 8005e40:	2207      	movs	r2, #7
 8005e42:	601a      	str	r2, [r3, #0]
}
 8005e44:	bf00      	nop
 8005e46:	46bd      	mov	sp, r7
 8005e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4c:	4770      	bx	lr
 8005e4e:	bf00      	nop
 8005e50:	e000e010 	.word	0xe000e010
 8005e54:	e000e018 	.word	0xe000e018
 8005e58:	20000008 	.word	0x20000008
 8005e5c:	10624dd3 	.word	0x10624dd3
 8005e60:	e000e014 	.word	0xe000e014

08005e64 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005e64:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005e74 <vPortEnableVFP+0x10>
 8005e68:	6801      	ldr	r1, [r0, #0]
 8005e6a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8005e6e:	6001      	str	r1, [r0, #0]
 8005e70:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005e72:	bf00      	nop
 8005e74:	e000ed88 	.word	0xe000ed88

08005e78 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005e78:	b580      	push	{r7, lr}
 8005e7a:	b08a      	sub	sp, #40	; 0x28
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005e80:	2300      	movs	r3, #0
 8005e82:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005e84:	f7ff f93e 	bl	8005104 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005e88:	4b5b      	ldr	r3, [pc, #364]	; (8005ff8 <pvPortMalloc+0x180>)
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d101      	bne.n	8005e94 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005e90:	f000 f920 	bl	80060d4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005e94:	4b59      	ldr	r3, [pc, #356]	; (8005ffc <pvPortMalloc+0x184>)
 8005e96:	681a      	ldr	r2, [r3, #0]
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	4013      	ands	r3, r2
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	f040 8093 	bne.w	8005fc8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d01d      	beq.n	8005ee4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8005ea8:	2208      	movs	r2, #8
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	4413      	add	r3, r2
 8005eae:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	f003 0307 	and.w	r3, r3, #7
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d014      	beq.n	8005ee4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	f023 0307 	bic.w	r3, r3, #7
 8005ec0:	3308      	adds	r3, #8
 8005ec2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	f003 0307 	and.w	r3, r3, #7
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d00a      	beq.n	8005ee4 <pvPortMalloc+0x6c>
	__asm volatile
 8005ece:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ed2:	f383 8811 	msr	BASEPRI, r3
 8005ed6:	f3bf 8f6f 	isb	sy
 8005eda:	f3bf 8f4f 	dsb	sy
 8005ede:	617b      	str	r3, [r7, #20]
}
 8005ee0:	bf00      	nop
 8005ee2:	e7fe      	b.n	8005ee2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d06e      	beq.n	8005fc8 <pvPortMalloc+0x150>
 8005eea:	4b45      	ldr	r3, [pc, #276]	; (8006000 <pvPortMalloc+0x188>)
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	687a      	ldr	r2, [r7, #4]
 8005ef0:	429a      	cmp	r2, r3
 8005ef2:	d869      	bhi.n	8005fc8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005ef4:	4b43      	ldr	r3, [pc, #268]	; (8006004 <pvPortMalloc+0x18c>)
 8005ef6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005ef8:	4b42      	ldr	r3, [pc, #264]	; (8006004 <pvPortMalloc+0x18c>)
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005efe:	e004      	b.n	8005f0a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f02:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f0c:	685b      	ldr	r3, [r3, #4]
 8005f0e:	687a      	ldr	r2, [r7, #4]
 8005f10:	429a      	cmp	r2, r3
 8005f12:	d903      	bls.n	8005f1c <pvPortMalloc+0xa4>
 8005f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d1f1      	bne.n	8005f00 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005f1c:	4b36      	ldr	r3, [pc, #216]	; (8005ff8 <pvPortMalloc+0x180>)
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f22:	429a      	cmp	r2, r3
 8005f24:	d050      	beq.n	8005fc8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005f26:	6a3b      	ldr	r3, [r7, #32]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	2208      	movs	r2, #8
 8005f2c:	4413      	add	r3, r2
 8005f2e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f32:	681a      	ldr	r2, [r3, #0]
 8005f34:	6a3b      	ldr	r3, [r7, #32]
 8005f36:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f3a:	685a      	ldr	r2, [r3, #4]
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	1ad2      	subs	r2, r2, r3
 8005f40:	2308      	movs	r3, #8
 8005f42:	005b      	lsls	r3, r3, #1
 8005f44:	429a      	cmp	r2, r3
 8005f46:	d91f      	bls.n	8005f88 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005f48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	4413      	add	r3, r2
 8005f4e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005f50:	69bb      	ldr	r3, [r7, #24]
 8005f52:	f003 0307 	and.w	r3, r3, #7
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d00a      	beq.n	8005f70 <pvPortMalloc+0xf8>
	__asm volatile
 8005f5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f5e:	f383 8811 	msr	BASEPRI, r3
 8005f62:	f3bf 8f6f 	isb	sy
 8005f66:	f3bf 8f4f 	dsb	sy
 8005f6a:	613b      	str	r3, [r7, #16]
}
 8005f6c:	bf00      	nop
 8005f6e:	e7fe      	b.n	8005f6e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f72:	685a      	ldr	r2, [r3, #4]
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	1ad2      	subs	r2, r2, r3
 8005f78:	69bb      	ldr	r3, [r7, #24]
 8005f7a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f7e:	687a      	ldr	r2, [r7, #4]
 8005f80:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005f82:	69b8      	ldr	r0, [r7, #24]
 8005f84:	f000 f908 	bl	8006198 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005f88:	4b1d      	ldr	r3, [pc, #116]	; (8006000 <pvPortMalloc+0x188>)
 8005f8a:	681a      	ldr	r2, [r3, #0]
 8005f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f8e:	685b      	ldr	r3, [r3, #4]
 8005f90:	1ad3      	subs	r3, r2, r3
 8005f92:	4a1b      	ldr	r2, [pc, #108]	; (8006000 <pvPortMalloc+0x188>)
 8005f94:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005f96:	4b1a      	ldr	r3, [pc, #104]	; (8006000 <pvPortMalloc+0x188>)
 8005f98:	681a      	ldr	r2, [r3, #0]
 8005f9a:	4b1b      	ldr	r3, [pc, #108]	; (8006008 <pvPortMalloc+0x190>)
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	429a      	cmp	r2, r3
 8005fa0:	d203      	bcs.n	8005faa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005fa2:	4b17      	ldr	r3, [pc, #92]	; (8006000 <pvPortMalloc+0x188>)
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	4a18      	ldr	r2, [pc, #96]	; (8006008 <pvPortMalloc+0x190>)
 8005fa8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fac:	685a      	ldr	r2, [r3, #4]
 8005fae:	4b13      	ldr	r3, [pc, #76]	; (8005ffc <pvPortMalloc+0x184>)
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	431a      	orrs	r2, r3
 8005fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fb6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fba:	2200      	movs	r2, #0
 8005fbc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8005fbe:	4b13      	ldr	r3, [pc, #76]	; (800600c <pvPortMalloc+0x194>)
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	3301      	adds	r3, #1
 8005fc4:	4a11      	ldr	r2, [pc, #68]	; (800600c <pvPortMalloc+0x194>)
 8005fc6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005fc8:	f7ff f8aa 	bl	8005120 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005fcc:	69fb      	ldr	r3, [r7, #28]
 8005fce:	f003 0307 	and.w	r3, r3, #7
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d00a      	beq.n	8005fec <pvPortMalloc+0x174>
	__asm volatile
 8005fd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fda:	f383 8811 	msr	BASEPRI, r3
 8005fde:	f3bf 8f6f 	isb	sy
 8005fe2:	f3bf 8f4f 	dsb	sy
 8005fe6:	60fb      	str	r3, [r7, #12]
}
 8005fe8:	bf00      	nop
 8005fea:	e7fe      	b.n	8005fea <pvPortMalloc+0x172>
	return pvReturn;
 8005fec:	69fb      	ldr	r3, [r7, #28]
}
 8005fee:	4618      	mov	r0, r3
 8005ff0:	3728      	adds	r7, #40	; 0x28
 8005ff2:	46bd      	mov	sp, r7
 8005ff4:	bd80      	pop	{r7, pc}
 8005ff6:	bf00      	nop
 8005ff8:	20004524 	.word	0x20004524
 8005ffc:	20004538 	.word	0x20004538
 8006000:	20004528 	.word	0x20004528
 8006004:	2000451c 	.word	0x2000451c
 8006008:	2000452c 	.word	0x2000452c
 800600c:	20004530 	.word	0x20004530

08006010 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006010:	b580      	push	{r7, lr}
 8006012:	b086      	sub	sp, #24
 8006014:	af00      	add	r7, sp, #0
 8006016:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	2b00      	cmp	r3, #0
 8006020:	d04d      	beq.n	80060be <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006022:	2308      	movs	r3, #8
 8006024:	425b      	negs	r3, r3
 8006026:	697a      	ldr	r2, [r7, #20]
 8006028:	4413      	add	r3, r2
 800602a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800602c:	697b      	ldr	r3, [r7, #20]
 800602e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006030:	693b      	ldr	r3, [r7, #16]
 8006032:	685a      	ldr	r2, [r3, #4]
 8006034:	4b24      	ldr	r3, [pc, #144]	; (80060c8 <vPortFree+0xb8>)
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	4013      	ands	r3, r2
 800603a:	2b00      	cmp	r3, #0
 800603c:	d10a      	bne.n	8006054 <vPortFree+0x44>
	__asm volatile
 800603e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006042:	f383 8811 	msr	BASEPRI, r3
 8006046:	f3bf 8f6f 	isb	sy
 800604a:	f3bf 8f4f 	dsb	sy
 800604e:	60fb      	str	r3, [r7, #12]
}
 8006050:	bf00      	nop
 8006052:	e7fe      	b.n	8006052 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006054:	693b      	ldr	r3, [r7, #16]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	2b00      	cmp	r3, #0
 800605a:	d00a      	beq.n	8006072 <vPortFree+0x62>
	__asm volatile
 800605c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006060:	f383 8811 	msr	BASEPRI, r3
 8006064:	f3bf 8f6f 	isb	sy
 8006068:	f3bf 8f4f 	dsb	sy
 800606c:	60bb      	str	r3, [r7, #8]
}
 800606e:	bf00      	nop
 8006070:	e7fe      	b.n	8006070 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006072:	693b      	ldr	r3, [r7, #16]
 8006074:	685a      	ldr	r2, [r3, #4]
 8006076:	4b14      	ldr	r3, [pc, #80]	; (80060c8 <vPortFree+0xb8>)
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	4013      	ands	r3, r2
 800607c:	2b00      	cmp	r3, #0
 800607e:	d01e      	beq.n	80060be <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006080:	693b      	ldr	r3, [r7, #16]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	2b00      	cmp	r3, #0
 8006086:	d11a      	bne.n	80060be <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006088:	693b      	ldr	r3, [r7, #16]
 800608a:	685a      	ldr	r2, [r3, #4]
 800608c:	4b0e      	ldr	r3, [pc, #56]	; (80060c8 <vPortFree+0xb8>)
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	43db      	mvns	r3, r3
 8006092:	401a      	ands	r2, r3
 8006094:	693b      	ldr	r3, [r7, #16]
 8006096:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006098:	f7ff f834 	bl	8005104 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800609c:	693b      	ldr	r3, [r7, #16]
 800609e:	685a      	ldr	r2, [r3, #4]
 80060a0:	4b0a      	ldr	r3, [pc, #40]	; (80060cc <vPortFree+0xbc>)
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	4413      	add	r3, r2
 80060a6:	4a09      	ldr	r2, [pc, #36]	; (80060cc <vPortFree+0xbc>)
 80060a8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80060aa:	6938      	ldr	r0, [r7, #16]
 80060ac:	f000 f874 	bl	8006198 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80060b0:	4b07      	ldr	r3, [pc, #28]	; (80060d0 <vPortFree+0xc0>)
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	3301      	adds	r3, #1
 80060b6:	4a06      	ldr	r2, [pc, #24]	; (80060d0 <vPortFree+0xc0>)
 80060b8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80060ba:	f7ff f831 	bl	8005120 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80060be:	bf00      	nop
 80060c0:	3718      	adds	r7, #24
 80060c2:	46bd      	mov	sp, r7
 80060c4:	bd80      	pop	{r7, pc}
 80060c6:	bf00      	nop
 80060c8:	20004538 	.word	0x20004538
 80060cc:	20004528 	.word	0x20004528
 80060d0:	20004534 	.word	0x20004534

080060d4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80060d4:	b480      	push	{r7}
 80060d6:	b085      	sub	sp, #20
 80060d8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80060da:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80060de:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80060e0:	4b27      	ldr	r3, [pc, #156]	; (8006180 <prvHeapInit+0xac>)
 80060e2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	f003 0307 	and.w	r3, r3, #7
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d00c      	beq.n	8006108 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	3307      	adds	r3, #7
 80060f2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	f023 0307 	bic.w	r3, r3, #7
 80060fa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80060fc:	68ba      	ldr	r2, [r7, #8]
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	1ad3      	subs	r3, r2, r3
 8006102:	4a1f      	ldr	r2, [pc, #124]	; (8006180 <prvHeapInit+0xac>)
 8006104:	4413      	add	r3, r2
 8006106:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800610c:	4a1d      	ldr	r2, [pc, #116]	; (8006184 <prvHeapInit+0xb0>)
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006112:	4b1c      	ldr	r3, [pc, #112]	; (8006184 <prvHeapInit+0xb0>)
 8006114:	2200      	movs	r2, #0
 8006116:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	68ba      	ldr	r2, [r7, #8]
 800611c:	4413      	add	r3, r2
 800611e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006120:	2208      	movs	r2, #8
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	1a9b      	subs	r3, r3, r2
 8006126:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	f023 0307 	bic.w	r3, r3, #7
 800612e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	4a15      	ldr	r2, [pc, #84]	; (8006188 <prvHeapInit+0xb4>)
 8006134:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006136:	4b14      	ldr	r3, [pc, #80]	; (8006188 <prvHeapInit+0xb4>)
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	2200      	movs	r2, #0
 800613c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800613e:	4b12      	ldr	r3, [pc, #72]	; (8006188 <prvHeapInit+0xb4>)
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	2200      	movs	r2, #0
 8006144:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800614a:	683b      	ldr	r3, [r7, #0]
 800614c:	68fa      	ldr	r2, [r7, #12]
 800614e:	1ad2      	subs	r2, r2, r3
 8006150:	683b      	ldr	r3, [r7, #0]
 8006152:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006154:	4b0c      	ldr	r3, [pc, #48]	; (8006188 <prvHeapInit+0xb4>)
 8006156:	681a      	ldr	r2, [r3, #0]
 8006158:	683b      	ldr	r3, [r7, #0]
 800615a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800615c:	683b      	ldr	r3, [r7, #0]
 800615e:	685b      	ldr	r3, [r3, #4]
 8006160:	4a0a      	ldr	r2, [pc, #40]	; (800618c <prvHeapInit+0xb8>)
 8006162:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006164:	683b      	ldr	r3, [r7, #0]
 8006166:	685b      	ldr	r3, [r3, #4]
 8006168:	4a09      	ldr	r2, [pc, #36]	; (8006190 <prvHeapInit+0xbc>)
 800616a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800616c:	4b09      	ldr	r3, [pc, #36]	; (8006194 <prvHeapInit+0xc0>)
 800616e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006172:	601a      	str	r2, [r3, #0]
}
 8006174:	bf00      	nop
 8006176:	3714      	adds	r7, #20
 8006178:	46bd      	mov	sp, r7
 800617a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617e:	4770      	bx	lr
 8006180:	2000091c 	.word	0x2000091c
 8006184:	2000451c 	.word	0x2000451c
 8006188:	20004524 	.word	0x20004524
 800618c:	2000452c 	.word	0x2000452c
 8006190:	20004528 	.word	0x20004528
 8006194:	20004538 	.word	0x20004538

08006198 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006198:	b480      	push	{r7}
 800619a:	b085      	sub	sp, #20
 800619c:	af00      	add	r7, sp, #0
 800619e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80061a0:	4b28      	ldr	r3, [pc, #160]	; (8006244 <prvInsertBlockIntoFreeList+0xac>)
 80061a2:	60fb      	str	r3, [r7, #12]
 80061a4:	e002      	b.n	80061ac <prvInsertBlockIntoFreeList+0x14>
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	60fb      	str	r3, [r7, #12]
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	687a      	ldr	r2, [r7, #4]
 80061b2:	429a      	cmp	r2, r3
 80061b4:	d8f7      	bhi.n	80061a6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	685b      	ldr	r3, [r3, #4]
 80061be:	68ba      	ldr	r2, [r7, #8]
 80061c0:	4413      	add	r3, r2
 80061c2:	687a      	ldr	r2, [r7, #4]
 80061c4:	429a      	cmp	r2, r3
 80061c6:	d108      	bne.n	80061da <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	685a      	ldr	r2, [r3, #4]
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	685b      	ldr	r3, [r3, #4]
 80061d0:	441a      	add	r2, r3
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	685b      	ldr	r3, [r3, #4]
 80061e2:	68ba      	ldr	r2, [r7, #8]
 80061e4:	441a      	add	r2, r3
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	429a      	cmp	r2, r3
 80061ec:	d118      	bne.n	8006220 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	681a      	ldr	r2, [r3, #0]
 80061f2:	4b15      	ldr	r3, [pc, #84]	; (8006248 <prvInsertBlockIntoFreeList+0xb0>)
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	429a      	cmp	r2, r3
 80061f8:	d00d      	beq.n	8006216 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	685a      	ldr	r2, [r3, #4]
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	685b      	ldr	r3, [r3, #4]
 8006204:	441a      	add	r2, r3
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	681a      	ldr	r2, [r3, #0]
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	601a      	str	r2, [r3, #0]
 8006214:	e008      	b.n	8006228 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006216:	4b0c      	ldr	r3, [pc, #48]	; (8006248 <prvInsertBlockIntoFreeList+0xb0>)
 8006218:	681a      	ldr	r2, [r3, #0]
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	601a      	str	r2, [r3, #0]
 800621e:	e003      	b.n	8006228 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	681a      	ldr	r2, [r3, #0]
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006228:	68fa      	ldr	r2, [r7, #12]
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	429a      	cmp	r2, r3
 800622e:	d002      	beq.n	8006236 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	687a      	ldr	r2, [r7, #4]
 8006234:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006236:	bf00      	nop
 8006238:	3714      	adds	r7, #20
 800623a:	46bd      	mov	sp, r7
 800623c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006240:	4770      	bx	lr
 8006242:	bf00      	nop
 8006244:	2000451c 	.word	0x2000451c
 8006248:	20004524 	.word	0x20004524

0800624c <std>:
 800624c:	2300      	movs	r3, #0
 800624e:	b510      	push	{r4, lr}
 8006250:	4604      	mov	r4, r0
 8006252:	e9c0 3300 	strd	r3, r3, [r0]
 8006256:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800625a:	6083      	str	r3, [r0, #8]
 800625c:	8181      	strh	r1, [r0, #12]
 800625e:	6643      	str	r3, [r0, #100]	; 0x64
 8006260:	81c2      	strh	r2, [r0, #14]
 8006262:	6183      	str	r3, [r0, #24]
 8006264:	4619      	mov	r1, r3
 8006266:	2208      	movs	r2, #8
 8006268:	305c      	adds	r0, #92	; 0x5c
 800626a:	f000 f91f 	bl	80064ac <memset>
 800626e:	4b0d      	ldr	r3, [pc, #52]	; (80062a4 <std+0x58>)
 8006270:	6263      	str	r3, [r4, #36]	; 0x24
 8006272:	4b0d      	ldr	r3, [pc, #52]	; (80062a8 <std+0x5c>)
 8006274:	62a3      	str	r3, [r4, #40]	; 0x28
 8006276:	4b0d      	ldr	r3, [pc, #52]	; (80062ac <std+0x60>)
 8006278:	62e3      	str	r3, [r4, #44]	; 0x2c
 800627a:	4b0d      	ldr	r3, [pc, #52]	; (80062b0 <std+0x64>)
 800627c:	6323      	str	r3, [r4, #48]	; 0x30
 800627e:	4b0d      	ldr	r3, [pc, #52]	; (80062b4 <std+0x68>)
 8006280:	6224      	str	r4, [r4, #32]
 8006282:	429c      	cmp	r4, r3
 8006284:	d006      	beq.n	8006294 <std+0x48>
 8006286:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800628a:	4294      	cmp	r4, r2
 800628c:	d002      	beq.n	8006294 <std+0x48>
 800628e:	33d0      	adds	r3, #208	; 0xd0
 8006290:	429c      	cmp	r4, r3
 8006292:	d105      	bne.n	80062a0 <std+0x54>
 8006294:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006298:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800629c:	f000 b938 	b.w	8006510 <__retarget_lock_init_recursive>
 80062a0:	bd10      	pop	{r4, pc}
 80062a2:	bf00      	nop
 80062a4:	080067e9 	.word	0x080067e9
 80062a8:	0800680b 	.word	0x0800680b
 80062ac:	08006843 	.word	0x08006843
 80062b0:	08006867 	.word	0x08006867
 80062b4:	2000453c 	.word	0x2000453c

080062b8 <stdio_exit_handler>:
 80062b8:	4a02      	ldr	r2, [pc, #8]	; (80062c4 <stdio_exit_handler+0xc>)
 80062ba:	4903      	ldr	r1, [pc, #12]	; (80062c8 <stdio_exit_handler+0x10>)
 80062bc:	4803      	ldr	r0, [pc, #12]	; (80062cc <stdio_exit_handler+0x14>)
 80062be:	f000 b869 	b.w	8006394 <_fwalk_sglue>
 80062c2:	bf00      	nop
 80062c4:	20000018 	.word	0x20000018
 80062c8:	08006781 	.word	0x08006781
 80062cc:	20000024 	.word	0x20000024

080062d0 <cleanup_stdio>:
 80062d0:	6841      	ldr	r1, [r0, #4]
 80062d2:	4b0c      	ldr	r3, [pc, #48]	; (8006304 <cleanup_stdio+0x34>)
 80062d4:	4299      	cmp	r1, r3
 80062d6:	b510      	push	{r4, lr}
 80062d8:	4604      	mov	r4, r0
 80062da:	d001      	beq.n	80062e0 <cleanup_stdio+0x10>
 80062dc:	f000 fa50 	bl	8006780 <_fflush_r>
 80062e0:	68a1      	ldr	r1, [r4, #8]
 80062e2:	4b09      	ldr	r3, [pc, #36]	; (8006308 <cleanup_stdio+0x38>)
 80062e4:	4299      	cmp	r1, r3
 80062e6:	d002      	beq.n	80062ee <cleanup_stdio+0x1e>
 80062e8:	4620      	mov	r0, r4
 80062ea:	f000 fa49 	bl	8006780 <_fflush_r>
 80062ee:	68e1      	ldr	r1, [r4, #12]
 80062f0:	4b06      	ldr	r3, [pc, #24]	; (800630c <cleanup_stdio+0x3c>)
 80062f2:	4299      	cmp	r1, r3
 80062f4:	d004      	beq.n	8006300 <cleanup_stdio+0x30>
 80062f6:	4620      	mov	r0, r4
 80062f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80062fc:	f000 ba40 	b.w	8006780 <_fflush_r>
 8006300:	bd10      	pop	{r4, pc}
 8006302:	bf00      	nop
 8006304:	2000453c 	.word	0x2000453c
 8006308:	200045a4 	.word	0x200045a4
 800630c:	2000460c 	.word	0x2000460c

08006310 <global_stdio_init.part.0>:
 8006310:	b510      	push	{r4, lr}
 8006312:	4b0b      	ldr	r3, [pc, #44]	; (8006340 <global_stdio_init.part.0+0x30>)
 8006314:	4c0b      	ldr	r4, [pc, #44]	; (8006344 <global_stdio_init.part.0+0x34>)
 8006316:	4a0c      	ldr	r2, [pc, #48]	; (8006348 <global_stdio_init.part.0+0x38>)
 8006318:	601a      	str	r2, [r3, #0]
 800631a:	4620      	mov	r0, r4
 800631c:	2200      	movs	r2, #0
 800631e:	2104      	movs	r1, #4
 8006320:	f7ff ff94 	bl	800624c <std>
 8006324:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8006328:	2201      	movs	r2, #1
 800632a:	2109      	movs	r1, #9
 800632c:	f7ff ff8e 	bl	800624c <std>
 8006330:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8006334:	2202      	movs	r2, #2
 8006336:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800633a:	2112      	movs	r1, #18
 800633c:	f7ff bf86 	b.w	800624c <std>
 8006340:	20004674 	.word	0x20004674
 8006344:	2000453c 	.word	0x2000453c
 8006348:	080062b9 	.word	0x080062b9

0800634c <__sfp_lock_acquire>:
 800634c:	4801      	ldr	r0, [pc, #4]	; (8006354 <__sfp_lock_acquire+0x8>)
 800634e:	f000 b8e0 	b.w	8006512 <__retarget_lock_acquire_recursive>
 8006352:	bf00      	nop
 8006354:	20004679 	.word	0x20004679

08006358 <__sfp_lock_release>:
 8006358:	4801      	ldr	r0, [pc, #4]	; (8006360 <__sfp_lock_release+0x8>)
 800635a:	f000 b8db 	b.w	8006514 <__retarget_lock_release_recursive>
 800635e:	bf00      	nop
 8006360:	20004679 	.word	0x20004679

08006364 <__sinit>:
 8006364:	b510      	push	{r4, lr}
 8006366:	4604      	mov	r4, r0
 8006368:	f7ff fff0 	bl	800634c <__sfp_lock_acquire>
 800636c:	6a23      	ldr	r3, [r4, #32]
 800636e:	b11b      	cbz	r3, 8006378 <__sinit+0x14>
 8006370:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006374:	f7ff bff0 	b.w	8006358 <__sfp_lock_release>
 8006378:	4b04      	ldr	r3, [pc, #16]	; (800638c <__sinit+0x28>)
 800637a:	6223      	str	r3, [r4, #32]
 800637c:	4b04      	ldr	r3, [pc, #16]	; (8006390 <__sinit+0x2c>)
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	2b00      	cmp	r3, #0
 8006382:	d1f5      	bne.n	8006370 <__sinit+0xc>
 8006384:	f7ff ffc4 	bl	8006310 <global_stdio_init.part.0>
 8006388:	e7f2      	b.n	8006370 <__sinit+0xc>
 800638a:	bf00      	nop
 800638c:	080062d1 	.word	0x080062d1
 8006390:	20004674 	.word	0x20004674

08006394 <_fwalk_sglue>:
 8006394:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006398:	4607      	mov	r7, r0
 800639a:	4688      	mov	r8, r1
 800639c:	4614      	mov	r4, r2
 800639e:	2600      	movs	r6, #0
 80063a0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80063a4:	f1b9 0901 	subs.w	r9, r9, #1
 80063a8:	d505      	bpl.n	80063b6 <_fwalk_sglue+0x22>
 80063aa:	6824      	ldr	r4, [r4, #0]
 80063ac:	2c00      	cmp	r4, #0
 80063ae:	d1f7      	bne.n	80063a0 <_fwalk_sglue+0xc>
 80063b0:	4630      	mov	r0, r6
 80063b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80063b6:	89ab      	ldrh	r3, [r5, #12]
 80063b8:	2b01      	cmp	r3, #1
 80063ba:	d907      	bls.n	80063cc <_fwalk_sglue+0x38>
 80063bc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80063c0:	3301      	adds	r3, #1
 80063c2:	d003      	beq.n	80063cc <_fwalk_sglue+0x38>
 80063c4:	4629      	mov	r1, r5
 80063c6:	4638      	mov	r0, r7
 80063c8:	47c0      	blx	r8
 80063ca:	4306      	orrs	r6, r0
 80063cc:	3568      	adds	r5, #104	; 0x68
 80063ce:	e7e9      	b.n	80063a4 <_fwalk_sglue+0x10>

080063d0 <_puts_r>:
 80063d0:	6a03      	ldr	r3, [r0, #32]
 80063d2:	b570      	push	{r4, r5, r6, lr}
 80063d4:	6884      	ldr	r4, [r0, #8]
 80063d6:	4605      	mov	r5, r0
 80063d8:	460e      	mov	r6, r1
 80063da:	b90b      	cbnz	r3, 80063e0 <_puts_r+0x10>
 80063dc:	f7ff ffc2 	bl	8006364 <__sinit>
 80063e0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80063e2:	07db      	lsls	r3, r3, #31
 80063e4:	d405      	bmi.n	80063f2 <_puts_r+0x22>
 80063e6:	89a3      	ldrh	r3, [r4, #12]
 80063e8:	0598      	lsls	r0, r3, #22
 80063ea:	d402      	bmi.n	80063f2 <_puts_r+0x22>
 80063ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80063ee:	f000 f890 	bl	8006512 <__retarget_lock_acquire_recursive>
 80063f2:	89a3      	ldrh	r3, [r4, #12]
 80063f4:	0719      	lsls	r1, r3, #28
 80063f6:	d513      	bpl.n	8006420 <_puts_r+0x50>
 80063f8:	6923      	ldr	r3, [r4, #16]
 80063fa:	b18b      	cbz	r3, 8006420 <_puts_r+0x50>
 80063fc:	3e01      	subs	r6, #1
 80063fe:	68a3      	ldr	r3, [r4, #8]
 8006400:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006404:	3b01      	subs	r3, #1
 8006406:	60a3      	str	r3, [r4, #8]
 8006408:	b9e9      	cbnz	r1, 8006446 <_puts_r+0x76>
 800640a:	2b00      	cmp	r3, #0
 800640c:	da2e      	bge.n	800646c <_puts_r+0x9c>
 800640e:	4622      	mov	r2, r4
 8006410:	210a      	movs	r1, #10
 8006412:	4628      	mov	r0, r5
 8006414:	f000 fa2b 	bl	800686e <__swbuf_r>
 8006418:	3001      	adds	r0, #1
 800641a:	d007      	beq.n	800642c <_puts_r+0x5c>
 800641c:	250a      	movs	r5, #10
 800641e:	e007      	b.n	8006430 <_puts_r+0x60>
 8006420:	4621      	mov	r1, r4
 8006422:	4628      	mov	r0, r5
 8006424:	f000 fa60 	bl	80068e8 <__swsetup_r>
 8006428:	2800      	cmp	r0, #0
 800642a:	d0e7      	beq.n	80063fc <_puts_r+0x2c>
 800642c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8006430:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006432:	07da      	lsls	r2, r3, #31
 8006434:	d405      	bmi.n	8006442 <_puts_r+0x72>
 8006436:	89a3      	ldrh	r3, [r4, #12]
 8006438:	059b      	lsls	r3, r3, #22
 800643a:	d402      	bmi.n	8006442 <_puts_r+0x72>
 800643c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800643e:	f000 f869 	bl	8006514 <__retarget_lock_release_recursive>
 8006442:	4628      	mov	r0, r5
 8006444:	bd70      	pop	{r4, r5, r6, pc}
 8006446:	2b00      	cmp	r3, #0
 8006448:	da04      	bge.n	8006454 <_puts_r+0x84>
 800644a:	69a2      	ldr	r2, [r4, #24]
 800644c:	429a      	cmp	r2, r3
 800644e:	dc06      	bgt.n	800645e <_puts_r+0x8e>
 8006450:	290a      	cmp	r1, #10
 8006452:	d004      	beq.n	800645e <_puts_r+0x8e>
 8006454:	6823      	ldr	r3, [r4, #0]
 8006456:	1c5a      	adds	r2, r3, #1
 8006458:	6022      	str	r2, [r4, #0]
 800645a:	7019      	strb	r1, [r3, #0]
 800645c:	e7cf      	b.n	80063fe <_puts_r+0x2e>
 800645e:	4622      	mov	r2, r4
 8006460:	4628      	mov	r0, r5
 8006462:	f000 fa04 	bl	800686e <__swbuf_r>
 8006466:	3001      	adds	r0, #1
 8006468:	d1c9      	bne.n	80063fe <_puts_r+0x2e>
 800646a:	e7df      	b.n	800642c <_puts_r+0x5c>
 800646c:	6823      	ldr	r3, [r4, #0]
 800646e:	250a      	movs	r5, #10
 8006470:	1c5a      	adds	r2, r3, #1
 8006472:	6022      	str	r2, [r4, #0]
 8006474:	701d      	strb	r5, [r3, #0]
 8006476:	e7db      	b.n	8006430 <_puts_r+0x60>

08006478 <puts>:
 8006478:	4b02      	ldr	r3, [pc, #8]	; (8006484 <puts+0xc>)
 800647a:	4601      	mov	r1, r0
 800647c:	6818      	ldr	r0, [r3, #0]
 800647e:	f7ff bfa7 	b.w	80063d0 <_puts_r>
 8006482:	bf00      	nop
 8006484:	20000070 	.word	0x20000070

08006488 <strncmp>:
 8006488:	b510      	push	{r4, lr}
 800648a:	b16a      	cbz	r2, 80064a8 <strncmp+0x20>
 800648c:	3901      	subs	r1, #1
 800648e:	1884      	adds	r4, r0, r2
 8006490:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006494:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8006498:	429a      	cmp	r2, r3
 800649a:	d103      	bne.n	80064a4 <strncmp+0x1c>
 800649c:	42a0      	cmp	r0, r4
 800649e:	d001      	beq.n	80064a4 <strncmp+0x1c>
 80064a0:	2a00      	cmp	r2, #0
 80064a2:	d1f5      	bne.n	8006490 <strncmp+0x8>
 80064a4:	1ad0      	subs	r0, r2, r3
 80064a6:	bd10      	pop	{r4, pc}
 80064a8:	4610      	mov	r0, r2
 80064aa:	e7fc      	b.n	80064a6 <strncmp+0x1e>

080064ac <memset>:
 80064ac:	4402      	add	r2, r0
 80064ae:	4603      	mov	r3, r0
 80064b0:	4293      	cmp	r3, r2
 80064b2:	d100      	bne.n	80064b6 <memset+0xa>
 80064b4:	4770      	bx	lr
 80064b6:	f803 1b01 	strb.w	r1, [r3], #1
 80064ba:	e7f9      	b.n	80064b0 <memset+0x4>

080064bc <__errno>:
 80064bc:	4b01      	ldr	r3, [pc, #4]	; (80064c4 <__errno+0x8>)
 80064be:	6818      	ldr	r0, [r3, #0]
 80064c0:	4770      	bx	lr
 80064c2:	bf00      	nop
 80064c4:	20000070 	.word	0x20000070

080064c8 <__libc_init_array>:
 80064c8:	b570      	push	{r4, r5, r6, lr}
 80064ca:	4d0d      	ldr	r5, [pc, #52]	; (8006500 <__libc_init_array+0x38>)
 80064cc:	4c0d      	ldr	r4, [pc, #52]	; (8006504 <__libc_init_array+0x3c>)
 80064ce:	1b64      	subs	r4, r4, r5
 80064d0:	10a4      	asrs	r4, r4, #2
 80064d2:	2600      	movs	r6, #0
 80064d4:	42a6      	cmp	r6, r4
 80064d6:	d109      	bne.n	80064ec <__libc_init_array+0x24>
 80064d8:	4d0b      	ldr	r5, [pc, #44]	; (8006508 <__libc_init_array+0x40>)
 80064da:	4c0c      	ldr	r4, [pc, #48]	; (800650c <__libc_init_array+0x44>)
 80064dc:	f000 fb82 	bl	8006be4 <_init>
 80064e0:	1b64      	subs	r4, r4, r5
 80064e2:	10a4      	asrs	r4, r4, #2
 80064e4:	2600      	movs	r6, #0
 80064e6:	42a6      	cmp	r6, r4
 80064e8:	d105      	bne.n	80064f6 <__libc_init_array+0x2e>
 80064ea:	bd70      	pop	{r4, r5, r6, pc}
 80064ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80064f0:	4798      	blx	r3
 80064f2:	3601      	adds	r6, #1
 80064f4:	e7ee      	b.n	80064d4 <__libc_init_array+0xc>
 80064f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80064fa:	4798      	blx	r3
 80064fc:	3601      	adds	r6, #1
 80064fe:	e7f2      	b.n	80064e6 <__libc_init_array+0x1e>
 8006500:	08007a6c 	.word	0x08007a6c
 8006504:	08007a6c 	.word	0x08007a6c
 8006508:	08007a6c 	.word	0x08007a6c
 800650c:	08007a70 	.word	0x08007a70

08006510 <__retarget_lock_init_recursive>:
 8006510:	4770      	bx	lr

08006512 <__retarget_lock_acquire_recursive>:
 8006512:	4770      	bx	lr

08006514 <__retarget_lock_release_recursive>:
 8006514:	4770      	bx	lr

08006516 <memcpy>:
 8006516:	440a      	add	r2, r1
 8006518:	4291      	cmp	r1, r2
 800651a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800651e:	d100      	bne.n	8006522 <memcpy+0xc>
 8006520:	4770      	bx	lr
 8006522:	b510      	push	{r4, lr}
 8006524:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006528:	f803 4f01 	strb.w	r4, [r3, #1]!
 800652c:	4291      	cmp	r1, r2
 800652e:	d1f9      	bne.n	8006524 <memcpy+0xe>
 8006530:	bd10      	pop	{r4, pc}
	...

08006534 <sbrk_aligned>:
 8006534:	b570      	push	{r4, r5, r6, lr}
 8006536:	4e0e      	ldr	r6, [pc, #56]	; (8006570 <sbrk_aligned+0x3c>)
 8006538:	460c      	mov	r4, r1
 800653a:	6831      	ldr	r1, [r6, #0]
 800653c:	4605      	mov	r5, r0
 800653e:	b911      	cbnz	r1, 8006546 <sbrk_aligned+0x12>
 8006540:	f000 fae2 	bl	8006b08 <_sbrk_r>
 8006544:	6030      	str	r0, [r6, #0]
 8006546:	4621      	mov	r1, r4
 8006548:	4628      	mov	r0, r5
 800654a:	f000 fadd 	bl	8006b08 <_sbrk_r>
 800654e:	1c43      	adds	r3, r0, #1
 8006550:	d00a      	beq.n	8006568 <sbrk_aligned+0x34>
 8006552:	1cc4      	adds	r4, r0, #3
 8006554:	f024 0403 	bic.w	r4, r4, #3
 8006558:	42a0      	cmp	r0, r4
 800655a:	d007      	beq.n	800656c <sbrk_aligned+0x38>
 800655c:	1a21      	subs	r1, r4, r0
 800655e:	4628      	mov	r0, r5
 8006560:	f000 fad2 	bl	8006b08 <_sbrk_r>
 8006564:	3001      	adds	r0, #1
 8006566:	d101      	bne.n	800656c <sbrk_aligned+0x38>
 8006568:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800656c:	4620      	mov	r0, r4
 800656e:	bd70      	pop	{r4, r5, r6, pc}
 8006570:	20004680 	.word	0x20004680

08006574 <_malloc_r>:
 8006574:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006578:	1ccd      	adds	r5, r1, #3
 800657a:	f025 0503 	bic.w	r5, r5, #3
 800657e:	3508      	adds	r5, #8
 8006580:	2d0c      	cmp	r5, #12
 8006582:	bf38      	it	cc
 8006584:	250c      	movcc	r5, #12
 8006586:	2d00      	cmp	r5, #0
 8006588:	4607      	mov	r7, r0
 800658a:	db01      	blt.n	8006590 <_malloc_r+0x1c>
 800658c:	42a9      	cmp	r1, r5
 800658e:	d905      	bls.n	800659c <_malloc_r+0x28>
 8006590:	230c      	movs	r3, #12
 8006592:	603b      	str	r3, [r7, #0]
 8006594:	2600      	movs	r6, #0
 8006596:	4630      	mov	r0, r6
 8006598:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800659c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8006670 <_malloc_r+0xfc>
 80065a0:	f000 f916 	bl	80067d0 <__malloc_lock>
 80065a4:	f8d8 3000 	ldr.w	r3, [r8]
 80065a8:	461c      	mov	r4, r3
 80065aa:	bb5c      	cbnz	r4, 8006604 <_malloc_r+0x90>
 80065ac:	4629      	mov	r1, r5
 80065ae:	4638      	mov	r0, r7
 80065b0:	f7ff ffc0 	bl	8006534 <sbrk_aligned>
 80065b4:	1c43      	adds	r3, r0, #1
 80065b6:	4604      	mov	r4, r0
 80065b8:	d155      	bne.n	8006666 <_malloc_r+0xf2>
 80065ba:	f8d8 4000 	ldr.w	r4, [r8]
 80065be:	4626      	mov	r6, r4
 80065c0:	2e00      	cmp	r6, #0
 80065c2:	d145      	bne.n	8006650 <_malloc_r+0xdc>
 80065c4:	2c00      	cmp	r4, #0
 80065c6:	d048      	beq.n	800665a <_malloc_r+0xe6>
 80065c8:	6823      	ldr	r3, [r4, #0]
 80065ca:	4631      	mov	r1, r6
 80065cc:	4638      	mov	r0, r7
 80065ce:	eb04 0903 	add.w	r9, r4, r3
 80065d2:	f000 fa99 	bl	8006b08 <_sbrk_r>
 80065d6:	4581      	cmp	r9, r0
 80065d8:	d13f      	bne.n	800665a <_malloc_r+0xe6>
 80065da:	6821      	ldr	r1, [r4, #0]
 80065dc:	1a6d      	subs	r5, r5, r1
 80065de:	4629      	mov	r1, r5
 80065e0:	4638      	mov	r0, r7
 80065e2:	f7ff ffa7 	bl	8006534 <sbrk_aligned>
 80065e6:	3001      	adds	r0, #1
 80065e8:	d037      	beq.n	800665a <_malloc_r+0xe6>
 80065ea:	6823      	ldr	r3, [r4, #0]
 80065ec:	442b      	add	r3, r5
 80065ee:	6023      	str	r3, [r4, #0]
 80065f0:	f8d8 3000 	ldr.w	r3, [r8]
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d038      	beq.n	800666a <_malloc_r+0xf6>
 80065f8:	685a      	ldr	r2, [r3, #4]
 80065fa:	42a2      	cmp	r2, r4
 80065fc:	d12b      	bne.n	8006656 <_malloc_r+0xe2>
 80065fe:	2200      	movs	r2, #0
 8006600:	605a      	str	r2, [r3, #4]
 8006602:	e00f      	b.n	8006624 <_malloc_r+0xb0>
 8006604:	6822      	ldr	r2, [r4, #0]
 8006606:	1b52      	subs	r2, r2, r5
 8006608:	d41f      	bmi.n	800664a <_malloc_r+0xd6>
 800660a:	2a0b      	cmp	r2, #11
 800660c:	d917      	bls.n	800663e <_malloc_r+0xca>
 800660e:	1961      	adds	r1, r4, r5
 8006610:	42a3      	cmp	r3, r4
 8006612:	6025      	str	r5, [r4, #0]
 8006614:	bf18      	it	ne
 8006616:	6059      	strne	r1, [r3, #4]
 8006618:	6863      	ldr	r3, [r4, #4]
 800661a:	bf08      	it	eq
 800661c:	f8c8 1000 	streq.w	r1, [r8]
 8006620:	5162      	str	r2, [r4, r5]
 8006622:	604b      	str	r3, [r1, #4]
 8006624:	4638      	mov	r0, r7
 8006626:	f104 060b 	add.w	r6, r4, #11
 800662a:	f000 f8d7 	bl	80067dc <__malloc_unlock>
 800662e:	f026 0607 	bic.w	r6, r6, #7
 8006632:	1d23      	adds	r3, r4, #4
 8006634:	1af2      	subs	r2, r6, r3
 8006636:	d0ae      	beq.n	8006596 <_malloc_r+0x22>
 8006638:	1b9b      	subs	r3, r3, r6
 800663a:	50a3      	str	r3, [r4, r2]
 800663c:	e7ab      	b.n	8006596 <_malloc_r+0x22>
 800663e:	42a3      	cmp	r3, r4
 8006640:	6862      	ldr	r2, [r4, #4]
 8006642:	d1dd      	bne.n	8006600 <_malloc_r+0x8c>
 8006644:	f8c8 2000 	str.w	r2, [r8]
 8006648:	e7ec      	b.n	8006624 <_malloc_r+0xb0>
 800664a:	4623      	mov	r3, r4
 800664c:	6864      	ldr	r4, [r4, #4]
 800664e:	e7ac      	b.n	80065aa <_malloc_r+0x36>
 8006650:	4634      	mov	r4, r6
 8006652:	6876      	ldr	r6, [r6, #4]
 8006654:	e7b4      	b.n	80065c0 <_malloc_r+0x4c>
 8006656:	4613      	mov	r3, r2
 8006658:	e7cc      	b.n	80065f4 <_malloc_r+0x80>
 800665a:	230c      	movs	r3, #12
 800665c:	603b      	str	r3, [r7, #0]
 800665e:	4638      	mov	r0, r7
 8006660:	f000 f8bc 	bl	80067dc <__malloc_unlock>
 8006664:	e797      	b.n	8006596 <_malloc_r+0x22>
 8006666:	6025      	str	r5, [r4, #0]
 8006668:	e7dc      	b.n	8006624 <_malloc_r+0xb0>
 800666a:	605b      	str	r3, [r3, #4]
 800666c:	deff      	udf	#255	; 0xff
 800666e:	bf00      	nop
 8006670:	2000467c 	.word	0x2000467c

08006674 <__sflush_r>:
 8006674:	898a      	ldrh	r2, [r1, #12]
 8006676:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800667a:	4605      	mov	r5, r0
 800667c:	0710      	lsls	r0, r2, #28
 800667e:	460c      	mov	r4, r1
 8006680:	d458      	bmi.n	8006734 <__sflush_r+0xc0>
 8006682:	684b      	ldr	r3, [r1, #4]
 8006684:	2b00      	cmp	r3, #0
 8006686:	dc05      	bgt.n	8006694 <__sflush_r+0x20>
 8006688:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800668a:	2b00      	cmp	r3, #0
 800668c:	dc02      	bgt.n	8006694 <__sflush_r+0x20>
 800668e:	2000      	movs	r0, #0
 8006690:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006694:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006696:	2e00      	cmp	r6, #0
 8006698:	d0f9      	beq.n	800668e <__sflush_r+0x1a>
 800669a:	2300      	movs	r3, #0
 800669c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80066a0:	682f      	ldr	r7, [r5, #0]
 80066a2:	6a21      	ldr	r1, [r4, #32]
 80066a4:	602b      	str	r3, [r5, #0]
 80066a6:	d032      	beq.n	800670e <__sflush_r+0x9a>
 80066a8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80066aa:	89a3      	ldrh	r3, [r4, #12]
 80066ac:	075a      	lsls	r2, r3, #29
 80066ae:	d505      	bpl.n	80066bc <__sflush_r+0x48>
 80066b0:	6863      	ldr	r3, [r4, #4]
 80066b2:	1ac0      	subs	r0, r0, r3
 80066b4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80066b6:	b10b      	cbz	r3, 80066bc <__sflush_r+0x48>
 80066b8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80066ba:	1ac0      	subs	r0, r0, r3
 80066bc:	2300      	movs	r3, #0
 80066be:	4602      	mov	r2, r0
 80066c0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80066c2:	6a21      	ldr	r1, [r4, #32]
 80066c4:	4628      	mov	r0, r5
 80066c6:	47b0      	blx	r6
 80066c8:	1c43      	adds	r3, r0, #1
 80066ca:	89a3      	ldrh	r3, [r4, #12]
 80066cc:	d106      	bne.n	80066dc <__sflush_r+0x68>
 80066ce:	6829      	ldr	r1, [r5, #0]
 80066d0:	291d      	cmp	r1, #29
 80066d2:	d82b      	bhi.n	800672c <__sflush_r+0xb8>
 80066d4:	4a29      	ldr	r2, [pc, #164]	; (800677c <__sflush_r+0x108>)
 80066d6:	410a      	asrs	r2, r1
 80066d8:	07d6      	lsls	r6, r2, #31
 80066da:	d427      	bmi.n	800672c <__sflush_r+0xb8>
 80066dc:	2200      	movs	r2, #0
 80066de:	6062      	str	r2, [r4, #4]
 80066e0:	04d9      	lsls	r1, r3, #19
 80066e2:	6922      	ldr	r2, [r4, #16]
 80066e4:	6022      	str	r2, [r4, #0]
 80066e6:	d504      	bpl.n	80066f2 <__sflush_r+0x7e>
 80066e8:	1c42      	adds	r2, r0, #1
 80066ea:	d101      	bne.n	80066f0 <__sflush_r+0x7c>
 80066ec:	682b      	ldr	r3, [r5, #0]
 80066ee:	b903      	cbnz	r3, 80066f2 <__sflush_r+0x7e>
 80066f0:	6560      	str	r0, [r4, #84]	; 0x54
 80066f2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80066f4:	602f      	str	r7, [r5, #0]
 80066f6:	2900      	cmp	r1, #0
 80066f8:	d0c9      	beq.n	800668e <__sflush_r+0x1a>
 80066fa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80066fe:	4299      	cmp	r1, r3
 8006700:	d002      	beq.n	8006708 <__sflush_r+0x94>
 8006702:	4628      	mov	r0, r5
 8006704:	f000 fa22 	bl	8006b4c <_free_r>
 8006708:	2000      	movs	r0, #0
 800670a:	6360      	str	r0, [r4, #52]	; 0x34
 800670c:	e7c0      	b.n	8006690 <__sflush_r+0x1c>
 800670e:	2301      	movs	r3, #1
 8006710:	4628      	mov	r0, r5
 8006712:	47b0      	blx	r6
 8006714:	1c41      	adds	r1, r0, #1
 8006716:	d1c8      	bne.n	80066aa <__sflush_r+0x36>
 8006718:	682b      	ldr	r3, [r5, #0]
 800671a:	2b00      	cmp	r3, #0
 800671c:	d0c5      	beq.n	80066aa <__sflush_r+0x36>
 800671e:	2b1d      	cmp	r3, #29
 8006720:	d001      	beq.n	8006726 <__sflush_r+0xb2>
 8006722:	2b16      	cmp	r3, #22
 8006724:	d101      	bne.n	800672a <__sflush_r+0xb6>
 8006726:	602f      	str	r7, [r5, #0]
 8006728:	e7b1      	b.n	800668e <__sflush_r+0x1a>
 800672a:	89a3      	ldrh	r3, [r4, #12]
 800672c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006730:	81a3      	strh	r3, [r4, #12]
 8006732:	e7ad      	b.n	8006690 <__sflush_r+0x1c>
 8006734:	690f      	ldr	r7, [r1, #16]
 8006736:	2f00      	cmp	r7, #0
 8006738:	d0a9      	beq.n	800668e <__sflush_r+0x1a>
 800673a:	0793      	lsls	r3, r2, #30
 800673c:	680e      	ldr	r6, [r1, #0]
 800673e:	bf08      	it	eq
 8006740:	694b      	ldreq	r3, [r1, #20]
 8006742:	600f      	str	r7, [r1, #0]
 8006744:	bf18      	it	ne
 8006746:	2300      	movne	r3, #0
 8006748:	eba6 0807 	sub.w	r8, r6, r7
 800674c:	608b      	str	r3, [r1, #8]
 800674e:	f1b8 0f00 	cmp.w	r8, #0
 8006752:	dd9c      	ble.n	800668e <__sflush_r+0x1a>
 8006754:	6a21      	ldr	r1, [r4, #32]
 8006756:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006758:	4643      	mov	r3, r8
 800675a:	463a      	mov	r2, r7
 800675c:	4628      	mov	r0, r5
 800675e:	47b0      	blx	r6
 8006760:	2800      	cmp	r0, #0
 8006762:	dc06      	bgt.n	8006772 <__sflush_r+0xfe>
 8006764:	89a3      	ldrh	r3, [r4, #12]
 8006766:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800676a:	81a3      	strh	r3, [r4, #12]
 800676c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006770:	e78e      	b.n	8006690 <__sflush_r+0x1c>
 8006772:	4407      	add	r7, r0
 8006774:	eba8 0800 	sub.w	r8, r8, r0
 8006778:	e7e9      	b.n	800674e <__sflush_r+0xda>
 800677a:	bf00      	nop
 800677c:	dfbffffe 	.word	0xdfbffffe

08006780 <_fflush_r>:
 8006780:	b538      	push	{r3, r4, r5, lr}
 8006782:	690b      	ldr	r3, [r1, #16]
 8006784:	4605      	mov	r5, r0
 8006786:	460c      	mov	r4, r1
 8006788:	b913      	cbnz	r3, 8006790 <_fflush_r+0x10>
 800678a:	2500      	movs	r5, #0
 800678c:	4628      	mov	r0, r5
 800678e:	bd38      	pop	{r3, r4, r5, pc}
 8006790:	b118      	cbz	r0, 800679a <_fflush_r+0x1a>
 8006792:	6a03      	ldr	r3, [r0, #32]
 8006794:	b90b      	cbnz	r3, 800679a <_fflush_r+0x1a>
 8006796:	f7ff fde5 	bl	8006364 <__sinit>
 800679a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d0f3      	beq.n	800678a <_fflush_r+0xa>
 80067a2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80067a4:	07d0      	lsls	r0, r2, #31
 80067a6:	d404      	bmi.n	80067b2 <_fflush_r+0x32>
 80067a8:	0599      	lsls	r1, r3, #22
 80067aa:	d402      	bmi.n	80067b2 <_fflush_r+0x32>
 80067ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80067ae:	f7ff feb0 	bl	8006512 <__retarget_lock_acquire_recursive>
 80067b2:	4628      	mov	r0, r5
 80067b4:	4621      	mov	r1, r4
 80067b6:	f7ff ff5d 	bl	8006674 <__sflush_r>
 80067ba:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80067bc:	07da      	lsls	r2, r3, #31
 80067be:	4605      	mov	r5, r0
 80067c0:	d4e4      	bmi.n	800678c <_fflush_r+0xc>
 80067c2:	89a3      	ldrh	r3, [r4, #12]
 80067c4:	059b      	lsls	r3, r3, #22
 80067c6:	d4e1      	bmi.n	800678c <_fflush_r+0xc>
 80067c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80067ca:	f7ff fea3 	bl	8006514 <__retarget_lock_release_recursive>
 80067ce:	e7dd      	b.n	800678c <_fflush_r+0xc>

080067d0 <__malloc_lock>:
 80067d0:	4801      	ldr	r0, [pc, #4]	; (80067d8 <__malloc_lock+0x8>)
 80067d2:	f7ff be9e 	b.w	8006512 <__retarget_lock_acquire_recursive>
 80067d6:	bf00      	nop
 80067d8:	20004678 	.word	0x20004678

080067dc <__malloc_unlock>:
 80067dc:	4801      	ldr	r0, [pc, #4]	; (80067e4 <__malloc_unlock+0x8>)
 80067de:	f7ff be99 	b.w	8006514 <__retarget_lock_release_recursive>
 80067e2:	bf00      	nop
 80067e4:	20004678 	.word	0x20004678

080067e8 <__sread>:
 80067e8:	b510      	push	{r4, lr}
 80067ea:	460c      	mov	r4, r1
 80067ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80067f0:	f000 f978 	bl	8006ae4 <_read_r>
 80067f4:	2800      	cmp	r0, #0
 80067f6:	bfab      	itete	ge
 80067f8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80067fa:	89a3      	ldrhlt	r3, [r4, #12]
 80067fc:	181b      	addge	r3, r3, r0
 80067fe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006802:	bfac      	ite	ge
 8006804:	6563      	strge	r3, [r4, #84]	; 0x54
 8006806:	81a3      	strhlt	r3, [r4, #12]
 8006808:	bd10      	pop	{r4, pc}

0800680a <__swrite>:
 800680a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800680e:	461f      	mov	r7, r3
 8006810:	898b      	ldrh	r3, [r1, #12]
 8006812:	05db      	lsls	r3, r3, #23
 8006814:	4605      	mov	r5, r0
 8006816:	460c      	mov	r4, r1
 8006818:	4616      	mov	r6, r2
 800681a:	d505      	bpl.n	8006828 <__swrite+0x1e>
 800681c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006820:	2302      	movs	r3, #2
 8006822:	2200      	movs	r2, #0
 8006824:	f000 f94c 	bl	8006ac0 <_lseek_r>
 8006828:	89a3      	ldrh	r3, [r4, #12]
 800682a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800682e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006832:	81a3      	strh	r3, [r4, #12]
 8006834:	4632      	mov	r2, r6
 8006836:	463b      	mov	r3, r7
 8006838:	4628      	mov	r0, r5
 800683a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800683e:	f000 b973 	b.w	8006b28 <_write_r>

08006842 <__sseek>:
 8006842:	b510      	push	{r4, lr}
 8006844:	460c      	mov	r4, r1
 8006846:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800684a:	f000 f939 	bl	8006ac0 <_lseek_r>
 800684e:	1c43      	adds	r3, r0, #1
 8006850:	89a3      	ldrh	r3, [r4, #12]
 8006852:	bf15      	itete	ne
 8006854:	6560      	strne	r0, [r4, #84]	; 0x54
 8006856:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800685a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800685e:	81a3      	strheq	r3, [r4, #12]
 8006860:	bf18      	it	ne
 8006862:	81a3      	strhne	r3, [r4, #12]
 8006864:	bd10      	pop	{r4, pc}

08006866 <__sclose>:
 8006866:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800686a:	f000 b8f7 	b.w	8006a5c <_close_r>

0800686e <__swbuf_r>:
 800686e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006870:	460e      	mov	r6, r1
 8006872:	4614      	mov	r4, r2
 8006874:	4605      	mov	r5, r0
 8006876:	b118      	cbz	r0, 8006880 <__swbuf_r+0x12>
 8006878:	6a03      	ldr	r3, [r0, #32]
 800687a:	b90b      	cbnz	r3, 8006880 <__swbuf_r+0x12>
 800687c:	f7ff fd72 	bl	8006364 <__sinit>
 8006880:	69a3      	ldr	r3, [r4, #24]
 8006882:	60a3      	str	r3, [r4, #8]
 8006884:	89a3      	ldrh	r3, [r4, #12]
 8006886:	071a      	lsls	r2, r3, #28
 8006888:	d525      	bpl.n	80068d6 <__swbuf_r+0x68>
 800688a:	6923      	ldr	r3, [r4, #16]
 800688c:	b31b      	cbz	r3, 80068d6 <__swbuf_r+0x68>
 800688e:	6823      	ldr	r3, [r4, #0]
 8006890:	6922      	ldr	r2, [r4, #16]
 8006892:	1a98      	subs	r0, r3, r2
 8006894:	6963      	ldr	r3, [r4, #20]
 8006896:	b2f6      	uxtb	r6, r6
 8006898:	4283      	cmp	r3, r0
 800689a:	4637      	mov	r7, r6
 800689c:	dc04      	bgt.n	80068a8 <__swbuf_r+0x3a>
 800689e:	4621      	mov	r1, r4
 80068a0:	4628      	mov	r0, r5
 80068a2:	f7ff ff6d 	bl	8006780 <_fflush_r>
 80068a6:	b9e0      	cbnz	r0, 80068e2 <__swbuf_r+0x74>
 80068a8:	68a3      	ldr	r3, [r4, #8]
 80068aa:	3b01      	subs	r3, #1
 80068ac:	60a3      	str	r3, [r4, #8]
 80068ae:	6823      	ldr	r3, [r4, #0]
 80068b0:	1c5a      	adds	r2, r3, #1
 80068b2:	6022      	str	r2, [r4, #0]
 80068b4:	701e      	strb	r6, [r3, #0]
 80068b6:	6962      	ldr	r2, [r4, #20]
 80068b8:	1c43      	adds	r3, r0, #1
 80068ba:	429a      	cmp	r2, r3
 80068bc:	d004      	beq.n	80068c8 <__swbuf_r+0x5a>
 80068be:	89a3      	ldrh	r3, [r4, #12]
 80068c0:	07db      	lsls	r3, r3, #31
 80068c2:	d506      	bpl.n	80068d2 <__swbuf_r+0x64>
 80068c4:	2e0a      	cmp	r6, #10
 80068c6:	d104      	bne.n	80068d2 <__swbuf_r+0x64>
 80068c8:	4621      	mov	r1, r4
 80068ca:	4628      	mov	r0, r5
 80068cc:	f7ff ff58 	bl	8006780 <_fflush_r>
 80068d0:	b938      	cbnz	r0, 80068e2 <__swbuf_r+0x74>
 80068d2:	4638      	mov	r0, r7
 80068d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80068d6:	4621      	mov	r1, r4
 80068d8:	4628      	mov	r0, r5
 80068da:	f000 f805 	bl	80068e8 <__swsetup_r>
 80068de:	2800      	cmp	r0, #0
 80068e0:	d0d5      	beq.n	800688e <__swbuf_r+0x20>
 80068e2:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80068e6:	e7f4      	b.n	80068d2 <__swbuf_r+0x64>

080068e8 <__swsetup_r>:
 80068e8:	b538      	push	{r3, r4, r5, lr}
 80068ea:	4b2a      	ldr	r3, [pc, #168]	; (8006994 <__swsetup_r+0xac>)
 80068ec:	4605      	mov	r5, r0
 80068ee:	6818      	ldr	r0, [r3, #0]
 80068f0:	460c      	mov	r4, r1
 80068f2:	b118      	cbz	r0, 80068fc <__swsetup_r+0x14>
 80068f4:	6a03      	ldr	r3, [r0, #32]
 80068f6:	b90b      	cbnz	r3, 80068fc <__swsetup_r+0x14>
 80068f8:	f7ff fd34 	bl	8006364 <__sinit>
 80068fc:	89a3      	ldrh	r3, [r4, #12]
 80068fe:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006902:	0718      	lsls	r0, r3, #28
 8006904:	d422      	bmi.n	800694c <__swsetup_r+0x64>
 8006906:	06d9      	lsls	r1, r3, #27
 8006908:	d407      	bmi.n	800691a <__swsetup_r+0x32>
 800690a:	2309      	movs	r3, #9
 800690c:	602b      	str	r3, [r5, #0]
 800690e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006912:	81a3      	strh	r3, [r4, #12]
 8006914:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006918:	e034      	b.n	8006984 <__swsetup_r+0x9c>
 800691a:	0758      	lsls	r0, r3, #29
 800691c:	d512      	bpl.n	8006944 <__swsetup_r+0x5c>
 800691e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006920:	b141      	cbz	r1, 8006934 <__swsetup_r+0x4c>
 8006922:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006926:	4299      	cmp	r1, r3
 8006928:	d002      	beq.n	8006930 <__swsetup_r+0x48>
 800692a:	4628      	mov	r0, r5
 800692c:	f000 f90e 	bl	8006b4c <_free_r>
 8006930:	2300      	movs	r3, #0
 8006932:	6363      	str	r3, [r4, #52]	; 0x34
 8006934:	89a3      	ldrh	r3, [r4, #12]
 8006936:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800693a:	81a3      	strh	r3, [r4, #12]
 800693c:	2300      	movs	r3, #0
 800693e:	6063      	str	r3, [r4, #4]
 8006940:	6923      	ldr	r3, [r4, #16]
 8006942:	6023      	str	r3, [r4, #0]
 8006944:	89a3      	ldrh	r3, [r4, #12]
 8006946:	f043 0308 	orr.w	r3, r3, #8
 800694a:	81a3      	strh	r3, [r4, #12]
 800694c:	6923      	ldr	r3, [r4, #16]
 800694e:	b94b      	cbnz	r3, 8006964 <__swsetup_r+0x7c>
 8006950:	89a3      	ldrh	r3, [r4, #12]
 8006952:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006956:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800695a:	d003      	beq.n	8006964 <__swsetup_r+0x7c>
 800695c:	4621      	mov	r1, r4
 800695e:	4628      	mov	r0, r5
 8006960:	f000 f840 	bl	80069e4 <__smakebuf_r>
 8006964:	89a0      	ldrh	r0, [r4, #12]
 8006966:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800696a:	f010 0301 	ands.w	r3, r0, #1
 800696e:	d00a      	beq.n	8006986 <__swsetup_r+0x9e>
 8006970:	2300      	movs	r3, #0
 8006972:	60a3      	str	r3, [r4, #8]
 8006974:	6963      	ldr	r3, [r4, #20]
 8006976:	425b      	negs	r3, r3
 8006978:	61a3      	str	r3, [r4, #24]
 800697a:	6923      	ldr	r3, [r4, #16]
 800697c:	b943      	cbnz	r3, 8006990 <__swsetup_r+0xa8>
 800697e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006982:	d1c4      	bne.n	800690e <__swsetup_r+0x26>
 8006984:	bd38      	pop	{r3, r4, r5, pc}
 8006986:	0781      	lsls	r1, r0, #30
 8006988:	bf58      	it	pl
 800698a:	6963      	ldrpl	r3, [r4, #20]
 800698c:	60a3      	str	r3, [r4, #8]
 800698e:	e7f4      	b.n	800697a <__swsetup_r+0x92>
 8006990:	2000      	movs	r0, #0
 8006992:	e7f7      	b.n	8006984 <__swsetup_r+0x9c>
 8006994:	20000070 	.word	0x20000070

08006998 <__swhatbuf_r>:
 8006998:	b570      	push	{r4, r5, r6, lr}
 800699a:	460c      	mov	r4, r1
 800699c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80069a0:	2900      	cmp	r1, #0
 80069a2:	b096      	sub	sp, #88	; 0x58
 80069a4:	4615      	mov	r5, r2
 80069a6:	461e      	mov	r6, r3
 80069a8:	da0d      	bge.n	80069c6 <__swhatbuf_r+0x2e>
 80069aa:	89a3      	ldrh	r3, [r4, #12]
 80069ac:	f013 0f80 	tst.w	r3, #128	; 0x80
 80069b0:	f04f 0100 	mov.w	r1, #0
 80069b4:	bf0c      	ite	eq
 80069b6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80069ba:	2340      	movne	r3, #64	; 0x40
 80069bc:	2000      	movs	r0, #0
 80069be:	6031      	str	r1, [r6, #0]
 80069c0:	602b      	str	r3, [r5, #0]
 80069c2:	b016      	add	sp, #88	; 0x58
 80069c4:	bd70      	pop	{r4, r5, r6, pc}
 80069c6:	466a      	mov	r2, sp
 80069c8:	f000 f858 	bl	8006a7c <_fstat_r>
 80069cc:	2800      	cmp	r0, #0
 80069ce:	dbec      	blt.n	80069aa <__swhatbuf_r+0x12>
 80069d0:	9901      	ldr	r1, [sp, #4]
 80069d2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80069d6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80069da:	4259      	negs	r1, r3
 80069dc:	4159      	adcs	r1, r3
 80069de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80069e2:	e7eb      	b.n	80069bc <__swhatbuf_r+0x24>

080069e4 <__smakebuf_r>:
 80069e4:	898b      	ldrh	r3, [r1, #12]
 80069e6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80069e8:	079d      	lsls	r5, r3, #30
 80069ea:	4606      	mov	r6, r0
 80069ec:	460c      	mov	r4, r1
 80069ee:	d507      	bpl.n	8006a00 <__smakebuf_r+0x1c>
 80069f0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80069f4:	6023      	str	r3, [r4, #0]
 80069f6:	6123      	str	r3, [r4, #16]
 80069f8:	2301      	movs	r3, #1
 80069fa:	6163      	str	r3, [r4, #20]
 80069fc:	b002      	add	sp, #8
 80069fe:	bd70      	pop	{r4, r5, r6, pc}
 8006a00:	ab01      	add	r3, sp, #4
 8006a02:	466a      	mov	r2, sp
 8006a04:	f7ff ffc8 	bl	8006998 <__swhatbuf_r>
 8006a08:	9900      	ldr	r1, [sp, #0]
 8006a0a:	4605      	mov	r5, r0
 8006a0c:	4630      	mov	r0, r6
 8006a0e:	f7ff fdb1 	bl	8006574 <_malloc_r>
 8006a12:	b948      	cbnz	r0, 8006a28 <__smakebuf_r+0x44>
 8006a14:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006a18:	059a      	lsls	r2, r3, #22
 8006a1a:	d4ef      	bmi.n	80069fc <__smakebuf_r+0x18>
 8006a1c:	f023 0303 	bic.w	r3, r3, #3
 8006a20:	f043 0302 	orr.w	r3, r3, #2
 8006a24:	81a3      	strh	r3, [r4, #12]
 8006a26:	e7e3      	b.n	80069f0 <__smakebuf_r+0xc>
 8006a28:	89a3      	ldrh	r3, [r4, #12]
 8006a2a:	6020      	str	r0, [r4, #0]
 8006a2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a30:	81a3      	strh	r3, [r4, #12]
 8006a32:	9b00      	ldr	r3, [sp, #0]
 8006a34:	6163      	str	r3, [r4, #20]
 8006a36:	9b01      	ldr	r3, [sp, #4]
 8006a38:	6120      	str	r0, [r4, #16]
 8006a3a:	b15b      	cbz	r3, 8006a54 <__smakebuf_r+0x70>
 8006a3c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006a40:	4630      	mov	r0, r6
 8006a42:	f000 f82d 	bl	8006aa0 <_isatty_r>
 8006a46:	b128      	cbz	r0, 8006a54 <__smakebuf_r+0x70>
 8006a48:	89a3      	ldrh	r3, [r4, #12]
 8006a4a:	f023 0303 	bic.w	r3, r3, #3
 8006a4e:	f043 0301 	orr.w	r3, r3, #1
 8006a52:	81a3      	strh	r3, [r4, #12]
 8006a54:	89a3      	ldrh	r3, [r4, #12]
 8006a56:	431d      	orrs	r5, r3
 8006a58:	81a5      	strh	r5, [r4, #12]
 8006a5a:	e7cf      	b.n	80069fc <__smakebuf_r+0x18>

08006a5c <_close_r>:
 8006a5c:	b538      	push	{r3, r4, r5, lr}
 8006a5e:	4d06      	ldr	r5, [pc, #24]	; (8006a78 <_close_r+0x1c>)
 8006a60:	2300      	movs	r3, #0
 8006a62:	4604      	mov	r4, r0
 8006a64:	4608      	mov	r0, r1
 8006a66:	602b      	str	r3, [r5, #0]
 8006a68:	f7fa fe85 	bl	8001776 <_close>
 8006a6c:	1c43      	adds	r3, r0, #1
 8006a6e:	d102      	bne.n	8006a76 <_close_r+0x1a>
 8006a70:	682b      	ldr	r3, [r5, #0]
 8006a72:	b103      	cbz	r3, 8006a76 <_close_r+0x1a>
 8006a74:	6023      	str	r3, [r4, #0]
 8006a76:	bd38      	pop	{r3, r4, r5, pc}
 8006a78:	20004684 	.word	0x20004684

08006a7c <_fstat_r>:
 8006a7c:	b538      	push	{r3, r4, r5, lr}
 8006a7e:	4d07      	ldr	r5, [pc, #28]	; (8006a9c <_fstat_r+0x20>)
 8006a80:	2300      	movs	r3, #0
 8006a82:	4604      	mov	r4, r0
 8006a84:	4608      	mov	r0, r1
 8006a86:	4611      	mov	r1, r2
 8006a88:	602b      	str	r3, [r5, #0]
 8006a8a:	f7fa fe80 	bl	800178e <_fstat>
 8006a8e:	1c43      	adds	r3, r0, #1
 8006a90:	d102      	bne.n	8006a98 <_fstat_r+0x1c>
 8006a92:	682b      	ldr	r3, [r5, #0]
 8006a94:	b103      	cbz	r3, 8006a98 <_fstat_r+0x1c>
 8006a96:	6023      	str	r3, [r4, #0]
 8006a98:	bd38      	pop	{r3, r4, r5, pc}
 8006a9a:	bf00      	nop
 8006a9c:	20004684 	.word	0x20004684

08006aa0 <_isatty_r>:
 8006aa0:	b538      	push	{r3, r4, r5, lr}
 8006aa2:	4d06      	ldr	r5, [pc, #24]	; (8006abc <_isatty_r+0x1c>)
 8006aa4:	2300      	movs	r3, #0
 8006aa6:	4604      	mov	r4, r0
 8006aa8:	4608      	mov	r0, r1
 8006aaa:	602b      	str	r3, [r5, #0]
 8006aac:	f7fa fe7f 	bl	80017ae <_isatty>
 8006ab0:	1c43      	adds	r3, r0, #1
 8006ab2:	d102      	bne.n	8006aba <_isatty_r+0x1a>
 8006ab4:	682b      	ldr	r3, [r5, #0]
 8006ab6:	b103      	cbz	r3, 8006aba <_isatty_r+0x1a>
 8006ab8:	6023      	str	r3, [r4, #0]
 8006aba:	bd38      	pop	{r3, r4, r5, pc}
 8006abc:	20004684 	.word	0x20004684

08006ac0 <_lseek_r>:
 8006ac0:	b538      	push	{r3, r4, r5, lr}
 8006ac2:	4d07      	ldr	r5, [pc, #28]	; (8006ae0 <_lseek_r+0x20>)
 8006ac4:	4604      	mov	r4, r0
 8006ac6:	4608      	mov	r0, r1
 8006ac8:	4611      	mov	r1, r2
 8006aca:	2200      	movs	r2, #0
 8006acc:	602a      	str	r2, [r5, #0]
 8006ace:	461a      	mov	r2, r3
 8006ad0:	f7fa fe78 	bl	80017c4 <_lseek>
 8006ad4:	1c43      	adds	r3, r0, #1
 8006ad6:	d102      	bne.n	8006ade <_lseek_r+0x1e>
 8006ad8:	682b      	ldr	r3, [r5, #0]
 8006ada:	b103      	cbz	r3, 8006ade <_lseek_r+0x1e>
 8006adc:	6023      	str	r3, [r4, #0]
 8006ade:	bd38      	pop	{r3, r4, r5, pc}
 8006ae0:	20004684 	.word	0x20004684

08006ae4 <_read_r>:
 8006ae4:	b538      	push	{r3, r4, r5, lr}
 8006ae6:	4d07      	ldr	r5, [pc, #28]	; (8006b04 <_read_r+0x20>)
 8006ae8:	4604      	mov	r4, r0
 8006aea:	4608      	mov	r0, r1
 8006aec:	4611      	mov	r1, r2
 8006aee:	2200      	movs	r2, #0
 8006af0:	602a      	str	r2, [r5, #0]
 8006af2:	461a      	mov	r2, r3
 8006af4:	f7fa fe06 	bl	8001704 <_read>
 8006af8:	1c43      	adds	r3, r0, #1
 8006afa:	d102      	bne.n	8006b02 <_read_r+0x1e>
 8006afc:	682b      	ldr	r3, [r5, #0]
 8006afe:	b103      	cbz	r3, 8006b02 <_read_r+0x1e>
 8006b00:	6023      	str	r3, [r4, #0]
 8006b02:	bd38      	pop	{r3, r4, r5, pc}
 8006b04:	20004684 	.word	0x20004684

08006b08 <_sbrk_r>:
 8006b08:	b538      	push	{r3, r4, r5, lr}
 8006b0a:	4d06      	ldr	r5, [pc, #24]	; (8006b24 <_sbrk_r+0x1c>)
 8006b0c:	2300      	movs	r3, #0
 8006b0e:	4604      	mov	r4, r0
 8006b10:	4608      	mov	r0, r1
 8006b12:	602b      	str	r3, [r5, #0]
 8006b14:	f7fa fe64 	bl	80017e0 <_sbrk>
 8006b18:	1c43      	adds	r3, r0, #1
 8006b1a:	d102      	bne.n	8006b22 <_sbrk_r+0x1a>
 8006b1c:	682b      	ldr	r3, [r5, #0]
 8006b1e:	b103      	cbz	r3, 8006b22 <_sbrk_r+0x1a>
 8006b20:	6023      	str	r3, [r4, #0]
 8006b22:	bd38      	pop	{r3, r4, r5, pc}
 8006b24:	20004684 	.word	0x20004684

08006b28 <_write_r>:
 8006b28:	b538      	push	{r3, r4, r5, lr}
 8006b2a:	4d07      	ldr	r5, [pc, #28]	; (8006b48 <_write_r+0x20>)
 8006b2c:	4604      	mov	r4, r0
 8006b2e:	4608      	mov	r0, r1
 8006b30:	4611      	mov	r1, r2
 8006b32:	2200      	movs	r2, #0
 8006b34:	602a      	str	r2, [r5, #0]
 8006b36:	461a      	mov	r2, r3
 8006b38:	f7fa fe01 	bl	800173e <_write>
 8006b3c:	1c43      	adds	r3, r0, #1
 8006b3e:	d102      	bne.n	8006b46 <_write_r+0x1e>
 8006b40:	682b      	ldr	r3, [r5, #0]
 8006b42:	b103      	cbz	r3, 8006b46 <_write_r+0x1e>
 8006b44:	6023      	str	r3, [r4, #0]
 8006b46:	bd38      	pop	{r3, r4, r5, pc}
 8006b48:	20004684 	.word	0x20004684

08006b4c <_free_r>:
 8006b4c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006b4e:	2900      	cmp	r1, #0
 8006b50:	d044      	beq.n	8006bdc <_free_r+0x90>
 8006b52:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006b56:	9001      	str	r0, [sp, #4]
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	f1a1 0404 	sub.w	r4, r1, #4
 8006b5e:	bfb8      	it	lt
 8006b60:	18e4      	addlt	r4, r4, r3
 8006b62:	f7ff fe35 	bl	80067d0 <__malloc_lock>
 8006b66:	4a1e      	ldr	r2, [pc, #120]	; (8006be0 <_free_r+0x94>)
 8006b68:	9801      	ldr	r0, [sp, #4]
 8006b6a:	6813      	ldr	r3, [r2, #0]
 8006b6c:	b933      	cbnz	r3, 8006b7c <_free_r+0x30>
 8006b6e:	6063      	str	r3, [r4, #4]
 8006b70:	6014      	str	r4, [r2, #0]
 8006b72:	b003      	add	sp, #12
 8006b74:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006b78:	f7ff be30 	b.w	80067dc <__malloc_unlock>
 8006b7c:	42a3      	cmp	r3, r4
 8006b7e:	d908      	bls.n	8006b92 <_free_r+0x46>
 8006b80:	6825      	ldr	r5, [r4, #0]
 8006b82:	1961      	adds	r1, r4, r5
 8006b84:	428b      	cmp	r3, r1
 8006b86:	bf01      	itttt	eq
 8006b88:	6819      	ldreq	r1, [r3, #0]
 8006b8a:	685b      	ldreq	r3, [r3, #4]
 8006b8c:	1949      	addeq	r1, r1, r5
 8006b8e:	6021      	streq	r1, [r4, #0]
 8006b90:	e7ed      	b.n	8006b6e <_free_r+0x22>
 8006b92:	461a      	mov	r2, r3
 8006b94:	685b      	ldr	r3, [r3, #4]
 8006b96:	b10b      	cbz	r3, 8006b9c <_free_r+0x50>
 8006b98:	42a3      	cmp	r3, r4
 8006b9a:	d9fa      	bls.n	8006b92 <_free_r+0x46>
 8006b9c:	6811      	ldr	r1, [r2, #0]
 8006b9e:	1855      	adds	r5, r2, r1
 8006ba0:	42a5      	cmp	r5, r4
 8006ba2:	d10b      	bne.n	8006bbc <_free_r+0x70>
 8006ba4:	6824      	ldr	r4, [r4, #0]
 8006ba6:	4421      	add	r1, r4
 8006ba8:	1854      	adds	r4, r2, r1
 8006baa:	42a3      	cmp	r3, r4
 8006bac:	6011      	str	r1, [r2, #0]
 8006bae:	d1e0      	bne.n	8006b72 <_free_r+0x26>
 8006bb0:	681c      	ldr	r4, [r3, #0]
 8006bb2:	685b      	ldr	r3, [r3, #4]
 8006bb4:	6053      	str	r3, [r2, #4]
 8006bb6:	440c      	add	r4, r1
 8006bb8:	6014      	str	r4, [r2, #0]
 8006bba:	e7da      	b.n	8006b72 <_free_r+0x26>
 8006bbc:	d902      	bls.n	8006bc4 <_free_r+0x78>
 8006bbe:	230c      	movs	r3, #12
 8006bc0:	6003      	str	r3, [r0, #0]
 8006bc2:	e7d6      	b.n	8006b72 <_free_r+0x26>
 8006bc4:	6825      	ldr	r5, [r4, #0]
 8006bc6:	1961      	adds	r1, r4, r5
 8006bc8:	428b      	cmp	r3, r1
 8006bca:	bf04      	itt	eq
 8006bcc:	6819      	ldreq	r1, [r3, #0]
 8006bce:	685b      	ldreq	r3, [r3, #4]
 8006bd0:	6063      	str	r3, [r4, #4]
 8006bd2:	bf04      	itt	eq
 8006bd4:	1949      	addeq	r1, r1, r5
 8006bd6:	6021      	streq	r1, [r4, #0]
 8006bd8:	6054      	str	r4, [r2, #4]
 8006bda:	e7ca      	b.n	8006b72 <_free_r+0x26>
 8006bdc:	b003      	add	sp, #12
 8006bde:	bd30      	pop	{r4, r5, pc}
 8006be0:	2000467c 	.word	0x2000467c

08006be4 <_init>:
 8006be4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006be6:	bf00      	nop
 8006be8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006bea:	bc08      	pop	{r3}
 8006bec:	469e      	mov	lr, r3
 8006bee:	4770      	bx	lr

08006bf0 <_fini>:
 8006bf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bf2:	bf00      	nop
 8006bf4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006bf6:	bc08      	pop	{r3}
 8006bf8:	469e      	mov	lr, r3
 8006bfa:	4770      	bx	lr
