
0004_Alarm_Keypad.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003fe0  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000d9c  080041a4  080041a4  000141a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004f40  08004f40  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  08004f40  08004f40  00014f40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004f48  08004f48  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004f48  08004f48  00014f48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004f4c  08004f4c  00014f4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08004f50  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000518  20000014  08004f64  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000052c  08004f64  0002052c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001104c  00000000  00000000  00020087  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002550  00000000  00000000  000310d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001000  00000000  00000000  00033628  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ca9  00000000  00000000  00034628  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022c1b  00000000  00000000  000352d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00014c97  00000000  00000000  00057eec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d363e  00000000  00000000  0006cb83  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004414  00000000  00000000  001401c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  001445d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000014 	.word	0x20000014
 80001e0:	00000000 	.word	0x00000000
 80001e4:	0800418c 	.word	0x0800418c

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000018 	.word	0x20000018
 8000200:	0800418c 	.word	0x0800418c

08000204 <strcmp>:
 8000204:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000208:	f811 3b01 	ldrb.w	r3, [r1], #1
 800020c:	2a01      	cmp	r2, #1
 800020e:	bf28      	it	cs
 8000210:	429a      	cmpcs	r2, r3
 8000212:	d0f7      	beq.n	8000204 <strcmp>
 8000214:	1ad0      	subs	r0, r2, r3
 8000216:	4770      	bx	lr

08000218 <strlen>:
 8000218:	4603      	mov	r3, r0
 800021a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800021e:	2a00      	cmp	r2, #0
 8000220:	d1fb      	bne.n	800021a <strlen+0x2>
 8000222:	1a18      	subs	r0, r3, r0
 8000224:	3801      	subs	r0, #1
 8000226:	4770      	bx	lr

08000228 <__aeabi_uldivmod>:
 8000228:	b953      	cbnz	r3, 8000240 <__aeabi_uldivmod+0x18>
 800022a:	b94a      	cbnz	r2, 8000240 <__aeabi_uldivmod+0x18>
 800022c:	2900      	cmp	r1, #0
 800022e:	bf08      	it	eq
 8000230:	2800      	cmpeq	r0, #0
 8000232:	bf1c      	itt	ne
 8000234:	f04f 31ff 	movne.w	r1, #4294967295
 8000238:	f04f 30ff 	movne.w	r0, #4294967295
 800023c:	f000 b970 	b.w	8000520 <__aeabi_idiv0>
 8000240:	f1ad 0c08 	sub.w	ip, sp, #8
 8000244:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000248:	f000 f806 	bl	8000258 <__udivmoddi4>
 800024c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000250:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000254:	b004      	add	sp, #16
 8000256:	4770      	bx	lr

08000258 <__udivmoddi4>:
 8000258:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800025c:	9e08      	ldr	r6, [sp, #32]
 800025e:	460d      	mov	r5, r1
 8000260:	4604      	mov	r4, r0
 8000262:	460f      	mov	r7, r1
 8000264:	2b00      	cmp	r3, #0
 8000266:	d14a      	bne.n	80002fe <__udivmoddi4+0xa6>
 8000268:	428a      	cmp	r2, r1
 800026a:	4694      	mov	ip, r2
 800026c:	d965      	bls.n	800033a <__udivmoddi4+0xe2>
 800026e:	fab2 f382 	clz	r3, r2
 8000272:	b143      	cbz	r3, 8000286 <__udivmoddi4+0x2e>
 8000274:	fa02 fc03 	lsl.w	ip, r2, r3
 8000278:	f1c3 0220 	rsb	r2, r3, #32
 800027c:	409f      	lsls	r7, r3
 800027e:	fa20 f202 	lsr.w	r2, r0, r2
 8000282:	4317      	orrs	r7, r2
 8000284:	409c      	lsls	r4, r3
 8000286:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800028a:	fa1f f58c 	uxth.w	r5, ip
 800028e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000292:	0c22      	lsrs	r2, r4, #16
 8000294:	fb0e 7711 	mls	r7, lr, r1, r7
 8000298:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800029c:	fb01 f005 	mul.w	r0, r1, r5
 80002a0:	4290      	cmp	r0, r2
 80002a2:	d90a      	bls.n	80002ba <__udivmoddi4+0x62>
 80002a4:	eb1c 0202 	adds.w	r2, ip, r2
 80002a8:	f101 37ff 	add.w	r7, r1, #4294967295
 80002ac:	f080 811c 	bcs.w	80004e8 <__udivmoddi4+0x290>
 80002b0:	4290      	cmp	r0, r2
 80002b2:	f240 8119 	bls.w	80004e8 <__udivmoddi4+0x290>
 80002b6:	3902      	subs	r1, #2
 80002b8:	4462      	add	r2, ip
 80002ba:	1a12      	subs	r2, r2, r0
 80002bc:	b2a4      	uxth	r4, r4
 80002be:	fbb2 f0fe 	udiv	r0, r2, lr
 80002c2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002c6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002ca:	fb00 f505 	mul.w	r5, r0, r5
 80002ce:	42a5      	cmp	r5, r4
 80002d0:	d90a      	bls.n	80002e8 <__udivmoddi4+0x90>
 80002d2:	eb1c 0404 	adds.w	r4, ip, r4
 80002d6:	f100 32ff 	add.w	r2, r0, #4294967295
 80002da:	f080 8107 	bcs.w	80004ec <__udivmoddi4+0x294>
 80002de:	42a5      	cmp	r5, r4
 80002e0:	f240 8104 	bls.w	80004ec <__udivmoddi4+0x294>
 80002e4:	4464      	add	r4, ip
 80002e6:	3802      	subs	r0, #2
 80002e8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002ec:	1b64      	subs	r4, r4, r5
 80002ee:	2100      	movs	r1, #0
 80002f0:	b11e      	cbz	r6, 80002fa <__udivmoddi4+0xa2>
 80002f2:	40dc      	lsrs	r4, r3
 80002f4:	2300      	movs	r3, #0
 80002f6:	e9c6 4300 	strd	r4, r3, [r6]
 80002fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fe:	428b      	cmp	r3, r1
 8000300:	d908      	bls.n	8000314 <__udivmoddi4+0xbc>
 8000302:	2e00      	cmp	r6, #0
 8000304:	f000 80ed 	beq.w	80004e2 <__udivmoddi4+0x28a>
 8000308:	2100      	movs	r1, #0
 800030a:	e9c6 0500 	strd	r0, r5, [r6]
 800030e:	4608      	mov	r0, r1
 8000310:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000314:	fab3 f183 	clz	r1, r3
 8000318:	2900      	cmp	r1, #0
 800031a:	d149      	bne.n	80003b0 <__udivmoddi4+0x158>
 800031c:	42ab      	cmp	r3, r5
 800031e:	d302      	bcc.n	8000326 <__udivmoddi4+0xce>
 8000320:	4282      	cmp	r2, r0
 8000322:	f200 80f8 	bhi.w	8000516 <__udivmoddi4+0x2be>
 8000326:	1a84      	subs	r4, r0, r2
 8000328:	eb65 0203 	sbc.w	r2, r5, r3
 800032c:	2001      	movs	r0, #1
 800032e:	4617      	mov	r7, r2
 8000330:	2e00      	cmp	r6, #0
 8000332:	d0e2      	beq.n	80002fa <__udivmoddi4+0xa2>
 8000334:	e9c6 4700 	strd	r4, r7, [r6]
 8000338:	e7df      	b.n	80002fa <__udivmoddi4+0xa2>
 800033a:	b902      	cbnz	r2, 800033e <__udivmoddi4+0xe6>
 800033c:	deff      	udf	#255	; 0xff
 800033e:	fab2 f382 	clz	r3, r2
 8000342:	2b00      	cmp	r3, #0
 8000344:	f040 8090 	bne.w	8000468 <__udivmoddi4+0x210>
 8000348:	1a8a      	subs	r2, r1, r2
 800034a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800034e:	fa1f fe8c 	uxth.w	lr, ip
 8000352:	2101      	movs	r1, #1
 8000354:	fbb2 f5f7 	udiv	r5, r2, r7
 8000358:	fb07 2015 	mls	r0, r7, r5, r2
 800035c:	0c22      	lsrs	r2, r4, #16
 800035e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000362:	fb0e f005 	mul.w	r0, lr, r5
 8000366:	4290      	cmp	r0, r2
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0x124>
 800036a:	eb1c 0202 	adds.w	r2, ip, r2
 800036e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000372:	d202      	bcs.n	800037a <__udivmoddi4+0x122>
 8000374:	4290      	cmp	r0, r2
 8000376:	f200 80cb 	bhi.w	8000510 <__udivmoddi4+0x2b8>
 800037a:	4645      	mov	r5, r8
 800037c:	1a12      	subs	r2, r2, r0
 800037e:	b2a4      	uxth	r4, r4
 8000380:	fbb2 f0f7 	udiv	r0, r2, r7
 8000384:	fb07 2210 	mls	r2, r7, r0, r2
 8000388:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800038c:	fb0e fe00 	mul.w	lr, lr, r0
 8000390:	45a6      	cmp	lr, r4
 8000392:	d908      	bls.n	80003a6 <__udivmoddi4+0x14e>
 8000394:	eb1c 0404 	adds.w	r4, ip, r4
 8000398:	f100 32ff 	add.w	r2, r0, #4294967295
 800039c:	d202      	bcs.n	80003a4 <__udivmoddi4+0x14c>
 800039e:	45a6      	cmp	lr, r4
 80003a0:	f200 80bb 	bhi.w	800051a <__udivmoddi4+0x2c2>
 80003a4:	4610      	mov	r0, r2
 80003a6:	eba4 040e 	sub.w	r4, r4, lr
 80003aa:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003ae:	e79f      	b.n	80002f0 <__udivmoddi4+0x98>
 80003b0:	f1c1 0720 	rsb	r7, r1, #32
 80003b4:	408b      	lsls	r3, r1
 80003b6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003ba:	ea4c 0c03 	orr.w	ip, ip, r3
 80003be:	fa05 f401 	lsl.w	r4, r5, r1
 80003c2:	fa20 f307 	lsr.w	r3, r0, r7
 80003c6:	40fd      	lsrs	r5, r7
 80003c8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003cc:	4323      	orrs	r3, r4
 80003ce:	fbb5 f8f9 	udiv	r8, r5, r9
 80003d2:	fa1f fe8c 	uxth.w	lr, ip
 80003d6:	fb09 5518 	mls	r5, r9, r8, r5
 80003da:	0c1c      	lsrs	r4, r3, #16
 80003dc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003e0:	fb08 f50e 	mul.w	r5, r8, lr
 80003e4:	42a5      	cmp	r5, r4
 80003e6:	fa02 f201 	lsl.w	r2, r2, r1
 80003ea:	fa00 f001 	lsl.w	r0, r0, r1
 80003ee:	d90b      	bls.n	8000408 <__udivmoddi4+0x1b0>
 80003f0:	eb1c 0404 	adds.w	r4, ip, r4
 80003f4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003f8:	f080 8088 	bcs.w	800050c <__udivmoddi4+0x2b4>
 80003fc:	42a5      	cmp	r5, r4
 80003fe:	f240 8085 	bls.w	800050c <__udivmoddi4+0x2b4>
 8000402:	f1a8 0802 	sub.w	r8, r8, #2
 8000406:	4464      	add	r4, ip
 8000408:	1b64      	subs	r4, r4, r5
 800040a:	b29d      	uxth	r5, r3
 800040c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000410:	fb09 4413 	mls	r4, r9, r3, r4
 8000414:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000418:	fb03 fe0e 	mul.w	lr, r3, lr
 800041c:	45a6      	cmp	lr, r4
 800041e:	d908      	bls.n	8000432 <__udivmoddi4+0x1da>
 8000420:	eb1c 0404 	adds.w	r4, ip, r4
 8000424:	f103 35ff 	add.w	r5, r3, #4294967295
 8000428:	d26c      	bcs.n	8000504 <__udivmoddi4+0x2ac>
 800042a:	45a6      	cmp	lr, r4
 800042c:	d96a      	bls.n	8000504 <__udivmoddi4+0x2ac>
 800042e:	3b02      	subs	r3, #2
 8000430:	4464      	add	r4, ip
 8000432:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000436:	fba3 9502 	umull	r9, r5, r3, r2
 800043a:	eba4 040e 	sub.w	r4, r4, lr
 800043e:	42ac      	cmp	r4, r5
 8000440:	46c8      	mov	r8, r9
 8000442:	46ae      	mov	lr, r5
 8000444:	d356      	bcc.n	80004f4 <__udivmoddi4+0x29c>
 8000446:	d053      	beq.n	80004f0 <__udivmoddi4+0x298>
 8000448:	b156      	cbz	r6, 8000460 <__udivmoddi4+0x208>
 800044a:	ebb0 0208 	subs.w	r2, r0, r8
 800044e:	eb64 040e 	sbc.w	r4, r4, lr
 8000452:	fa04 f707 	lsl.w	r7, r4, r7
 8000456:	40ca      	lsrs	r2, r1
 8000458:	40cc      	lsrs	r4, r1
 800045a:	4317      	orrs	r7, r2
 800045c:	e9c6 7400 	strd	r7, r4, [r6]
 8000460:	4618      	mov	r0, r3
 8000462:	2100      	movs	r1, #0
 8000464:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000468:	f1c3 0120 	rsb	r1, r3, #32
 800046c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000470:	fa20 f201 	lsr.w	r2, r0, r1
 8000474:	fa25 f101 	lsr.w	r1, r5, r1
 8000478:	409d      	lsls	r5, r3
 800047a:	432a      	orrs	r2, r5
 800047c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000480:	fa1f fe8c 	uxth.w	lr, ip
 8000484:	fbb1 f0f7 	udiv	r0, r1, r7
 8000488:	fb07 1510 	mls	r5, r7, r0, r1
 800048c:	0c11      	lsrs	r1, r2, #16
 800048e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000492:	fb00 f50e 	mul.w	r5, r0, lr
 8000496:	428d      	cmp	r5, r1
 8000498:	fa04 f403 	lsl.w	r4, r4, r3
 800049c:	d908      	bls.n	80004b0 <__udivmoddi4+0x258>
 800049e:	eb1c 0101 	adds.w	r1, ip, r1
 80004a2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004a6:	d22f      	bcs.n	8000508 <__udivmoddi4+0x2b0>
 80004a8:	428d      	cmp	r5, r1
 80004aa:	d92d      	bls.n	8000508 <__udivmoddi4+0x2b0>
 80004ac:	3802      	subs	r0, #2
 80004ae:	4461      	add	r1, ip
 80004b0:	1b49      	subs	r1, r1, r5
 80004b2:	b292      	uxth	r2, r2
 80004b4:	fbb1 f5f7 	udiv	r5, r1, r7
 80004b8:	fb07 1115 	mls	r1, r7, r5, r1
 80004bc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004c0:	fb05 f10e 	mul.w	r1, r5, lr
 80004c4:	4291      	cmp	r1, r2
 80004c6:	d908      	bls.n	80004da <__udivmoddi4+0x282>
 80004c8:	eb1c 0202 	adds.w	r2, ip, r2
 80004cc:	f105 38ff 	add.w	r8, r5, #4294967295
 80004d0:	d216      	bcs.n	8000500 <__udivmoddi4+0x2a8>
 80004d2:	4291      	cmp	r1, r2
 80004d4:	d914      	bls.n	8000500 <__udivmoddi4+0x2a8>
 80004d6:	3d02      	subs	r5, #2
 80004d8:	4462      	add	r2, ip
 80004da:	1a52      	subs	r2, r2, r1
 80004dc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004e0:	e738      	b.n	8000354 <__udivmoddi4+0xfc>
 80004e2:	4631      	mov	r1, r6
 80004e4:	4630      	mov	r0, r6
 80004e6:	e708      	b.n	80002fa <__udivmoddi4+0xa2>
 80004e8:	4639      	mov	r1, r7
 80004ea:	e6e6      	b.n	80002ba <__udivmoddi4+0x62>
 80004ec:	4610      	mov	r0, r2
 80004ee:	e6fb      	b.n	80002e8 <__udivmoddi4+0x90>
 80004f0:	4548      	cmp	r0, r9
 80004f2:	d2a9      	bcs.n	8000448 <__udivmoddi4+0x1f0>
 80004f4:	ebb9 0802 	subs.w	r8, r9, r2
 80004f8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004fc:	3b01      	subs	r3, #1
 80004fe:	e7a3      	b.n	8000448 <__udivmoddi4+0x1f0>
 8000500:	4645      	mov	r5, r8
 8000502:	e7ea      	b.n	80004da <__udivmoddi4+0x282>
 8000504:	462b      	mov	r3, r5
 8000506:	e794      	b.n	8000432 <__udivmoddi4+0x1da>
 8000508:	4640      	mov	r0, r8
 800050a:	e7d1      	b.n	80004b0 <__udivmoddi4+0x258>
 800050c:	46d0      	mov	r8, sl
 800050e:	e77b      	b.n	8000408 <__udivmoddi4+0x1b0>
 8000510:	3d02      	subs	r5, #2
 8000512:	4462      	add	r2, ip
 8000514:	e732      	b.n	800037c <__udivmoddi4+0x124>
 8000516:	4608      	mov	r0, r1
 8000518:	e70a      	b.n	8000330 <__udivmoddi4+0xd8>
 800051a:	4464      	add	r4, ip
 800051c:	3802      	subs	r0, #2
 800051e:	e742      	b.n	80003a6 <__udivmoddi4+0x14e>

08000520 <__aeabi_idiv0>:
 8000520:	4770      	bx	lr
 8000522:	bf00      	nop

08000524 <Get_Key>:
*/

#include "Keypad4X4.h"
char key;
char Get_Key(void)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	b082      	sub	sp, #8
 8000528:	af00      	add	r7, sp, #0
	int done=1;
 800052a:	2301      	movs	r3, #1
 800052c:	607b      	str	r3, [r7, #4]
	while(done)
 800052e:	e19b      	b.n	8000868 <Get_Key+0x344>
	{
	//COLUMN 3
	HAL_GPIO_WritePin (KC0_GPIO_Port, KC0_Pin, GPIO_PIN_SET);     // Pull the C0 HIGH
 8000530:	2201      	movs	r2, #1
 8000532:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000536:	48b3      	ldr	r0, [pc, #716]	; (8000804 <Get_Key+0x2e0>)
 8000538:	f001 fb34 	bl	8001ba4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC1_GPIO_Port, KC1_Pin, GPIO_PIN_RESET);   // Pull the C1 LOW
 800053c:	2200      	movs	r2, #0
 800053e:	2110      	movs	r1, #16
 8000540:	48b0      	ldr	r0, [pc, #704]	; (8000804 <Get_Key+0x2e0>)
 8000542:	f001 fb2f 	bl	8001ba4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC2_GPIO_Port, KC2_Pin, GPIO_PIN_RESET);   // Pull the C2 LOW
 8000546:	2200      	movs	r2, #0
 8000548:	2120      	movs	r1, #32
 800054a:	48ae      	ldr	r0, [pc, #696]	; (8000804 <Get_Key+0x2e0>)
 800054c:	f001 fb2a 	bl	8001ba4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC3_GPIO_Port, KC3_Pin, GPIO_PIN_RESET);   // Pull the C3 LOW
 8000550:	2200      	movs	r2, #0
 8000552:	2108      	movs	r1, #8
 8000554:	48ab      	ldr	r0, [pc, #684]	; (8000804 <Get_Key+0x2e0>)
 8000556:	f001 fb25 	bl	8001ba4 <HAL_GPIO_WritePin>

	if ((HAL_GPIO_ReadPin (KR0_GPIO_Port, KR0_Pin)))   // if R0 is HIGH
 800055a:	2140      	movs	r1, #64	; 0x40
 800055c:	48a9      	ldr	r0, [pc, #676]	; (8000804 <Get_Key+0x2e0>)
 800055e:	f001 fb09 	bl	8001b74 <HAL_GPIO_ReadPin>
 8000562:	4603      	mov	r3, r0
 8000564:	2b00      	cmp	r3, #0
 8000566:	d00b      	beq.n	8000580 <Get_Key+0x5c>
	{
		while ((HAL_GPIO_ReadPin (KR0_GPIO_Port, KR0_Pin)));   // wait till the button is pressed
 8000568:	bf00      	nop
 800056a:	2140      	movs	r1, #64	; 0x40
 800056c:	48a5      	ldr	r0, [pc, #660]	; (8000804 <Get_Key+0x2e0>)
 800056e:	f001 fb01 	bl	8001b74 <HAL_GPIO_ReadPin>
 8000572:	4603      	mov	r3, r0
 8000574:	2b00      	cmp	r3, #0
 8000576:	d1f8      	bne.n	800056a <Get_Key+0x46>
		key='1';
 8000578:	4ba3      	ldr	r3, [pc, #652]	; (8000808 <Get_Key+0x2e4>)
 800057a:	2231      	movs	r2, #49	; 0x31
 800057c:	701a      	strb	r2, [r3, #0]
		break;
 800057e:	e177      	b.n	8000870 <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR1_GPIO_Port, KR1_Pin)))   // if  R1 is HIGH
 8000580:	2180      	movs	r1, #128	; 0x80
 8000582:	48a2      	ldr	r0, [pc, #648]	; (800080c <Get_Key+0x2e8>)
 8000584:	f001 faf6 	bl	8001b74 <HAL_GPIO_ReadPin>
 8000588:	4603      	mov	r3, r0
 800058a:	2b00      	cmp	r3, #0
 800058c:	d00b      	beq.n	80005a6 <Get_Key+0x82>
	{
		while ((HAL_GPIO_ReadPin (KR1_GPIO_Port, KR1_Pin)));   // wait till the button is pressed
 800058e:	bf00      	nop
 8000590:	2180      	movs	r1, #128	; 0x80
 8000592:	489e      	ldr	r0, [pc, #632]	; (800080c <Get_Key+0x2e8>)
 8000594:	f001 faee 	bl	8001b74 <HAL_GPIO_ReadPin>
 8000598:	4603      	mov	r3, r0
 800059a:	2b00      	cmp	r3, #0
 800059c:	d1f8      	bne.n	8000590 <Get_Key+0x6c>
		key='4';
 800059e:	4b9a      	ldr	r3, [pc, #616]	; (8000808 <Get_Key+0x2e4>)
 80005a0:	2234      	movs	r2, #52	; 0x34
 80005a2:	701a      	strb	r2, [r3, #0]
		break;
 80005a4:	e164      	b.n	8000870 <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR2_GPIO_Port, KR2_Pin)))   // if R2 is HIGH
 80005a6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005aa:	4899      	ldr	r0, [pc, #612]	; (8000810 <Get_Key+0x2ec>)
 80005ac:	f001 fae2 	bl	8001b74 <HAL_GPIO_ReadPin>
 80005b0:	4603      	mov	r3, r0
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d00c      	beq.n	80005d0 <Get_Key+0xac>
	{
		while ((HAL_GPIO_ReadPin (KR2_GPIO_Port, KR2_Pin)));   // wait till the button is pressed
 80005b6:	bf00      	nop
 80005b8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005bc:	4894      	ldr	r0, [pc, #592]	; (8000810 <Get_Key+0x2ec>)
 80005be:	f001 fad9 	bl	8001b74 <HAL_GPIO_ReadPin>
 80005c2:	4603      	mov	r3, r0
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d1f7      	bne.n	80005b8 <Get_Key+0x94>
		key='7';
 80005c8:	4b8f      	ldr	r3, [pc, #572]	; (8000808 <Get_Key+0x2e4>)
 80005ca:	2237      	movs	r2, #55	; 0x37
 80005cc:	701a      	strb	r2, [r3, #0]
		break;
 80005ce:	e14f      	b.n	8000870 <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR3_GPIO_Port, KR3_Pin)))   // if R3 is HIGH
 80005d0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005d4:	488e      	ldr	r0, [pc, #568]	; (8000810 <Get_Key+0x2ec>)
 80005d6:	f001 facd 	bl	8001b74 <HAL_GPIO_ReadPin>
 80005da:	4603      	mov	r3, r0
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d00c      	beq.n	80005fa <Get_Key+0xd6>
	{
		while ((HAL_GPIO_ReadPin (KR3_GPIO_Port, KR3_Pin)));   // wait till the button is pressed
 80005e0:	bf00      	nop
 80005e2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005e6:	488a      	ldr	r0, [pc, #552]	; (8000810 <Get_Key+0x2ec>)
 80005e8:	f001 fac4 	bl	8001b74 <HAL_GPIO_ReadPin>
 80005ec:	4603      	mov	r3, r0
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d1f7      	bne.n	80005e2 <Get_Key+0xbe>
		key='*';
 80005f2:	4b85      	ldr	r3, [pc, #532]	; (8000808 <Get_Key+0x2e4>)
 80005f4:	222a      	movs	r2, #42	; 0x2a
 80005f6:	701a      	strb	r2, [r3, #0]
		break;
 80005f8:	e13a      	b.n	8000870 <Get_Key+0x34c>
	}

	//COLUMN 2
	HAL_GPIO_WritePin (KC0_GPIO_Port, KC0_Pin, GPIO_PIN_RESET);   // Pull the C0 LOW  
 80005fa:	2200      	movs	r2, #0
 80005fc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000600:	4880      	ldr	r0, [pc, #512]	; (8000804 <Get_Key+0x2e0>)
 8000602:	f001 facf 	bl	8001ba4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC1_GPIO_Port, KC1_Pin, GPIO_PIN_SET);     // Pull the C1 HIGH
 8000606:	2201      	movs	r2, #1
 8000608:	2110      	movs	r1, #16
 800060a:	487e      	ldr	r0, [pc, #504]	; (8000804 <Get_Key+0x2e0>)
 800060c:	f001 faca 	bl	8001ba4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC2_GPIO_Port, KC2_Pin, GPIO_PIN_RESET);   // Pull the C2 LOW
 8000610:	2200      	movs	r2, #0
 8000612:	2120      	movs	r1, #32
 8000614:	487b      	ldr	r0, [pc, #492]	; (8000804 <Get_Key+0x2e0>)
 8000616:	f001 fac5 	bl	8001ba4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC3_GPIO_Port, KC3_Pin, GPIO_PIN_RESET);   // Pull the C3 LOW
 800061a:	2200      	movs	r2, #0
 800061c:	2108      	movs	r1, #8
 800061e:	4879      	ldr	r0, [pc, #484]	; (8000804 <Get_Key+0x2e0>)
 8000620:	f001 fac0 	bl	8001ba4 <HAL_GPIO_WritePin>
	if ((HAL_GPIO_ReadPin (KR0_GPIO_Port, KR0_Pin)))   // if R0 is HIGH
 8000624:	2140      	movs	r1, #64	; 0x40
 8000626:	4877      	ldr	r0, [pc, #476]	; (8000804 <Get_Key+0x2e0>)
 8000628:	f001 faa4 	bl	8001b74 <HAL_GPIO_ReadPin>
 800062c:	4603      	mov	r3, r0
 800062e:	2b00      	cmp	r3, #0
 8000630:	d00b      	beq.n	800064a <Get_Key+0x126>
	{
		while ((HAL_GPIO_ReadPin (KR0_GPIO_Port, KR0_Pin)));   // wait till the button is pressed
 8000632:	bf00      	nop
 8000634:	2140      	movs	r1, #64	; 0x40
 8000636:	4873      	ldr	r0, [pc, #460]	; (8000804 <Get_Key+0x2e0>)
 8000638:	f001 fa9c 	bl	8001b74 <HAL_GPIO_ReadPin>
 800063c:	4603      	mov	r3, r0
 800063e:	2b00      	cmp	r3, #0
 8000640:	d1f8      	bne.n	8000634 <Get_Key+0x110>
		key='2';
 8000642:	4b71      	ldr	r3, [pc, #452]	; (8000808 <Get_Key+0x2e4>)
 8000644:	2232      	movs	r2, #50	; 0x32
 8000646:	701a      	strb	r2, [r3, #0]
		break;
 8000648:	e112      	b.n	8000870 <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR1_GPIO_Port, KR1_Pin)))   // if  R1 is HIGH
 800064a:	2180      	movs	r1, #128	; 0x80
 800064c:	486f      	ldr	r0, [pc, #444]	; (800080c <Get_Key+0x2e8>)
 800064e:	f001 fa91 	bl	8001b74 <HAL_GPIO_ReadPin>
 8000652:	4603      	mov	r3, r0
 8000654:	2b00      	cmp	r3, #0
 8000656:	d00b      	beq.n	8000670 <Get_Key+0x14c>
	{
		while ((HAL_GPIO_ReadPin (KR1_GPIO_Port, KR1_Pin)));   // wait till the button is pressed
 8000658:	bf00      	nop
 800065a:	2180      	movs	r1, #128	; 0x80
 800065c:	486b      	ldr	r0, [pc, #428]	; (800080c <Get_Key+0x2e8>)
 800065e:	f001 fa89 	bl	8001b74 <HAL_GPIO_ReadPin>
 8000662:	4603      	mov	r3, r0
 8000664:	2b00      	cmp	r3, #0
 8000666:	d1f8      	bne.n	800065a <Get_Key+0x136>
		key='5';
 8000668:	4b67      	ldr	r3, [pc, #412]	; (8000808 <Get_Key+0x2e4>)
 800066a:	2235      	movs	r2, #53	; 0x35
 800066c:	701a      	strb	r2, [r3, #0]
		break;
 800066e:	e0ff      	b.n	8000870 <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR2_GPIO_Port, KR2_Pin)))   // if R2 is HIGH
 8000670:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000674:	4866      	ldr	r0, [pc, #408]	; (8000810 <Get_Key+0x2ec>)
 8000676:	f001 fa7d 	bl	8001b74 <HAL_GPIO_ReadPin>
 800067a:	4603      	mov	r3, r0
 800067c:	2b00      	cmp	r3, #0
 800067e:	d00c      	beq.n	800069a <Get_Key+0x176>
	{
		while ((HAL_GPIO_ReadPin (KR2_GPIO_Port, KR2_Pin)));   // wait till the button is pressed
 8000680:	bf00      	nop
 8000682:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000686:	4862      	ldr	r0, [pc, #392]	; (8000810 <Get_Key+0x2ec>)
 8000688:	f001 fa74 	bl	8001b74 <HAL_GPIO_ReadPin>
 800068c:	4603      	mov	r3, r0
 800068e:	2b00      	cmp	r3, #0
 8000690:	d1f7      	bne.n	8000682 <Get_Key+0x15e>
		key='8';
 8000692:	4b5d      	ldr	r3, [pc, #372]	; (8000808 <Get_Key+0x2e4>)
 8000694:	2238      	movs	r2, #56	; 0x38
 8000696:	701a      	strb	r2, [r3, #0]
		break;
 8000698:	e0ea      	b.n	8000870 <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR3_GPIO_Port, KR3_Pin)))   // if R3 is HIGH
 800069a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800069e:	485c      	ldr	r0, [pc, #368]	; (8000810 <Get_Key+0x2ec>)
 80006a0:	f001 fa68 	bl	8001b74 <HAL_GPIO_ReadPin>
 80006a4:	4603      	mov	r3, r0
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d00c      	beq.n	80006c4 <Get_Key+0x1a0>
	{
		while ((HAL_GPIO_ReadPin (KR3_GPIO_Port, KR3_Pin)));   // wait till the button is pressed
 80006aa:	bf00      	nop
 80006ac:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006b0:	4857      	ldr	r0, [pc, #348]	; (8000810 <Get_Key+0x2ec>)
 80006b2:	f001 fa5f 	bl	8001b74 <HAL_GPIO_ReadPin>
 80006b6:	4603      	mov	r3, r0
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d1f7      	bne.n	80006ac <Get_Key+0x188>
		key='0';
 80006bc:	4b52      	ldr	r3, [pc, #328]	; (8000808 <Get_Key+0x2e4>)
 80006be:	2230      	movs	r2, #48	; 0x30
 80006c0:	701a      	strb	r2, [r3, #0]
		break;
 80006c2:	e0d5      	b.n	8000870 <Get_Key+0x34c>
	}
	//COLUMN 1
	HAL_GPIO_WritePin (KC0_GPIO_Port, KC0_Pin, GPIO_PIN_RESET);  // Pull the C0 LOW  
 80006c4:	2200      	movs	r2, #0
 80006c6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006ca:	484e      	ldr	r0, [pc, #312]	; (8000804 <Get_Key+0x2e0>)
 80006cc:	f001 fa6a 	bl	8001ba4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC1_GPIO_Port, KC1_Pin, GPIO_PIN_RESET);  // Pull the C1 LOW
 80006d0:	2200      	movs	r2, #0
 80006d2:	2110      	movs	r1, #16
 80006d4:	484b      	ldr	r0, [pc, #300]	; (8000804 <Get_Key+0x2e0>)
 80006d6:	f001 fa65 	bl	8001ba4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC2_GPIO_Port, KC2_Pin, GPIO_PIN_SET);    // Pull the C2 HIGH
 80006da:	2201      	movs	r2, #1
 80006dc:	2120      	movs	r1, #32
 80006de:	4849      	ldr	r0, [pc, #292]	; (8000804 <Get_Key+0x2e0>)
 80006e0:	f001 fa60 	bl	8001ba4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC3_GPIO_Port, KC3_Pin, GPIO_PIN_RESET);  // Pull the C3 LOW
 80006e4:	2200      	movs	r2, #0
 80006e6:	2108      	movs	r1, #8
 80006e8:	4846      	ldr	r0, [pc, #280]	; (8000804 <Get_Key+0x2e0>)
 80006ea:	f001 fa5b 	bl	8001ba4 <HAL_GPIO_WritePin>

	if ((HAL_GPIO_ReadPin (KR0_GPIO_Port, KR0_Pin)))   // if R0 is HIGH
 80006ee:	2140      	movs	r1, #64	; 0x40
 80006f0:	4844      	ldr	r0, [pc, #272]	; (8000804 <Get_Key+0x2e0>)
 80006f2:	f001 fa3f 	bl	8001b74 <HAL_GPIO_ReadPin>
 80006f6:	4603      	mov	r3, r0
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d00b      	beq.n	8000714 <Get_Key+0x1f0>
	{
		while ((HAL_GPIO_ReadPin (KR0_GPIO_Port, KR0_Pin)));   // wait till the button is pressed
 80006fc:	bf00      	nop
 80006fe:	2140      	movs	r1, #64	; 0x40
 8000700:	4840      	ldr	r0, [pc, #256]	; (8000804 <Get_Key+0x2e0>)
 8000702:	f001 fa37 	bl	8001b74 <HAL_GPIO_ReadPin>
 8000706:	4603      	mov	r3, r0
 8000708:	2b00      	cmp	r3, #0
 800070a:	d1f8      	bne.n	80006fe <Get_Key+0x1da>
		key='3';
 800070c:	4b3e      	ldr	r3, [pc, #248]	; (8000808 <Get_Key+0x2e4>)
 800070e:	2233      	movs	r2, #51	; 0x33
 8000710:	701a      	strb	r2, [r3, #0]
		break;
 8000712:	e0ad      	b.n	8000870 <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR1_GPIO_Port, KR1_Pin)))   // if  R1 is HIGH
 8000714:	2180      	movs	r1, #128	; 0x80
 8000716:	483d      	ldr	r0, [pc, #244]	; (800080c <Get_Key+0x2e8>)
 8000718:	f001 fa2c 	bl	8001b74 <HAL_GPIO_ReadPin>
 800071c:	4603      	mov	r3, r0
 800071e:	2b00      	cmp	r3, #0
 8000720:	d00b      	beq.n	800073a <Get_Key+0x216>
	{
		while ((HAL_GPIO_ReadPin (KR1_GPIO_Port, KR1_Pin)));   // wait till the button is pressed
 8000722:	bf00      	nop
 8000724:	2180      	movs	r1, #128	; 0x80
 8000726:	4839      	ldr	r0, [pc, #228]	; (800080c <Get_Key+0x2e8>)
 8000728:	f001 fa24 	bl	8001b74 <HAL_GPIO_ReadPin>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d1f8      	bne.n	8000724 <Get_Key+0x200>
		key='6';
 8000732:	4b35      	ldr	r3, [pc, #212]	; (8000808 <Get_Key+0x2e4>)
 8000734:	2236      	movs	r2, #54	; 0x36
 8000736:	701a      	strb	r2, [r3, #0]
		break;
 8000738:	e09a      	b.n	8000870 <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR2_GPIO_Port, KR2_Pin)))   // if R2 is HIGH
 800073a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800073e:	4834      	ldr	r0, [pc, #208]	; (8000810 <Get_Key+0x2ec>)
 8000740:	f001 fa18 	bl	8001b74 <HAL_GPIO_ReadPin>
 8000744:	4603      	mov	r3, r0
 8000746:	2b00      	cmp	r3, #0
 8000748:	d00c      	beq.n	8000764 <Get_Key+0x240>
	{
		while ((HAL_GPIO_ReadPin (KR2_GPIO_Port, KR2_Pin)));   // wait till the button is pressed
 800074a:	bf00      	nop
 800074c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000750:	482f      	ldr	r0, [pc, #188]	; (8000810 <Get_Key+0x2ec>)
 8000752:	f001 fa0f 	bl	8001b74 <HAL_GPIO_ReadPin>
 8000756:	4603      	mov	r3, r0
 8000758:	2b00      	cmp	r3, #0
 800075a:	d1f7      	bne.n	800074c <Get_Key+0x228>
		key='9';
 800075c:	4b2a      	ldr	r3, [pc, #168]	; (8000808 <Get_Key+0x2e4>)
 800075e:	2239      	movs	r2, #57	; 0x39
 8000760:	701a      	strb	r2, [r3, #0]
		break;
 8000762:	e085      	b.n	8000870 <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR3_GPIO_Port, KR3_Pin)))   // if R3 is HIGH
 8000764:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000768:	4829      	ldr	r0, [pc, #164]	; (8000810 <Get_Key+0x2ec>)
 800076a:	f001 fa03 	bl	8001b74 <HAL_GPIO_ReadPin>
 800076e:	4603      	mov	r3, r0
 8000770:	2b00      	cmp	r3, #0
 8000772:	d00c      	beq.n	800078e <Get_Key+0x26a>
	{
		while ((HAL_GPIO_ReadPin (KR3_GPIO_Port, KR3_Pin)));   // wait till the button is pressed
 8000774:	bf00      	nop
 8000776:	f44f 7180 	mov.w	r1, #256	; 0x100
 800077a:	4825      	ldr	r0, [pc, #148]	; (8000810 <Get_Key+0x2ec>)
 800077c:	f001 f9fa 	bl	8001b74 <HAL_GPIO_ReadPin>
 8000780:	4603      	mov	r3, r0
 8000782:	2b00      	cmp	r3, #0
 8000784:	d1f7      	bne.n	8000776 <Get_Key+0x252>
		key='#';
 8000786:	4b20      	ldr	r3, [pc, #128]	; (8000808 <Get_Key+0x2e4>)
 8000788:	2223      	movs	r2, #35	; 0x23
 800078a:	701a      	strb	r2, [r3, #0]
		break;
 800078c:	e070      	b.n	8000870 <Get_Key+0x34c>
	}
	//COLUMN 0
	HAL_GPIO_WritePin (KC0_GPIO_Port, KC0_Pin, GPIO_PIN_RESET);   // Pull the C0 LOW  
 800078e:	2200      	movs	r2, #0
 8000790:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000794:	481b      	ldr	r0, [pc, #108]	; (8000804 <Get_Key+0x2e0>)
 8000796:	f001 fa05 	bl	8001ba4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC1_GPIO_Port, KC1_Pin, GPIO_PIN_RESET);   // Pull the C1 LOW
 800079a:	2200      	movs	r2, #0
 800079c:	2110      	movs	r1, #16
 800079e:	4819      	ldr	r0, [pc, #100]	; (8000804 <Get_Key+0x2e0>)
 80007a0:	f001 fa00 	bl	8001ba4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC2_GPIO_Port, KC2_Pin, GPIO_PIN_RESET);   // Pull the C2 LOW
 80007a4:	2200      	movs	r2, #0
 80007a6:	2120      	movs	r1, #32
 80007a8:	4816      	ldr	r0, [pc, #88]	; (8000804 <Get_Key+0x2e0>)
 80007aa:	f001 f9fb 	bl	8001ba4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC3_GPIO_Port, KC3_Pin, GPIO_PIN_SET);     // Pull the C3 HIGH
 80007ae:	2201      	movs	r2, #1
 80007b0:	2108      	movs	r1, #8
 80007b2:	4814      	ldr	r0, [pc, #80]	; (8000804 <Get_Key+0x2e0>)
 80007b4:	f001 f9f6 	bl	8001ba4 <HAL_GPIO_WritePin>

	if ((HAL_GPIO_ReadPin (KR0_GPIO_Port, KR0_Pin)))   // if R0 is HIGH
 80007b8:	2140      	movs	r1, #64	; 0x40
 80007ba:	4812      	ldr	r0, [pc, #72]	; (8000804 <Get_Key+0x2e0>)
 80007bc:	f001 f9da 	bl	8001b74 <HAL_GPIO_ReadPin>
 80007c0:	4603      	mov	r3, r0
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d00b      	beq.n	80007de <Get_Key+0x2ba>
	{
		while ((HAL_GPIO_ReadPin (KR0_GPIO_Port, KR0_Pin)));   // wait till the button is pressed
 80007c6:	bf00      	nop
 80007c8:	2140      	movs	r1, #64	; 0x40
 80007ca:	480e      	ldr	r0, [pc, #56]	; (8000804 <Get_Key+0x2e0>)
 80007cc:	f001 f9d2 	bl	8001b74 <HAL_GPIO_ReadPin>
 80007d0:	4603      	mov	r3, r0
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d1f8      	bne.n	80007c8 <Get_Key+0x2a4>
		key='A';
 80007d6:	4b0c      	ldr	r3, [pc, #48]	; (8000808 <Get_Key+0x2e4>)
 80007d8:	2241      	movs	r2, #65	; 0x41
 80007da:	701a      	strb	r2, [r3, #0]
		break;
 80007dc:	e048      	b.n	8000870 <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR1_GPIO_Port, KR1_Pin)))   // if  R1 is HIGH
 80007de:	2180      	movs	r1, #128	; 0x80
 80007e0:	480a      	ldr	r0, [pc, #40]	; (800080c <Get_Key+0x2e8>)
 80007e2:	f001 f9c7 	bl	8001b74 <HAL_GPIO_ReadPin>
 80007e6:	4603      	mov	r3, r0
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d013      	beq.n	8000814 <Get_Key+0x2f0>
	{
		while ((HAL_GPIO_ReadPin (KR1_GPIO_Port, KR1_Pin)));   // wait till the button is pressed
 80007ec:	bf00      	nop
 80007ee:	2180      	movs	r1, #128	; 0x80
 80007f0:	4806      	ldr	r0, [pc, #24]	; (800080c <Get_Key+0x2e8>)
 80007f2:	f001 f9bf 	bl	8001b74 <HAL_GPIO_ReadPin>
 80007f6:	4603      	mov	r3, r0
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d1f8      	bne.n	80007ee <Get_Key+0x2ca>
		key='B';
 80007fc:	4b02      	ldr	r3, [pc, #8]	; (8000808 <Get_Key+0x2e4>)
 80007fe:	2242      	movs	r2, #66	; 0x42
 8000800:	701a      	strb	r2, [r3, #0]
		break;
 8000802:	e035      	b.n	8000870 <Get_Key+0x34c>
 8000804:	40020400 	.word	0x40020400
 8000808:	20000030 	.word	0x20000030
 800080c:	40020800 	.word	0x40020800
 8000810:	40020000 	.word	0x40020000
	}

	if ((HAL_GPIO_ReadPin (KR2_GPIO_Port, KR2_Pin)))   // if R2 is HIGH
 8000814:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000818:	481a      	ldr	r0, [pc, #104]	; (8000884 <Get_Key+0x360>)
 800081a:	f001 f9ab 	bl	8001b74 <HAL_GPIO_ReadPin>
 800081e:	4603      	mov	r3, r0
 8000820:	2b00      	cmp	r3, #0
 8000822:	d00c      	beq.n	800083e <Get_Key+0x31a>
	{
		while ((HAL_GPIO_ReadPin (KR2_GPIO_Port, KR2_Pin)));   // wait till the button is pressed
 8000824:	bf00      	nop
 8000826:	f44f 7100 	mov.w	r1, #512	; 0x200
 800082a:	4816      	ldr	r0, [pc, #88]	; (8000884 <Get_Key+0x360>)
 800082c:	f001 f9a2 	bl	8001b74 <HAL_GPIO_ReadPin>
 8000830:	4603      	mov	r3, r0
 8000832:	2b00      	cmp	r3, #0
 8000834:	d1f7      	bne.n	8000826 <Get_Key+0x302>
		key='C';
 8000836:	4b14      	ldr	r3, [pc, #80]	; (8000888 <Get_Key+0x364>)
 8000838:	2243      	movs	r2, #67	; 0x43
 800083a:	701a      	strb	r2, [r3, #0]
		break;
 800083c:	e018      	b.n	8000870 <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR3_GPIO_Port, KR3_Pin)))   // if R3 is HIGH
 800083e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000842:	4810      	ldr	r0, [pc, #64]	; (8000884 <Get_Key+0x360>)
 8000844:	f001 f996 	bl	8001b74 <HAL_GPIO_ReadPin>
 8000848:	4603      	mov	r3, r0
 800084a:	2b00      	cmp	r3, #0
 800084c:	d00c      	beq.n	8000868 <Get_Key+0x344>
	{
		while ((HAL_GPIO_ReadPin (KR3_GPIO_Port, KR3_Pin)));   // wait till the button is pressed
 800084e:	bf00      	nop
 8000850:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000854:	480b      	ldr	r0, [pc, #44]	; (8000884 <Get_Key+0x360>)
 8000856:	f001 f98d 	bl	8001b74 <HAL_GPIO_ReadPin>
 800085a:	4603      	mov	r3, r0
 800085c:	2b00      	cmp	r3, #0
 800085e:	d1f7      	bne.n	8000850 <Get_Key+0x32c>
		key='D';
 8000860:	4b09      	ldr	r3, [pc, #36]	; (8000888 <Get_Key+0x364>)
 8000862:	2244      	movs	r2, #68	; 0x44
 8000864:	701a      	strb	r2, [r3, #0]
		break;
 8000866:	e003      	b.n	8000870 <Get_Key+0x34c>
	while(done)
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	2b00      	cmp	r3, #0
 800086c:	f47f ae60 	bne.w	8000530 <Get_Key+0xc>
	}
}
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000870:	2120      	movs	r1, #32
 8000872:	4804      	ldr	r0, [pc, #16]	; (8000884 <Get_Key+0x360>)
 8000874:	f001 f9af 	bl	8001bd6 <HAL_GPIO_TogglePin>
	return(key);
 8000878:	4b03      	ldr	r3, [pc, #12]	; (8000888 <Get_Key+0x364>)
 800087a:	781b      	ldrb	r3, [r3, #0]
}
 800087c:	4618      	mov	r0, r3
 800087e:	3708      	adds	r7, #8
 8000880:	46bd      	mov	sp, r7
 8000882:	bd80      	pop	{r7, pc}
 8000884:	40020000 	.word	0x40020000
 8000888:	20000030 	.word	0x20000030

0800088c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b086      	sub	sp, #24
 8000890:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000892:	f000 fe93 	bl	80015bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000896:	f000 f8b1 	bl	80009fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800089a:	f000 f975 	bl	8000b88 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800089e:	f000 f949 	bl	8000b34 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80008a2:	f000 f919 	bl	8000ad8 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  /* USER CODE BEGIN 2 */
    SSD1306_Init();
 80008a6:	f000 fa23 	bl	8000cf0 <SSD1306_Init>
    SSD1306_GotoXY (0,0);
 80008aa:	2100      	movs	r1, #0
 80008ac:	2000      	movs	r0, #0
 80008ae:	f000 fb89 	bl	8000fc4 <SSD1306_GotoXY>
    //SSD1306_Puts ("Voltage:", &Font_11x18, 1);
    SSD1306_Puts ("Enter Code:", &Font_11x18, 1);
 80008b2:	2201      	movs	r2, #1
 80008b4:	4949      	ldr	r1, [pc, #292]	; (80009dc <main+0x150>)
 80008b6:	484a      	ldr	r0, [pc, #296]	; (80009e0 <main+0x154>)
 80008b8:	f000 fc1a 	bl	80010f0 <SSD1306_Puts>
    SSD1306_GotoXY (0, 30);
 80008bc:	211e      	movs	r1, #30
 80008be:	2000      	movs	r0, #0
 80008c0:	f000 fb80 	bl	8000fc4 <SSD1306_GotoXY>
    SSD1306_UpdateScreen();
 80008c4:	f000 fad8 	bl	8000e78 <SSD1306_UpdateScreen>
    SSD1306_UpdateScreen();
 80008c8:	f000 fad6 	bl	8000e78 <SSD1306_UpdateScreen>
    HAL_Delay (500);
 80008cc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80008d0:	f000 feb6 	bl	8001640 <HAL_Delay>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  int index = 0;
 80008d4:	2300      	movs	r3, #0
 80008d6:	617b      	str	r3, [r7, #20]
  bool systemArmed = false;
 80008d8:	2300      	movs	r3, #0
 80008da:	74fb      	strb	r3, [r7, #19]
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	/* D10 to D7 as input pins for row 0 to row 3. D6 to D3 as output for column pins C1 to C3*/
	  key = Get_Key();
 80008dc:	f7ff fe22 	bl	8000524 <Get_Key>
 80008e0:	4603      	mov	r3, r0
 80008e2:	461a      	mov	r2, r3
 80008e4:	4b3f      	ldr	r3, [pc, #252]	; (80009e4 <main+0x158>)
 80008e6:	701a      	strb	r2, [r3, #0]
	  if (key != '\0' && index < 6) {
 80008e8:	4b3e      	ldr	r3, [pc, #248]	; (80009e4 <main+0x158>)
 80008ea:	781b      	ldrb	r3, [r3, #0]
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d00c      	beq.n	800090a <main+0x7e>
 80008f0:	697b      	ldr	r3, [r7, #20]
 80008f2:	2b05      	cmp	r3, #5
 80008f4:	dc09      	bgt.n	800090a <main+0x7e>
	      hold[index] = key;
 80008f6:	4b3b      	ldr	r3, [pc, #236]	; (80009e4 <main+0x158>)
 80008f8:	7819      	ldrb	r1, [r3, #0]
 80008fa:	4a3b      	ldr	r2, [pc, #236]	; (80009e8 <main+0x15c>)
 80008fc:	697b      	ldr	r3, [r7, #20]
 80008fe:	4413      	add	r3, r2
 8000900:	460a      	mov	r2, r1
 8000902:	701a      	strb	r2, [r3, #0]
	      index++;
 8000904:	697b      	ldr	r3, [r7, #20]
 8000906:	3301      	adds	r3, #1
 8000908:	617b      	str	r3, [r7, #20]
	    }
	  hold[index] = '\0';
 800090a:	4a37      	ldr	r2, [pc, #220]	; (80009e8 <main+0x15c>)
 800090c:	697b      	ldr	r3, [r7, #20]
 800090e:	4413      	add	r3, r2
 8000910:	2200      	movs	r2, #0
 8000912:	701a      	strb	r2, [r3, #0]

	  char display[7];
	    for (int i = 0; i < index; i++) {
 8000914:	2300      	movs	r3, #0
 8000916:	60fb      	str	r3, [r7, #12]
 8000918:	e007      	b.n	800092a <main+0x9e>
	      display[i] = '*';
 800091a:	1d3a      	adds	r2, r7, #4
 800091c:	68fb      	ldr	r3, [r7, #12]
 800091e:	4413      	add	r3, r2
 8000920:	222a      	movs	r2, #42	; 0x2a
 8000922:	701a      	strb	r2, [r3, #0]
	    for (int i = 0; i < index; i++) {
 8000924:	68fb      	ldr	r3, [r7, #12]
 8000926:	3301      	adds	r3, #1
 8000928:	60fb      	str	r3, [r7, #12]
 800092a:	68fa      	ldr	r2, [r7, #12]
 800092c:	697b      	ldr	r3, [r7, #20]
 800092e:	429a      	cmp	r2, r3
 8000930:	dbf3      	blt.n	800091a <main+0x8e>
	    }
	    display[index] = '\0';
 8000932:	1d3a      	adds	r2, r7, #4
 8000934:	697b      	ldr	r3, [r7, #20]
 8000936:	4413      	add	r3, r2
 8000938:	2200      	movs	r2, #0
 800093a:	701a      	strb	r2, [r3, #0]

	    HAL_UART_Transmit(&huart2, (uint8_t *)display, strlen(display), 100);
 800093c:	1d3b      	adds	r3, r7, #4
 800093e:	4618      	mov	r0, r3
 8000940:	f7ff fc6a 	bl	8000218 <strlen>
 8000944:	4603      	mov	r3, r0
 8000946:	b29a      	uxth	r2, r3
 8000948:	1d39      	adds	r1, r7, #4
 800094a:	2364      	movs	r3, #100	; 0x64
 800094c:	4827      	ldr	r0, [pc, #156]	; (80009ec <main+0x160>)
 800094e:	f003 f835 	bl	80039bc <HAL_UART_Transmit>
	    SSD1306_GotoXY (0, 30);
 8000952:	211e      	movs	r1, #30
 8000954:	2000      	movs	r0, #0
 8000956:	f000 fb35 	bl	8000fc4 <SSD1306_GotoXY>
	    SSD1306_UpdateScreen();
 800095a:	f000 fa8d 	bl	8000e78 <SSD1306_UpdateScreen>
	    SSD1306_Puts (display, &Font_11x18, 1);
 800095e:	1d3b      	adds	r3, r7, #4
 8000960:	2201      	movs	r2, #1
 8000962:	491e      	ldr	r1, [pc, #120]	; (80009dc <main+0x150>)
 8000964:	4618      	mov	r0, r3
 8000966:	f000 fbc3 	bl	80010f0 <SSD1306_Puts>
	    SSD1306_UpdateScreen();
 800096a:	f000 fa85 	bl	8000e78 <SSD1306_UpdateScreen>


	      // Armer ou désarmer le système si le bon code est entré
	      if (strcmp(hold, "111111") == 0) {
 800096e:	4920      	ldr	r1, [pc, #128]	; (80009f0 <main+0x164>)
 8000970:	481d      	ldr	r0, [pc, #116]	; (80009e8 <main+0x15c>)
 8000972:	f7ff fc47 	bl	8000204 <strcmp>
 8000976:	4603      	mov	r3, r0
 8000978:	2b00      	cmp	r3, #0
 800097a:	d114      	bne.n	80009a6 <main+0x11a>
	        systemArmed = !systemArmed;
 800097c:	7cfb      	ldrb	r3, [r7, #19]
 800097e:	2b00      	cmp	r3, #0
 8000980:	bf14      	ite	ne
 8000982:	2301      	movne	r3, #1
 8000984:	2300      	moveq	r3, #0
 8000986:	b2db      	uxtb	r3, r3
 8000988:	f083 0301 	eor.w	r3, r3, #1
 800098c:	b2db      	uxtb	r3, r3
 800098e:	74fb      	strb	r3, [r7, #19]
 8000990:	7cfb      	ldrb	r3, [r7, #19]
 8000992:	f003 0301 	and.w	r3, r3, #1
 8000996:	74fb      	strb	r3, [r7, #19]
	        // Réinitialiser le code et l'index
	        memset(hold, 0, sizeof(hold));
 8000998:	2207      	movs	r2, #7
 800099a:	2100      	movs	r1, #0
 800099c:	4812      	ldr	r0, [pc, #72]	; (80009e8 <main+0x15c>)
 800099e:	f003 fbc9 	bl	8004134 <memset>
//	        SSD1306_Clear();
	        index = 0;
 80009a2:	2300      	movs	r3, #0
 80009a4:	617b      	str	r3, [r7, #20]
	      }
	      // Afficher l'état du système
	      	      SSD1306_GotoXY (0, 50);
 80009a6:	2132      	movs	r1, #50	; 0x32
 80009a8:	2000      	movs	r0, #0
 80009aa:	f000 fb0b 	bl	8000fc4 <SSD1306_GotoXY>
	      	      SSD1306_UpdateScreen();
 80009ae:	f000 fa63 	bl	8000e78 <SSD1306_UpdateScreen>
	      	      if (systemArmed) {
 80009b2:	7cfb      	ldrb	r3, [r7, #19]
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d005      	beq.n	80009c4 <main+0x138>
	      	        SSD1306_Puts ("ARMÉ", &Font_11x18, 1);
 80009b8:	2201      	movs	r2, #1
 80009ba:	4908      	ldr	r1, [pc, #32]	; (80009dc <main+0x150>)
 80009bc:	480d      	ldr	r0, [pc, #52]	; (80009f4 <main+0x168>)
 80009be:	f000 fb97 	bl	80010f0 <SSD1306_Puts>
 80009c2:	e004      	b.n	80009ce <main+0x142>
	      	        // Allumer la LED rouge
	      	      } else {
	      	        SSD1306_Puts ("NON ARMÉ", &Font_11x18, 1);
 80009c4:	2201      	movs	r2, #1
 80009c6:	4905      	ldr	r1, [pc, #20]	; (80009dc <main+0x150>)
 80009c8:	480b      	ldr	r0, [pc, #44]	; (80009f8 <main+0x16c>)
 80009ca:	f000 fb91 	bl	80010f0 <SSD1306_Puts>
	      	        // Allumer la LED verte
	      	      }
	      	      SSD1306_UpdateScreen();
 80009ce:	f000 fa53 	bl	8000e78 <SSD1306_UpdateScreen>

	      HAL_Delay (500);
 80009d2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80009d6:	f000 fe33 	bl	8001640 <HAL_Delay>
  {
 80009da:	e77f      	b.n	80008dc <main+0x50>
 80009dc:	20000000 	.word	0x20000000
 80009e0:	080041a4 	.word	0x080041a4
 80009e4:	20000030 	.word	0x20000030
 80009e8:	200000d0 	.word	0x200000d0
 80009ec:	20000088 	.word	0x20000088
 80009f0:	080041b0 	.word	0x080041b0
 80009f4:	080041b8 	.word	0x080041b8
 80009f8:	080041c0 	.word	0x080041c0

080009fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b094      	sub	sp, #80	; 0x50
 8000a00:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a02:	f107 031c 	add.w	r3, r7, #28
 8000a06:	2234      	movs	r2, #52	; 0x34
 8000a08:	2100      	movs	r1, #0
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	f003 fb92 	bl	8004134 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a10:	f107 0308 	add.w	r3, r7, #8
 8000a14:	2200      	movs	r2, #0
 8000a16:	601a      	str	r2, [r3, #0]
 8000a18:	605a      	str	r2, [r3, #4]
 8000a1a:	609a      	str	r2, [r3, #8]
 8000a1c:	60da      	str	r2, [r3, #12]
 8000a1e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a20:	2300      	movs	r3, #0
 8000a22:	607b      	str	r3, [r7, #4]
 8000a24:	4b2a      	ldr	r3, [pc, #168]	; (8000ad0 <SystemClock_Config+0xd4>)
 8000a26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a28:	4a29      	ldr	r2, [pc, #164]	; (8000ad0 <SystemClock_Config+0xd4>)
 8000a2a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a2e:	6413      	str	r3, [r2, #64]	; 0x40
 8000a30:	4b27      	ldr	r3, [pc, #156]	; (8000ad0 <SystemClock_Config+0xd4>)
 8000a32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a38:	607b      	str	r3, [r7, #4]
 8000a3a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	603b      	str	r3, [r7, #0]
 8000a40:	4b24      	ldr	r3, [pc, #144]	; (8000ad4 <SystemClock_Config+0xd8>)
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000a48:	4a22      	ldr	r2, [pc, #136]	; (8000ad4 <SystemClock_Config+0xd8>)
 8000a4a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a4e:	6013      	str	r3, [r2, #0]
 8000a50:	4b20      	ldr	r3, [pc, #128]	; (8000ad4 <SystemClock_Config+0xd8>)
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a58:	603b      	str	r3, [r7, #0]
 8000a5a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a5c:	2302      	movs	r3, #2
 8000a5e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a60:	2301      	movs	r3, #1
 8000a62:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a64:	2310      	movs	r3, #16
 8000a66:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a68:	2302      	movs	r3, #2
 8000a6a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000a70:	2310      	movs	r3, #16
 8000a72:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000a74:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000a78:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000a7a:	2304      	movs	r3, #4
 8000a7c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000a7e:	2302      	movs	r3, #2
 8000a80:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000a82:	2302      	movs	r3, #2
 8000a84:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a86:	f107 031c 	add.w	r3, r7, #28
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	f002 fa06 	bl	8002e9c <HAL_RCC_OscConfig>
 8000a90:	4603      	mov	r3, r0
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d001      	beq.n	8000a9a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000a96:	f000 f925 	bl	8000ce4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a9a:	230f      	movs	r3, #15
 8000a9c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a9e:	2302      	movs	r3, #2
 8000aa0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000aa6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000aaa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000aac:	2300      	movs	r3, #0
 8000aae:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000ab0:	f107 0308 	add.w	r3, r7, #8
 8000ab4:	2102      	movs	r1, #2
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	f001 fe74 	bl	80027a4 <HAL_RCC_ClockConfig>
 8000abc:	4603      	mov	r3, r0
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d001      	beq.n	8000ac6 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000ac2:	f000 f90f 	bl	8000ce4 <Error_Handler>
  }
}
 8000ac6:	bf00      	nop
 8000ac8:	3750      	adds	r7, #80	; 0x50
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bd80      	pop	{r7, pc}
 8000ace:	bf00      	nop
 8000ad0:	40023800 	.word	0x40023800
 8000ad4:	40007000 	.word	0x40007000

08000ad8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000adc:	4b12      	ldr	r3, [pc, #72]	; (8000b28 <MX_I2C1_Init+0x50>)
 8000ade:	4a13      	ldr	r2, [pc, #76]	; (8000b2c <MX_I2C1_Init+0x54>)
 8000ae0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000ae2:	4b11      	ldr	r3, [pc, #68]	; (8000b28 <MX_I2C1_Init+0x50>)
 8000ae4:	4a12      	ldr	r2, [pc, #72]	; (8000b30 <MX_I2C1_Init+0x58>)
 8000ae6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000ae8:	4b0f      	ldr	r3, [pc, #60]	; (8000b28 <MX_I2C1_Init+0x50>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000aee:	4b0e      	ldr	r3, [pc, #56]	; (8000b28 <MX_I2C1_Init+0x50>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000af4:	4b0c      	ldr	r3, [pc, #48]	; (8000b28 <MX_I2C1_Init+0x50>)
 8000af6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000afa:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000afc:	4b0a      	ldr	r3, [pc, #40]	; (8000b28 <MX_I2C1_Init+0x50>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000b02:	4b09      	ldr	r3, [pc, #36]	; (8000b28 <MX_I2C1_Init+0x50>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b08:	4b07      	ldr	r3, [pc, #28]	; (8000b28 <MX_I2C1_Init+0x50>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b0e:	4b06      	ldr	r3, [pc, #24]	; (8000b28 <MX_I2C1_Init+0x50>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000b14:	4804      	ldr	r0, [pc, #16]	; (8000b28 <MX_I2C1_Init+0x50>)
 8000b16:	f001 f879 	bl	8001c0c <HAL_I2C_Init>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d001      	beq.n	8000b24 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000b20:	f000 f8e0 	bl	8000ce4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000b24:	bf00      	nop
 8000b26:	bd80      	pop	{r7, pc}
 8000b28:	20000034 	.word	0x20000034
 8000b2c:	40005400 	.word	0x40005400
 8000b30:	00061a80 	.word	0x00061a80

08000b34 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b38:	4b11      	ldr	r3, [pc, #68]	; (8000b80 <MX_USART2_UART_Init+0x4c>)
 8000b3a:	4a12      	ldr	r2, [pc, #72]	; (8000b84 <MX_USART2_UART_Init+0x50>)
 8000b3c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000b3e:	4b10      	ldr	r3, [pc, #64]	; (8000b80 <MX_USART2_UART_Init+0x4c>)
 8000b40:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000b44:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b46:	4b0e      	ldr	r3, [pc, #56]	; (8000b80 <MX_USART2_UART_Init+0x4c>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b4c:	4b0c      	ldr	r3, [pc, #48]	; (8000b80 <MX_USART2_UART_Init+0x4c>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b52:	4b0b      	ldr	r3, [pc, #44]	; (8000b80 <MX_USART2_UART_Init+0x4c>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b58:	4b09      	ldr	r3, [pc, #36]	; (8000b80 <MX_USART2_UART_Init+0x4c>)
 8000b5a:	220c      	movs	r2, #12
 8000b5c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b5e:	4b08      	ldr	r3, [pc, #32]	; (8000b80 <MX_USART2_UART_Init+0x4c>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b64:	4b06      	ldr	r3, [pc, #24]	; (8000b80 <MX_USART2_UART_Init+0x4c>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b6a:	4805      	ldr	r0, [pc, #20]	; (8000b80 <MX_USART2_UART_Init+0x4c>)
 8000b6c:	f002 fed6 	bl	800391c <HAL_UART_Init>
 8000b70:	4603      	mov	r3, r0
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d001      	beq.n	8000b7a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000b76:	f000 f8b5 	bl	8000ce4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b7a:	bf00      	nop
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	bf00      	nop
 8000b80:	20000088 	.word	0x20000088
 8000b84:	40004400 	.word	0x40004400

08000b88 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b08a      	sub	sp, #40	; 0x28
 8000b8c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b8e:	f107 0314 	add.w	r3, r7, #20
 8000b92:	2200      	movs	r2, #0
 8000b94:	601a      	str	r2, [r3, #0]
 8000b96:	605a      	str	r2, [r3, #4]
 8000b98:	609a      	str	r2, [r3, #8]
 8000b9a:	60da      	str	r2, [r3, #12]
 8000b9c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	613b      	str	r3, [r7, #16]
 8000ba2:	4b43      	ldr	r3, [pc, #268]	; (8000cb0 <MX_GPIO_Init+0x128>)
 8000ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba6:	4a42      	ldr	r2, [pc, #264]	; (8000cb0 <MX_GPIO_Init+0x128>)
 8000ba8:	f043 0304 	orr.w	r3, r3, #4
 8000bac:	6313      	str	r3, [r2, #48]	; 0x30
 8000bae:	4b40      	ldr	r3, [pc, #256]	; (8000cb0 <MX_GPIO_Init+0x128>)
 8000bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb2:	f003 0304 	and.w	r3, r3, #4
 8000bb6:	613b      	str	r3, [r7, #16]
 8000bb8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000bba:	2300      	movs	r3, #0
 8000bbc:	60fb      	str	r3, [r7, #12]
 8000bbe:	4b3c      	ldr	r3, [pc, #240]	; (8000cb0 <MX_GPIO_Init+0x128>)
 8000bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc2:	4a3b      	ldr	r2, [pc, #236]	; (8000cb0 <MX_GPIO_Init+0x128>)
 8000bc4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000bc8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bca:	4b39      	ldr	r3, [pc, #228]	; (8000cb0 <MX_GPIO_Init+0x128>)
 8000bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000bd2:	60fb      	str	r3, [r7, #12]
 8000bd4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	60bb      	str	r3, [r7, #8]
 8000bda:	4b35      	ldr	r3, [pc, #212]	; (8000cb0 <MX_GPIO_Init+0x128>)
 8000bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bde:	4a34      	ldr	r2, [pc, #208]	; (8000cb0 <MX_GPIO_Init+0x128>)
 8000be0:	f043 0301 	orr.w	r3, r3, #1
 8000be4:	6313      	str	r3, [r2, #48]	; 0x30
 8000be6:	4b32      	ldr	r3, [pc, #200]	; (8000cb0 <MX_GPIO_Init+0x128>)
 8000be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bea:	f003 0301 	and.w	r3, r3, #1
 8000bee:	60bb      	str	r3, [r7, #8]
 8000bf0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	607b      	str	r3, [r7, #4]
 8000bf6:	4b2e      	ldr	r3, [pc, #184]	; (8000cb0 <MX_GPIO_Init+0x128>)
 8000bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bfa:	4a2d      	ldr	r2, [pc, #180]	; (8000cb0 <MX_GPIO_Init+0x128>)
 8000bfc:	f043 0302 	orr.w	r3, r3, #2
 8000c00:	6313      	str	r3, [r2, #48]	; 0x30
 8000c02:	4b2b      	ldr	r3, [pc, #172]	; (8000cb0 <MX_GPIO_Init+0x128>)
 8000c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c06:	f003 0302 	and.w	r3, r3, #2
 8000c0a:	607b      	str	r3, [r7, #4]
 8000c0c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000c0e:	2200      	movs	r2, #0
 8000c10:	2120      	movs	r1, #32
 8000c12:	4828      	ldr	r0, [pc, #160]	; (8000cb4 <MX_GPIO_Init+0x12c>)
 8000c14:	f000 ffc6 	bl	8001ba4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, KC0_Pin|KC3_Pin|KC1_Pin|KC2_Pin, GPIO_PIN_RESET);
 8000c18:	2200      	movs	r2, #0
 8000c1a:	f44f 6187 	mov.w	r1, #1080	; 0x438
 8000c1e:	4826      	ldr	r0, [pc, #152]	; (8000cb8 <MX_GPIO_Init+0x130>)
 8000c20:	f000 ffc0 	bl	8001ba4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000c24:	2320      	movs	r3, #32
 8000c26:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c28:	2301      	movs	r3, #1
 8000c2a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c30:	2300      	movs	r3, #0
 8000c32:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c34:	f107 0314 	add.w	r3, r7, #20
 8000c38:	4619      	mov	r1, r3
 8000c3a:	481e      	ldr	r0, [pc, #120]	; (8000cb4 <MX_GPIO_Init+0x12c>)
 8000c3c:	f000 fe06 	bl	800184c <HAL_GPIO_Init>

  /*Configure GPIO pins : KC0_Pin KC3_Pin KC1_Pin KC2_Pin */
  GPIO_InitStruct.Pin = KC0_Pin|KC3_Pin|KC1_Pin|KC2_Pin;
 8000c40:	f44f 6387 	mov.w	r3, #1080	; 0x438
 8000c44:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c46:	2301      	movs	r3, #1
 8000c48:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c52:	f107 0314 	add.w	r3, r7, #20
 8000c56:	4619      	mov	r1, r3
 8000c58:	4817      	ldr	r0, [pc, #92]	; (8000cb8 <MX_GPIO_Init+0x130>)
 8000c5a:	f000 fdf7 	bl	800184c <HAL_GPIO_Init>

  /*Configure GPIO pin : KR1_Pin */
  GPIO_InitStruct.Pin = KR1_Pin;
 8000c5e:	2380      	movs	r3, #128	; 0x80
 8000c60:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c62:	2300      	movs	r3, #0
 8000c64:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000c66:	2302      	movs	r3, #2
 8000c68:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(KR1_GPIO_Port, &GPIO_InitStruct);
 8000c6a:	f107 0314 	add.w	r3, r7, #20
 8000c6e:	4619      	mov	r1, r3
 8000c70:	4812      	ldr	r0, [pc, #72]	; (8000cbc <MX_GPIO_Init+0x134>)
 8000c72:	f000 fdeb 	bl	800184c <HAL_GPIO_Init>

  /*Configure GPIO pins : KR3_Pin KR2_Pin */
  GPIO_InitStruct.Pin = KR3_Pin|KR2_Pin;
 8000c76:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000c7a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000c80:	2302      	movs	r3, #2
 8000c82:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c84:	f107 0314 	add.w	r3, r7, #20
 8000c88:	4619      	mov	r1, r3
 8000c8a:	480a      	ldr	r0, [pc, #40]	; (8000cb4 <MX_GPIO_Init+0x12c>)
 8000c8c:	f000 fdde 	bl	800184c <HAL_GPIO_Init>

  /*Configure GPIO pin : KR0_Pin */
  GPIO_InitStruct.Pin = KR0_Pin;
 8000c90:	2340      	movs	r3, #64	; 0x40
 8000c92:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c94:	2300      	movs	r3, #0
 8000c96:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000c98:	2302      	movs	r3, #2
 8000c9a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(KR0_GPIO_Port, &GPIO_InitStruct);
 8000c9c:	f107 0314 	add.w	r3, r7, #20
 8000ca0:	4619      	mov	r1, r3
 8000ca2:	4805      	ldr	r0, [pc, #20]	; (8000cb8 <MX_GPIO_Init+0x130>)
 8000ca4:	f000 fdd2 	bl	800184c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000ca8:	bf00      	nop
 8000caa:	3728      	adds	r7, #40	; 0x28
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bd80      	pop	{r7, pc}
 8000cb0:	40023800 	.word	0x40023800
 8000cb4:	40020000 	.word	0x40020000
 8000cb8:	40020400 	.word	0x40020400
 8000cbc:	40020800 	.word	0x40020800

08000cc0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b082      	sub	sp, #8
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	4a04      	ldr	r2, [pc, #16]	; (8000ce0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000cce:	4293      	cmp	r3, r2
 8000cd0:	d101      	bne.n	8000cd6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000cd2:	f000 fc95 	bl	8001600 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000cd6:	bf00      	nop
 8000cd8:	3708      	adds	r7, #8
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	bf00      	nop
 8000ce0:	40001000 	.word	0x40001000

08000ce4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ce8:	b672      	cpsid	i
}
 8000cea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cec:	e7fe      	b.n	8000cec <Error_Handler+0x8>
	...

08000cf0 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b082      	sub	sp, #8
 8000cf4:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 8000cf6:	f000 fa21 	bl	800113c <ssd1306_I2C_Init>

	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8000cfa:	f644 6320 	movw	r3, #20000	; 0x4e20
 8000cfe:	2201      	movs	r2, #1
 8000d00:	2178      	movs	r1, #120	; 0x78
 8000d02:	485b      	ldr	r0, [pc, #364]	; (8000e70 <SSD1306_Init+0x180>)
 8000d04:	f001 f9c4 	bl	8002090 <HAL_I2C_IsDeviceReady>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d001      	beq.n	8000d12 <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	e0a9      	b.n	8000e66 <SSD1306_Init+0x176>
	}

	/* A little delay */
	uint32_t p = 2500;
 8000d12:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8000d16:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000d18:	e002      	b.n	8000d20 <SSD1306_Init+0x30>
		p--;
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	3b01      	subs	r3, #1
 8000d1e:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d1f9      	bne.n	8000d1a <SSD1306_Init+0x2a>

	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8000d26:	22ae      	movs	r2, #174	; 0xae
 8000d28:	2100      	movs	r1, #0
 8000d2a:	2078      	movs	r0, #120	; 0x78
 8000d2c:	f000 fa82 	bl	8001234 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode
 8000d30:	2220      	movs	r2, #32
 8000d32:	2100      	movs	r1, #0
 8000d34:	2078      	movs	r0, #120	; 0x78
 8000d36:	f000 fa7d 	bl	8001234 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8000d3a:	2210      	movs	r2, #16
 8000d3c:	2100      	movs	r1, #0
 8000d3e:	2078      	movs	r0, #120	; 0x78
 8000d40:	f000 fa78 	bl	8001234 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8000d44:	22b0      	movs	r2, #176	; 0xb0
 8000d46:	2100      	movs	r1, #0
 8000d48:	2078      	movs	r0, #120	; 0x78
 8000d4a:	f000 fa73 	bl	8001234 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8000d4e:	22c8      	movs	r2, #200	; 0xc8
 8000d50:	2100      	movs	r1, #0
 8000d52:	2078      	movs	r0, #120	; 0x78
 8000d54:	f000 fa6e 	bl	8001234 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8000d58:	2200      	movs	r2, #0
 8000d5a:	2100      	movs	r1, #0
 8000d5c:	2078      	movs	r0, #120	; 0x78
 8000d5e:	f000 fa69 	bl	8001234 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8000d62:	2210      	movs	r2, #16
 8000d64:	2100      	movs	r1, #0
 8000d66:	2078      	movs	r0, #120	; 0x78
 8000d68:	f000 fa64 	bl	8001234 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8000d6c:	2240      	movs	r2, #64	; 0x40
 8000d6e:	2100      	movs	r1, #0
 8000d70:	2078      	movs	r0, #120	; 0x78
 8000d72:	f000 fa5f 	bl	8001234 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8000d76:	2281      	movs	r2, #129	; 0x81
 8000d78:	2100      	movs	r1, #0
 8000d7a:	2078      	movs	r0, #120	; 0x78
 8000d7c:	f000 fa5a 	bl	8001234 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8000d80:	22ff      	movs	r2, #255	; 0xff
 8000d82:	2100      	movs	r1, #0
 8000d84:	2078      	movs	r0, #120	; 0x78
 8000d86:	f000 fa55 	bl	8001234 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8000d8a:	22a1      	movs	r2, #161	; 0xa1
 8000d8c:	2100      	movs	r1, #0
 8000d8e:	2078      	movs	r0, #120	; 0x78
 8000d90:	f000 fa50 	bl	8001234 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8000d94:	22a6      	movs	r2, #166	; 0xa6
 8000d96:	2100      	movs	r1, #0
 8000d98:	2078      	movs	r0, #120	; 0x78
 8000d9a:	f000 fa4b 	bl	8001234 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8000d9e:	22a8      	movs	r2, #168	; 0xa8
 8000da0:	2100      	movs	r1, #0
 8000da2:	2078      	movs	r0, #120	; 0x78
 8000da4:	f000 fa46 	bl	8001234 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8000da8:	223f      	movs	r2, #63	; 0x3f
 8000daa:	2100      	movs	r1, #0
 8000dac:	2078      	movs	r0, #120	; 0x78
 8000dae:	f000 fa41 	bl	8001234 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8000db2:	22a4      	movs	r2, #164	; 0xa4
 8000db4:	2100      	movs	r1, #0
 8000db6:	2078      	movs	r0, #120	; 0x78
 8000db8:	f000 fa3c 	bl	8001234 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8000dbc:	22d3      	movs	r2, #211	; 0xd3
 8000dbe:	2100      	movs	r1, #0
 8000dc0:	2078      	movs	r0, #120	; 0x78
 8000dc2:	f000 fa37 	bl	8001234 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	2100      	movs	r1, #0
 8000dca:	2078      	movs	r0, #120	; 0x78
 8000dcc:	f000 fa32 	bl	8001234 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8000dd0:	22d5      	movs	r2, #213	; 0xd5
 8000dd2:	2100      	movs	r1, #0
 8000dd4:	2078      	movs	r0, #120	; 0x78
 8000dd6:	f000 fa2d 	bl	8001234 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8000dda:	22f0      	movs	r2, #240	; 0xf0
 8000ddc:	2100      	movs	r1, #0
 8000dde:	2078      	movs	r0, #120	; 0x78
 8000de0:	f000 fa28 	bl	8001234 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8000de4:	22d9      	movs	r2, #217	; 0xd9
 8000de6:	2100      	movs	r1, #0
 8000de8:	2078      	movs	r0, #120	; 0x78
 8000dea:	f000 fa23 	bl	8001234 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8000dee:	2222      	movs	r2, #34	; 0x22
 8000df0:	2100      	movs	r1, #0
 8000df2:	2078      	movs	r0, #120	; 0x78
 8000df4:	f000 fa1e 	bl	8001234 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8000df8:	22da      	movs	r2, #218	; 0xda
 8000dfa:	2100      	movs	r1, #0
 8000dfc:	2078      	movs	r0, #120	; 0x78
 8000dfe:	f000 fa19 	bl	8001234 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8000e02:	2212      	movs	r2, #18
 8000e04:	2100      	movs	r1, #0
 8000e06:	2078      	movs	r0, #120	; 0x78
 8000e08:	f000 fa14 	bl	8001234 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8000e0c:	22db      	movs	r2, #219	; 0xdb
 8000e0e:	2100      	movs	r1, #0
 8000e10:	2078      	movs	r0, #120	; 0x78
 8000e12:	f000 fa0f 	bl	8001234 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8000e16:	2220      	movs	r2, #32
 8000e18:	2100      	movs	r1, #0
 8000e1a:	2078      	movs	r0, #120	; 0x78
 8000e1c:	f000 fa0a 	bl	8001234 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8000e20:	228d      	movs	r2, #141	; 0x8d
 8000e22:	2100      	movs	r1, #0
 8000e24:	2078      	movs	r0, #120	; 0x78
 8000e26:	f000 fa05 	bl	8001234 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8000e2a:	2214      	movs	r2, #20
 8000e2c:	2100      	movs	r1, #0
 8000e2e:	2078      	movs	r0, #120	; 0x78
 8000e30:	f000 fa00 	bl	8001234 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8000e34:	22af      	movs	r2, #175	; 0xaf
 8000e36:	2100      	movs	r1, #0
 8000e38:	2078      	movs	r0, #120	; 0x78
 8000e3a:	f000 f9fb 	bl	8001234 <ssd1306_I2C_Write>


	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8000e3e:	222e      	movs	r2, #46	; 0x2e
 8000e40:	2100      	movs	r1, #0
 8000e42:	2078      	movs	r0, #120	; 0x78
 8000e44:	f000 f9f6 	bl	8001234 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8000e48:	2000      	movs	r0, #0
 8000e4a:	f000 f843 	bl	8000ed4 <SSD1306_Fill>

	/* Update screen */
	SSD1306_UpdateScreen();
 8000e4e:	f000 f813 	bl	8000e78 <SSD1306_UpdateScreen>

	/* Set default values */
	SSD1306.CurrentX = 0;
 8000e52:	4b08      	ldr	r3, [pc, #32]	; (8000e74 <SSD1306_Init+0x184>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8000e58:	4b06      	ldr	r3, [pc, #24]	; (8000e74 <SSD1306_Init+0x184>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	805a      	strh	r2, [r3, #2]

	/* Initialized OK */
	SSD1306.Initialized = 1;
 8000e5e:	4b05      	ldr	r3, [pc, #20]	; (8000e74 <SSD1306_Init+0x184>)
 8000e60:	2201      	movs	r2, #1
 8000e62:	715a      	strb	r2, [r3, #5]

	/* Return OK */
	return 1;
 8000e64:	2301      	movs	r3, #1
}
 8000e66:	4618      	mov	r0, r3
 8000e68:	3708      	adds	r7, #8
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bd80      	pop	{r7, pc}
 8000e6e:	bf00      	nop
 8000e70:	20000034 	.word	0x20000034
 8000e74:	200004d8 	.word	0x200004d8

08000e78 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b082      	sub	sp, #8
 8000e7c:	af00      	add	r7, sp, #0
	uint8_t m;

	for (m = 0; m < 8; m++) {
 8000e7e:	2300      	movs	r3, #0
 8000e80:	71fb      	strb	r3, [r7, #7]
 8000e82:	e01d      	b.n	8000ec0 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8000e84:	79fb      	ldrb	r3, [r7, #7]
 8000e86:	3b50      	subs	r3, #80	; 0x50
 8000e88:	b2db      	uxtb	r3, r3
 8000e8a:	461a      	mov	r2, r3
 8000e8c:	2100      	movs	r1, #0
 8000e8e:	2078      	movs	r0, #120	; 0x78
 8000e90:	f000 f9d0 	bl	8001234 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8000e94:	2200      	movs	r2, #0
 8000e96:	2100      	movs	r1, #0
 8000e98:	2078      	movs	r0, #120	; 0x78
 8000e9a:	f000 f9cb 	bl	8001234 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8000e9e:	2210      	movs	r2, #16
 8000ea0:	2100      	movs	r1, #0
 8000ea2:	2078      	movs	r0, #120	; 0x78
 8000ea4:	f000 f9c6 	bl	8001234 <ssd1306_I2C_Write>

		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8000ea8:	79fb      	ldrb	r3, [r7, #7]
 8000eaa:	01db      	lsls	r3, r3, #7
 8000eac:	4a08      	ldr	r2, [pc, #32]	; (8000ed0 <SSD1306_UpdateScreen+0x58>)
 8000eae:	441a      	add	r2, r3
 8000eb0:	2380      	movs	r3, #128	; 0x80
 8000eb2:	2140      	movs	r1, #64	; 0x40
 8000eb4:	2078      	movs	r0, #120	; 0x78
 8000eb6:	f000 f957 	bl	8001168 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8000eba:	79fb      	ldrb	r3, [r7, #7]
 8000ebc:	3301      	adds	r3, #1
 8000ebe:	71fb      	strb	r3, [r7, #7]
 8000ec0:	79fb      	ldrb	r3, [r7, #7]
 8000ec2:	2b07      	cmp	r3, #7
 8000ec4:	d9de      	bls.n	8000e84 <SSD1306_UpdateScreen+0xc>
	}
}
 8000ec6:	bf00      	nop
 8000ec8:	bf00      	nop
 8000eca:	3708      	adds	r7, #8
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	bd80      	pop	{r7, pc}
 8000ed0:	200000d8 	.word	0x200000d8

08000ed4 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b082      	sub	sp, #8
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	4603      	mov	r3, r0
 8000edc:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8000ede:	79fb      	ldrb	r3, [r7, #7]
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d101      	bne.n	8000ee8 <SSD1306_Fill+0x14>
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	e000      	b.n	8000eea <SSD1306_Fill+0x16>
 8000ee8:	23ff      	movs	r3, #255	; 0xff
 8000eea:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000eee:	4619      	mov	r1, r3
 8000ef0:	4803      	ldr	r0, [pc, #12]	; (8000f00 <SSD1306_Fill+0x2c>)
 8000ef2:	f003 f91f 	bl	8004134 <memset>
}
 8000ef6:	bf00      	nop
 8000ef8:	3708      	adds	r7, #8
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	bf00      	nop
 8000f00:	200000d8 	.word	0x200000d8

08000f04 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8000f04:	b480      	push	{r7}
 8000f06:	b083      	sub	sp, #12
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	80fb      	strh	r3, [r7, #6]
 8000f0e:	460b      	mov	r3, r1
 8000f10:	80bb      	strh	r3, [r7, #4]
 8000f12:	4613      	mov	r3, r2
 8000f14:	70fb      	strb	r3, [r7, #3]
	if (
 8000f16:	88fb      	ldrh	r3, [r7, #6]
 8000f18:	2b7f      	cmp	r3, #127	; 0x7f
 8000f1a:	d848      	bhi.n	8000fae <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8000f1c:	88bb      	ldrh	r3, [r7, #4]
 8000f1e:	2b3f      	cmp	r3, #63	; 0x3f
 8000f20:	d845      	bhi.n	8000fae <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}

	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8000f22:	4b26      	ldr	r3, [pc, #152]	; (8000fbc <SSD1306_DrawPixel+0xb8>)
 8000f24:	791b      	ldrb	r3, [r3, #4]
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d006      	beq.n	8000f38 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8000f2a:	78fb      	ldrb	r3, [r7, #3]
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	bf0c      	ite	eq
 8000f30:	2301      	moveq	r3, #1
 8000f32:	2300      	movne	r3, #0
 8000f34:	b2db      	uxtb	r3, r3
 8000f36:	70fb      	strb	r3, [r7, #3]
	}

	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8000f38:	78fb      	ldrb	r3, [r7, #3]
 8000f3a:	2b01      	cmp	r3, #1
 8000f3c:	d11a      	bne.n	8000f74 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8000f3e:	88fa      	ldrh	r2, [r7, #6]
 8000f40:	88bb      	ldrh	r3, [r7, #4]
 8000f42:	08db      	lsrs	r3, r3, #3
 8000f44:	b298      	uxth	r0, r3
 8000f46:	4603      	mov	r3, r0
 8000f48:	01db      	lsls	r3, r3, #7
 8000f4a:	4413      	add	r3, r2
 8000f4c:	4a1c      	ldr	r2, [pc, #112]	; (8000fc0 <SSD1306_DrawPixel+0xbc>)
 8000f4e:	5cd3      	ldrb	r3, [r2, r3]
 8000f50:	b25a      	sxtb	r2, r3
 8000f52:	88bb      	ldrh	r3, [r7, #4]
 8000f54:	f003 0307 	and.w	r3, r3, #7
 8000f58:	2101      	movs	r1, #1
 8000f5a:	fa01 f303 	lsl.w	r3, r1, r3
 8000f5e:	b25b      	sxtb	r3, r3
 8000f60:	4313      	orrs	r3, r2
 8000f62:	b259      	sxtb	r1, r3
 8000f64:	88fa      	ldrh	r2, [r7, #6]
 8000f66:	4603      	mov	r3, r0
 8000f68:	01db      	lsls	r3, r3, #7
 8000f6a:	4413      	add	r3, r2
 8000f6c:	b2c9      	uxtb	r1, r1
 8000f6e:	4a14      	ldr	r2, [pc, #80]	; (8000fc0 <SSD1306_DrawPixel+0xbc>)
 8000f70:	54d1      	strb	r1, [r2, r3]
 8000f72:	e01d      	b.n	8000fb0 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8000f74:	88fa      	ldrh	r2, [r7, #6]
 8000f76:	88bb      	ldrh	r3, [r7, #4]
 8000f78:	08db      	lsrs	r3, r3, #3
 8000f7a:	b298      	uxth	r0, r3
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	01db      	lsls	r3, r3, #7
 8000f80:	4413      	add	r3, r2
 8000f82:	4a0f      	ldr	r2, [pc, #60]	; (8000fc0 <SSD1306_DrawPixel+0xbc>)
 8000f84:	5cd3      	ldrb	r3, [r2, r3]
 8000f86:	b25a      	sxtb	r2, r3
 8000f88:	88bb      	ldrh	r3, [r7, #4]
 8000f8a:	f003 0307 	and.w	r3, r3, #7
 8000f8e:	2101      	movs	r1, #1
 8000f90:	fa01 f303 	lsl.w	r3, r1, r3
 8000f94:	b25b      	sxtb	r3, r3
 8000f96:	43db      	mvns	r3, r3
 8000f98:	b25b      	sxtb	r3, r3
 8000f9a:	4013      	ands	r3, r2
 8000f9c:	b259      	sxtb	r1, r3
 8000f9e:	88fa      	ldrh	r2, [r7, #6]
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	01db      	lsls	r3, r3, #7
 8000fa4:	4413      	add	r3, r2
 8000fa6:	b2c9      	uxtb	r1, r1
 8000fa8:	4a05      	ldr	r2, [pc, #20]	; (8000fc0 <SSD1306_DrawPixel+0xbc>)
 8000faa:	54d1      	strb	r1, [r2, r3]
 8000fac:	e000      	b.n	8000fb0 <SSD1306_DrawPixel+0xac>
		return;
 8000fae:	bf00      	nop
	}
}
 8000fb0:	370c      	adds	r7, #12
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb8:	4770      	bx	lr
 8000fba:	bf00      	nop
 8000fbc:	200004d8 	.word	0x200004d8
 8000fc0:	200000d8 	.word	0x200000d8

08000fc4 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8000fc4:	b480      	push	{r7}
 8000fc6:	b083      	sub	sp, #12
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	4603      	mov	r3, r0
 8000fcc:	460a      	mov	r2, r1
 8000fce:	80fb      	strh	r3, [r7, #6]
 8000fd0:	4613      	mov	r3, r2
 8000fd2:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8000fd4:	4a05      	ldr	r2, [pc, #20]	; (8000fec <SSD1306_GotoXY+0x28>)
 8000fd6:	88fb      	ldrh	r3, [r7, #6]
 8000fd8:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8000fda:	4a04      	ldr	r2, [pc, #16]	; (8000fec <SSD1306_GotoXY+0x28>)
 8000fdc:	88bb      	ldrh	r3, [r7, #4]
 8000fde:	8053      	strh	r3, [r2, #2]
}
 8000fe0:	bf00      	nop
 8000fe2:	370c      	adds	r7, #12
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fea:	4770      	bx	lr
 8000fec:	200004d8 	.word	0x200004d8

08000ff0 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b086      	sub	sp, #24
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	6039      	str	r1, [r7, #0]
 8000ffa:	71fb      	strb	r3, [r7, #7]
 8000ffc:	4613      	mov	r3, r2
 8000ffe:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;

	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001000:	4b3a      	ldr	r3, [pc, #232]	; (80010ec <SSD1306_Putc+0xfc>)
 8001002:	881b      	ldrh	r3, [r3, #0]
 8001004:	461a      	mov	r2, r3
 8001006:	683b      	ldr	r3, [r7, #0]
 8001008:	781b      	ldrb	r3, [r3, #0]
 800100a:	4413      	add	r3, r2
	if (
 800100c:	2b7f      	cmp	r3, #127	; 0x7f
 800100e:	dc07      	bgt.n	8001020 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8001010:	4b36      	ldr	r3, [pc, #216]	; (80010ec <SSD1306_Putc+0xfc>)
 8001012:	885b      	ldrh	r3, [r3, #2]
 8001014:	461a      	mov	r2, r3
 8001016:	683b      	ldr	r3, [r7, #0]
 8001018:	785b      	ldrb	r3, [r3, #1]
 800101a:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 800101c:	2b3f      	cmp	r3, #63	; 0x3f
 800101e:	dd01      	ble.n	8001024 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8001020:	2300      	movs	r3, #0
 8001022:	e05e      	b.n	80010e2 <SSD1306_Putc+0xf2>
	}

	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8001024:	2300      	movs	r3, #0
 8001026:	617b      	str	r3, [r7, #20]
 8001028:	e04b      	b.n	80010c2 <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 800102a:	683b      	ldr	r3, [r7, #0]
 800102c:	685a      	ldr	r2, [r3, #4]
 800102e:	79fb      	ldrb	r3, [r7, #7]
 8001030:	3b20      	subs	r3, #32
 8001032:	6839      	ldr	r1, [r7, #0]
 8001034:	7849      	ldrb	r1, [r1, #1]
 8001036:	fb01 f303 	mul.w	r3, r1, r3
 800103a:	4619      	mov	r1, r3
 800103c:	697b      	ldr	r3, [r7, #20]
 800103e:	440b      	add	r3, r1
 8001040:	005b      	lsls	r3, r3, #1
 8001042:	4413      	add	r3, r2
 8001044:	881b      	ldrh	r3, [r3, #0]
 8001046:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8001048:	2300      	movs	r3, #0
 800104a:	613b      	str	r3, [r7, #16]
 800104c:	e030      	b.n	80010b0 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 800104e:	68fa      	ldr	r2, [r7, #12]
 8001050:	693b      	ldr	r3, [r7, #16]
 8001052:	fa02 f303 	lsl.w	r3, r2, r3
 8001056:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800105a:	2b00      	cmp	r3, #0
 800105c:	d010      	beq.n	8001080 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 800105e:	4b23      	ldr	r3, [pc, #140]	; (80010ec <SSD1306_Putc+0xfc>)
 8001060:	881a      	ldrh	r2, [r3, #0]
 8001062:	693b      	ldr	r3, [r7, #16]
 8001064:	b29b      	uxth	r3, r3
 8001066:	4413      	add	r3, r2
 8001068:	b298      	uxth	r0, r3
 800106a:	4b20      	ldr	r3, [pc, #128]	; (80010ec <SSD1306_Putc+0xfc>)
 800106c:	885a      	ldrh	r2, [r3, #2]
 800106e:	697b      	ldr	r3, [r7, #20]
 8001070:	b29b      	uxth	r3, r3
 8001072:	4413      	add	r3, r2
 8001074:	b29b      	uxth	r3, r3
 8001076:	79ba      	ldrb	r2, [r7, #6]
 8001078:	4619      	mov	r1, r3
 800107a:	f7ff ff43 	bl	8000f04 <SSD1306_DrawPixel>
 800107e:	e014      	b.n	80010aa <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8001080:	4b1a      	ldr	r3, [pc, #104]	; (80010ec <SSD1306_Putc+0xfc>)
 8001082:	881a      	ldrh	r2, [r3, #0]
 8001084:	693b      	ldr	r3, [r7, #16]
 8001086:	b29b      	uxth	r3, r3
 8001088:	4413      	add	r3, r2
 800108a:	b298      	uxth	r0, r3
 800108c:	4b17      	ldr	r3, [pc, #92]	; (80010ec <SSD1306_Putc+0xfc>)
 800108e:	885a      	ldrh	r2, [r3, #2]
 8001090:	697b      	ldr	r3, [r7, #20]
 8001092:	b29b      	uxth	r3, r3
 8001094:	4413      	add	r3, r2
 8001096:	b299      	uxth	r1, r3
 8001098:	79bb      	ldrb	r3, [r7, #6]
 800109a:	2b00      	cmp	r3, #0
 800109c:	bf0c      	ite	eq
 800109e:	2301      	moveq	r3, #1
 80010a0:	2300      	movne	r3, #0
 80010a2:	b2db      	uxtb	r3, r3
 80010a4:	461a      	mov	r2, r3
 80010a6:	f7ff ff2d 	bl	8000f04 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 80010aa:	693b      	ldr	r3, [r7, #16]
 80010ac:	3301      	adds	r3, #1
 80010ae:	613b      	str	r3, [r7, #16]
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	781b      	ldrb	r3, [r3, #0]
 80010b4:	461a      	mov	r2, r3
 80010b6:	693b      	ldr	r3, [r7, #16]
 80010b8:	4293      	cmp	r3, r2
 80010ba:	d3c8      	bcc.n	800104e <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 80010bc:	697b      	ldr	r3, [r7, #20]
 80010be:	3301      	adds	r3, #1
 80010c0:	617b      	str	r3, [r7, #20]
 80010c2:	683b      	ldr	r3, [r7, #0]
 80010c4:	785b      	ldrb	r3, [r3, #1]
 80010c6:	461a      	mov	r2, r3
 80010c8:	697b      	ldr	r3, [r7, #20]
 80010ca:	4293      	cmp	r3, r2
 80010cc:	d3ad      	bcc.n	800102a <SSD1306_Putc+0x3a>
			}
		}
	}

	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 80010ce:	4b07      	ldr	r3, [pc, #28]	; (80010ec <SSD1306_Putc+0xfc>)
 80010d0:	881a      	ldrh	r2, [r3, #0]
 80010d2:	683b      	ldr	r3, [r7, #0]
 80010d4:	781b      	ldrb	r3, [r3, #0]
 80010d6:	b29b      	uxth	r3, r3
 80010d8:	4413      	add	r3, r2
 80010da:	b29a      	uxth	r2, r3
 80010dc:	4b03      	ldr	r3, [pc, #12]	; (80010ec <SSD1306_Putc+0xfc>)
 80010de:	801a      	strh	r2, [r3, #0]

	/* Return character written */
	return ch;
 80010e0:	79fb      	ldrb	r3, [r7, #7]
}
 80010e2:	4618      	mov	r0, r3
 80010e4:	3718      	adds	r7, #24
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	200004d8 	.word	0x200004d8

080010f0 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b084      	sub	sp, #16
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	60f8      	str	r0, [r7, #12]
 80010f8:	60b9      	str	r1, [r7, #8]
 80010fa:	4613      	mov	r3, r2
 80010fc:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 80010fe:	e012      	b.n	8001126 <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	781b      	ldrb	r3, [r3, #0]
 8001104:	79fa      	ldrb	r2, [r7, #7]
 8001106:	68b9      	ldr	r1, [r7, #8]
 8001108:	4618      	mov	r0, r3
 800110a:	f7ff ff71 	bl	8000ff0 <SSD1306_Putc>
 800110e:	4603      	mov	r3, r0
 8001110:	461a      	mov	r2, r3
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	781b      	ldrb	r3, [r3, #0]
 8001116:	429a      	cmp	r2, r3
 8001118:	d002      	beq.n	8001120 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	781b      	ldrb	r3, [r3, #0]
 800111e:	e008      	b.n	8001132 <SSD1306_Puts+0x42>
		}

		/* Increase string pointer */
		str++;
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	3301      	adds	r3, #1
 8001124:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	781b      	ldrb	r3, [r3, #0]
 800112a:	2b00      	cmp	r3, #0
 800112c:	d1e8      	bne.n	8001100 <SSD1306_Puts+0x10>
	}

	/* Everything OK, zero should be returned */
	return *str;
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	781b      	ldrb	r3, [r3, #0]
}
 8001132:	4618      	mov	r0, r3
 8001134:	3710      	adds	r7, #16
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}
	...

0800113c <ssd1306_I2C_Init>:
//  _| |_ / /_| |____
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 800113c:	b480      	push	{r7}
 800113e:	b083      	sub	sp, #12
 8001140:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8001142:	4b08      	ldr	r3, [pc, #32]	; (8001164 <ssd1306_I2C_Init+0x28>)
 8001144:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001146:	e002      	b.n	800114e <ssd1306_I2C_Init+0x12>
		p--;
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	3b01      	subs	r3, #1
 800114c:	607b      	str	r3, [r7, #4]
	while(p>0)
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	2b00      	cmp	r3, #0
 8001152:	d1f9      	bne.n	8001148 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8001154:	bf00      	nop
 8001156:	bf00      	nop
 8001158:	370c      	adds	r7, #12
 800115a:	46bd      	mov	sp, r7
 800115c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001160:	4770      	bx	lr
 8001162:	bf00      	nop
 8001164:	0003d090 	.word	0x0003d090

08001168 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8001168:	b590      	push	{r4, r7, lr}
 800116a:	b0c7      	sub	sp, #284	; 0x11c
 800116c:	af02      	add	r7, sp, #8
 800116e:	4604      	mov	r4, r0
 8001170:	4608      	mov	r0, r1
 8001172:	f507 7188 	add.w	r1, r7, #272	; 0x110
 8001176:	f5a1 7188 	sub.w	r1, r1, #272	; 0x110
 800117a:	600a      	str	r2, [r1, #0]
 800117c:	4619      	mov	r1, r3
 800117e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001182:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8001186:	4622      	mov	r2, r4
 8001188:	701a      	strb	r2, [r3, #0]
 800118a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800118e:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 8001192:	4602      	mov	r2, r0
 8001194:	701a      	strb	r2, [r3, #0]
 8001196:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800119a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800119e:	460a      	mov	r2, r1
 80011a0:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 80011a2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80011a6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80011aa:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80011ae:	f5a2 7285 	sub.w	r2, r2, #266	; 0x10a
 80011b2:	7812      	ldrb	r2, [r2, #0]
 80011b4:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 80011b6:	2300      	movs	r3, #0
 80011b8:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 80011bc:	e015      	b.n	80011ea <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 80011be:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80011c2:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80011c6:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 80011ca:	6812      	ldr	r2, [r2, #0]
 80011cc:	441a      	add	r2, r3
 80011ce:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80011d2:	3301      	adds	r3, #1
 80011d4:	7811      	ldrb	r1, [r2, #0]
 80011d6:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80011da:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 80011de:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 80011e0:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80011e4:	3301      	adds	r3, #1
 80011e6:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 80011ea:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80011ee:	b29b      	uxth	r3, r3
 80011f0:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80011f4:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 80011f8:	8812      	ldrh	r2, [r2, #0]
 80011fa:	429a      	cmp	r2, r3
 80011fc:	d8df      	bhi.n	80011be <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 80011fe:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001202:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8001206:	781b      	ldrb	r3, [r3, #0]
 8001208:	b299      	uxth	r1, r3
 800120a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800120e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001212:	881b      	ldrh	r3, [r3, #0]
 8001214:	3301      	adds	r3, #1
 8001216:	b29b      	uxth	r3, r3
 8001218:	f107 020c 	add.w	r2, r7, #12
 800121c:	200a      	movs	r0, #10
 800121e:	9000      	str	r0, [sp, #0]
 8001220:	4803      	ldr	r0, [pc, #12]	; (8001230 <ssd1306_I2C_WriteMulti+0xc8>)
 8001222:	f000 fe37 	bl	8001e94 <HAL_I2C_Master_Transmit>
}
 8001226:	bf00      	nop
 8001228:	f507 778a 	add.w	r7, r7, #276	; 0x114
 800122c:	46bd      	mov	sp, r7
 800122e:	bd90      	pop	{r4, r7, pc}
 8001230:	20000034 	.word	0x20000034

08001234 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8001234:	b580      	push	{r7, lr}
 8001236:	b086      	sub	sp, #24
 8001238:	af02      	add	r7, sp, #8
 800123a:	4603      	mov	r3, r0
 800123c:	71fb      	strb	r3, [r7, #7]
 800123e:	460b      	mov	r3, r1
 8001240:	71bb      	strb	r3, [r7, #6]
 8001242:	4613      	mov	r3, r2
 8001244:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8001246:	79bb      	ldrb	r3, [r7, #6]
 8001248:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 800124a:	797b      	ldrb	r3, [r7, #5]
 800124c:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 800124e:	79fb      	ldrb	r3, [r7, #7]
 8001250:	b299      	uxth	r1, r3
 8001252:	f107 020c 	add.w	r2, r7, #12
 8001256:	230a      	movs	r3, #10
 8001258:	9300      	str	r3, [sp, #0]
 800125a:	2302      	movs	r3, #2
 800125c:	4803      	ldr	r0, [pc, #12]	; (800126c <ssd1306_I2C_Write+0x38>)
 800125e:	f000 fe19 	bl	8001e94 <HAL_I2C_Master_Transmit>
}
 8001262:	bf00      	nop
 8001264:	3710      	adds	r7, #16
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop
 800126c:	20000034 	.word	0x20000034

08001270 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b082      	sub	sp, #8
 8001274:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001276:	2300      	movs	r3, #0
 8001278:	607b      	str	r3, [r7, #4]
 800127a:	4b10      	ldr	r3, [pc, #64]	; (80012bc <HAL_MspInit+0x4c>)
 800127c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800127e:	4a0f      	ldr	r2, [pc, #60]	; (80012bc <HAL_MspInit+0x4c>)
 8001280:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001284:	6453      	str	r3, [r2, #68]	; 0x44
 8001286:	4b0d      	ldr	r3, [pc, #52]	; (80012bc <HAL_MspInit+0x4c>)
 8001288:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800128a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800128e:	607b      	str	r3, [r7, #4]
 8001290:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001292:	2300      	movs	r3, #0
 8001294:	603b      	str	r3, [r7, #0]
 8001296:	4b09      	ldr	r3, [pc, #36]	; (80012bc <HAL_MspInit+0x4c>)
 8001298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800129a:	4a08      	ldr	r2, [pc, #32]	; (80012bc <HAL_MspInit+0x4c>)
 800129c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012a0:	6413      	str	r3, [r2, #64]	; 0x40
 80012a2:	4b06      	ldr	r3, [pc, #24]	; (80012bc <HAL_MspInit+0x4c>)
 80012a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012aa:	603b      	str	r3, [r7, #0]
 80012ac:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80012ae:	2007      	movs	r0, #7
 80012b0:	f000 fa97 	bl	80017e2 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012b4:	bf00      	nop
 80012b6:	3708      	adds	r7, #8
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bd80      	pop	{r7, pc}
 80012bc:	40023800 	.word	0x40023800

080012c0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b08a      	sub	sp, #40	; 0x28
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012c8:	f107 0314 	add.w	r3, r7, #20
 80012cc:	2200      	movs	r2, #0
 80012ce:	601a      	str	r2, [r3, #0]
 80012d0:	605a      	str	r2, [r3, #4]
 80012d2:	609a      	str	r2, [r3, #8]
 80012d4:	60da      	str	r2, [r3, #12]
 80012d6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	4a19      	ldr	r2, [pc, #100]	; (8001344 <HAL_I2C_MspInit+0x84>)
 80012de:	4293      	cmp	r3, r2
 80012e0:	d12c      	bne.n	800133c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012e2:	2300      	movs	r3, #0
 80012e4:	613b      	str	r3, [r7, #16]
 80012e6:	4b18      	ldr	r3, [pc, #96]	; (8001348 <HAL_I2C_MspInit+0x88>)
 80012e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ea:	4a17      	ldr	r2, [pc, #92]	; (8001348 <HAL_I2C_MspInit+0x88>)
 80012ec:	f043 0302 	orr.w	r3, r3, #2
 80012f0:	6313      	str	r3, [r2, #48]	; 0x30
 80012f2:	4b15      	ldr	r3, [pc, #84]	; (8001348 <HAL_I2C_MspInit+0x88>)
 80012f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f6:	f003 0302 	and.w	r3, r3, #2
 80012fa:	613b      	str	r3, [r7, #16]
 80012fc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 80012fe:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001302:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001304:	2312      	movs	r3, #18
 8001306:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001308:	2300      	movs	r3, #0
 800130a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800130c:	2303      	movs	r3, #3
 800130e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001310:	2304      	movs	r3, #4
 8001312:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001314:	f107 0314 	add.w	r3, r7, #20
 8001318:	4619      	mov	r1, r3
 800131a:	480c      	ldr	r0, [pc, #48]	; (800134c <HAL_I2C_MspInit+0x8c>)
 800131c:	f000 fa96 	bl	800184c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001320:	2300      	movs	r3, #0
 8001322:	60fb      	str	r3, [r7, #12]
 8001324:	4b08      	ldr	r3, [pc, #32]	; (8001348 <HAL_I2C_MspInit+0x88>)
 8001326:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001328:	4a07      	ldr	r2, [pc, #28]	; (8001348 <HAL_I2C_MspInit+0x88>)
 800132a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800132e:	6413      	str	r3, [r2, #64]	; 0x40
 8001330:	4b05      	ldr	r3, [pc, #20]	; (8001348 <HAL_I2C_MspInit+0x88>)
 8001332:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001334:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001338:	60fb      	str	r3, [r7, #12]
 800133a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800133c:	bf00      	nop
 800133e:	3728      	adds	r7, #40	; 0x28
 8001340:	46bd      	mov	sp, r7
 8001342:	bd80      	pop	{r7, pc}
 8001344:	40005400 	.word	0x40005400
 8001348:	40023800 	.word	0x40023800
 800134c:	40020400 	.word	0x40020400

08001350 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b08a      	sub	sp, #40	; 0x28
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001358:	f107 0314 	add.w	r3, r7, #20
 800135c:	2200      	movs	r2, #0
 800135e:	601a      	str	r2, [r3, #0]
 8001360:	605a      	str	r2, [r3, #4]
 8001362:	609a      	str	r2, [r3, #8]
 8001364:	60da      	str	r2, [r3, #12]
 8001366:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	4a19      	ldr	r2, [pc, #100]	; (80013d4 <HAL_UART_MspInit+0x84>)
 800136e:	4293      	cmp	r3, r2
 8001370:	d12b      	bne.n	80013ca <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001372:	2300      	movs	r3, #0
 8001374:	613b      	str	r3, [r7, #16]
 8001376:	4b18      	ldr	r3, [pc, #96]	; (80013d8 <HAL_UART_MspInit+0x88>)
 8001378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800137a:	4a17      	ldr	r2, [pc, #92]	; (80013d8 <HAL_UART_MspInit+0x88>)
 800137c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001380:	6413      	str	r3, [r2, #64]	; 0x40
 8001382:	4b15      	ldr	r3, [pc, #84]	; (80013d8 <HAL_UART_MspInit+0x88>)
 8001384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001386:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800138a:	613b      	str	r3, [r7, #16]
 800138c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800138e:	2300      	movs	r3, #0
 8001390:	60fb      	str	r3, [r7, #12]
 8001392:	4b11      	ldr	r3, [pc, #68]	; (80013d8 <HAL_UART_MspInit+0x88>)
 8001394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001396:	4a10      	ldr	r2, [pc, #64]	; (80013d8 <HAL_UART_MspInit+0x88>)
 8001398:	f043 0301 	orr.w	r3, r3, #1
 800139c:	6313      	str	r3, [r2, #48]	; 0x30
 800139e:	4b0e      	ldr	r3, [pc, #56]	; (80013d8 <HAL_UART_MspInit+0x88>)
 80013a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013a2:	f003 0301 	and.w	r3, r3, #1
 80013a6:	60fb      	str	r3, [r7, #12]
 80013a8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80013aa:	230c      	movs	r3, #12
 80013ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ae:	2302      	movs	r3, #2
 80013b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b2:	2300      	movs	r3, #0
 80013b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013b6:	2303      	movs	r3, #3
 80013b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80013ba:	2307      	movs	r3, #7
 80013bc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013be:	f107 0314 	add.w	r3, r7, #20
 80013c2:	4619      	mov	r1, r3
 80013c4:	4805      	ldr	r0, [pc, #20]	; (80013dc <HAL_UART_MspInit+0x8c>)
 80013c6:	f000 fa41 	bl	800184c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80013ca:	bf00      	nop
 80013cc:	3728      	adds	r7, #40	; 0x28
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	40004400 	.word	0x40004400
 80013d8:	40023800 	.word	0x40023800
 80013dc:	40020000 	.word	0x40020000

080013e0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b08e      	sub	sp, #56	; 0x38
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80013e8:	2300      	movs	r3, #0
 80013ea:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80013ec:	2300      	movs	r3, #0
 80013ee:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80013f0:	2300      	movs	r3, #0
 80013f2:	60fb      	str	r3, [r7, #12]
 80013f4:	4b33      	ldr	r3, [pc, #204]	; (80014c4 <HAL_InitTick+0xe4>)
 80013f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013f8:	4a32      	ldr	r2, [pc, #200]	; (80014c4 <HAL_InitTick+0xe4>)
 80013fa:	f043 0310 	orr.w	r3, r3, #16
 80013fe:	6413      	str	r3, [r2, #64]	; 0x40
 8001400:	4b30      	ldr	r3, [pc, #192]	; (80014c4 <HAL_InitTick+0xe4>)
 8001402:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001404:	f003 0310 	and.w	r3, r3, #16
 8001408:	60fb      	str	r3, [r7, #12]
 800140a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800140c:	f107 0210 	add.w	r2, r7, #16
 8001410:	f107 0314 	add.w	r3, r7, #20
 8001414:	4611      	mov	r1, r2
 8001416:	4618      	mov	r0, r3
 8001418:	f001 fade 	bl	80029d8 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800141c:	6a3b      	ldr	r3, [r7, #32]
 800141e:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001420:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001422:	2b00      	cmp	r3, #0
 8001424:	d103      	bne.n	800142e <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001426:	f001 faaf 	bl	8002988 <HAL_RCC_GetPCLK1Freq>
 800142a:	6378      	str	r0, [r7, #52]	; 0x34
 800142c:	e004      	b.n	8001438 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800142e:	f001 faab 	bl	8002988 <HAL_RCC_GetPCLK1Freq>
 8001432:	4603      	mov	r3, r0
 8001434:	005b      	lsls	r3, r3, #1
 8001436:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001438:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800143a:	4a23      	ldr	r2, [pc, #140]	; (80014c8 <HAL_InitTick+0xe8>)
 800143c:	fba2 2303 	umull	r2, r3, r2, r3
 8001440:	0c9b      	lsrs	r3, r3, #18
 8001442:	3b01      	subs	r3, #1
 8001444:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001446:	4b21      	ldr	r3, [pc, #132]	; (80014cc <HAL_InitTick+0xec>)
 8001448:	4a21      	ldr	r2, [pc, #132]	; (80014d0 <HAL_InitTick+0xf0>)
 800144a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800144c:	4b1f      	ldr	r3, [pc, #124]	; (80014cc <HAL_InitTick+0xec>)
 800144e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001452:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001454:	4a1d      	ldr	r2, [pc, #116]	; (80014cc <HAL_InitTick+0xec>)
 8001456:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001458:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800145a:	4b1c      	ldr	r3, [pc, #112]	; (80014cc <HAL_InitTick+0xec>)
 800145c:	2200      	movs	r2, #0
 800145e:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001460:	4b1a      	ldr	r3, [pc, #104]	; (80014cc <HAL_InitTick+0xec>)
 8001462:	2200      	movs	r2, #0
 8001464:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001466:	4b19      	ldr	r3, [pc, #100]	; (80014cc <HAL_InitTick+0xec>)
 8001468:	2200      	movs	r2, #0
 800146a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 800146c:	4817      	ldr	r0, [pc, #92]	; (80014cc <HAL_InitTick+0xec>)
 800146e:	f001 ffb3 	bl	80033d8 <HAL_TIM_Base_Init>
 8001472:	4603      	mov	r3, r0
 8001474:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001478:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800147c:	2b00      	cmp	r3, #0
 800147e:	d11b      	bne.n	80014b8 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001480:	4812      	ldr	r0, [pc, #72]	; (80014cc <HAL_InitTick+0xec>)
 8001482:	f002 f803 	bl	800348c <HAL_TIM_Base_Start_IT>
 8001486:	4603      	mov	r3, r0
 8001488:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 800148c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001490:	2b00      	cmp	r3, #0
 8001492:	d111      	bne.n	80014b8 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001494:	2036      	movs	r0, #54	; 0x36
 8001496:	f000 f9cb 	bl	8001830 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	2b0f      	cmp	r3, #15
 800149e:	d808      	bhi.n	80014b2 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80014a0:	2200      	movs	r2, #0
 80014a2:	6879      	ldr	r1, [r7, #4]
 80014a4:	2036      	movs	r0, #54	; 0x36
 80014a6:	f000 f9a7 	bl	80017f8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80014aa:	4a0a      	ldr	r2, [pc, #40]	; (80014d4 <HAL_InitTick+0xf4>)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	6013      	str	r3, [r2, #0]
 80014b0:	e002      	b.n	80014b8 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 80014b2:	2301      	movs	r3, #1
 80014b4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80014b8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80014bc:	4618      	mov	r0, r3
 80014be:	3738      	adds	r7, #56	; 0x38
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bd80      	pop	{r7, pc}
 80014c4:	40023800 	.word	0x40023800
 80014c8:	431bde83 	.word	0x431bde83
 80014cc:	200004e0 	.word	0x200004e0
 80014d0:	40001000 	.word	0x40001000
 80014d4:	2000000c 	.word	0x2000000c

080014d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014d8:	b480      	push	{r7}
 80014da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80014dc:	e7fe      	b.n	80014dc <NMI_Handler+0x4>

080014de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014de:	b480      	push	{r7}
 80014e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014e2:	e7fe      	b.n	80014e2 <HardFault_Handler+0x4>

080014e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014e4:	b480      	push	{r7}
 80014e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014e8:	e7fe      	b.n	80014e8 <MemManage_Handler+0x4>

080014ea <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014ea:	b480      	push	{r7}
 80014ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014ee:	e7fe      	b.n	80014ee <BusFault_Handler+0x4>

080014f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014f0:	b480      	push	{r7}
 80014f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014f4:	e7fe      	b.n	80014f4 <UsageFault_Handler+0x4>

080014f6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014f6:	b480      	push	{r7}
 80014f8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014fa:	bf00      	nop
 80014fc:	46bd      	mov	sp, r7
 80014fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001502:	4770      	bx	lr

08001504 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001504:	b480      	push	{r7}
 8001506:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001508:	bf00      	nop
 800150a:	46bd      	mov	sp, r7
 800150c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001510:	4770      	bx	lr

08001512 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001512:	b480      	push	{r7}
 8001514:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001516:	bf00      	nop
 8001518:	46bd      	mov	sp, r7
 800151a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151e:	4770      	bx	lr

08001520 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001520:	b480      	push	{r7}
 8001522:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001524:	bf00      	nop
 8001526:	46bd      	mov	sp, r7
 8001528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152c:	4770      	bx	lr
	...

08001530 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001534:	4802      	ldr	r0, [pc, #8]	; (8001540 <TIM6_DAC_IRQHandler+0x10>)
 8001536:	f002 f819 	bl	800356c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800153a:	bf00      	nop
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop
 8001540:	200004e0 	.word	0x200004e0

08001544 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001544:	b480      	push	{r7}
 8001546:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001548:	4b06      	ldr	r3, [pc, #24]	; (8001564 <SystemInit+0x20>)
 800154a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800154e:	4a05      	ldr	r2, [pc, #20]	; (8001564 <SystemInit+0x20>)
 8001550:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001554:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001558:	bf00      	nop
 800155a:	46bd      	mov	sp, r7
 800155c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001560:	4770      	bx	lr
 8001562:	bf00      	nop
 8001564:	e000ed00 	.word	0xe000ed00

08001568 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001568:	f8df d034 	ldr.w	sp, [pc, #52]	; 80015a0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800156c:	f7ff ffea 	bl	8001544 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001570:	480c      	ldr	r0, [pc, #48]	; (80015a4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001572:	490d      	ldr	r1, [pc, #52]	; (80015a8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001574:	4a0d      	ldr	r2, [pc, #52]	; (80015ac <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001576:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001578:	e002      	b.n	8001580 <LoopCopyDataInit>

0800157a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800157a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800157c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800157e:	3304      	adds	r3, #4

08001580 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001580:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001582:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001584:	d3f9      	bcc.n	800157a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001586:	4a0a      	ldr	r2, [pc, #40]	; (80015b0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001588:	4c0a      	ldr	r4, [pc, #40]	; (80015b4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800158a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800158c:	e001      	b.n	8001592 <LoopFillZerobss>

0800158e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800158e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001590:	3204      	adds	r2, #4

08001592 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001592:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001594:	d3fb      	bcc.n	800158e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001596:	f002 fdd5 	bl	8004144 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800159a:	f7ff f977 	bl	800088c <main>
  bx  lr    
 800159e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80015a0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80015a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015a8:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 80015ac:	08004f50 	.word	0x08004f50
  ldr r2, =_sbss
 80015b0:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 80015b4:	2000052c 	.word	0x2000052c

080015b8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80015b8:	e7fe      	b.n	80015b8 <ADC_IRQHandler>
	...

080015bc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80015c0:	4b0e      	ldr	r3, [pc, #56]	; (80015fc <HAL_Init+0x40>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	4a0d      	ldr	r2, [pc, #52]	; (80015fc <HAL_Init+0x40>)
 80015c6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80015ca:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80015cc:	4b0b      	ldr	r3, [pc, #44]	; (80015fc <HAL_Init+0x40>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	4a0a      	ldr	r2, [pc, #40]	; (80015fc <HAL_Init+0x40>)
 80015d2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80015d6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015d8:	4b08      	ldr	r3, [pc, #32]	; (80015fc <HAL_Init+0x40>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	4a07      	ldr	r2, [pc, #28]	; (80015fc <HAL_Init+0x40>)
 80015de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015e2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015e4:	2003      	movs	r0, #3
 80015e6:	f000 f8fc 	bl	80017e2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80015ea:	2000      	movs	r0, #0
 80015ec:	f7ff fef8 	bl	80013e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80015f0:	f7ff fe3e 	bl	8001270 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015f4:	2300      	movs	r3, #0
}
 80015f6:	4618      	mov	r0, r3
 80015f8:	bd80      	pop	{r7, pc}
 80015fa:	bf00      	nop
 80015fc:	40023c00 	.word	0x40023c00

08001600 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001600:	b480      	push	{r7}
 8001602:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001604:	4b06      	ldr	r3, [pc, #24]	; (8001620 <HAL_IncTick+0x20>)
 8001606:	781b      	ldrb	r3, [r3, #0]
 8001608:	461a      	mov	r2, r3
 800160a:	4b06      	ldr	r3, [pc, #24]	; (8001624 <HAL_IncTick+0x24>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	4413      	add	r3, r2
 8001610:	4a04      	ldr	r2, [pc, #16]	; (8001624 <HAL_IncTick+0x24>)
 8001612:	6013      	str	r3, [r2, #0]
}
 8001614:	bf00      	nop
 8001616:	46bd      	mov	sp, r7
 8001618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161c:	4770      	bx	lr
 800161e:	bf00      	nop
 8001620:	20000010 	.word	0x20000010
 8001624:	20000528 	.word	0x20000528

08001628 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001628:	b480      	push	{r7}
 800162a:	af00      	add	r7, sp, #0
  return uwTick;
 800162c:	4b03      	ldr	r3, [pc, #12]	; (800163c <HAL_GetTick+0x14>)
 800162e:	681b      	ldr	r3, [r3, #0]
}
 8001630:	4618      	mov	r0, r3
 8001632:	46bd      	mov	sp, r7
 8001634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001638:	4770      	bx	lr
 800163a:	bf00      	nop
 800163c:	20000528 	.word	0x20000528

08001640 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b084      	sub	sp, #16
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001648:	f7ff ffee 	bl	8001628 <HAL_GetTick>
 800164c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001658:	d005      	beq.n	8001666 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800165a:	4b0a      	ldr	r3, [pc, #40]	; (8001684 <HAL_Delay+0x44>)
 800165c:	781b      	ldrb	r3, [r3, #0]
 800165e:	461a      	mov	r2, r3
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	4413      	add	r3, r2
 8001664:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001666:	bf00      	nop
 8001668:	f7ff ffde 	bl	8001628 <HAL_GetTick>
 800166c:	4602      	mov	r2, r0
 800166e:	68bb      	ldr	r3, [r7, #8]
 8001670:	1ad3      	subs	r3, r2, r3
 8001672:	68fa      	ldr	r2, [r7, #12]
 8001674:	429a      	cmp	r2, r3
 8001676:	d8f7      	bhi.n	8001668 <HAL_Delay+0x28>
  {
  }
}
 8001678:	bf00      	nop
 800167a:	bf00      	nop
 800167c:	3710      	adds	r7, #16
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop
 8001684:	20000010 	.word	0x20000010

08001688 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001688:	b480      	push	{r7}
 800168a:	b085      	sub	sp, #20
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	f003 0307 	and.w	r3, r3, #7
 8001696:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001698:	4b0c      	ldr	r3, [pc, #48]	; (80016cc <__NVIC_SetPriorityGrouping+0x44>)
 800169a:	68db      	ldr	r3, [r3, #12]
 800169c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800169e:	68ba      	ldr	r2, [r7, #8]
 80016a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80016a4:	4013      	ands	r3, r2
 80016a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016ac:	68bb      	ldr	r3, [r7, #8]
 80016ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016b0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80016b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016ba:	4a04      	ldr	r2, [pc, #16]	; (80016cc <__NVIC_SetPriorityGrouping+0x44>)
 80016bc:	68bb      	ldr	r3, [r7, #8]
 80016be:	60d3      	str	r3, [r2, #12]
}
 80016c0:	bf00      	nop
 80016c2:	3714      	adds	r7, #20
 80016c4:	46bd      	mov	sp, r7
 80016c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ca:	4770      	bx	lr
 80016cc:	e000ed00 	.word	0xe000ed00

080016d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016d0:	b480      	push	{r7}
 80016d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016d4:	4b04      	ldr	r3, [pc, #16]	; (80016e8 <__NVIC_GetPriorityGrouping+0x18>)
 80016d6:	68db      	ldr	r3, [r3, #12]
 80016d8:	0a1b      	lsrs	r3, r3, #8
 80016da:	f003 0307 	and.w	r3, r3, #7
}
 80016de:	4618      	mov	r0, r3
 80016e0:	46bd      	mov	sp, r7
 80016e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e6:	4770      	bx	lr
 80016e8:	e000ed00 	.word	0xe000ed00

080016ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016ec:	b480      	push	{r7}
 80016ee:	b083      	sub	sp, #12
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	4603      	mov	r3, r0
 80016f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	db0b      	blt.n	8001716 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016fe:	79fb      	ldrb	r3, [r7, #7]
 8001700:	f003 021f 	and.w	r2, r3, #31
 8001704:	4907      	ldr	r1, [pc, #28]	; (8001724 <__NVIC_EnableIRQ+0x38>)
 8001706:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800170a:	095b      	lsrs	r3, r3, #5
 800170c:	2001      	movs	r0, #1
 800170e:	fa00 f202 	lsl.w	r2, r0, r2
 8001712:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001716:	bf00      	nop
 8001718:	370c      	adds	r7, #12
 800171a:	46bd      	mov	sp, r7
 800171c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001720:	4770      	bx	lr
 8001722:	bf00      	nop
 8001724:	e000e100 	.word	0xe000e100

08001728 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001728:	b480      	push	{r7}
 800172a:	b083      	sub	sp, #12
 800172c:	af00      	add	r7, sp, #0
 800172e:	4603      	mov	r3, r0
 8001730:	6039      	str	r1, [r7, #0]
 8001732:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001734:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001738:	2b00      	cmp	r3, #0
 800173a:	db0a      	blt.n	8001752 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	b2da      	uxtb	r2, r3
 8001740:	490c      	ldr	r1, [pc, #48]	; (8001774 <__NVIC_SetPriority+0x4c>)
 8001742:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001746:	0112      	lsls	r2, r2, #4
 8001748:	b2d2      	uxtb	r2, r2
 800174a:	440b      	add	r3, r1
 800174c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001750:	e00a      	b.n	8001768 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001752:	683b      	ldr	r3, [r7, #0]
 8001754:	b2da      	uxtb	r2, r3
 8001756:	4908      	ldr	r1, [pc, #32]	; (8001778 <__NVIC_SetPriority+0x50>)
 8001758:	79fb      	ldrb	r3, [r7, #7]
 800175a:	f003 030f 	and.w	r3, r3, #15
 800175e:	3b04      	subs	r3, #4
 8001760:	0112      	lsls	r2, r2, #4
 8001762:	b2d2      	uxtb	r2, r2
 8001764:	440b      	add	r3, r1
 8001766:	761a      	strb	r2, [r3, #24]
}
 8001768:	bf00      	nop
 800176a:	370c      	adds	r7, #12
 800176c:	46bd      	mov	sp, r7
 800176e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001772:	4770      	bx	lr
 8001774:	e000e100 	.word	0xe000e100
 8001778:	e000ed00 	.word	0xe000ed00

0800177c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800177c:	b480      	push	{r7}
 800177e:	b089      	sub	sp, #36	; 0x24
 8001780:	af00      	add	r7, sp, #0
 8001782:	60f8      	str	r0, [r7, #12]
 8001784:	60b9      	str	r1, [r7, #8]
 8001786:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	f003 0307 	and.w	r3, r3, #7
 800178e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001790:	69fb      	ldr	r3, [r7, #28]
 8001792:	f1c3 0307 	rsb	r3, r3, #7
 8001796:	2b04      	cmp	r3, #4
 8001798:	bf28      	it	cs
 800179a:	2304      	movcs	r3, #4
 800179c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800179e:	69fb      	ldr	r3, [r7, #28]
 80017a0:	3304      	adds	r3, #4
 80017a2:	2b06      	cmp	r3, #6
 80017a4:	d902      	bls.n	80017ac <NVIC_EncodePriority+0x30>
 80017a6:	69fb      	ldr	r3, [r7, #28]
 80017a8:	3b03      	subs	r3, #3
 80017aa:	e000      	b.n	80017ae <NVIC_EncodePriority+0x32>
 80017ac:	2300      	movs	r3, #0
 80017ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017b0:	f04f 32ff 	mov.w	r2, #4294967295
 80017b4:	69bb      	ldr	r3, [r7, #24]
 80017b6:	fa02 f303 	lsl.w	r3, r2, r3
 80017ba:	43da      	mvns	r2, r3
 80017bc:	68bb      	ldr	r3, [r7, #8]
 80017be:	401a      	ands	r2, r3
 80017c0:	697b      	ldr	r3, [r7, #20]
 80017c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017c4:	f04f 31ff 	mov.w	r1, #4294967295
 80017c8:	697b      	ldr	r3, [r7, #20]
 80017ca:	fa01 f303 	lsl.w	r3, r1, r3
 80017ce:	43d9      	mvns	r1, r3
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017d4:	4313      	orrs	r3, r2
         );
}
 80017d6:	4618      	mov	r0, r3
 80017d8:	3724      	adds	r7, #36	; 0x24
 80017da:	46bd      	mov	sp, r7
 80017dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e0:	4770      	bx	lr

080017e2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017e2:	b580      	push	{r7, lr}
 80017e4:	b082      	sub	sp, #8
 80017e6:	af00      	add	r7, sp, #0
 80017e8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017ea:	6878      	ldr	r0, [r7, #4]
 80017ec:	f7ff ff4c 	bl	8001688 <__NVIC_SetPriorityGrouping>
}
 80017f0:	bf00      	nop
 80017f2:	3708      	adds	r7, #8
 80017f4:	46bd      	mov	sp, r7
 80017f6:	bd80      	pop	{r7, pc}

080017f8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b086      	sub	sp, #24
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	4603      	mov	r3, r0
 8001800:	60b9      	str	r1, [r7, #8]
 8001802:	607a      	str	r2, [r7, #4]
 8001804:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001806:	2300      	movs	r3, #0
 8001808:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800180a:	f7ff ff61 	bl	80016d0 <__NVIC_GetPriorityGrouping>
 800180e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001810:	687a      	ldr	r2, [r7, #4]
 8001812:	68b9      	ldr	r1, [r7, #8]
 8001814:	6978      	ldr	r0, [r7, #20]
 8001816:	f7ff ffb1 	bl	800177c <NVIC_EncodePriority>
 800181a:	4602      	mov	r2, r0
 800181c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001820:	4611      	mov	r1, r2
 8001822:	4618      	mov	r0, r3
 8001824:	f7ff ff80 	bl	8001728 <__NVIC_SetPriority>
}
 8001828:	bf00      	nop
 800182a:	3718      	adds	r7, #24
 800182c:	46bd      	mov	sp, r7
 800182e:	bd80      	pop	{r7, pc}

08001830 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b082      	sub	sp, #8
 8001834:	af00      	add	r7, sp, #0
 8001836:	4603      	mov	r3, r0
 8001838:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800183a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800183e:	4618      	mov	r0, r3
 8001840:	f7ff ff54 	bl	80016ec <__NVIC_EnableIRQ>
}
 8001844:	bf00      	nop
 8001846:	3708      	adds	r7, #8
 8001848:	46bd      	mov	sp, r7
 800184a:	bd80      	pop	{r7, pc}

0800184c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800184c:	b480      	push	{r7}
 800184e:	b089      	sub	sp, #36	; 0x24
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
 8001854:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001856:	2300      	movs	r3, #0
 8001858:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800185a:	2300      	movs	r3, #0
 800185c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800185e:	2300      	movs	r3, #0
 8001860:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001862:	2300      	movs	r3, #0
 8001864:	61fb      	str	r3, [r7, #28]
 8001866:	e165      	b.n	8001b34 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001868:	2201      	movs	r2, #1
 800186a:	69fb      	ldr	r3, [r7, #28]
 800186c:	fa02 f303 	lsl.w	r3, r2, r3
 8001870:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001872:	683b      	ldr	r3, [r7, #0]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	697a      	ldr	r2, [r7, #20]
 8001878:	4013      	ands	r3, r2
 800187a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800187c:	693a      	ldr	r2, [r7, #16]
 800187e:	697b      	ldr	r3, [r7, #20]
 8001880:	429a      	cmp	r2, r3
 8001882:	f040 8154 	bne.w	8001b2e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	685b      	ldr	r3, [r3, #4]
 800188a:	f003 0303 	and.w	r3, r3, #3
 800188e:	2b01      	cmp	r3, #1
 8001890:	d005      	beq.n	800189e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	685b      	ldr	r3, [r3, #4]
 8001896:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800189a:	2b02      	cmp	r3, #2
 800189c:	d130      	bne.n	8001900 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	689b      	ldr	r3, [r3, #8]
 80018a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80018a4:	69fb      	ldr	r3, [r7, #28]
 80018a6:	005b      	lsls	r3, r3, #1
 80018a8:	2203      	movs	r2, #3
 80018aa:	fa02 f303 	lsl.w	r3, r2, r3
 80018ae:	43db      	mvns	r3, r3
 80018b0:	69ba      	ldr	r2, [r7, #24]
 80018b2:	4013      	ands	r3, r2
 80018b4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	68da      	ldr	r2, [r3, #12]
 80018ba:	69fb      	ldr	r3, [r7, #28]
 80018bc:	005b      	lsls	r3, r3, #1
 80018be:	fa02 f303 	lsl.w	r3, r2, r3
 80018c2:	69ba      	ldr	r2, [r7, #24]
 80018c4:	4313      	orrs	r3, r2
 80018c6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	69ba      	ldr	r2, [r7, #24]
 80018cc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	685b      	ldr	r3, [r3, #4]
 80018d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80018d4:	2201      	movs	r2, #1
 80018d6:	69fb      	ldr	r3, [r7, #28]
 80018d8:	fa02 f303 	lsl.w	r3, r2, r3
 80018dc:	43db      	mvns	r3, r3
 80018de:	69ba      	ldr	r2, [r7, #24]
 80018e0:	4013      	ands	r3, r2
 80018e2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	685b      	ldr	r3, [r3, #4]
 80018e8:	091b      	lsrs	r3, r3, #4
 80018ea:	f003 0201 	and.w	r2, r3, #1
 80018ee:	69fb      	ldr	r3, [r7, #28]
 80018f0:	fa02 f303 	lsl.w	r3, r2, r3
 80018f4:	69ba      	ldr	r2, [r7, #24]
 80018f6:	4313      	orrs	r3, r2
 80018f8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	69ba      	ldr	r2, [r7, #24]
 80018fe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001900:	683b      	ldr	r3, [r7, #0]
 8001902:	685b      	ldr	r3, [r3, #4]
 8001904:	f003 0303 	and.w	r3, r3, #3
 8001908:	2b03      	cmp	r3, #3
 800190a:	d017      	beq.n	800193c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	68db      	ldr	r3, [r3, #12]
 8001910:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001912:	69fb      	ldr	r3, [r7, #28]
 8001914:	005b      	lsls	r3, r3, #1
 8001916:	2203      	movs	r2, #3
 8001918:	fa02 f303 	lsl.w	r3, r2, r3
 800191c:	43db      	mvns	r3, r3
 800191e:	69ba      	ldr	r2, [r7, #24]
 8001920:	4013      	ands	r3, r2
 8001922:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	689a      	ldr	r2, [r3, #8]
 8001928:	69fb      	ldr	r3, [r7, #28]
 800192a:	005b      	lsls	r3, r3, #1
 800192c:	fa02 f303 	lsl.w	r3, r2, r3
 8001930:	69ba      	ldr	r2, [r7, #24]
 8001932:	4313      	orrs	r3, r2
 8001934:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	69ba      	ldr	r2, [r7, #24]
 800193a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	685b      	ldr	r3, [r3, #4]
 8001940:	f003 0303 	and.w	r3, r3, #3
 8001944:	2b02      	cmp	r3, #2
 8001946:	d123      	bne.n	8001990 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001948:	69fb      	ldr	r3, [r7, #28]
 800194a:	08da      	lsrs	r2, r3, #3
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	3208      	adds	r2, #8
 8001950:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001954:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001956:	69fb      	ldr	r3, [r7, #28]
 8001958:	f003 0307 	and.w	r3, r3, #7
 800195c:	009b      	lsls	r3, r3, #2
 800195e:	220f      	movs	r2, #15
 8001960:	fa02 f303 	lsl.w	r3, r2, r3
 8001964:	43db      	mvns	r3, r3
 8001966:	69ba      	ldr	r2, [r7, #24]
 8001968:	4013      	ands	r3, r2
 800196a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	691a      	ldr	r2, [r3, #16]
 8001970:	69fb      	ldr	r3, [r7, #28]
 8001972:	f003 0307 	and.w	r3, r3, #7
 8001976:	009b      	lsls	r3, r3, #2
 8001978:	fa02 f303 	lsl.w	r3, r2, r3
 800197c:	69ba      	ldr	r2, [r7, #24]
 800197e:	4313      	orrs	r3, r2
 8001980:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001982:	69fb      	ldr	r3, [r7, #28]
 8001984:	08da      	lsrs	r2, r3, #3
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	3208      	adds	r2, #8
 800198a:	69b9      	ldr	r1, [r7, #24]
 800198c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001996:	69fb      	ldr	r3, [r7, #28]
 8001998:	005b      	lsls	r3, r3, #1
 800199a:	2203      	movs	r2, #3
 800199c:	fa02 f303 	lsl.w	r3, r2, r3
 80019a0:	43db      	mvns	r3, r3
 80019a2:	69ba      	ldr	r2, [r7, #24]
 80019a4:	4013      	ands	r3, r2
 80019a6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	685b      	ldr	r3, [r3, #4]
 80019ac:	f003 0203 	and.w	r2, r3, #3
 80019b0:	69fb      	ldr	r3, [r7, #28]
 80019b2:	005b      	lsls	r3, r3, #1
 80019b4:	fa02 f303 	lsl.w	r3, r2, r3
 80019b8:	69ba      	ldr	r2, [r7, #24]
 80019ba:	4313      	orrs	r3, r2
 80019bc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	69ba      	ldr	r2, [r7, #24]
 80019c2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	685b      	ldr	r3, [r3, #4]
 80019c8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	f000 80ae 	beq.w	8001b2e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019d2:	2300      	movs	r3, #0
 80019d4:	60fb      	str	r3, [r7, #12]
 80019d6:	4b5d      	ldr	r3, [pc, #372]	; (8001b4c <HAL_GPIO_Init+0x300>)
 80019d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019da:	4a5c      	ldr	r2, [pc, #368]	; (8001b4c <HAL_GPIO_Init+0x300>)
 80019dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019e0:	6453      	str	r3, [r2, #68]	; 0x44
 80019e2:	4b5a      	ldr	r3, [pc, #360]	; (8001b4c <HAL_GPIO_Init+0x300>)
 80019e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019ea:	60fb      	str	r3, [r7, #12]
 80019ec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80019ee:	4a58      	ldr	r2, [pc, #352]	; (8001b50 <HAL_GPIO_Init+0x304>)
 80019f0:	69fb      	ldr	r3, [r7, #28]
 80019f2:	089b      	lsrs	r3, r3, #2
 80019f4:	3302      	adds	r3, #2
 80019f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80019fc:	69fb      	ldr	r3, [r7, #28]
 80019fe:	f003 0303 	and.w	r3, r3, #3
 8001a02:	009b      	lsls	r3, r3, #2
 8001a04:	220f      	movs	r2, #15
 8001a06:	fa02 f303 	lsl.w	r3, r2, r3
 8001a0a:	43db      	mvns	r3, r3
 8001a0c:	69ba      	ldr	r2, [r7, #24]
 8001a0e:	4013      	ands	r3, r2
 8001a10:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	4a4f      	ldr	r2, [pc, #316]	; (8001b54 <HAL_GPIO_Init+0x308>)
 8001a16:	4293      	cmp	r3, r2
 8001a18:	d025      	beq.n	8001a66 <HAL_GPIO_Init+0x21a>
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	4a4e      	ldr	r2, [pc, #312]	; (8001b58 <HAL_GPIO_Init+0x30c>)
 8001a1e:	4293      	cmp	r3, r2
 8001a20:	d01f      	beq.n	8001a62 <HAL_GPIO_Init+0x216>
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	4a4d      	ldr	r2, [pc, #308]	; (8001b5c <HAL_GPIO_Init+0x310>)
 8001a26:	4293      	cmp	r3, r2
 8001a28:	d019      	beq.n	8001a5e <HAL_GPIO_Init+0x212>
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	4a4c      	ldr	r2, [pc, #304]	; (8001b60 <HAL_GPIO_Init+0x314>)
 8001a2e:	4293      	cmp	r3, r2
 8001a30:	d013      	beq.n	8001a5a <HAL_GPIO_Init+0x20e>
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	4a4b      	ldr	r2, [pc, #300]	; (8001b64 <HAL_GPIO_Init+0x318>)
 8001a36:	4293      	cmp	r3, r2
 8001a38:	d00d      	beq.n	8001a56 <HAL_GPIO_Init+0x20a>
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	4a4a      	ldr	r2, [pc, #296]	; (8001b68 <HAL_GPIO_Init+0x31c>)
 8001a3e:	4293      	cmp	r3, r2
 8001a40:	d007      	beq.n	8001a52 <HAL_GPIO_Init+0x206>
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	4a49      	ldr	r2, [pc, #292]	; (8001b6c <HAL_GPIO_Init+0x320>)
 8001a46:	4293      	cmp	r3, r2
 8001a48:	d101      	bne.n	8001a4e <HAL_GPIO_Init+0x202>
 8001a4a:	2306      	movs	r3, #6
 8001a4c:	e00c      	b.n	8001a68 <HAL_GPIO_Init+0x21c>
 8001a4e:	2307      	movs	r3, #7
 8001a50:	e00a      	b.n	8001a68 <HAL_GPIO_Init+0x21c>
 8001a52:	2305      	movs	r3, #5
 8001a54:	e008      	b.n	8001a68 <HAL_GPIO_Init+0x21c>
 8001a56:	2304      	movs	r3, #4
 8001a58:	e006      	b.n	8001a68 <HAL_GPIO_Init+0x21c>
 8001a5a:	2303      	movs	r3, #3
 8001a5c:	e004      	b.n	8001a68 <HAL_GPIO_Init+0x21c>
 8001a5e:	2302      	movs	r3, #2
 8001a60:	e002      	b.n	8001a68 <HAL_GPIO_Init+0x21c>
 8001a62:	2301      	movs	r3, #1
 8001a64:	e000      	b.n	8001a68 <HAL_GPIO_Init+0x21c>
 8001a66:	2300      	movs	r3, #0
 8001a68:	69fa      	ldr	r2, [r7, #28]
 8001a6a:	f002 0203 	and.w	r2, r2, #3
 8001a6e:	0092      	lsls	r2, r2, #2
 8001a70:	4093      	lsls	r3, r2
 8001a72:	69ba      	ldr	r2, [r7, #24]
 8001a74:	4313      	orrs	r3, r2
 8001a76:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001a78:	4935      	ldr	r1, [pc, #212]	; (8001b50 <HAL_GPIO_Init+0x304>)
 8001a7a:	69fb      	ldr	r3, [r7, #28]
 8001a7c:	089b      	lsrs	r3, r3, #2
 8001a7e:	3302      	adds	r3, #2
 8001a80:	69ba      	ldr	r2, [r7, #24]
 8001a82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a86:	4b3a      	ldr	r3, [pc, #232]	; (8001b70 <HAL_GPIO_Init+0x324>)
 8001a88:	689b      	ldr	r3, [r3, #8]
 8001a8a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a8c:	693b      	ldr	r3, [r7, #16]
 8001a8e:	43db      	mvns	r3, r3
 8001a90:	69ba      	ldr	r2, [r7, #24]
 8001a92:	4013      	ands	r3, r2
 8001a94:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	685b      	ldr	r3, [r3, #4]
 8001a9a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d003      	beq.n	8001aaa <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001aa2:	69ba      	ldr	r2, [r7, #24]
 8001aa4:	693b      	ldr	r3, [r7, #16]
 8001aa6:	4313      	orrs	r3, r2
 8001aa8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001aaa:	4a31      	ldr	r2, [pc, #196]	; (8001b70 <HAL_GPIO_Init+0x324>)
 8001aac:	69bb      	ldr	r3, [r7, #24]
 8001aae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ab0:	4b2f      	ldr	r3, [pc, #188]	; (8001b70 <HAL_GPIO_Init+0x324>)
 8001ab2:	68db      	ldr	r3, [r3, #12]
 8001ab4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ab6:	693b      	ldr	r3, [r7, #16]
 8001ab8:	43db      	mvns	r3, r3
 8001aba:	69ba      	ldr	r2, [r7, #24]
 8001abc:	4013      	ands	r3, r2
 8001abe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	685b      	ldr	r3, [r3, #4]
 8001ac4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d003      	beq.n	8001ad4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001acc:	69ba      	ldr	r2, [r7, #24]
 8001ace:	693b      	ldr	r3, [r7, #16]
 8001ad0:	4313      	orrs	r3, r2
 8001ad2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001ad4:	4a26      	ldr	r2, [pc, #152]	; (8001b70 <HAL_GPIO_Init+0x324>)
 8001ad6:	69bb      	ldr	r3, [r7, #24]
 8001ad8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001ada:	4b25      	ldr	r3, [pc, #148]	; (8001b70 <HAL_GPIO_Init+0x324>)
 8001adc:	685b      	ldr	r3, [r3, #4]
 8001ade:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ae0:	693b      	ldr	r3, [r7, #16]
 8001ae2:	43db      	mvns	r3, r3
 8001ae4:	69ba      	ldr	r2, [r7, #24]
 8001ae6:	4013      	ands	r3, r2
 8001ae8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	685b      	ldr	r3, [r3, #4]
 8001aee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d003      	beq.n	8001afe <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001af6:	69ba      	ldr	r2, [r7, #24]
 8001af8:	693b      	ldr	r3, [r7, #16]
 8001afa:	4313      	orrs	r3, r2
 8001afc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001afe:	4a1c      	ldr	r2, [pc, #112]	; (8001b70 <HAL_GPIO_Init+0x324>)
 8001b00:	69bb      	ldr	r3, [r7, #24]
 8001b02:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b04:	4b1a      	ldr	r3, [pc, #104]	; (8001b70 <HAL_GPIO_Init+0x324>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b0a:	693b      	ldr	r3, [r7, #16]
 8001b0c:	43db      	mvns	r3, r3
 8001b0e:	69ba      	ldr	r2, [r7, #24]
 8001b10:	4013      	ands	r3, r2
 8001b12:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d003      	beq.n	8001b28 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001b20:	69ba      	ldr	r2, [r7, #24]
 8001b22:	693b      	ldr	r3, [r7, #16]
 8001b24:	4313      	orrs	r3, r2
 8001b26:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001b28:	4a11      	ldr	r2, [pc, #68]	; (8001b70 <HAL_GPIO_Init+0x324>)
 8001b2a:	69bb      	ldr	r3, [r7, #24]
 8001b2c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b2e:	69fb      	ldr	r3, [r7, #28]
 8001b30:	3301      	adds	r3, #1
 8001b32:	61fb      	str	r3, [r7, #28]
 8001b34:	69fb      	ldr	r3, [r7, #28]
 8001b36:	2b0f      	cmp	r3, #15
 8001b38:	f67f ae96 	bls.w	8001868 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001b3c:	bf00      	nop
 8001b3e:	bf00      	nop
 8001b40:	3724      	adds	r7, #36	; 0x24
 8001b42:	46bd      	mov	sp, r7
 8001b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b48:	4770      	bx	lr
 8001b4a:	bf00      	nop
 8001b4c:	40023800 	.word	0x40023800
 8001b50:	40013800 	.word	0x40013800
 8001b54:	40020000 	.word	0x40020000
 8001b58:	40020400 	.word	0x40020400
 8001b5c:	40020800 	.word	0x40020800
 8001b60:	40020c00 	.word	0x40020c00
 8001b64:	40021000 	.word	0x40021000
 8001b68:	40021400 	.word	0x40021400
 8001b6c:	40021800 	.word	0x40021800
 8001b70:	40013c00 	.word	0x40013c00

08001b74 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001b74:	b480      	push	{r7}
 8001b76:	b085      	sub	sp, #20
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
 8001b7c:	460b      	mov	r3, r1
 8001b7e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	691a      	ldr	r2, [r3, #16]
 8001b84:	887b      	ldrh	r3, [r7, #2]
 8001b86:	4013      	ands	r3, r2
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d002      	beq.n	8001b92 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001b8c:	2301      	movs	r3, #1
 8001b8e:	73fb      	strb	r3, [r7, #15]
 8001b90:	e001      	b.n	8001b96 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001b92:	2300      	movs	r3, #0
 8001b94:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001b96:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b98:	4618      	mov	r0, r3
 8001b9a:	3714      	adds	r7, #20
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba2:	4770      	bx	lr

08001ba4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	b083      	sub	sp, #12
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
 8001bac:	460b      	mov	r3, r1
 8001bae:	807b      	strh	r3, [r7, #2]
 8001bb0:	4613      	mov	r3, r2
 8001bb2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001bb4:	787b      	ldrb	r3, [r7, #1]
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d003      	beq.n	8001bc2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001bba:	887a      	ldrh	r2, [r7, #2]
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001bc0:	e003      	b.n	8001bca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001bc2:	887b      	ldrh	r3, [r7, #2]
 8001bc4:	041a      	lsls	r2, r3, #16
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	619a      	str	r2, [r3, #24]
}
 8001bca:	bf00      	nop
 8001bcc:	370c      	adds	r7, #12
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd4:	4770      	bx	lr

08001bd6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001bd6:	b480      	push	{r7}
 8001bd8:	b085      	sub	sp, #20
 8001bda:	af00      	add	r7, sp, #0
 8001bdc:	6078      	str	r0, [r7, #4]
 8001bde:	460b      	mov	r3, r1
 8001be0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	695b      	ldr	r3, [r3, #20]
 8001be6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001be8:	887a      	ldrh	r2, [r7, #2]
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	4013      	ands	r3, r2
 8001bee:	041a      	lsls	r2, r3, #16
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	43d9      	mvns	r1, r3
 8001bf4:	887b      	ldrh	r3, [r7, #2]
 8001bf6:	400b      	ands	r3, r1
 8001bf8:	431a      	orrs	r2, r3
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	619a      	str	r2, [r3, #24]
}
 8001bfe:	bf00      	nop
 8001c00:	3714      	adds	r7, #20
 8001c02:	46bd      	mov	sp, r7
 8001c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c08:	4770      	bx	lr
	...

08001c0c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b084      	sub	sp, #16
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d101      	bne.n	8001c1e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	e12b      	b.n	8001e76 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c24:	b2db      	uxtb	r3, r3
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d106      	bne.n	8001c38 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001c32:	6878      	ldr	r0, [r7, #4]
 8001c34:	f7ff fb44 	bl	80012c0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	2224      	movs	r2, #36	; 0x24
 8001c3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	681a      	ldr	r2, [r3, #0]
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f022 0201 	bic.w	r2, r2, #1
 8001c4e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	681a      	ldr	r2, [r3, #0]
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001c5e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	681a      	ldr	r2, [r3, #0]
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001c6e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001c70:	f000 fe8a 	bl	8002988 <HAL_RCC_GetPCLK1Freq>
 8001c74:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	685b      	ldr	r3, [r3, #4]
 8001c7a:	4a81      	ldr	r2, [pc, #516]	; (8001e80 <HAL_I2C_Init+0x274>)
 8001c7c:	4293      	cmp	r3, r2
 8001c7e:	d807      	bhi.n	8001c90 <HAL_I2C_Init+0x84>
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	4a80      	ldr	r2, [pc, #512]	; (8001e84 <HAL_I2C_Init+0x278>)
 8001c84:	4293      	cmp	r3, r2
 8001c86:	bf94      	ite	ls
 8001c88:	2301      	movls	r3, #1
 8001c8a:	2300      	movhi	r3, #0
 8001c8c:	b2db      	uxtb	r3, r3
 8001c8e:	e006      	b.n	8001c9e <HAL_I2C_Init+0x92>
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	4a7d      	ldr	r2, [pc, #500]	; (8001e88 <HAL_I2C_Init+0x27c>)
 8001c94:	4293      	cmp	r3, r2
 8001c96:	bf94      	ite	ls
 8001c98:	2301      	movls	r3, #1
 8001c9a:	2300      	movhi	r3, #0
 8001c9c:	b2db      	uxtb	r3, r3
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d001      	beq.n	8001ca6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	e0e7      	b.n	8001e76 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	4a78      	ldr	r2, [pc, #480]	; (8001e8c <HAL_I2C_Init+0x280>)
 8001caa:	fba2 2303 	umull	r2, r3, r2, r3
 8001cae:	0c9b      	lsrs	r3, r3, #18
 8001cb0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	685b      	ldr	r3, [r3, #4]
 8001cb8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	68ba      	ldr	r2, [r7, #8]
 8001cc2:	430a      	orrs	r2, r1
 8001cc4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	6a1b      	ldr	r3, [r3, #32]
 8001ccc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	685b      	ldr	r3, [r3, #4]
 8001cd4:	4a6a      	ldr	r2, [pc, #424]	; (8001e80 <HAL_I2C_Init+0x274>)
 8001cd6:	4293      	cmp	r3, r2
 8001cd8:	d802      	bhi.n	8001ce0 <HAL_I2C_Init+0xd4>
 8001cda:	68bb      	ldr	r3, [r7, #8]
 8001cdc:	3301      	adds	r3, #1
 8001cde:	e009      	b.n	8001cf4 <HAL_I2C_Init+0xe8>
 8001ce0:	68bb      	ldr	r3, [r7, #8]
 8001ce2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001ce6:	fb02 f303 	mul.w	r3, r2, r3
 8001cea:	4a69      	ldr	r2, [pc, #420]	; (8001e90 <HAL_I2C_Init+0x284>)
 8001cec:	fba2 2303 	umull	r2, r3, r2, r3
 8001cf0:	099b      	lsrs	r3, r3, #6
 8001cf2:	3301      	adds	r3, #1
 8001cf4:	687a      	ldr	r2, [r7, #4]
 8001cf6:	6812      	ldr	r2, [r2, #0]
 8001cf8:	430b      	orrs	r3, r1
 8001cfa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	69db      	ldr	r3, [r3, #28]
 8001d02:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001d06:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	685b      	ldr	r3, [r3, #4]
 8001d0e:	495c      	ldr	r1, [pc, #368]	; (8001e80 <HAL_I2C_Init+0x274>)
 8001d10:	428b      	cmp	r3, r1
 8001d12:	d819      	bhi.n	8001d48 <HAL_I2C_Init+0x13c>
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	1e59      	subs	r1, r3, #1
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	685b      	ldr	r3, [r3, #4]
 8001d1c:	005b      	lsls	r3, r3, #1
 8001d1e:	fbb1 f3f3 	udiv	r3, r1, r3
 8001d22:	1c59      	adds	r1, r3, #1
 8001d24:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001d28:	400b      	ands	r3, r1
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d00a      	beq.n	8001d44 <HAL_I2C_Init+0x138>
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	1e59      	subs	r1, r3, #1
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	685b      	ldr	r3, [r3, #4]
 8001d36:	005b      	lsls	r3, r3, #1
 8001d38:	fbb1 f3f3 	udiv	r3, r1, r3
 8001d3c:	3301      	adds	r3, #1
 8001d3e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d42:	e051      	b.n	8001de8 <HAL_I2C_Init+0x1dc>
 8001d44:	2304      	movs	r3, #4
 8001d46:	e04f      	b.n	8001de8 <HAL_I2C_Init+0x1dc>
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	689b      	ldr	r3, [r3, #8]
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d111      	bne.n	8001d74 <HAL_I2C_Init+0x168>
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	1e58      	subs	r0, r3, #1
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	6859      	ldr	r1, [r3, #4]
 8001d58:	460b      	mov	r3, r1
 8001d5a:	005b      	lsls	r3, r3, #1
 8001d5c:	440b      	add	r3, r1
 8001d5e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d62:	3301      	adds	r3, #1
 8001d64:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	bf0c      	ite	eq
 8001d6c:	2301      	moveq	r3, #1
 8001d6e:	2300      	movne	r3, #0
 8001d70:	b2db      	uxtb	r3, r3
 8001d72:	e012      	b.n	8001d9a <HAL_I2C_Init+0x18e>
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	1e58      	subs	r0, r3, #1
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	6859      	ldr	r1, [r3, #4]
 8001d7c:	460b      	mov	r3, r1
 8001d7e:	009b      	lsls	r3, r3, #2
 8001d80:	440b      	add	r3, r1
 8001d82:	0099      	lsls	r1, r3, #2
 8001d84:	440b      	add	r3, r1
 8001d86:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d8a:	3301      	adds	r3, #1
 8001d8c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	bf0c      	ite	eq
 8001d94:	2301      	moveq	r3, #1
 8001d96:	2300      	movne	r3, #0
 8001d98:	b2db      	uxtb	r3, r3
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d001      	beq.n	8001da2 <HAL_I2C_Init+0x196>
 8001d9e:	2301      	movs	r3, #1
 8001da0:	e022      	b.n	8001de8 <HAL_I2C_Init+0x1dc>
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	689b      	ldr	r3, [r3, #8]
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d10e      	bne.n	8001dc8 <HAL_I2C_Init+0x1bc>
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	1e58      	subs	r0, r3, #1
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	6859      	ldr	r1, [r3, #4]
 8001db2:	460b      	mov	r3, r1
 8001db4:	005b      	lsls	r3, r3, #1
 8001db6:	440b      	add	r3, r1
 8001db8:	fbb0 f3f3 	udiv	r3, r0, r3
 8001dbc:	3301      	adds	r3, #1
 8001dbe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001dc2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001dc6:	e00f      	b.n	8001de8 <HAL_I2C_Init+0x1dc>
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	1e58      	subs	r0, r3, #1
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	6859      	ldr	r1, [r3, #4]
 8001dd0:	460b      	mov	r3, r1
 8001dd2:	009b      	lsls	r3, r3, #2
 8001dd4:	440b      	add	r3, r1
 8001dd6:	0099      	lsls	r1, r3, #2
 8001dd8:	440b      	add	r3, r1
 8001dda:	fbb0 f3f3 	udiv	r3, r0, r3
 8001dde:	3301      	adds	r3, #1
 8001de0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001de4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001de8:	6879      	ldr	r1, [r7, #4]
 8001dea:	6809      	ldr	r1, [r1, #0]
 8001dec:	4313      	orrs	r3, r2
 8001dee:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	69da      	ldr	r2, [r3, #28]
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	6a1b      	ldr	r3, [r3, #32]
 8001e02:	431a      	orrs	r2, r3
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	430a      	orrs	r2, r1
 8001e0a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	689b      	ldr	r3, [r3, #8]
 8001e12:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001e16:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001e1a:	687a      	ldr	r2, [r7, #4]
 8001e1c:	6911      	ldr	r1, [r2, #16]
 8001e1e:	687a      	ldr	r2, [r7, #4]
 8001e20:	68d2      	ldr	r2, [r2, #12]
 8001e22:	4311      	orrs	r1, r2
 8001e24:	687a      	ldr	r2, [r7, #4]
 8001e26:	6812      	ldr	r2, [r2, #0]
 8001e28:	430b      	orrs	r3, r1
 8001e2a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	68db      	ldr	r3, [r3, #12]
 8001e32:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	695a      	ldr	r2, [r3, #20]
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	699b      	ldr	r3, [r3, #24]
 8001e3e:	431a      	orrs	r2, r3
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	430a      	orrs	r2, r1
 8001e46:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	681a      	ldr	r2, [r3, #0]
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f042 0201 	orr.w	r2, r2, #1
 8001e56:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	2220      	movs	r2, #32
 8001e62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	2200      	movs	r2, #0
 8001e6a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2200      	movs	r2, #0
 8001e70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001e74:	2300      	movs	r3, #0
}
 8001e76:	4618      	mov	r0, r3
 8001e78:	3710      	adds	r7, #16
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bd80      	pop	{r7, pc}
 8001e7e:	bf00      	nop
 8001e80:	000186a0 	.word	0x000186a0
 8001e84:	001e847f 	.word	0x001e847f
 8001e88:	003d08ff 	.word	0x003d08ff
 8001e8c:	431bde83 	.word	0x431bde83
 8001e90:	10624dd3 	.word	0x10624dd3

08001e94 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b088      	sub	sp, #32
 8001e98:	af02      	add	r7, sp, #8
 8001e9a:	60f8      	str	r0, [r7, #12]
 8001e9c:	607a      	str	r2, [r7, #4]
 8001e9e:	461a      	mov	r2, r3
 8001ea0:	460b      	mov	r3, r1
 8001ea2:	817b      	strh	r3, [r7, #10]
 8001ea4:	4613      	mov	r3, r2
 8001ea6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001ea8:	f7ff fbbe 	bl	8001628 <HAL_GetTick>
 8001eac:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001eb4:	b2db      	uxtb	r3, r3
 8001eb6:	2b20      	cmp	r3, #32
 8001eb8:	f040 80e0 	bne.w	800207c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001ebc:	697b      	ldr	r3, [r7, #20]
 8001ebe:	9300      	str	r3, [sp, #0]
 8001ec0:	2319      	movs	r3, #25
 8001ec2:	2201      	movs	r2, #1
 8001ec4:	4970      	ldr	r1, [pc, #448]	; (8002088 <HAL_I2C_Master_Transmit+0x1f4>)
 8001ec6:	68f8      	ldr	r0, [r7, #12]
 8001ec8:	f000 fa92 	bl	80023f0 <I2C_WaitOnFlagUntilTimeout>
 8001ecc:	4603      	mov	r3, r0
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d001      	beq.n	8001ed6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001ed2:	2302      	movs	r3, #2
 8001ed4:	e0d3      	b.n	800207e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001edc:	2b01      	cmp	r3, #1
 8001ede:	d101      	bne.n	8001ee4 <HAL_I2C_Master_Transmit+0x50>
 8001ee0:	2302      	movs	r3, #2
 8001ee2:	e0cc      	b.n	800207e <HAL_I2C_Master_Transmit+0x1ea>
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	2201      	movs	r2, #1
 8001ee8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f003 0301 	and.w	r3, r3, #1
 8001ef6:	2b01      	cmp	r3, #1
 8001ef8:	d007      	beq.n	8001f0a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	681a      	ldr	r2, [r3, #0]
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f042 0201 	orr.w	r2, r2, #1
 8001f08:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	681a      	ldr	r2, [r3, #0]
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001f18:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	2221      	movs	r2, #33	; 0x21
 8001f1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	2210      	movs	r2, #16
 8001f26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	687a      	ldr	r2, [r7, #4]
 8001f34:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	893a      	ldrh	r2, [r7, #8]
 8001f3a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f40:	b29a      	uxth	r2, r3
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	4a50      	ldr	r2, [pc, #320]	; (800208c <HAL_I2C_Master_Transmit+0x1f8>)
 8001f4a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001f4c:	8979      	ldrh	r1, [r7, #10]
 8001f4e:	697b      	ldr	r3, [r7, #20]
 8001f50:	6a3a      	ldr	r2, [r7, #32]
 8001f52:	68f8      	ldr	r0, [r7, #12]
 8001f54:	f000 f9ca 	bl	80022ec <I2C_MasterRequestWrite>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d001      	beq.n	8001f62 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001f5e:	2301      	movs	r3, #1
 8001f60:	e08d      	b.n	800207e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001f62:	2300      	movs	r3, #0
 8001f64:	613b      	str	r3, [r7, #16]
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	695b      	ldr	r3, [r3, #20]
 8001f6c:	613b      	str	r3, [r7, #16]
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	699b      	ldr	r3, [r3, #24]
 8001f74:	613b      	str	r3, [r7, #16]
 8001f76:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001f78:	e066      	b.n	8002048 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f7a:	697a      	ldr	r2, [r7, #20]
 8001f7c:	6a39      	ldr	r1, [r7, #32]
 8001f7e:	68f8      	ldr	r0, [r7, #12]
 8001f80:	f000 fb50 	bl	8002624 <I2C_WaitOnTXEFlagUntilTimeout>
 8001f84:	4603      	mov	r3, r0
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d00d      	beq.n	8001fa6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f8e:	2b04      	cmp	r3, #4
 8001f90:	d107      	bne.n	8001fa2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	681a      	ldr	r2, [r3, #0]
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001fa0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	e06b      	b.n	800207e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001faa:	781a      	ldrb	r2, [r3, #0]
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fb6:	1c5a      	adds	r2, r3, #1
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fc0:	b29b      	uxth	r3, r3
 8001fc2:	3b01      	subs	r3, #1
 8001fc4:	b29a      	uxth	r2, r3
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fce:	3b01      	subs	r3, #1
 8001fd0:	b29a      	uxth	r2, r3
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	695b      	ldr	r3, [r3, #20]
 8001fdc:	f003 0304 	and.w	r3, r3, #4
 8001fe0:	2b04      	cmp	r3, #4
 8001fe2:	d11b      	bne.n	800201c <HAL_I2C_Master_Transmit+0x188>
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d017      	beq.n	800201c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ff0:	781a      	ldrb	r2, [r3, #0]
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ffc:	1c5a      	adds	r2, r3, #1
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002006:	b29b      	uxth	r3, r3
 8002008:	3b01      	subs	r3, #1
 800200a:	b29a      	uxth	r2, r3
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002014:	3b01      	subs	r3, #1
 8002016:	b29a      	uxth	r2, r3
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800201c:	697a      	ldr	r2, [r7, #20]
 800201e:	6a39      	ldr	r1, [r7, #32]
 8002020:	68f8      	ldr	r0, [r7, #12]
 8002022:	f000 fb47 	bl	80026b4 <I2C_WaitOnBTFFlagUntilTimeout>
 8002026:	4603      	mov	r3, r0
 8002028:	2b00      	cmp	r3, #0
 800202a:	d00d      	beq.n	8002048 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002030:	2b04      	cmp	r3, #4
 8002032:	d107      	bne.n	8002044 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	681a      	ldr	r2, [r3, #0]
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002042:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002044:	2301      	movs	r3, #1
 8002046:	e01a      	b.n	800207e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800204c:	2b00      	cmp	r3, #0
 800204e:	d194      	bne.n	8001f7a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	681a      	ldr	r2, [r3, #0]
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800205e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	2220      	movs	r2, #32
 8002064:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	2200      	movs	r2, #0
 800206c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	2200      	movs	r2, #0
 8002074:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002078:	2300      	movs	r3, #0
 800207a:	e000      	b.n	800207e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800207c:	2302      	movs	r3, #2
  }
}
 800207e:	4618      	mov	r0, r3
 8002080:	3718      	adds	r7, #24
 8002082:	46bd      	mov	sp, r7
 8002084:	bd80      	pop	{r7, pc}
 8002086:	bf00      	nop
 8002088:	00100002 	.word	0x00100002
 800208c:	ffff0000 	.word	0xffff0000

08002090 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b08a      	sub	sp, #40	; 0x28
 8002094:	af02      	add	r7, sp, #8
 8002096:	60f8      	str	r0, [r7, #12]
 8002098:	607a      	str	r2, [r7, #4]
 800209a:	603b      	str	r3, [r7, #0]
 800209c:	460b      	mov	r3, r1
 800209e:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80020a0:	f7ff fac2 	bl	8001628 <HAL_GetTick>
 80020a4:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 80020a6:	2300      	movs	r3, #0
 80020a8:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80020b0:	b2db      	uxtb	r3, r3
 80020b2:	2b20      	cmp	r3, #32
 80020b4:	f040 8111 	bne.w	80022da <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80020b8:	69fb      	ldr	r3, [r7, #28]
 80020ba:	9300      	str	r3, [sp, #0]
 80020bc:	2319      	movs	r3, #25
 80020be:	2201      	movs	r2, #1
 80020c0:	4988      	ldr	r1, [pc, #544]	; (80022e4 <HAL_I2C_IsDeviceReady+0x254>)
 80020c2:	68f8      	ldr	r0, [r7, #12]
 80020c4:	f000 f994 	bl	80023f0 <I2C_WaitOnFlagUntilTimeout>
 80020c8:	4603      	mov	r3, r0
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d001      	beq.n	80020d2 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80020ce:	2302      	movs	r3, #2
 80020d0:	e104      	b.n	80022dc <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80020d8:	2b01      	cmp	r3, #1
 80020da:	d101      	bne.n	80020e0 <HAL_I2C_IsDeviceReady+0x50>
 80020dc:	2302      	movs	r3, #2
 80020de:	e0fd      	b.n	80022dc <HAL_I2C_IsDeviceReady+0x24c>
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	2201      	movs	r2, #1
 80020e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f003 0301 	and.w	r3, r3, #1
 80020f2:	2b01      	cmp	r3, #1
 80020f4:	d007      	beq.n	8002106 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	681a      	ldr	r2, [r3, #0]
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f042 0201 	orr.w	r2, r2, #1
 8002104:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	681a      	ldr	r2, [r3, #0]
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002114:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	2224      	movs	r2, #36	; 0x24
 800211a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	2200      	movs	r2, #0
 8002122:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	4a70      	ldr	r2, [pc, #448]	; (80022e8 <HAL_I2C_IsDeviceReady+0x258>)
 8002128:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	681a      	ldr	r2, [r3, #0]
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002138:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800213a:	69fb      	ldr	r3, [r7, #28]
 800213c:	9300      	str	r3, [sp, #0]
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	2200      	movs	r2, #0
 8002142:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002146:	68f8      	ldr	r0, [r7, #12]
 8002148:	f000 f952 	bl	80023f0 <I2C_WaitOnFlagUntilTimeout>
 800214c:	4603      	mov	r3, r0
 800214e:	2b00      	cmp	r3, #0
 8002150:	d00d      	beq.n	800216e <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800215c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002160:	d103      	bne.n	800216a <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002168:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 800216a:	2303      	movs	r3, #3
 800216c:	e0b6      	b.n	80022dc <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800216e:	897b      	ldrh	r3, [r7, #10]
 8002170:	b2db      	uxtb	r3, r3
 8002172:	461a      	mov	r2, r3
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800217c:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800217e:	f7ff fa53 	bl	8001628 <HAL_GetTick>
 8002182:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	695b      	ldr	r3, [r3, #20]
 800218a:	f003 0302 	and.w	r3, r3, #2
 800218e:	2b02      	cmp	r3, #2
 8002190:	bf0c      	ite	eq
 8002192:	2301      	moveq	r3, #1
 8002194:	2300      	movne	r3, #0
 8002196:	b2db      	uxtb	r3, r3
 8002198:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	695b      	ldr	r3, [r3, #20]
 80021a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80021a8:	bf0c      	ite	eq
 80021aa:	2301      	moveq	r3, #1
 80021ac:	2300      	movne	r3, #0
 80021ae:	b2db      	uxtb	r3, r3
 80021b0:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80021b2:	e025      	b.n	8002200 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80021b4:	f7ff fa38 	bl	8001628 <HAL_GetTick>
 80021b8:	4602      	mov	r2, r0
 80021ba:	69fb      	ldr	r3, [r7, #28]
 80021bc:	1ad3      	subs	r3, r2, r3
 80021be:	683a      	ldr	r2, [r7, #0]
 80021c0:	429a      	cmp	r2, r3
 80021c2:	d302      	bcc.n	80021ca <HAL_I2C_IsDeviceReady+0x13a>
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d103      	bne.n	80021d2 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	22a0      	movs	r2, #160	; 0xa0
 80021ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	695b      	ldr	r3, [r3, #20]
 80021d8:	f003 0302 	and.w	r3, r3, #2
 80021dc:	2b02      	cmp	r3, #2
 80021de:	bf0c      	ite	eq
 80021e0:	2301      	moveq	r3, #1
 80021e2:	2300      	movne	r3, #0
 80021e4:	b2db      	uxtb	r3, r3
 80021e6:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	695b      	ldr	r3, [r3, #20]
 80021ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80021f6:	bf0c      	ite	eq
 80021f8:	2301      	moveq	r3, #1
 80021fa:	2300      	movne	r3, #0
 80021fc:	b2db      	uxtb	r3, r3
 80021fe:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002206:	b2db      	uxtb	r3, r3
 8002208:	2ba0      	cmp	r3, #160	; 0xa0
 800220a:	d005      	beq.n	8002218 <HAL_I2C_IsDeviceReady+0x188>
 800220c:	7dfb      	ldrb	r3, [r7, #23]
 800220e:	2b00      	cmp	r3, #0
 8002210:	d102      	bne.n	8002218 <HAL_I2C_IsDeviceReady+0x188>
 8002212:	7dbb      	ldrb	r3, [r7, #22]
 8002214:	2b00      	cmp	r3, #0
 8002216:	d0cd      	beq.n	80021b4 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	2220      	movs	r2, #32
 800221c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	695b      	ldr	r3, [r3, #20]
 8002226:	f003 0302 	and.w	r3, r3, #2
 800222a:	2b02      	cmp	r3, #2
 800222c:	d129      	bne.n	8002282 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	681a      	ldr	r2, [r3, #0]
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800223c:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800223e:	2300      	movs	r3, #0
 8002240:	613b      	str	r3, [r7, #16]
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	695b      	ldr	r3, [r3, #20]
 8002248:	613b      	str	r3, [r7, #16]
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	699b      	ldr	r3, [r3, #24]
 8002250:	613b      	str	r3, [r7, #16]
 8002252:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002254:	69fb      	ldr	r3, [r7, #28]
 8002256:	9300      	str	r3, [sp, #0]
 8002258:	2319      	movs	r3, #25
 800225a:	2201      	movs	r2, #1
 800225c:	4921      	ldr	r1, [pc, #132]	; (80022e4 <HAL_I2C_IsDeviceReady+0x254>)
 800225e:	68f8      	ldr	r0, [r7, #12]
 8002260:	f000 f8c6 	bl	80023f0 <I2C_WaitOnFlagUntilTimeout>
 8002264:	4603      	mov	r3, r0
 8002266:	2b00      	cmp	r3, #0
 8002268:	d001      	beq.n	800226e <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800226a:	2301      	movs	r3, #1
 800226c:	e036      	b.n	80022dc <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	2220      	movs	r2, #32
 8002272:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	2200      	movs	r2, #0
 800227a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 800227e:	2300      	movs	r3, #0
 8002280:	e02c      	b.n	80022dc <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	681a      	ldr	r2, [r3, #0]
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002290:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800229a:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800229c:	69fb      	ldr	r3, [r7, #28]
 800229e:	9300      	str	r3, [sp, #0]
 80022a0:	2319      	movs	r3, #25
 80022a2:	2201      	movs	r2, #1
 80022a4:	490f      	ldr	r1, [pc, #60]	; (80022e4 <HAL_I2C_IsDeviceReady+0x254>)
 80022a6:	68f8      	ldr	r0, [r7, #12]
 80022a8:	f000 f8a2 	bl	80023f0 <I2C_WaitOnFlagUntilTimeout>
 80022ac:	4603      	mov	r3, r0
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d001      	beq.n	80022b6 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80022b2:	2301      	movs	r3, #1
 80022b4:	e012      	b.n	80022dc <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80022b6:	69bb      	ldr	r3, [r7, #24]
 80022b8:	3301      	adds	r3, #1
 80022ba:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80022bc:	69ba      	ldr	r2, [r7, #24]
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	429a      	cmp	r2, r3
 80022c2:	f4ff af32 	bcc.w	800212a <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	2220      	movs	r2, #32
 80022ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	2200      	movs	r2, #0
 80022d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80022d6:	2301      	movs	r3, #1
 80022d8:	e000      	b.n	80022dc <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80022da:	2302      	movs	r3, #2
  }
}
 80022dc:	4618      	mov	r0, r3
 80022de:	3720      	adds	r7, #32
 80022e0:	46bd      	mov	sp, r7
 80022e2:	bd80      	pop	{r7, pc}
 80022e4:	00100002 	.word	0x00100002
 80022e8:	ffff0000 	.word	0xffff0000

080022ec <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b088      	sub	sp, #32
 80022f0:	af02      	add	r7, sp, #8
 80022f2:	60f8      	str	r0, [r7, #12]
 80022f4:	607a      	str	r2, [r7, #4]
 80022f6:	603b      	str	r3, [r7, #0]
 80022f8:	460b      	mov	r3, r1
 80022fa:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002300:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002302:	697b      	ldr	r3, [r7, #20]
 8002304:	2b08      	cmp	r3, #8
 8002306:	d006      	beq.n	8002316 <I2C_MasterRequestWrite+0x2a>
 8002308:	697b      	ldr	r3, [r7, #20]
 800230a:	2b01      	cmp	r3, #1
 800230c:	d003      	beq.n	8002316 <I2C_MasterRequestWrite+0x2a>
 800230e:	697b      	ldr	r3, [r7, #20]
 8002310:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002314:	d108      	bne.n	8002328 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	681a      	ldr	r2, [r3, #0]
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002324:	601a      	str	r2, [r3, #0]
 8002326:	e00b      	b.n	8002340 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800232c:	2b12      	cmp	r3, #18
 800232e:	d107      	bne.n	8002340 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	681a      	ldr	r2, [r3, #0]
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800233e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	9300      	str	r3, [sp, #0]
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	2200      	movs	r2, #0
 8002348:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800234c:	68f8      	ldr	r0, [r7, #12]
 800234e:	f000 f84f 	bl	80023f0 <I2C_WaitOnFlagUntilTimeout>
 8002352:	4603      	mov	r3, r0
 8002354:	2b00      	cmp	r3, #0
 8002356:	d00d      	beq.n	8002374 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002362:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002366:	d103      	bne.n	8002370 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800236e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002370:	2303      	movs	r3, #3
 8002372:	e035      	b.n	80023e0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	691b      	ldr	r3, [r3, #16]
 8002378:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800237c:	d108      	bne.n	8002390 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800237e:	897b      	ldrh	r3, [r7, #10]
 8002380:	b2db      	uxtb	r3, r3
 8002382:	461a      	mov	r2, r3
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800238c:	611a      	str	r2, [r3, #16]
 800238e:	e01b      	b.n	80023c8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002390:	897b      	ldrh	r3, [r7, #10]
 8002392:	11db      	asrs	r3, r3, #7
 8002394:	b2db      	uxtb	r3, r3
 8002396:	f003 0306 	and.w	r3, r3, #6
 800239a:	b2db      	uxtb	r3, r3
 800239c:	f063 030f 	orn	r3, r3, #15
 80023a0:	b2da      	uxtb	r2, r3
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	687a      	ldr	r2, [r7, #4]
 80023ac:	490e      	ldr	r1, [pc, #56]	; (80023e8 <I2C_MasterRequestWrite+0xfc>)
 80023ae:	68f8      	ldr	r0, [r7, #12]
 80023b0:	f000 f898 	bl	80024e4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80023b4:	4603      	mov	r3, r0
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d001      	beq.n	80023be <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80023ba:	2301      	movs	r3, #1
 80023bc:	e010      	b.n	80023e0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80023be:	897b      	ldrh	r3, [r7, #10]
 80023c0:	b2da      	uxtb	r2, r3
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	687a      	ldr	r2, [r7, #4]
 80023cc:	4907      	ldr	r1, [pc, #28]	; (80023ec <I2C_MasterRequestWrite+0x100>)
 80023ce:	68f8      	ldr	r0, [r7, #12]
 80023d0:	f000 f888 	bl	80024e4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80023d4:	4603      	mov	r3, r0
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d001      	beq.n	80023de <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80023da:	2301      	movs	r3, #1
 80023dc:	e000      	b.n	80023e0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80023de:	2300      	movs	r3, #0
}
 80023e0:	4618      	mov	r0, r3
 80023e2:	3718      	adds	r7, #24
 80023e4:	46bd      	mov	sp, r7
 80023e6:	bd80      	pop	{r7, pc}
 80023e8:	00010008 	.word	0x00010008
 80023ec:	00010002 	.word	0x00010002

080023f0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b084      	sub	sp, #16
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	60f8      	str	r0, [r7, #12]
 80023f8:	60b9      	str	r1, [r7, #8]
 80023fa:	603b      	str	r3, [r7, #0]
 80023fc:	4613      	mov	r3, r2
 80023fe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002400:	e048      	b.n	8002494 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002408:	d044      	beq.n	8002494 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800240a:	f7ff f90d 	bl	8001628 <HAL_GetTick>
 800240e:	4602      	mov	r2, r0
 8002410:	69bb      	ldr	r3, [r7, #24]
 8002412:	1ad3      	subs	r3, r2, r3
 8002414:	683a      	ldr	r2, [r7, #0]
 8002416:	429a      	cmp	r2, r3
 8002418:	d302      	bcc.n	8002420 <I2C_WaitOnFlagUntilTimeout+0x30>
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	2b00      	cmp	r3, #0
 800241e:	d139      	bne.n	8002494 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002420:	68bb      	ldr	r3, [r7, #8]
 8002422:	0c1b      	lsrs	r3, r3, #16
 8002424:	b2db      	uxtb	r3, r3
 8002426:	2b01      	cmp	r3, #1
 8002428:	d10d      	bne.n	8002446 <I2C_WaitOnFlagUntilTimeout+0x56>
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	695b      	ldr	r3, [r3, #20]
 8002430:	43da      	mvns	r2, r3
 8002432:	68bb      	ldr	r3, [r7, #8]
 8002434:	4013      	ands	r3, r2
 8002436:	b29b      	uxth	r3, r3
 8002438:	2b00      	cmp	r3, #0
 800243a:	bf0c      	ite	eq
 800243c:	2301      	moveq	r3, #1
 800243e:	2300      	movne	r3, #0
 8002440:	b2db      	uxtb	r3, r3
 8002442:	461a      	mov	r2, r3
 8002444:	e00c      	b.n	8002460 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	699b      	ldr	r3, [r3, #24]
 800244c:	43da      	mvns	r2, r3
 800244e:	68bb      	ldr	r3, [r7, #8]
 8002450:	4013      	ands	r3, r2
 8002452:	b29b      	uxth	r3, r3
 8002454:	2b00      	cmp	r3, #0
 8002456:	bf0c      	ite	eq
 8002458:	2301      	moveq	r3, #1
 800245a:	2300      	movne	r3, #0
 800245c:	b2db      	uxtb	r3, r3
 800245e:	461a      	mov	r2, r3
 8002460:	79fb      	ldrb	r3, [r7, #7]
 8002462:	429a      	cmp	r2, r3
 8002464:	d116      	bne.n	8002494 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	2200      	movs	r2, #0
 800246a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	2220      	movs	r2, #32
 8002470:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	2200      	movs	r2, #0
 8002478:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002480:	f043 0220 	orr.w	r2, r3, #32
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	2200      	movs	r2, #0
 800248c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002490:	2301      	movs	r3, #1
 8002492:	e023      	b.n	80024dc <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002494:	68bb      	ldr	r3, [r7, #8]
 8002496:	0c1b      	lsrs	r3, r3, #16
 8002498:	b2db      	uxtb	r3, r3
 800249a:	2b01      	cmp	r3, #1
 800249c:	d10d      	bne.n	80024ba <I2C_WaitOnFlagUntilTimeout+0xca>
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	695b      	ldr	r3, [r3, #20]
 80024a4:	43da      	mvns	r2, r3
 80024a6:	68bb      	ldr	r3, [r7, #8]
 80024a8:	4013      	ands	r3, r2
 80024aa:	b29b      	uxth	r3, r3
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	bf0c      	ite	eq
 80024b0:	2301      	moveq	r3, #1
 80024b2:	2300      	movne	r3, #0
 80024b4:	b2db      	uxtb	r3, r3
 80024b6:	461a      	mov	r2, r3
 80024b8:	e00c      	b.n	80024d4 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	699b      	ldr	r3, [r3, #24]
 80024c0:	43da      	mvns	r2, r3
 80024c2:	68bb      	ldr	r3, [r7, #8]
 80024c4:	4013      	ands	r3, r2
 80024c6:	b29b      	uxth	r3, r3
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	bf0c      	ite	eq
 80024cc:	2301      	moveq	r3, #1
 80024ce:	2300      	movne	r3, #0
 80024d0:	b2db      	uxtb	r3, r3
 80024d2:	461a      	mov	r2, r3
 80024d4:	79fb      	ldrb	r3, [r7, #7]
 80024d6:	429a      	cmp	r2, r3
 80024d8:	d093      	beq.n	8002402 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80024da:	2300      	movs	r3, #0
}
 80024dc:	4618      	mov	r0, r3
 80024de:	3710      	adds	r7, #16
 80024e0:	46bd      	mov	sp, r7
 80024e2:	bd80      	pop	{r7, pc}

080024e4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b084      	sub	sp, #16
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	60f8      	str	r0, [r7, #12]
 80024ec:	60b9      	str	r1, [r7, #8]
 80024ee:	607a      	str	r2, [r7, #4]
 80024f0:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80024f2:	e071      	b.n	80025d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	695b      	ldr	r3, [r3, #20]
 80024fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002502:	d123      	bne.n	800254c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	681a      	ldr	r2, [r3, #0]
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002512:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800251c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	2200      	movs	r2, #0
 8002522:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	2220      	movs	r2, #32
 8002528:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	2200      	movs	r2, #0
 8002530:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002538:	f043 0204 	orr.w	r2, r3, #4
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	2200      	movs	r2, #0
 8002544:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002548:	2301      	movs	r3, #1
 800254a:	e067      	b.n	800261c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002552:	d041      	beq.n	80025d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002554:	f7ff f868 	bl	8001628 <HAL_GetTick>
 8002558:	4602      	mov	r2, r0
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	1ad3      	subs	r3, r2, r3
 800255e:	687a      	ldr	r2, [r7, #4]
 8002560:	429a      	cmp	r2, r3
 8002562:	d302      	bcc.n	800256a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2b00      	cmp	r3, #0
 8002568:	d136      	bne.n	80025d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800256a:	68bb      	ldr	r3, [r7, #8]
 800256c:	0c1b      	lsrs	r3, r3, #16
 800256e:	b2db      	uxtb	r3, r3
 8002570:	2b01      	cmp	r3, #1
 8002572:	d10c      	bne.n	800258e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	695b      	ldr	r3, [r3, #20]
 800257a:	43da      	mvns	r2, r3
 800257c:	68bb      	ldr	r3, [r7, #8]
 800257e:	4013      	ands	r3, r2
 8002580:	b29b      	uxth	r3, r3
 8002582:	2b00      	cmp	r3, #0
 8002584:	bf14      	ite	ne
 8002586:	2301      	movne	r3, #1
 8002588:	2300      	moveq	r3, #0
 800258a:	b2db      	uxtb	r3, r3
 800258c:	e00b      	b.n	80025a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	699b      	ldr	r3, [r3, #24]
 8002594:	43da      	mvns	r2, r3
 8002596:	68bb      	ldr	r3, [r7, #8]
 8002598:	4013      	ands	r3, r2
 800259a:	b29b      	uxth	r3, r3
 800259c:	2b00      	cmp	r3, #0
 800259e:	bf14      	ite	ne
 80025a0:	2301      	movne	r3, #1
 80025a2:	2300      	moveq	r3, #0
 80025a4:	b2db      	uxtb	r3, r3
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d016      	beq.n	80025d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	2200      	movs	r2, #0
 80025ae:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	2220      	movs	r2, #32
 80025b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	2200      	movs	r2, #0
 80025bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025c4:	f043 0220 	orr.w	r2, r3, #32
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	2200      	movs	r2, #0
 80025d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80025d4:	2301      	movs	r3, #1
 80025d6:	e021      	b.n	800261c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80025d8:	68bb      	ldr	r3, [r7, #8]
 80025da:	0c1b      	lsrs	r3, r3, #16
 80025dc:	b2db      	uxtb	r3, r3
 80025de:	2b01      	cmp	r3, #1
 80025e0:	d10c      	bne.n	80025fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	695b      	ldr	r3, [r3, #20]
 80025e8:	43da      	mvns	r2, r3
 80025ea:	68bb      	ldr	r3, [r7, #8]
 80025ec:	4013      	ands	r3, r2
 80025ee:	b29b      	uxth	r3, r3
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	bf14      	ite	ne
 80025f4:	2301      	movne	r3, #1
 80025f6:	2300      	moveq	r3, #0
 80025f8:	b2db      	uxtb	r3, r3
 80025fa:	e00b      	b.n	8002614 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	699b      	ldr	r3, [r3, #24]
 8002602:	43da      	mvns	r2, r3
 8002604:	68bb      	ldr	r3, [r7, #8]
 8002606:	4013      	ands	r3, r2
 8002608:	b29b      	uxth	r3, r3
 800260a:	2b00      	cmp	r3, #0
 800260c:	bf14      	ite	ne
 800260e:	2301      	movne	r3, #1
 8002610:	2300      	moveq	r3, #0
 8002612:	b2db      	uxtb	r3, r3
 8002614:	2b00      	cmp	r3, #0
 8002616:	f47f af6d 	bne.w	80024f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800261a:	2300      	movs	r3, #0
}
 800261c:	4618      	mov	r0, r3
 800261e:	3710      	adds	r7, #16
 8002620:	46bd      	mov	sp, r7
 8002622:	bd80      	pop	{r7, pc}

08002624 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b084      	sub	sp, #16
 8002628:	af00      	add	r7, sp, #0
 800262a:	60f8      	str	r0, [r7, #12]
 800262c:	60b9      	str	r1, [r7, #8]
 800262e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002630:	e034      	b.n	800269c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002632:	68f8      	ldr	r0, [r7, #12]
 8002634:	f000 f886 	bl	8002744 <I2C_IsAcknowledgeFailed>
 8002638:	4603      	mov	r3, r0
 800263a:	2b00      	cmp	r3, #0
 800263c:	d001      	beq.n	8002642 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800263e:	2301      	movs	r3, #1
 8002640:	e034      	b.n	80026ac <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002642:	68bb      	ldr	r3, [r7, #8]
 8002644:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002648:	d028      	beq.n	800269c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800264a:	f7fe ffed 	bl	8001628 <HAL_GetTick>
 800264e:	4602      	mov	r2, r0
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	1ad3      	subs	r3, r2, r3
 8002654:	68ba      	ldr	r2, [r7, #8]
 8002656:	429a      	cmp	r2, r3
 8002658:	d302      	bcc.n	8002660 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800265a:	68bb      	ldr	r3, [r7, #8]
 800265c:	2b00      	cmp	r3, #0
 800265e:	d11d      	bne.n	800269c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	695b      	ldr	r3, [r3, #20]
 8002666:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800266a:	2b80      	cmp	r3, #128	; 0x80
 800266c:	d016      	beq.n	800269c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	2200      	movs	r2, #0
 8002672:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	2220      	movs	r2, #32
 8002678:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	2200      	movs	r2, #0
 8002680:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002688:	f043 0220 	orr.w	r2, r3, #32
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	2200      	movs	r2, #0
 8002694:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002698:	2301      	movs	r3, #1
 800269a:	e007      	b.n	80026ac <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	695b      	ldr	r3, [r3, #20]
 80026a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026a6:	2b80      	cmp	r3, #128	; 0x80
 80026a8:	d1c3      	bne.n	8002632 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80026aa:	2300      	movs	r3, #0
}
 80026ac:	4618      	mov	r0, r3
 80026ae:	3710      	adds	r7, #16
 80026b0:	46bd      	mov	sp, r7
 80026b2:	bd80      	pop	{r7, pc}

080026b4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b084      	sub	sp, #16
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	60f8      	str	r0, [r7, #12]
 80026bc:	60b9      	str	r1, [r7, #8]
 80026be:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80026c0:	e034      	b.n	800272c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80026c2:	68f8      	ldr	r0, [r7, #12]
 80026c4:	f000 f83e 	bl	8002744 <I2C_IsAcknowledgeFailed>
 80026c8:	4603      	mov	r3, r0
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d001      	beq.n	80026d2 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80026ce:	2301      	movs	r3, #1
 80026d0:	e034      	b.n	800273c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80026d2:	68bb      	ldr	r3, [r7, #8]
 80026d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026d8:	d028      	beq.n	800272c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80026da:	f7fe ffa5 	bl	8001628 <HAL_GetTick>
 80026de:	4602      	mov	r2, r0
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	1ad3      	subs	r3, r2, r3
 80026e4:	68ba      	ldr	r2, [r7, #8]
 80026e6:	429a      	cmp	r2, r3
 80026e8:	d302      	bcc.n	80026f0 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80026ea:	68bb      	ldr	r3, [r7, #8]
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d11d      	bne.n	800272c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	695b      	ldr	r3, [r3, #20]
 80026f6:	f003 0304 	and.w	r3, r3, #4
 80026fa:	2b04      	cmp	r3, #4
 80026fc:	d016      	beq.n	800272c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	2200      	movs	r2, #0
 8002702:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	2220      	movs	r2, #32
 8002708:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	2200      	movs	r2, #0
 8002710:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002718:	f043 0220 	orr.w	r2, r3, #32
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	2200      	movs	r2, #0
 8002724:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002728:	2301      	movs	r3, #1
 800272a:	e007      	b.n	800273c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	695b      	ldr	r3, [r3, #20]
 8002732:	f003 0304 	and.w	r3, r3, #4
 8002736:	2b04      	cmp	r3, #4
 8002738:	d1c3      	bne.n	80026c2 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800273a:	2300      	movs	r3, #0
}
 800273c:	4618      	mov	r0, r3
 800273e:	3710      	adds	r7, #16
 8002740:	46bd      	mov	sp, r7
 8002742:	bd80      	pop	{r7, pc}

08002744 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002744:	b480      	push	{r7}
 8002746:	b083      	sub	sp, #12
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	695b      	ldr	r3, [r3, #20]
 8002752:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002756:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800275a:	d11b      	bne.n	8002794 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002764:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	2200      	movs	r2, #0
 800276a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2220      	movs	r2, #32
 8002770:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2200      	movs	r2, #0
 8002778:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002780:	f043 0204 	orr.w	r2, r3, #4
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2200      	movs	r2, #0
 800278c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002790:	2301      	movs	r3, #1
 8002792:	e000      	b.n	8002796 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002794:	2300      	movs	r3, #0
}
 8002796:	4618      	mov	r0, r3
 8002798:	370c      	adds	r7, #12
 800279a:	46bd      	mov	sp, r7
 800279c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a0:	4770      	bx	lr
	...

080027a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b084      	sub	sp, #16
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
 80027ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d101      	bne.n	80027b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80027b4:	2301      	movs	r3, #1
 80027b6:	e0cc      	b.n	8002952 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80027b8:	4b68      	ldr	r3, [pc, #416]	; (800295c <HAL_RCC_ClockConfig+0x1b8>)
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f003 030f 	and.w	r3, r3, #15
 80027c0:	683a      	ldr	r2, [r7, #0]
 80027c2:	429a      	cmp	r2, r3
 80027c4:	d90c      	bls.n	80027e0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027c6:	4b65      	ldr	r3, [pc, #404]	; (800295c <HAL_RCC_ClockConfig+0x1b8>)
 80027c8:	683a      	ldr	r2, [r7, #0]
 80027ca:	b2d2      	uxtb	r2, r2
 80027cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80027ce:	4b63      	ldr	r3, [pc, #396]	; (800295c <HAL_RCC_ClockConfig+0x1b8>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f003 030f 	and.w	r3, r3, #15
 80027d6:	683a      	ldr	r2, [r7, #0]
 80027d8:	429a      	cmp	r2, r3
 80027da:	d001      	beq.n	80027e0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80027dc:	2301      	movs	r3, #1
 80027de:	e0b8      	b.n	8002952 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f003 0302 	and.w	r3, r3, #2
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d020      	beq.n	800282e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f003 0304 	and.w	r3, r3, #4
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d005      	beq.n	8002804 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80027f8:	4b59      	ldr	r3, [pc, #356]	; (8002960 <HAL_RCC_ClockConfig+0x1bc>)
 80027fa:	689b      	ldr	r3, [r3, #8]
 80027fc:	4a58      	ldr	r2, [pc, #352]	; (8002960 <HAL_RCC_ClockConfig+0x1bc>)
 80027fe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002802:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f003 0308 	and.w	r3, r3, #8
 800280c:	2b00      	cmp	r3, #0
 800280e:	d005      	beq.n	800281c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002810:	4b53      	ldr	r3, [pc, #332]	; (8002960 <HAL_RCC_ClockConfig+0x1bc>)
 8002812:	689b      	ldr	r3, [r3, #8]
 8002814:	4a52      	ldr	r2, [pc, #328]	; (8002960 <HAL_RCC_ClockConfig+0x1bc>)
 8002816:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800281a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800281c:	4b50      	ldr	r3, [pc, #320]	; (8002960 <HAL_RCC_ClockConfig+0x1bc>)
 800281e:	689b      	ldr	r3, [r3, #8]
 8002820:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	689b      	ldr	r3, [r3, #8]
 8002828:	494d      	ldr	r1, [pc, #308]	; (8002960 <HAL_RCC_ClockConfig+0x1bc>)
 800282a:	4313      	orrs	r3, r2
 800282c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f003 0301 	and.w	r3, r3, #1
 8002836:	2b00      	cmp	r3, #0
 8002838:	d044      	beq.n	80028c4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	685b      	ldr	r3, [r3, #4]
 800283e:	2b01      	cmp	r3, #1
 8002840:	d107      	bne.n	8002852 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002842:	4b47      	ldr	r3, [pc, #284]	; (8002960 <HAL_RCC_ClockConfig+0x1bc>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800284a:	2b00      	cmp	r3, #0
 800284c:	d119      	bne.n	8002882 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800284e:	2301      	movs	r3, #1
 8002850:	e07f      	b.n	8002952 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	685b      	ldr	r3, [r3, #4]
 8002856:	2b02      	cmp	r3, #2
 8002858:	d003      	beq.n	8002862 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800285e:	2b03      	cmp	r3, #3
 8002860:	d107      	bne.n	8002872 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002862:	4b3f      	ldr	r3, [pc, #252]	; (8002960 <HAL_RCC_ClockConfig+0x1bc>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800286a:	2b00      	cmp	r3, #0
 800286c:	d109      	bne.n	8002882 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800286e:	2301      	movs	r3, #1
 8002870:	e06f      	b.n	8002952 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002872:	4b3b      	ldr	r3, [pc, #236]	; (8002960 <HAL_RCC_ClockConfig+0x1bc>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f003 0302 	and.w	r3, r3, #2
 800287a:	2b00      	cmp	r3, #0
 800287c:	d101      	bne.n	8002882 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800287e:	2301      	movs	r3, #1
 8002880:	e067      	b.n	8002952 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002882:	4b37      	ldr	r3, [pc, #220]	; (8002960 <HAL_RCC_ClockConfig+0x1bc>)
 8002884:	689b      	ldr	r3, [r3, #8]
 8002886:	f023 0203 	bic.w	r2, r3, #3
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	685b      	ldr	r3, [r3, #4]
 800288e:	4934      	ldr	r1, [pc, #208]	; (8002960 <HAL_RCC_ClockConfig+0x1bc>)
 8002890:	4313      	orrs	r3, r2
 8002892:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002894:	f7fe fec8 	bl	8001628 <HAL_GetTick>
 8002898:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800289a:	e00a      	b.n	80028b2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800289c:	f7fe fec4 	bl	8001628 <HAL_GetTick>
 80028a0:	4602      	mov	r2, r0
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	1ad3      	subs	r3, r2, r3
 80028a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80028aa:	4293      	cmp	r3, r2
 80028ac:	d901      	bls.n	80028b2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80028ae:	2303      	movs	r3, #3
 80028b0:	e04f      	b.n	8002952 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028b2:	4b2b      	ldr	r3, [pc, #172]	; (8002960 <HAL_RCC_ClockConfig+0x1bc>)
 80028b4:	689b      	ldr	r3, [r3, #8]
 80028b6:	f003 020c 	and.w	r2, r3, #12
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	685b      	ldr	r3, [r3, #4]
 80028be:	009b      	lsls	r3, r3, #2
 80028c0:	429a      	cmp	r2, r3
 80028c2:	d1eb      	bne.n	800289c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80028c4:	4b25      	ldr	r3, [pc, #148]	; (800295c <HAL_RCC_ClockConfig+0x1b8>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f003 030f 	and.w	r3, r3, #15
 80028cc:	683a      	ldr	r2, [r7, #0]
 80028ce:	429a      	cmp	r2, r3
 80028d0:	d20c      	bcs.n	80028ec <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028d2:	4b22      	ldr	r3, [pc, #136]	; (800295c <HAL_RCC_ClockConfig+0x1b8>)
 80028d4:	683a      	ldr	r2, [r7, #0]
 80028d6:	b2d2      	uxtb	r2, r2
 80028d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80028da:	4b20      	ldr	r3, [pc, #128]	; (800295c <HAL_RCC_ClockConfig+0x1b8>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f003 030f 	and.w	r3, r3, #15
 80028e2:	683a      	ldr	r2, [r7, #0]
 80028e4:	429a      	cmp	r2, r3
 80028e6:	d001      	beq.n	80028ec <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80028e8:	2301      	movs	r3, #1
 80028ea:	e032      	b.n	8002952 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f003 0304 	and.w	r3, r3, #4
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d008      	beq.n	800290a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80028f8:	4b19      	ldr	r3, [pc, #100]	; (8002960 <HAL_RCC_ClockConfig+0x1bc>)
 80028fa:	689b      	ldr	r3, [r3, #8]
 80028fc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	68db      	ldr	r3, [r3, #12]
 8002904:	4916      	ldr	r1, [pc, #88]	; (8002960 <HAL_RCC_ClockConfig+0x1bc>)
 8002906:	4313      	orrs	r3, r2
 8002908:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f003 0308 	and.w	r3, r3, #8
 8002912:	2b00      	cmp	r3, #0
 8002914:	d009      	beq.n	800292a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002916:	4b12      	ldr	r3, [pc, #72]	; (8002960 <HAL_RCC_ClockConfig+0x1bc>)
 8002918:	689b      	ldr	r3, [r3, #8]
 800291a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	691b      	ldr	r3, [r3, #16]
 8002922:	00db      	lsls	r3, r3, #3
 8002924:	490e      	ldr	r1, [pc, #56]	; (8002960 <HAL_RCC_ClockConfig+0x1bc>)
 8002926:	4313      	orrs	r3, r2
 8002928:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800292a:	f000 f887 	bl	8002a3c <HAL_RCC_GetSysClockFreq>
 800292e:	4602      	mov	r2, r0
 8002930:	4b0b      	ldr	r3, [pc, #44]	; (8002960 <HAL_RCC_ClockConfig+0x1bc>)
 8002932:	689b      	ldr	r3, [r3, #8]
 8002934:	091b      	lsrs	r3, r3, #4
 8002936:	f003 030f 	and.w	r3, r3, #15
 800293a:	490a      	ldr	r1, [pc, #40]	; (8002964 <HAL_RCC_ClockConfig+0x1c0>)
 800293c:	5ccb      	ldrb	r3, [r1, r3]
 800293e:	fa22 f303 	lsr.w	r3, r2, r3
 8002942:	4a09      	ldr	r2, [pc, #36]	; (8002968 <HAL_RCC_ClockConfig+0x1c4>)
 8002944:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002946:	4b09      	ldr	r3, [pc, #36]	; (800296c <HAL_RCC_ClockConfig+0x1c8>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	4618      	mov	r0, r3
 800294c:	f7fe fd48 	bl	80013e0 <HAL_InitTick>

  return HAL_OK;
 8002950:	2300      	movs	r3, #0
}
 8002952:	4618      	mov	r0, r3
 8002954:	3710      	adds	r7, #16
 8002956:	46bd      	mov	sp, r7
 8002958:	bd80      	pop	{r7, pc}
 800295a:	bf00      	nop
 800295c:	40023c00 	.word	0x40023c00
 8002960:	40023800 	.word	0x40023800
 8002964:	08004f28 	.word	0x08004f28
 8002968:	20000008 	.word	0x20000008
 800296c:	2000000c 	.word	0x2000000c

08002970 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002970:	b480      	push	{r7}
 8002972:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002974:	4b03      	ldr	r3, [pc, #12]	; (8002984 <HAL_RCC_GetHCLKFreq+0x14>)
 8002976:	681b      	ldr	r3, [r3, #0]
}
 8002978:	4618      	mov	r0, r3
 800297a:	46bd      	mov	sp, r7
 800297c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002980:	4770      	bx	lr
 8002982:	bf00      	nop
 8002984:	20000008 	.word	0x20000008

08002988 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800298c:	f7ff fff0 	bl	8002970 <HAL_RCC_GetHCLKFreq>
 8002990:	4602      	mov	r2, r0
 8002992:	4b05      	ldr	r3, [pc, #20]	; (80029a8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002994:	689b      	ldr	r3, [r3, #8]
 8002996:	0a9b      	lsrs	r3, r3, #10
 8002998:	f003 0307 	and.w	r3, r3, #7
 800299c:	4903      	ldr	r1, [pc, #12]	; (80029ac <HAL_RCC_GetPCLK1Freq+0x24>)
 800299e:	5ccb      	ldrb	r3, [r1, r3]
 80029a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80029a4:	4618      	mov	r0, r3
 80029a6:	bd80      	pop	{r7, pc}
 80029a8:	40023800 	.word	0x40023800
 80029ac:	08004f38 	.word	0x08004f38

080029b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80029b4:	f7ff ffdc 	bl	8002970 <HAL_RCC_GetHCLKFreq>
 80029b8:	4602      	mov	r2, r0
 80029ba:	4b05      	ldr	r3, [pc, #20]	; (80029d0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80029bc:	689b      	ldr	r3, [r3, #8]
 80029be:	0b5b      	lsrs	r3, r3, #13
 80029c0:	f003 0307 	and.w	r3, r3, #7
 80029c4:	4903      	ldr	r1, [pc, #12]	; (80029d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80029c6:	5ccb      	ldrb	r3, [r1, r3]
 80029c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80029cc:	4618      	mov	r0, r3
 80029ce:	bd80      	pop	{r7, pc}
 80029d0:	40023800 	.word	0x40023800
 80029d4:	08004f38 	.word	0x08004f38

080029d8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80029d8:	b480      	push	{r7}
 80029da:	b083      	sub	sp, #12
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
 80029e0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	220f      	movs	r2, #15
 80029e6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80029e8:	4b12      	ldr	r3, [pc, #72]	; (8002a34 <HAL_RCC_GetClockConfig+0x5c>)
 80029ea:	689b      	ldr	r3, [r3, #8]
 80029ec:	f003 0203 	and.w	r2, r3, #3
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80029f4:	4b0f      	ldr	r3, [pc, #60]	; (8002a34 <HAL_RCC_GetClockConfig+0x5c>)
 80029f6:	689b      	ldr	r3, [r3, #8]
 80029f8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002a00:	4b0c      	ldr	r3, [pc, #48]	; (8002a34 <HAL_RCC_GetClockConfig+0x5c>)
 8002a02:	689b      	ldr	r3, [r3, #8]
 8002a04:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002a0c:	4b09      	ldr	r3, [pc, #36]	; (8002a34 <HAL_RCC_GetClockConfig+0x5c>)
 8002a0e:	689b      	ldr	r3, [r3, #8]
 8002a10:	08db      	lsrs	r3, r3, #3
 8002a12:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002a1a:	4b07      	ldr	r3, [pc, #28]	; (8002a38 <HAL_RCC_GetClockConfig+0x60>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f003 020f 	and.w	r2, r3, #15
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	601a      	str	r2, [r3, #0]
}
 8002a26:	bf00      	nop
 8002a28:	370c      	adds	r7, #12
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a30:	4770      	bx	lr
 8002a32:	bf00      	nop
 8002a34:	40023800 	.word	0x40023800
 8002a38:	40023c00 	.word	0x40023c00

08002a3c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a3c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002a40:	b0ae      	sub	sp, #184	; 0xb8
 8002a42:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002a44:	2300      	movs	r3, #0
 8002a46:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8002a50:	2300      	movs	r3, #0
 8002a52:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8002a56:	2300      	movs	r3, #0
 8002a58:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002a62:	4bcb      	ldr	r3, [pc, #812]	; (8002d90 <HAL_RCC_GetSysClockFreq+0x354>)
 8002a64:	689b      	ldr	r3, [r3, #8]
 8002a66:	f003 030c 	and.w	r3, r3, #12
 8002a6a:	2b0c      	cmp	r3, #12
 8002a6c:	f200 8206 	bhi.w	8002e7c <HAL_RCC_GetSysClockFreq+0x440>
 8002a70:	a201      	add	r2, pc, #4	; (adr r2, 8002a78 <HAL_RCC_GetSysClockFreq+0x3c>)
 8002a72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a76:	bf00      	nop
 8002a78:	08002aad 	.word	0x08002aad
 8002a7c:	08002e7d 	.word	0x08002e7d
 8002a80:	08002e7d 	.word	0x08002e7d
 8002a84:	08002e7d 	.word	0x08002e7d
 8002a88:	08002ab5 	.word	0x08002ab5
 8002a8c:	08002e7d 	.word	0x08002e7d
 8002a90:	08002e7d 	.word	0x08002e7d
 8002a94:	08002e7d 	.word	0x08002e7d
 8002a98:	08002abd 	.word	0x08002abd
 8002a9c:	08002e7d 	.word	0x08002e7d
 8002aa0:	08002e7d 	.word	0x08002e7d
 8002aa4:	08002e7d 	.word	0x08002e7d
 8002aa8:	08002cad 	.word	0x08002cad
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002aac:	4bb9      	ldr	r3, [pc, #740]	; (8002d94 <HAL_RCC_GetSysClockFreq+0x358>)
 8002aae:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8002ab2:	e1e7      	b.n	8002e84 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002ab4:	4bb8      	ldr	r3, [pc, #736]	; (8002d98 <HAL_RCC_GetSysClockFreq+0x35c>)
 8002ab6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002aba:	e1e3      	b.n	8002e84 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002abc:	4bb4      	ldr	r3, [pc, #720]	; (8002d90 <HAL_RCC_GetSysClockFreq+0x354>)
 8002abe:	685b      	ldr	r3, [r3, #4]
 8002ac0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002ac4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002ac8:	4bb1      	ldr	r3, [pc, #708]	; (8002d90 <HAL_RCC_GetSysClockFreq+0x354>)
 8002aca:	685b      	ldr	r3, [r3, #4]
 8002acc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d071      	beq.n	8002bb8 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ad4:	4bae      	ldr	r3, [pc, #696]	; (8002d90 <HAL_RCC_GetSysClockFreq+0x354>)
 8002ad6:	685b      	ldr	r3, [r3, #4]
 8002ad8:	099b      	lsrs	r3, r3, #6
 8002ada:	2200      	movs	r2, #0
 8002adc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002ae0:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8002ae4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002ae8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002aec:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002af0:	2300      	movs	r3, #0
 8002af2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002af6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002afa:	4622      	mov	r2, r4
 8002afc:	462b      	mov	r3, r5
 8002afe:	f04f 0000 	mov.w	r0, #0
 8002b02:	f04f 0100 	mov.w	r1, #0
 8002b06:	0159      	lsls	r1, r3, #5
 8002b08:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002b0c:	0150      	lsls	r0, r2, #5
 8002b0e:	4602      	mov	r2, r0
 8002b10:	460b      	mov	r3, r1
 8002b12:	4621      	mov	r1, r4
 8002b14:	1a51      	subs	r1, r2, r1
 8002b16:	6439      	str	r1, [r7, #64]	; 0x40
 8002b18:	4629      	mov	r1, r5
 8002b1a:	eb63 0301 	sbc.w	r3, r3, r1
 8002b1e:	647b      	str	r3, [r7, #68]	; 0x44
 8002b20:	f04f 0200 	mov.w	r2, #0
 8002b24:	f04f 0300 	mov.w	r3, #0
 8002b28:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8002b2c:	4649      	mov	r1, r9
 8002b2e:	018b      	lsls	r3, r1, #6
 8002b30:	4641      	mov	r1, r8
 8002b32:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002b36:	4641      	mov	r1, r8
 8002b38:	018a      	lsls	r2, r1, #6
 8002b3a:	4641      	mov	r1, r8
 8002b3c:	1a51      	subs	r1, r2, r1
 8002b3e:	63b9      	str	r1, [r7, #56]	; 0x38
 8002b40:	4649      	mov	r1, r9
 8002b42:	eb63 0301 	sbc.w	r3, r3, r1
 8002b46:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002b48:	f04f 0200 	mov.w	r2, #0
 8002b4c:	f04f 0300 	mov.w	r3, #0
 8002b50:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8002b54:	4649      	mov	r1, r9
 8002b56:	00cb      	lsls	r3, r1, #3
 8002b58:	4641      	mov	r1, r8
 8002b5a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002b5e:	4641      	mov	r1, r8
 8002b60:	00ca      	lsls	r2, r1, #3
 8002b62:	4610      	mov	r0, r2
 8002b64:	4619      	mov	r1, r3
 8002b66:	4603      	mov	r3, r0
 8002b68:	4622      	mov	r2, r4
 8002b6a:	189b      	adds	r3, r3, r2
 8002b6c:	633b      	str	r3, [r7, #48]	; 0x30
 8002b6e:	462b      	mov	r3, r5
 8002b70:	460a      	mov	r2, r1
 8002b72:	eb42 0303 	adc.w	r3, r2, r3
 8002b76:	637b      	str	r3, [r7, #52]	; 0x34
 8002b78:	f04f 0200 	mov.w	r2, #0
 8002b7c:	f04f 0300 	mov.w	r3, #0
 8002b80:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002b84:	4629      	mov	r1, r5
 8002b86:	024b      	lsls	r3, r1, #9
 8002b88:	4621      	mov	r1, r4
 8002b8a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002b8e:	4621      	mov	r1, r4
 8002b90:	024a      	lsls	r2, r1, #9
 8002b92:	4610      	mov	r0, r2
 8002b94:	4619      	mov	r1, r3
 8002b96:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002ba0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002ba4:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8002ba8:	f7fd fb3e 	bl	8000228 <__aeabi_uldivmod>
 8002bac:	4602      	mov	r2, r0
 8002bae:	460b      	mov	r3, r1
 8002bb0:	4613      	mov	r3, r2
 8002bb2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002bb6:	e067      	b.n	8002c88 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002bb8:	4b75      	ldr	r3, [pc, #468]	; (8002d90 <HAL_RCC_GetSysClockFreq+0x354>)
 8002bba:	685b      	ldr	r3, [r3, #4]
 8002bbc:	099b      	lsrs	r3, r3, #6
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002bc4:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8002bc8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002bcc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002bd0:	67bb      	str	r3, [r7, #120]	; 0x78
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002bd6:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8002bda:	4622      	mov	r2, r4
 8002bdc:	462b      	mov	r3, r5
 8002bde:	f04f 0000 	mov.w	r0, #0
 8002be2:	f04f 0100 	mov.w	r1, #0
 8002be6:	0159      	lsls	r1, r3, #5
 8002be8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002bec:	0150      	lsls	r0, r2, #5
 8002bee:	4602      	mov	r2, r0
 8002bf0:	460b      	mov	r3, r1
 8002bf2:	4621      	mov	r1, r4
 8002bf4:	1a51      	subs	r1, r2, r1
 8002bf6:	62b9      	str	r1, [r7, #40]	; 0x28
 8002bf8:	4629      	mov	r1, r5
 8002bfa:	eb63 0301 	sbc.w	r3, r3, r1
 8002bfe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002c00:	f04f 0200 	mov.w	r2, #0
 8002c04:	f04f 0300 	mov.w	r3, #0
 8002c08:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8002c0c:	4649      	mov	r1, r9
 8002c0e:	018b      	lsls	r3, r1, #6
 8002c10:	4641      	mov	r1, r8
 8002c12:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002c16:	4641      	mov	r1, r8
 8002c18:	018a      	lsls	r2, r1, #6
 8002c1a:	4641      	mov	r1, r8
 8002c1c:	ebb2 0a01 	subs.w	sl, r2, r1
 8002c20:	4649      	mov	r1, r9
 8002c22:	eb63 0b01 	sbc.w	fp, r3, r1
 8002c26:	f04f 0200 	mov.w	r2, #0
 8002c2a:	f04f 0300 	mov.w	r3, #0
 8002c2e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002c32:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002c36:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002c3a:	4692      	mov	sl, r2
 8002c3c:	469b      	mov	fp, r3
 8002c3e:	4623      	mov	r3, r4
 8002c40:	eb1a 0303 	adds.w	r3, sl, r3
 8002c44:	623b      	str	r3, [r7, #32]
 8002c46:	462b      	mov	r3, r5
 8002c48:	eb4b 0303 	adc.w	r3, fp, r3
 8002c4c:	627b      	str	r3, [r7, #36]	; 0x24
 8002c4e:	f04f 0200 	mov.w	r2, #0
 8002c52:	f04f 0300 	mov.w	r3, #0
 8002c56:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002c5a:	4629      	mov	r1, r5
 8002c5c:	028b      	lsls	r3, r1, #10
 8002c5e:	4621      	mov	r1, r4
 8002c60:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002c64:	4621      	mov	r1, r4
 8002c66:	028a      	lsls	r2, r1, #10
 8002c68:	4610      	mov	r0, r2
 8002c6a:	4619      	mov	r1, r3
 8002c6c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002c70:	2200      	movs	r2, #0
 8002c72:	673b      	str	r3, [r7, #112]	; 0x70
 8002c74:	677a      	str	r2, [r7, #116]	; 0x74
 8002c76:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8002c7a:	f7fd fad5 	bl	8000228 <__aeabi_uldivmod>
 8002c7e:	4602      	mov	r2, r0
 8002c80:	460b      	mov	r3, r1
 8002c82:	4613      	mov	r3, r2
 8002c84:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002c88:	4b41      	ldr	r3, [pc, #260]	; (8002d90 <HAL_RCC_GetSysClockFreq+0x354>)
 8002c8a:	685b      	ldr	r3, [r3, #4]
 8002c8c:	0c1b      	lsrs	r3, r3, #16
 8002c8e:	f003 0303 	and.w	r3, r3, #3
 8002c92:	3301      	adds	r3, #1
 8002c94:	005b      	lsls	r3, r3, #1
 8002c96:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8002c9a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002c9e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002ca2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ca6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002caa:	e0eb      	b.n	8002e84 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002cac:	4b38      	ldr	r3, [pc, #224]	; (8002d90 <HAL_RCC_GetSysClockFreq+0x354>)
 8002cae:	685b      	ldr	r3, [r3, #4]
 8002cb0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002cb4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002cb8:	4b35      	ldr	r3, [pc, #212]	; (8002d90 <HAL_RCC_GetSysClockFreq+0x354>)
 8002cba:	685b      	ldr	r3, [r3, #4]
 8002cbc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d06b      	beq.n	8002d9c <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002cc4:	4b32      	ldr	r3, [pc, #200]	; (8002d90 <HAL_RCC_GetSysClockFreq+0x354>)
 8002cc6:	685b      	ldr	r3, [r3, #4]
 8002cc8:	099b      	lsrs	r3, r3, #6
 8002cca:	2200      	movs	r2, #0
 8002ccc:	66bb      	str	r3, [r7, #104]	; 0x68
 8002cce:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002cd0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002cd2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002cd6:	663b      	str	r3, [r7, #96]	; 0x60
 8002cd8:	2300      	movs	r3, #0
 8002cda:	667b      	str	r3, [r7, #100]	; 0x64
 8002cdc:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8002ce0:	4622      	mov	r2, r4
 8002ce2:	462b      	mov	r3, r5
 8002ce4:	f04f 0000 	mov.w	r0, #0
 8002ce8:	f04f 0100 	mov.w	r1, #0
 8002cec:	0159      	lsls	r1, r3, #5
 8002cee:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002cf2:	0150      	lsls	r0, r2, #5
 8002cf4:	4602      	mov	r2, r0
 8002cf6:	460b      	mov	r3, r1
 8002cf8:	4621      	mov	r1, r4
 8002cfa:	1a51      	subs	r1, r2, r1
 8002cfc:	61b9      	str	r1, [r7, #24]
 8002cfe:	4629      	mov	r1, r5
 8002d00:	eb63 0301 	sbc.w	r3, r3, r1
 8002d04:	61fb      	str	r3, [r7, #28]
 8002d06:	f04f 0200 	mov.w	r2, #0
 8002d0a:	f04f 0300 	mov.w	r3, #0
 8002d0e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8002d12:	4659      	mov	r1, fp
 8002d14:	018b      	lsls	r3, r1, #6
 8002d16:	4651      	mov	r1, sl
 8002d18:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002d1c:	4651      	mov	r1, sl
 8002d1e:	018a      	lsls	r2, r1, #6
 8002d20:	4651      	mov	r1, sl
 8002d22:	ebb2 0801 	subs.w	r8, r2, r1
 8002d26:	4659      	mov	r1, fp
 8002d28:	eb63 0901 	sbc.w	r9, r3, r1
 8002d2c:	f04f 0200 	mov.w	r2, #0
 8002d30:	f04f 0300 	mov.w	r3, #0
 8002d34:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002d38:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002d3c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002d40:	4690      	mov	r8, r2
 8002d42:	4699      	mov	r9, r3
 8002d44:	4623      	mov	r3, r4
 8002d46:	eb18 0303 	adds.w	r3, r8, r3
 8002d4a:	613b      	str	r3, [r7, #16]
 8002d4c:	462b      	mov	r3, r5
 8002d4e:	eb49 0303 	adc.w	r3, r9, r3
 8002d52:	617b      	str	r3, [r7, #20]
 8002d54:	f04f 0200 	mov.w	r2, #0
 8002d58:	f04f 0300 	mov.w	r3, #0
 8002d5c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002d60:	4629      	mov	r1, r5
 8002d62:	024b      	lsls	r3, r1, #9
 8002d64:	4621      	mov	r1, r4
 8002d66:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002d6a:	4621      	mov	r1, r4
 8002d6c:	024a      	lsls	r2, r1, #9
 8002d6e:	4610      	mov	r0, r2
 8002d70:	4619      	mov	r1, r3
 8002d72:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002d76:	2200      	movs	r2, #0
 8002d78:	65bb      	str	r3, [r7, #88]	; 0x58
 8002d7a:	65fa      	str	r2, [r7, #92]	; 0x5c
 8002d7c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002d80:	f7fd fa52 	bl	8000228 <__aeabi_uldivmod>
 8002d84:	4602      	mov	r2, r0
 8002d86:	460b      	mov	r3, r1
 8002d88:	4613      	mov	r3, r2
 8002d8a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002d8e:	e065      	b.n	8002e5c <HAL_RCC_GetSysClockFreq+0x420>
 8002d90:	40023800 	.word	0x40023800
 8002d94:	00f42400 	.word	0x00f42400
 8002d98:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d9c:	4b3d      	ldr	r3, [pc, #244]	; (8002e94 <HAL_RCC_GetSysClockFreq+0x458>)
 8002d9e:	685b      	ldr	r3, [r3, #4]
 8002da0:	099b      	lsrs	r3, r3, #6
 8002da2:	2200      	movs	r2, #0
 8002da4:	4618      	mov	r0, r3
 8002da6:	4611      	mov	r1, r2
 8002da8:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002dac:	653b      	str	r3, [r7, #80]	; 0x50
 8002dae:	2300      	movs	r3, #0
 8002db0:	657b      	str	r3, [r7, #84]	; 0x54
 8002db2:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8002db6:	4642      	mov	r2, r8
 8002db8:	464b      	mov	r3, r9
 8002dba:	f04f 0000 	mov.w	r0, #0
 8002dbe:	f04f 0100 	mov.w	r1, #0
 8002dc2:	0159      	lsls	r1, r3, #5
 8002dc4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002dc8:	0150      	lsls	r0, r2, #5
 8002dca:	4602      	mov	r2, r0
 8002dcc:	460b      	mov	r3, r1
 8002dce:	4641      	mov	r1, r8
 8002dd0:	1a51      	subs	r1, r2, r1
 8002dd2:	60b9      	str	r1, [r7, #8]
 8002dd4:	4649      	mov	r1, r9
 8002dd6:	eb63 0301 	sbc.w	r3, r3, r1
 8002dda:	60fb      	str	r3, [r7, #12]
 8002ddc:	f04f 0200 	mov.w	r2, #0
 8002de0:	f04f 0300 	mov.w	r3, #0
 8002de4:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002de8:	4659      	mov	r1, fp
 8002dea:	018b      	lsls	r3, r1, #6
 8002dec:	4651      	mov	r1, sl
 8002dee:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002df2:	4651      	mov	r1, sl
 8002df4:	018a      	lsls	r2, r1, #6
 8002df6:	4651      	mov	r1, sl
 8002df8:	1a54      	subs	r4, r2, r1
 8002dfa:	4659      	mov	r1, fp
 8002dfc:	eb63 0501 	sbc.w	r5, r3, r1
 8002e00:	f04f 0200 	mov.w	r2, #0
 8002e04:	f04f 0300 	mov.w	r3, #0
 8002e08:	00eb      	lsls	r3, r5, #3
 8002e0a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002e0e:	00e2      	lsls	r2, r4, #3
 8002e10:	4614      	mov	r4, r2
 8002e12:	461d      	mov	r5, r3
 8002e14:	4643      	mov	r3, r8
 8002e16:	18e3      	adds	r3, r4, r3
 8002e18:	603b      	str	r3, [r7, #0]
 8002e1a:	464b      	mov	r3, r9
 8002e1c:	eb45 0303 	adc.w	r3, r5, r3
 8002e20:	607b      	str	r3, [r7, #4]
 8002e22:	f04f 0200 	mov.w	r2, #0
 8002e26:	f04f 0300 	mov.w	r3, #0
 8002e2a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002e2e:	4629      	mov	r1, r5
 8002e30:	028b      	lsls	r3, r1, #10
 8002e32:	4621      	mov	r1, r4
 8002e34:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002e38:	4621      	mov	r1, r4
 8002e3a:	028a      	lsls	r2, r1, #10
 8002e3c:	4610      	mov	r0, r2
 8002e3e:	4619      	mov	r1, r3
 8002e40:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002e44:	2200      	movs	r2, #0
 8002e46:	64bb      	str	r3, [r7, #72]	; 0x48
 8002e48:	64fa      	str	r2, [r7, #76]	; 0x4c
 8002e4a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002e4e:	f7fd f9eb 	bl	8000228 <__aeabi_uldivmod>
 8002e52:	4602      	mov	r2, r0
 8002e54:	460b      	mov	r3, r1
 8002e56:	4613      	mov	r3, r2
 8002e58:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002e5c:	4b0d      	ldr	r3, [pc, #52]	; (8002e94 <HAL_RCC_GetSysClockFreq+0x458>)
 8002e5e:	685b      	ldr	r3, [r3, #4]
 8002e60:	0f1b      	lsrs	r3, r3, #28
 8002e62:	f003 0307 	and.w	r3, r3, #7
 8002e66:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8002e6a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002e6e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002e72:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e76:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002e7a:	e003      	b.n	8002e84 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002e7c:	4b06      	ldr	r3, [pc, #24]	; (8002e98 <HAL_RCC_GetSysClockFreq+0x45c>)
 8002e7e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002e82:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002e84:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8002e88:	4618      	mov	r0, r3
 8002e8a:	37b8      	adds	r7, #184	; 0xb8
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002e92:	bf00      	nop
 8002e94:	40023800 	.word	0x40023800
 8002e98:	00f42400 	.word	0x00f42400

08002e9c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b086      	sub	sp, #24
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d101      	bne.n	8002eae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002eaa:	2301      	movs	r3, #1
 8002eac:	e28d      	b.n	80033ca <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f003 0301 	and.w	r3, r3, #1
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	f000 8083 	beq.w	8002fc2 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002ebc:	4b94      	ldr	r3, [pc, #592]	; (8003110 <HAL_RCC_OscConfig+0x274>)
 8002ebe:	689b      	ldr	r3, [r3, #8]
 8002ec0:	f003 030c 	and.w	r3, r3, #12
 8002ec4:	2b04      	cmp	r3, #4
 8002ec6:	d019      	beq.n	8002efc <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002ec8:	4b91      	ldr	r3, [pc, #580]	; (8003110 <HAL_RCC_OscConfig+0x274>)
 8002eca:	689b      	ldr	r3, [r3, #8]
 8002ecc:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002ed0:	2b08      	cmp	r3, #8
 8002ed2:	d106      	bne.n	8002ee2 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002ed4:	4b8e      	ldr	r3, [pc, #568]	; (8003110 <HAL_RCC_OscConfig+0x274>)
 8002ed6:	685b      	ldr	r3, [r3, #4]
 8002ed8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002edc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002ee0:	d00c      	beq.n	8002efc <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002ee2:	4b8b      	ldr	r3, [pc, #556]	; (8003110 <HAL_RCC_OscConfig+0x274>)
 8002ee4:	689b      	ldr	r3, [r3, #8]
 8002ee6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002eea:	2b0c      	cmp	r3, #12
 8002eec:	d112      	bne.n	8002f14 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002eee:	4b88      	ldr	r3, [pc, #544]	; (8003110 <HAL_RCC_OscConfig+0x274>)
 8002ef0:	685b      	ldr	r3, [r3, #4]
 8002ef2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ef6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002efa:	d10b      	bne.n	8002f14 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002efc:	4b84      	ldr	r3, [pc, #528]	; (8003110 <HAL_RCC_OscConfig+0x274>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d05b      	beq.n	8002fc0 <HAL_RCC_OscConfig+0x124>
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	685b      	ldr	r3, [r3, #4]
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d157      	bne.n	8002fc0 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002f10:	2301      	movs	r3, #1
 8002f12:	e25a      	b.n	80033ca <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	685b      	ldr	r3, [r3, #4]
 8002f18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f1c:	d106      	bne.n	8002f2c <HAL_RCC_OscConfig+0x90>
 8002f1e:	4b7c      	ldr	r3, [pc, #496]	; (8003110 <HAL_RCC_OscConfig+0x274>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	4a7b      	ldr	r2, [pc, #492]	; (8003110 <HAL_RCC_OscConfig+0x274>)
 8002f24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f28:	6013      	str	r3, [r2, #0]
 8002f2a:	e01d      	b.n	8002f68 <HAL_RCC_OscConfig+0xcc>
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	685b      	ldr	r3, [r3, #4]
 8002f30:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002f34:	d10c      	bne.n	8002f50 <HAL_RCC_OscConfig+0xb4>
 8002f36:	4b76      	ldr	r3, [pc, #472]	; (8003110 <HAL_RCC_OscConfig+0x274>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	4a75      	ldr	r2, [pc, #468]	; (8003110 <HAL_RCC_OscConfig+0x274>)
 8002f3c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f40:	6013      	str	r3, [r2, #0]
 8002f42:	4b73      	ldr	r3, [pc, #460]	; (8003110 <HAL_RCC_OscConfig+0x274>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	4a72      	ldr	r2, [pc, #456]	; (8003110 <HAL_RCC_OscConfig+0x274>)
 8002f48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f4c:	6013      	str	r3, [r2, #0]
 8002f4e:	e00b      	b.n	8002f68 <HAL_RCC_OscConfig+0xcc>
 8002f50:	4b6f      	ldr	r3, [pc, #444]	; (8003110 <HAL_RCC_OscConfig+0x274>)
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	4a6e      	ldr	r2, [pc, #440]	; (8003110 <HAL_RCC_OscConfig+0x274>)
 8002f56:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f5a:	6013      	str	r3, [r2, #0]
 8002f5c:	4b6c      	ldr	r3, [pc, #432]	; (8003110 <HAL_RCC_OscConfig+0x274>)
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	4a6b      	ldr	r2, [pc, #428]	; (8003110 <HAL_RCC_OscConfig+0x274>)
 8002f62:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f66:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	685b      	ldr	r3, [r3, #4]
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d013      	beq.n	8002f98 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f70:	f7fe fb5a 	bl	8001628 <HAL_GetTick>
 8002f74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f76:	e008      	b.n	8002f8a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f78:	f7fe fb56 	bl	8001628 <HAL_GetTick>
 8002f7c:	4602      	mov	r2, r0
 8002f7e:	693b      	ldr	r3, [r7, #16]
 8002f80:	1ad3      	subs	r3, r2, r3
 8002f82:	2b64      	cmp	r3, #100	; 0x64
 8002f84:	d901      	bls.n	8002f8a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002f86:	2303      	movs	r3, #3
 8002f88:	e21f      	b.n	80033ca <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f8a:	4b61      	ldr	r3, [pc, #388]	; (8003110 <HAL_RCC_OscConfig+0x274>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d0f0      	beq.n	8002f78 <HAL_RCC_OscConfig+0xdc>
 8002f96:	e014      	b.n	8002fc2 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f98:	f7fe fb46 	bl	8001628 <HAL_GetTick>
 8002f9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f9e:	e008      	b.n	8002fb2 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002fa0:	f7fe fb42 	bl	8001628 <HAL_GetTick>
 8002fa4:	4602      	mov	r2, r0
 8002fa6:	693b      	ldr	r3, [r7, #16]
 8002fa8:	1ad3      	subs	r3, r2, r3
 8002faa:	2b64      	cmp	r3, #100	; 0x64
 8002fac:	d901      	bls.n	8002fb2 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002fae:	2303      	movs	r3, #3
 8002fb0:	e20b      	b.n	80033ca <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002fb2:	4b57      	ldr	r3, [pc, #348]	; (8003110 <HAL_RCC_OscConfig+0x274>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d1f0      	bne.n	8002fa0 <HAL_RCC_OscConfig+0x104>
 8002fbe:	e000      	b.n	8002fc2 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fc0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f003 0302 	and.w	r3, r3, #2
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d06f      	beq.n	80030ae <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002fce:	4b50      	ldr	r3, [pc, #320]	; (8003110 <HAL_RCC_OscConfig+0x274>)
 8002fd0:	689b      	ldr	r3, [r3, #8]
 8002fd2:	f003 030c 	and.w	r3, r3, #12
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d017      	beq.n	800300a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002fda:	4b4d      	ldr	r3, [pc, #308]	; (8003110 <HAL_RCC_OscConfig+0x274>)
 8002fdc:	689b      	ldr	r3, [r3, #8]
 8002fde:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002fe2:	2b08      	cmp	r3, #8
 8002fe4:	d105      	bne.n	8002ff2 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002fe6:	4b4a      	ldr	r3, [pc, #296]	; (8003110 <HAL_RCC_OscConfig+0x274>)
 8002fe8:	685b      	ldr	r3, [r3, #4]
 8002fea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d00b      	beq.n	800300a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002ff2:	4b47      	ldr	r3, [pc, #284]	; (8003110 <HAL_RCC_OscConfig+0x274>)
 8002ff4:	689b      	ldr	r3, [r3, #8]
 8002ff6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002ffa:	2b0c      	cmp	r3, #12
 8002ffc:	d11c      	bne.n	8003038 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002ffe:	4b44      	ldr	r3, [pc, #272]	; (8003110 <HAL_RCC_OscConfig+0x274>)
 8003000:	685b      	ldr	r3, [r3, #4]
 8003002:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003006:	2b00      	cmp	r3, #0
 8003008:	d116      	bne.n	8003038 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800300a:	4b41      	ldr	r3, [pc, #260]	; (8003110 <HAL_RCC_OscConfig+0x274>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f003 0302 	and.w	r3, r3, #2
 8003012:	2b00      	cmp	r3, #0
 8003014:	d005      	beq.n	8003022 <HAL_RCC_OscConfig+0x186>
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	68db      	ldr	r3, [r3, #12]
 800301a:	2b01      	cmp	r3, #1
 800301c:	d001      	beq.n	8003022 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800301e:	2301      	movs	r3, #1
 8003020:	e1d3      	b.n	80033ca <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003022:	4b3b      	ldr	r3, [pc, #236]	; (8003110 <HAL_RCC_OscConfig+0x274>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	691b      	ldr	r3, [r3, #16]
 800302e:	00db      	lsls	r3, r3, #3
 8003030:	4937      	ldr	r1, [pc, #220]	; (8003110 <HAL_RCC_OscConfig+0x274>)
 8003032:	4313      	orrs	r3, r2
 8003034:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003036:	e03a      	b.n	80030ae <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	68db      	ldr	r3, [r3, #12]
 800303c:	2b00      	cmp	r3, #0
 800303e:	d020      	beq.n	8003082 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003040:	4b34      	ldr	r3, [pc, #208]	; (8003114 <HAL_RCC_OscConfig+0x278>)
 8003042:	2201      	movs	r2, #1
 8003044:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003046:	f7fe faef 	bl	8001628 <HAL_GetTick>
 800304a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800304c:	e008      	b.n	8003060 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800304e:	f7fe faeb 	bl	8001628 <HAL_GetTick>
 8003052:	4602      	mov	r2, r0
 8003054:	693b      	ldr	r3, [r7, #16]
 8003056:	1ad3      	subs	r3, r2, r3
 8003058:	2b02      	cmp	r3, #2
 800305a:	d901      	bls.n	8003060 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800305c:	2303      	movs	r3, #3
 800305e:	e1b4      	b.n	80033ca <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003060:	4b2b      	ldr	r3, [pc, #172]	; (8003110 <HAL_RCC_OscConfig+0x274>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f003 0302 	and.w	r3, r3, #2
 8003068:	2b00      	cmp	r3, #0
 800306a:	d0f0      	beq.n	800304e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800306c:	4b28      	ldr	r3, [pc, #160]	; (8003110 <HAL_RCC_OscConfig+0x274>)
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	691b      	ldr	r3, [r3, #16]
 8003078:	00db      	lsls	r3, r3, #3
 800307a:	4925      	ldr	r1, [pc, #148]	; (8003110 <HAL_RCC_OscConfig+0x274>)
 800307c:	4313      	orrs	r3, r2
 800307e:	600b      	str	r3, [r1, #0]
 8003080:	e015      	b.n	80030ae <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003082:	4b24      	ldr	r3, [pc, #144]	; (8003114 <HAL_RCC_OscConfig+0x278>)
 8003084:	2200      	movs	r2, #0
 8003086:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003088:	f7fe face 	bl	8001628 <HAL_GetTick>
 800308c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800308e:	e008      	b.n	80030a2 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003090:	f7fe faca 	bl	8001628 <HAL_GetTick>
 8003094:	4602      	mov	r2, r0
 8003096:	693b      	ldr	r3, [r7, #16]
 8003098:	1ad3      	subs	r3, r2, r3
 800309a:	2b02      	cmp	r3, #2
 800309c:	d901      	bls.n	80030a2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800309e:	2303      	movs	r3, #3
 80030a0:	e193      	b.n	80033ca <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030a2:	4b1b      	ldr	r3, [pc, #108]	; (8003110 <HAL_RCC_OscConfig+0x274>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f003 0302 	and.w	r3, r3, #2
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d1f0      	bne.n	8003090 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f003 0308 	and.w	r3, r3, #8
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d036      	beq.n	8003128 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	695b      	ldr	r3, [r3, #20]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d016      	beq.n	80030f0 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80030c2:	4b15      	ldr	r3, [pc, #84]	; (8003118 <HAL_RCC_OscConfig+0x27c>)
 80030c4:	2201      	movs	r2, #1
 80030c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030c8:	f7fe faae 	bl	8001628 <HAL_GetTick>
 80030cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030ce:	e008      	b.n	80030e2 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80030d0:	f7fe faaa 	bl	8001628 <HAL_GetTick>
 80030d4:	4602      	mov	r2, r0
 80030d6:	693b      	ldr	r3, [r7, #16]
 80030d8:	1ad3      	subs	r3, r2, r3
 80030da:	2b02      	cmp	r3, #2
 80030dc:	d901      	bls.n	80030e2 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80030de:	2303      	movs	r3, #3
 80030e0:	e173      	b.n	80033ca <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030e2:	4b0b      	ldr	r3, [pc, #44]	; (8003110 <HAL_RCC_OscConfig+0x274>)
 80030e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030e6:	f003 0302 	and.w	r3, r3, #2
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d0f0      	beq.n	80030d0 <HAL_RCC_OscConfig+0x234>
 80030ee:	e01b      	b.n	8003128 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80030f0:	4b09      	ldr	r3, [pc, #36]	; (8003118 <HAL_RCC_OscConfig+0x27c>)
 80030f2:	2200      	movs	r2, #0
 80030f4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030f6:	f7fe fa97 	bl	8001628 <HAL_GetTick>
 80030fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030fc:	e00e      	b.n	800311c <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80030fe:	f7fe fa93 	bl	8001628 <HAL_GetTick>
 8003102:	4602      	mov	r2, r0
 8003104:	693b      	ldr	r3, [r7, #16]
 8003106:	1ad3      	subs	r3, r2, r3
 8003108:	2b02      	cmp	r3, #2
 800310a:	d907      	bls.n	800311c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800310c:	2303      	movs	r3, #3
 800310e:	e15c      	b.n	80033ca <HAL_RCC_OscConfig+0x52e>
 8003110:	40023800 	.word	0x40023800
 8003114:	42470000 	.word	0x42470000
 8003118:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800311c:	4b8a      	ldr	r3, [pc, #552]	; (8003348 <HAL_RCC_OscConfig+0x4ac>)
 800311e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003120:	f003 0302 	and.w	r3, r3, #2
 8003124:	2b00      	cmp	r3, #0
 8003126:	d1ea      	bne.n	80030fe <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f003 0304 	and.w	r3, r3, #4
 8003130:	2b00      	cmp	r3, #0
 8003132:	f000 8097 	beq.w	8003264 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003136:	2300      	movs	r3, #0
 8003138:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800313a:	4b83      	ldr	r3, [pc, #524]	; (8003348 <HAL_RCC_OscConfig+0x4ac>)
 800313c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800313e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003142:	2b00      	cmp	r3, #0
 8003144:	d10f      	bne.n	8003166 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003146:	2300      	movs	r3, #0
 8003148:	60bb      	str	r3, [r7, #8]
 800314a:	4b7f      	ldr	r3, [pc, #508]	; (8003348 <HAL_RCC_OscConfig+0x4ac>)
 800314c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800314e:	4a7e      	ldr	r2, [pc, #504]	; (8003348 <HAL_RCC_OscConfig+0x4ac>)
 8003150:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003154:	6413      	str	r3, [r2, #64]	; 0x40
 8003156:	4b7c      	ldr	r3, [pc, #496]	; (8003348 <HAL_RCC_OscConfig+0x4ac>)
 8003158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800315a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800315e:	60bb      	str	r3, [r7, #8]
 8003160:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003162:	2301      	movs	r3, #1
 8003164:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003166:	4b79      	ldr	r3, [pc, #484]	; (800334c <HAL_RCC_OscConfig+0x4b0>)
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800316e:	2b00      	cmp	r3, #0
 8003170:	d118      	bne.n	80031a4 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003172:	4b76      	ldr	r3, [pc, #472]	; (800334c <HAL_RCC_OscConfig+0x4b0>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	4a75      	ldr	r2, [pc, #468]	; (800334c <HAL_RCC_OscConfig+0x4b0>)
 8003178:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800317c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800317e:	f7fe fa53 	bl	8001628 <HAL_GetTick>
 8003182:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003184:	e008      	b.n	8003198 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003186:	f7fe fa4f 	bl	8001628 <HAL_GetTick>
 800318a:	4602      	mov	r2, r0
 800318c:	693b      	ldr	r3, [r7, #16]
 800318e:	1ad3      	subs	r3, r2, r3
 8003190:	2b02      	cmp	r3, #2
 8003192:	d901      	bls.n	8003198 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003194:	2303      	movs	r3, #3
 8003196:	e118      	b.n	80033ca <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003198:	4b6c      	ldr	r3, [pc, #432]	; (800334c <HAL_RCC_OscConfig+0x4b0>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d0f0      	beq.n	8003186 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	689b      	ldr	r3, [r3, #8]
 80031a8:	2b01      	cmp	r3, #1
 80031aa:	d106      	bne.n	80031ba <HAL_RCC_OscConfig+0x31e>
 80031ac:	4b66      	ldr	r3, [pc, #408]	; (8003348 <HAL_RCC_OscConfig+0x4ac>)
 80031ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031b0:	4a65      	ldr	r2, [pc, #404]	; (8003348 <HAL_RCC_OscConfig+0x4ac>)
 80031b2:	f043 0301 	orr.w	r3, r3, #1
 80031b6:	6713      	str	r3, [r2, #112]	; 0x70
 80031b8:	e01c      	b.n	80031f4 <HAL_RCC_OscConfig+0x358>
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	689b      	ldr	r3, [r3, #8]
 80031be:	2b05      	cmp	r3, #5
 80031c0:	d10c      	bne.n	80031dc <HAL_RCC_OscConfig+0x340>
 80031c2:	4b61      	ldr	r3, [pc, #388]	; (8003348 <HAL_RCC_OscConfig+0x4ac>)
 80031c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031c6:	4a60      	ldr	r2, [pc, #384]	; (8003348 <HAL_RCC_OscConfig+0x4ac>)
 80031c8:	f043 0304 	orr.w	r3, r3, #4
 80031cc:	6713      	str	r3, [r2, #112]	; 0x70
 80031ce:	4b5e      	ldr	r3, [pc, #376]	; (8003348 <HAL_RCC_OscConfig+0x4ac>)
 80031d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031d2:	4a5d      	ldr	r2, [pc, #372]	; (8003348 <HAL_RCC_OscConfig+0x4ac>)
 80031d4:	f043 0301 	orr.w	r3, r3, #1
 80031d8:	6713      	str	r3, [r2, #112]	; 0x70
 80031da:	e00b      	b.n	80031f4 <HAL_RCC_OscConfig+0x358>
 80031dc:	4b5a      	ldr	r3, [pc, #360]	; (8003348 <HAL_RCC_OscConfig+0x4ac>)
 80031de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031e0:	4a59      	ldr	r2, [pc, #356]	; (8003348 <HAL_RCC_OscConfig+0x4ac>)
 80031e2:	f023 0301 	bic.w	r3, r3, #1
 80031e6:	6713      	str	r3, [r2, #112]	; 0x70
 80031e8:	4b57      	ldr	r3, [pc, #348]	; (8003348 <HAL_RCC_OscConfig+0x4ac>)
 80031ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031ec:	4a56      	ldr	r2, [pc, #344]	; (8003348 <HAL_RCC_OscConfig+0x4ac>)
 80031ee:	f023 0304 	bic.w	r3, r3, #4
 80031f2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	689b      	ldr	r3, [r3, #8]
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d015      	beq.n	8003228 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031fc:	f7fe fa14 	bl	8001628 <HAL_GetTick>
 8003200:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003202:	e00a      	b.n	800321a <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003204:	f7fe fa10 	bl	8001628 <HAL_GetTick>
 8003208:	4602      	mov	r2, r0
 800320a:	693b      	ldr	r3, [r7, #16]
 800320c:	1ad3      	subs	r3, r2, r3
 800320e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003212:	4293      	cmp	r3, r2
 8003214:	d901      	bls.n	800321a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003216:	2303      	movs	r3, #3
 8003218:	e0d7      	b.n	80033ca <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800321a:	4b4b      	ldr	r3, [pc, #300]	; (8003348 <HAL_RCC_OscConfig+0x4ac>)
 800321c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800321e:	f003 0302 	and.w	r3, r3, #2
 8003222:	2b00      	cmp	r3, #0
 8003224:	d0ee      	beq.n	8003204 <HAL_RCC_OscConfig+0x368>
 8003226:	e014      	b.n	8003252 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003228:	f7fe f9fe 	bl	8001628 <HAL_GetTick>
 800322c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800322e:	e00a      	b.n	8003246 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003230:	f7fe f9fa 	bl	8001628 <HAL_GetTick>
 8003234:	4602      	mov	r2, r0
 8003236:	693b      	ldr	r3, [r7, #16]
 8003238:	1ad3      	subs	r3, r2, r3
 800323a:	f241 3288 	movw	r2, #5000	; 0x1388
 800323e:	4293      	cmp	r3, r2
 8003240:	d901      	bls.n	8003246 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003242:	2303      	movs	r3, #3
 8003244:	e0c1      	b.n	80033ca <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003246:	4b40      	ldr	r3, [pc, #256]	; (8003348 <HAL_RCC_OscConfig+0x4ac>)
 8003248:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800324a:	f003 0302 	and.w	r3, r3, #2
 800324e:	2b00      	cmp	r3, #0
 8003250:	d1ee      	bne.n	8003230 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003252:	7dfb      	ldrb	r3, [r7, #23]
 8003254:	2b01      	cmp	r3, #1
 8003256:	d105      	bne.n	8003264 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003258:	4b3b      	ldr	r3, [pc, #236]	; (8003348 <HAL_RCC_OscConfig+0x4ac>)
 800325a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800325c:	4a3a      	ldr	r2, [pc, #232]	; (8003348 <HAL_RCC_OscConfig+0x4ac>)
 800325e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003262:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	699b      	ldr	r3, [r3, #24]
 8003268:	2b00      	cmp	r3, #0
 800326a:	f000 80ad 	beq.w	80033c8 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800326e:	4b36      	ldr	r3, [pc, #216]	; (8003348 <HAL_RCC_OscConfig+0x4ac>)
 8003270:	689b      	ldr	r3, [r3, #8]
 8003272:	f003 030c 	and.w	r3, r3, #12
 8003276:	2b08      	cmp	r3, #8
 8003278:	d060      	beq.n	800333c <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	699b      	ldr	r3, [r3, #24]
 800327e:	2b02      	cmp	r3, #2
 8003280:	d145      	bne.n	800330e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003282:	4b33      	ldr	r3, [pc, #204]	; (8003350 <HAL_RCC_OscConfig+0x4b4>)
 8003284:	2200      	movs	r2, #0
 8003286:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003288:	f7fe f9ce 	bl	8001628 <HAL_GetTick>
 800328c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800328e:	e008      	b.n	80032a2 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003290:	f7fe f9ca 	bl	8001628 <HAL_GetTick>
 8003294:	4602      	mov	r2, r0
 8003296:	693b      	ldr	r3, [r7, #16]
 8003298:	1ad3      	subs	r3, r2, r3
 800329a:	2b02      	cmp	r3, #2
 800329c:	d901      	bls.n	80032a2 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800329e:	2303      	movs	r3, #3
 80032a0:	e093      	b.n	80033ca <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032a2:	4b29      	ldr	r3, [pc, #164]	; (8003348 <HAL_RCC_OscConfig+0x4ac>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d1f0      	bne.n	8003290 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	69da      	ldr	r2, [r3, #28]
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6a1b      	ldr	r3, [r3, #32]
 80032b6:	431a      	orrs	r2, r3
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032bc:	019b      	lsls	r3, r3, #6
 80032be:	431a      	orrs	r2, r3
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032c4:	085b      	lsrs	r3, r3, #1
 80032c6:	3b01      	subs	r3, #1
 80032c8:	041b      	lsls	r3, r3, #16
 80032ca:	431a      	orrs	r2, r3
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032d0:	061b      	lsls	r3, r3, #24
 80032d2:	431a      	orrs	r2, r3
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032d8:	071b      	lsls	r3, r3, #28
 80032da:	491b      	ldr	r1, [pc, #108]	; (8003348 <HAL_RCC_OscConfig+0x4ac>)
 80032dc:	4313      	orrs	r3, r2
 80032de:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80032e0:	4b1b      	ldr	r3, [pc, #108]	; (8003350 <HAL_RCC_OscConfig+0x4b4>)
 80032e2:	2201      	movs	r2, #1
 80032e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032e6:	f7fe f99f 	bl	8001628 <HAL_GetTick>
 80032ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032ec:	e008      	b.n	8003300 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032ee:	f7fe f99b 	bl	8001628 <HAL_GetTick>
 80032f2:	4602      	mov	r2, r0
 80032f4:	693b      	ldr	r3, [r7, #16]
 80032f6:	1ad3      	subs	r3, r2, r3
 80032f8:	2b02      	cmp	r3, #2
 80032fa:	d901      	bls.n	8003300 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80032fc:	2303      	movs	r3, #3
 80032fe:	e064      	b.n	80033ca <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003300:	4b11      	ldr	r3, [pc, #68]	; (8003348 <HAL_RCC_OscConfig+0x4ac>)
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003308:	2b00      	cmp	r3, #0
 800330a:	d0f0      	beq.n	80032ee <HAL_RCC_OscConfig+0x452>
 800330c:	e05c      	b.n	80033c8 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800330e:	4b10      	ldr	r3, [pc, #64]	; (8003350 <HAL_RCC_OscConfig+0x4b4>)
 8003310:	2200      	movs	r2, #0
 8003312:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003314:	f7fe f988 	bl	8001628 <HAL_GetTick>
 8003318:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800331a:	e008      	b.n	800332e <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800331c:	f7fe f984 	bl	8001628 <HAL_GetTick>
 8003320:	4602      	mov	r2, r0
 8003322:	693b      	ldr	r3, [r7, #16]
 8003324:	1ad3      	subs	r3, r2, r3
 8003326:	2b02      	cmp	r3, #2
 8003328:	d901      	bls.n	800332e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800332a:	2303      	movs	r3, #3
 800332c:	e04d      	b.n	80033ca <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800332e:	4b06      	ldr	r3, [pc, #24]	; (8003348 <HAL_RCC_OscConfig+0x4ac>)
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003336:	2b00      	cmp	r3, #0
 8003338:	d1f0      	bne.n	800331c <HAL_RCC_OscConfig+0x480>
 800333a:	e045      	b.n	80033c8 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	699b      	ldr	r3, [r3, #24]
 8003340:	2b01      	cmp	r3, #1
 8003342:	d107      	bne.n	8003354 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003344:	2301      	movs	r3, #1
 8003346:	e040      	b.n	80033ca <HAL_RCC_OscConfig+0x52e>
 8003348:	40023800 	.word	0x40023800
 800334c:	40007000 	.word	0x40007000
 8003350:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003354:	4b1f      	ldr	r3, [pc, #124]	; (80033d4 <HAL_RCC_OscConfig+0x538>)
 8003356:	685b      	ldr	r3, [r3, #4]
 8003358:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	699b      	ldr	r3, [r3, #24]
 800335e:	2b01      	cmp	r3, #1
 8003360:	d030      	beq.n	80033c4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800336c:	429a      	cmp	r2, r3
 800336e:	d129      	bne.n	80033c4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800337a:	429a      	cmp	r2, r3
 800337c:	d122      	bne.n	80033c4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800337e:	68fa      	ldr	r2, [r7, #12]
 8003380:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003384:	4013      	ands	r3, r2
 8003386:	687a      	ldr	r2, [r7, #4]
 8003388:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800338a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800338c:	4293      	cmp	r3, r2
 800338e:	d119      	bne.n	80033c4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800339a:	085b      	lsrs	r3, r3, #1
 800339c:	3b01      	subs	r3, #1
 800339e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80033a0:	429a      	cmp	r2, r3
 80033a2:	d10f      	bne.n	80033c4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033ae:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80033b0:	429a      	cmp	r2, r3
 80033b2:	d107      	bne.n	80033c4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033be:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80033c0:	429a      	cmp	r2, r3
 80033c2:	d001      	beq.n	80033c8 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80033c4:	2301      	movs	r3, #1
 80033c6:	e000      	b.n	80033ca <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80033c8:	2300      	movs	r3, #0
}
 80033ca:	4618      	mov	r0, r3
 80033cc:	3718      	adds	r7, #24
 80033ce:	46bd      	mov	sp, r7
 80033d0:	bd80      	pop	{r7, pc}
 80033d2:	bf00      	nop
 80033d4:	40023800 	.word	0x40023800

080033d8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	b082      	sub	sp, #8
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d101      	bne.n	80033ea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80033e6:	2301      	movs	r3, #1
 80033e8:	e041      	b.n	800346e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033f0:	b2db      	uxtb	r3, r3
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d106      	bne.n	8003404 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	2200      	movs	r2, #0
 80033fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80033fe:	6878      	ldr	r0, [r7, #4]
 8003400:	f000 f839 	bl	8003476 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2202      	movs	r2, #2
 8003408:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681a      	ldr	r2, [r3, #0]
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	3304      	adds	r3, #4
 8003414:	4619      	mov	r1, r3
 8003416:	4610      	mov	r0, r2
 8003418:	f000 f9c0 	bl	800379c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2201      	movs	r2, #1
 8003420:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2201      	movs	r2, #1
 8003428:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2201      	movs	r2, #1
 8003430:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2201      	movs	r2, #1
 8003438:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2201      	movs	r2, #1
 8003440:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2201      	movs	r2, #1
 8003448:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2201      	movs	r2, #1
 8003450:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2201      	movs	r2, #1
 8003458:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2201      	movs	r2, #1
 8003460:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2201      	movs	r2, #1
 8003468:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800346c:	2300      	movs	r3, #0
}
 800346e:	4618      	mov	r0, r3
 8003470:	3708      	adds	r7, #8
 8003472:	46bd      	mov	sp, r7
 8003474:	bd80      	pop	{r7, pc}

08003476 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003476:	b480      	push	{r7}
 8003478:	b083      	sub	sp, #12
 800347a:	af00      	add	r7, sp, #0
 800347c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800347e:	bf00      	nop
 8003480:	370c      	adds	r7, #12
 8003482:	46bd      	mov	sp, r7
 8003484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003488:	4770      	bx	lr
	...

0800348c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800348c:	b480      	push	{r7}
 800348e:	b085      	sub	sp, #20
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800349a:	b2db      	uxtb	r3, r3
 800349c:	2b01      	cmp	r3, #1
 800349e:	d001      	beq.n	80034a4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80034a0:	2301      	movs	r3, #1
 80034a2:	e04e      	b.n	8003542 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2202      	movs	r2, #2
 80034a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	68da      	ldr	r2, [r3, #12]
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f042 0201 	orr.w	r2, r2, #1
 80034ba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	4a23      	ldr	r2, [pc, #140]	; (8003550 <HAL_TIM_Base_Start_IT+0xc4>)
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d022      	beq.n	800350c <HAL_TIM_Base_Start_IT+0x80>
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034ce:	d01d      	beq.n	800350c <HAL_TIM_Base_Start_IT+0x80>
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4a1f      	ldr	r2, [pc, #124]	; (8003554 <HAL_TIM_Base_Start_IT+0xc8>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d018      	beq.n	800350c <HAL_TIM_Base_Start_IT+0x80>
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	4a1e      	ldr	r2, [pc, #120]	; (8003558 <HAL_TIM_Base_Start_IT+0xcc>)
 80034e0:	4293      	cmp	r3, r2
 80034e2:	d013      	beq.n	800350c <HAL_TIM_Base_Start_IT+0x80>
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	4a1c      	ldr	r2, [pc, #112]	; (800355c <HAL_TIM_Base_Start_IT+0xd0>)
 80034ea:	4293      	cmp	r3, r2
 80034ec:	d00e      	beq.n	800350c <HAL_TIM_Base_Start_IT+0x80>
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	4a1b      	ldr	r2, [pc, #108]	; (8003560 <HAL_TIM_Base_Start_IT+0xd4>)
 80034f4:	4293      	cmp	r3, r2
 80034f6:	d009      	beq.n	800350c <HAL_TIM_Base_Start_IT+0x80>
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	4a19      	ldr	r2, [pc, #100]	; (8003564 <HAL_TIM_Base_Start_IT+0xd8>)
 80034fe:	4293      	cmp	r3, r2
 8003500:	d004      	beq.n	800350c <HAL_TIM_Base_Start_IT+0x80>
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	4a18      	ldr	r2, [pc, #96]	; (8003568 <HAL_TIM_Base_Start_IT+0xdc>)
 8003508:	4293      	cmp	r3, r2
 800350a:	d111      	bne.n	8003530 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	689b      	ldr	r3, [r3, #8]
 8003512:	f003 0307 	and.w	r3, r3, #7
 8003516:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	2b06      	cmp	r3, #6
 800351c:	d010      	beq.n	8003540 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	681a      	ldr	r2, [r3, #0]
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f042 0201 	orr.w	r2, r2, #1
 800352c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800352e:	e007      	b.n	8003540 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	681a      	ldr	r2, [r3, #0]
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f042 0201 	orr.w	r2, r2, #1
 800353e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003540:	2300      	movs	r3, #0
}
 8003542:	4618      	mov	r0, r3
 8003544:	3714      	adds	r7, #20
 8003546:	46bd      	mov	sp, r7
 8003548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354c:	4770      	bx	lr
 800354e:	bf00      	nop
 8003550:	40010000 	.word	0x40010000
 8003554:	40000400 	.word	0x40000400
 8003558:	40000800 	.word	0x40000800
 800355c:	40000c00 	.word	0x40000c00
 8003560:	40010400 	.word	0x40010400
 8003564:	40014000 	.word	0x40014000
 8003568:	40001800 	.word	0x40001800

0800356c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800356c:	b580      	push	{r7, lr}
 800356e:	b084      	sub	sp, #16
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	68db      	ldr	r3, [r3, #12]
 800357a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	691b      	ldr	r3, [r3, #16]
 8003582:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003584:	68bb      	ldr	r3, [r7, #8]
 8003586:	f003 0302 	and.w	r3, r3, #2
 800358a:	2b00      	cmp	r3, #0
 800358c:	d020      	beq.n	80035d0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	f003 0302 	and.w	r3, r3, #2
 8003594:	2b00      	cmp	r3, #0
 8003596:	d01b      	beq.n	80035d0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f06f 0202 	mvn.w	r2, #2
 80035a0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	2201      	movs	r2, #1
 80035a6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	699b      	ldr	r3, [r3, #24]
 80035ae:	f003 0303 	and.w	r3, r3, #3
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d003      	beq.n	80035be <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80035b6:	6878      	ldr	r0, [r7, #4]
 80035b8:	f000 f8d2 	bl	8003760 <HAL_TIM_IC_CaptureCallback>
 80035bc:	e005      	b.n	80035ca <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80035be:	6878      	ldr	r0, [r7, #4]
 80035c0:	f000 f8c4 	bl	800374c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035c4:	6878      	ldr	r0, [r7, #4]
 80035c6:	f000 f8d5 	bl	8003774 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	2200      	movs	r2, #0
 80035ce:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80035d0:	68bb      	ldr	r3, [r7, #8]
 80035d2:	f003 0304 	and.w	r3, r3, #4
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d020      	beq.n	800361c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	f003 0304 	and.w	r3, r3, #4
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d01b      	beq.n	800361c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f06f 0204 	mvn.w	r2, #4
 80035ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	2202      	movs	r2, #2
 80035f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	699b      	ldr	r3, [r3, #24]
 80035fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d003      	beq.n	800360a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003602:	6878      	ldr	r0, [r7, #4]
 8003604:	f000 f8ac 	bl	8003760 <HAL_TIM_IC_CaptureCallback>
 8003608:	e005      	b.n	8003616 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800360a:	6878      	ldr	r0, [r7, #4]
 800360c:	f000 f89e 	bl	800374c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003610:	6878      	ldr	r0, [r7, #4]
 8003612:	f000 f8af 	bl	8003774 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	2200      	movs	r2, #0
 800361a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800361c:	68bb      	ldr	r3, [r7, #8]
 800361e:	f003 0308 	and.w	r3, r3, #8
 8003622:	2b00      	cmp	r3, #0
 8003624:	d020      	beq.n	8003668 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	f003 0308 	and.w	r3, r3, #8
 800362c:	2b00      	cmp	r3, #0
 800362e:	d01b      	beq.n	8003668 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f06f 0208 	mvn.w	r2, #8
 8003638:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	2204      	movs	r2, #4
 800363e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	69db      	ldr	r3, [r3, #28]
 8003646:	f003 0303 	and.w	r3, r3, #3
 800364a:	2b00      	cmp	r3, #0
 800364c:	d003      	beq.n	8003656 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800364e:	6878      	ldr	r0, [r7, #4]
 8003650:	f000 f886 	bl	8003760 <HAL_TIM_IC_CaptureCallback>
 8003654:	e005      	b.n	8003662 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003656:	6878      	ldr	r0, [r7, #4]
 8003658:	f000 f878 	bl	800374c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800365c:	6878      	ldr	r0, [r7, #4]
 800365e:	f000 f889 	bl	8003774 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	2200      	movs	r2, #0
 8003666:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003668:	68bb      	ldr	r3, [r7, #8]
 800366a:	f003 0310 	and.w	r3, r3, #16
 800366e:	2b00      	cmp	r3, #0
 8003670:	d020      	beq.n	80036b4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	f003 0310 	and.w	r3, r3, #16
 8003678:	2b00      	cmp	r3, #0
 800367a:	d01b      	beq.n	80036b4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f06f 0210 	mvn.w	r2, #16
 8003684:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	2208      	movs	r2, #8
 800368a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	69db      	ldr	r3, [r3, #28]
 8003692:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003696:	2b00      	cmp	r3, #0
 8003698:	d003      	beq.n	80036a2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800369a:	6878      	ldr	r0, [r7, #4]
 800369c:	f000 f860 	bl	8003760 <HAL_TIM_IC_CaptureCallback>
 80036a0:	e005      	b.n	80036ae <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80036a2:	6878      	ldr	r0, [r7, #4]
 80036a4:	f000 f852 	bl	800374c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036a8:	6878      	ldr	r0, [r7, #4]
 80036aa:	f000 f863 	bl	8003774 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2200      	movs	r2, #0
 80036b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80036b4:	68bb      	ldr	r3, [r7, #8]
 80036b6:	f003 0301 	and.w	r3, r3, #1
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d00c      	beq.n	80036d8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	f003 0301 	and.w	r3, r3, #1
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d007      	beq.n	80036d8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f06f 0201 	mvn.w	r2, #1
 80036d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80036d2:	6878      	ldr	r0, [r7, #4]
 80036d4:	f7fd faf4 	bl	8000cc0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80036d8:	68bb      	ldr	r3, [r7, #8]
 80036da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d00c      	beq.n	80036fc <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d007      	beq.n	80036fc <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80036f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80036f6:	6878      	ldr	r0, [r7, #4]
 80036f8:	f000 f906 	bl	8003908 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80036fc:	68bb      	ldr	r3, [r7, #8]
 80036fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003702:	2b00      	cmp	r3, #0
 8003704:	d00c      	beq.n	8003720 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800370c:	2b00      	cmp	r3, #0
 800370e:	d007      	beq.n	8003720 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003718:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800371a:	6878      	ldr	r0, [r7, #4]
 800371c:	f000 f834 	bl	8003788 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003720:	68bb      	ldr	r3, [r7, #8]
 8003722:	f003 0320 	and.w	r3, r3, #32
 8003726:	2b00      	cmp	r3, #0
 8003728:	d00c      	beq.n	8003744 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	f003 0320 	and.w	r3, r3, #32
 8003730:	2b00      	cmp	r3, #0
 8003732:	d007      	beq.n	8003744 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f06f 0220 	mvn.w	r2, #32
 800373c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800373e:	6878      	ldr	r0, [r7, #4]
 8003740:	f000 f8d8 	bl	80038f4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003744:	bf00      	nop
 8003746:	3710      	adds	r7, #16
 8003748:	46bd      	mov	sp, r7
 800374a:	bd80      	pop	{r7, pc}

0800374c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800374c:	b480      	push	{r7}
 800374e:	b083      	sub	sp, #12
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003754:	bf00      	nop
 8003756:	370c      	adds	r7, #12
 8003758:	46bd      	mov	sp, r7
 800375a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375e:	4770      	bx	lr

08003760 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003760:	b480      	push	{r7}
 8003762:	b083      	sub	sp, #12
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003768:	bf00      	nop
 800376a:	370c      	adds	r7, #12
 800376c:	46bd      	mov	sp, r7
 800376e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003772:	4770      	bx	lr

08003774 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003774:	b480      	push	{r7}
 8003776:	b083      	sub	sp, #12
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800377c:	bf00      	nop
 800377e:	370c      	adds	r7, #12
 8003780:	46bd      	mov	sp, r7
 8003782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003786:	4770      	bx	lr

08003788 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003788:	b480      	push	{r7}
 800378a:	b083      	sub	sp, #12
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003790:	bf00      	nop
 8003792:	370c      	adds	r7, #12
 8003794:	46bd      	mov	sp, r7
 8003796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379a:	4770      	bx	lr

0800379c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800379c:	b480      	push	{r7}
 800379e:	b085      	sub	sp, #20
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
 80037a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	4a46      	ldr	r2, [pc, #280]	; (80038c8 <TIM_Base_SetConfig+0x12c>)
 80037b0:	4293      	cmp	r3, r2
 80037b2:	d013      	beq.n	80037dc <TIM_Base_SetConfig+0x40>
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037ba:	d00f      	beq.n	80037dc <TIM_Base_SetConfig+0x40>
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	4a43      	ldr	r2, [pc, #268]	; (80038cc <TIM_Base_SetConfig+0x130>)
 80037c0:	4293      	cmp	r3, r2
 80037c2:	d00b      	beq.n	80037dc <TIM_Base_SetConfig+0x40>
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	4a42      	ldr	r2, [pc, #264]	; (80038d0 <TIM_Base_SetConfig+0x134>)
 80037c8:	4293      	cmp	r3, r2
 80037ca:	d007      	beq.n	80037dc <TIM_Base_SetConfig+0x40>
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	4a41      	ldr	r2, [pc, #260]	; (80038d4 <TIM_Base_SetConfig+0x138>)
 80037d0:	4293      	cmp	r3, r2
 80037d2:	d003      	beq.n	80037dc <TIM_Base_SetConfig+0x40>
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	4a40      	ldr	r2, [pc, #256]	; (80038d8 <TIM_Base_SetConfig+0x13c>)
 80037d8:	4293      	cmp	r3, r2
 80037da:	d108      	bne.n	80037ee <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037e2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80037e4:	683b      	ldr	r3, [r7, #0]
 80037e6:	685b      	ldr	r3, [r3, #4]
 80037e8:	68fa      	ldr	r2, [r7, #12]
 80037ea:	4313      	orrs	r3, r2
 80037ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	4a35      	ldr	r2, [pc, #212]	; (80038c8 <TIM_Base_SetConfig+0x12c>)
 80037f2:	4293      	cmp	r3, r2
 80037f4:	d02b      	beq.n	800384e <TIM_Base_SetConfig+0xb2>
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037fc:	d027      	beq.n	800384e <TIM_Base_SetConfig+0xb2>
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	4a32      	ldr	r2, [pc, #200]	; (80038cc <TIM_Base_SetConfig+0x130>)
 8003802:	4293      	cmp	r3, r2
 8003804:	d023      	beq.n	800384e <TIM_Base_SetConfig+0xb2>
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	4a31      	ldr	r2, [pc, #196]	; (80038d0 <TIM_Base_SetConfig+0x134>)
 800380a:	4293      	cmp	r3, r2
 800380c:	d01f      	beq.n	800384e <TIM_Base_SetConfig+0xb2>
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	4a30      	ldr	r2, [pc, #192]	; (80038d4 <TIM_Base_SetConfig+0x138>)
 8003812:	4293      	cmp	r3, r2
 8003814:	d01b      	beq.n	800384e <TIM_Base_SetConfig+0xb2>
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	4a2f      	ldr	r2, [pc, #188]	; (80038d8 <TIM_Base_SetConfig+0x13c>)
 800381a:	4293      	cmp	r3, r2
 800381c:	d017      	beq.n	800384e <TIM_Base_SetConfig+0xb2>
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	4a2e      	ldr	r2, [pc, #184]	; (80038dc <TIM_Base_SetConfig+0x140>)
 8003822:	4293      	cmp	r3, r2
 8003824:	d013      	beq.n	800384e <TIM_Base_SetConfig+0xb2>
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	4a2d      	ldr	r2, [pc, #180]	; (80038e0 <TIM_Base_SetConfig+0x144>)
 800382a:	4293      	cmp	r3, r2
 800382c:	d00f      	beq.n	800384e <TIM_Base_SetConfig+0xb2>
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	4a2c      	ldr	r2, [pc, #176]	; (80038e4 <TIM_Base_SetConfig+0x148>)
 8003832:	4293      	cmp	r3, r2
 8003834:	d00b      	beq.n	800384e <TIM_Base_SetConfig+0xb2>
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	4a2b      	ldr	r2, [pc, #172]	; (80038e8 <TIM_Base_SetConfig+0x14c>)
 800383a:	4293      	cmp	r3, r2
 800383c:	d007      	beq.n	800384e <TIM_Base_SetConfig+0xb2>
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	4a2a      	ldr	r2, [pc, #168]	; (80038ec <TIM_Base_SetConfig+0x150>)
 8003842:	4293      	cmp	r3, r2
 8003844:	d003      	beq.n	800384e <TIM_Base_SetConfig+0xb2>
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	4a29      	ldr	r2, [pc, #164]	; (80038f0 <TIM_Base_SetConfig+0x154>)
 800384a:	4293      	cmp	r3, r2
 800384c:	d108      	bne.n	8003860 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003854:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	68db      	ldr	r3, [r3, #12]
 800385a:	68fa      	ldr	r2, [r7, #12]
 800385c:	4313      	orrs	r3, r2
 800385e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003866:	683b      	ldr	r3, [r7, #0]
 8003868:	695b      	ldr	r3, [r3, #20]
 800386a:	4313      	orrs	r3, r2
 800386c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	68fa      	ldr	r2, [r7, #12]
 8003872:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	689a      	ldr	r2, [r3, #8]
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	681a      	ldr	r2, [r3, #0]
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	4a10      	ldr	r2, [pc, #64]	; (80038c8 <TIM_Base_SetConfig+0x12c>)
 8003888:	4293      	cmp	r3, r2
 800388a:	d003      	beq.n	8003894 <TIM_Base_SetConfig+0xf8>
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	4a12      	ldr	r2, [pc, #72]	; (80038d8 <TIM_Base_SetConfig+0x13c>)
 8003890:	4293      	cmp	r3, r2
 8003892:	d103      	bne.n	800389c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003894:	683b      	ldr	r3, [r7, #0]
 8003896:	691a      	ldr	r2, [r3, #16]
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2201      	movs	r2, #1
 80038a0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	691b      	ldr	r3, [r3, #16]
 80038a6:	f003 0301 	and.w	r3, r3, #1
 80038aa:	2b01      	cmp	r3, #1
 80038ac:	d105      	bne.n	80038ba <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	691b      	ldr	r3, [r3, #16]
 80038b2:	f023 0201 	bic.w	r2, r3, #1
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	611a      	str	r2, [r3, #16]
  }
}
 80038ba:	bf00      	nop
 80038bc:	3714      	adds	r7, #20
 80038be:	46bd      	mov	sp, r7
 80038c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c4:	4770      	bx	lr
 80038c6:	bf00      	nop
 80038c8:	40010000 	.word	0x40010000
 80038cc:	40000400 	.word	0x40000400
 80038d0:	40000800 	.word	0x40000800
 80038d4:	40000c00 	.word	0x40000c00
 80038d8:	40010400 	.word	0x40010400
 80038dc:	40014000 	.word	0x40014000
 80038e0:	40014400 	.word	0x40014400
 80038e4:	40014800 	.word	0x40014800
 80038e8:	40001800 	.word	0x40001800
 80038ec:	40001c00 	.word	0x40001c00
 80038f0:	40002000 	.word	0x40002000

080038f4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80038f4:	b480      	push	{r7}
 80038f6:	b083      	sub	sp, #12
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80038fc:	bf00      	nop
 80038fe:	370c      	adds	r7, #12
 8003900:	46bd      	mov	sp, r7
 8003902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003906:	4770      	bx	lr

08003908 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003908:	b480      	push	{r7}
 800390a:	b083      	sub	sp, #12
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003910:	bf00      	nop
 8003912:	370c      	adds	r7, #12
 8003914:	46bd      	mov	sp, r7
 8003916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391a:	4770      	bx	lr

0800391c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800391c:	b580      	push	{r7, lr}
 800391e:	b082      	sub	sp, #8
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2b00      	cmp	r3, #0
 8003928:	d101      	bne.n	800392e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800392a:	2301      	movs	r3, #1
 800392c:	e042      	b.n	80039b4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003934:	b2db      	uxtb	r3, r3
 8003936:	2b00      	cmp	r3, #0
 8003938:	d106      	bne.n	8003948 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	2200      	movs	r2, #0
 800393e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003942:	6878      	ldr	r0, [r7, #4]
 8003944:	f7fd fd04 	bl	8001350 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2224      	movs	r2, #36	; 0x24
 800394c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	68da      	ldr	r2, [r3, #12]
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800395e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003960:	6878      	ldr	r0, [r7, #4]
 8003962:	f000 f973 	bl	8003c4c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	691a      	ldr	r2, [r3, #16]
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003974:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	695a      	ldr	r2, [r3, #20]
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003984:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	68da      	ldr	r2, [r3, #12]
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003994:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	2200      	movs	r2, #0
 800399a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2220      	movs	r2, #32
 80039a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2220      	movs	r2, #32
 80039a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2200      	movs	r2, #0
 80039b0:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80039b2:	2300      	movs	r3, #0
}
 80039b4:	4618      	mov	r0, r3
 80039b6:	3708      	adds	r7, #8
 80039b8:	46bd      	mov	sp, r7
 80039ba:	bd80      	pop	{r7, pc}

080039bc <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	b08a      	sub	sp, #40	; 0x28
 80039c0:	af02      	add	r7, sp, #8
 80039c2:	60f8      	str	r0, [r7, #12]
 80039c4:	60b9      	str	r1, [r7, #8]
 80039c6:	603b      	str	r3, [r7, #0]
 80039c8:	4613      	mov	r3, r2
 80039ca:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80039cc:	2300      	movs	r3, #0
 80039ce:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80039d6:	b2db      	uxtb	r3, r3
 80039d8:	2b20      	cmp	r3, #32
 80039da:	d175      	bne.n	8003ac8 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80039dc:	68bb      	ldr	r3, [r7, #8]
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d002      	beq.n	80039e8 <HAL_UART_Transmit+0x2c>
 80039e2:	88fb      	ldrh	r3, [r7, #6]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d101      	bne.n	80039ec <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80039e8:	2301      	movs	r3, #1
 80039ea:	e06e      	b.n	8003aca <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	2200      	movs	r2, #0
 80039f0:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	2221      	movs	r2, #33	; 0x21
 80039f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80039fa:	f7fd fe15 	bl	8001628 <HAL_GetTick>
 80039fe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	88fa      	ldrh	r2, [r7, #6]
 8003a04:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	88fa      	ldrh	r2, [r7, #6]
 8003a0a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	689b      	ldr	r3, [r3, #8]
 8003a10:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a14:	d108      	bne.n	8003a28 <HAL_UART_Transmit+0x6c>
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	691b      	ldr	r3, [r3, #16]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d104      	bne.n	8003a28 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003a1e:	2300      	movs	r3, #0
 8003a20:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003a22:	68bb      	ldr	r3, [r7, #8]
 8003a24:	61bb      	str	r3, [r7, #24]
 8003a26:	e003      	b.n	8003a30 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003a28:	68bb      	ldr	r3, [r7, #8]
 8003a2a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003a30:	e02e      	b.n	8003a90 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003a32:	683b      	ldr	r3, [r7, #0]
 8003a34:	9300      	str	r3, [sp, #0]
 8003a36:	697b      	ldr	r3, [r7, #20]
 8003a38:	2200      	movs	r2, #0
 8003a3a:	2180      	movs	r1, #128	; 0x80
 8003a3c:	68f8      	ldr	r0, [r7, #12]
 8003a3e:	f000 f848 	bl	8003ad2 <UART_WaitOnFlagUntilTimeout>
 8003a42:	4603      	mov	r3, r0
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d005      	beq.n	8003a54 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	2220      	movs	r2, #32
 8003a4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8003a50:	2303      	movs	r3, #3
 8003a52:	e03a      	b.n	8003aca <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003a54:	69fb      	ldr	r3, [r7, #28]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d10b      	bne.n	8003a72 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003a5a:	69bb      	ldr	r3, [r7, #24]
 8003a5c:	881b      	ldrh	r3, [r3, #0]
 8003a5e:	461a      	mov	r2, r3
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003a68:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003a6a:	69bb      	ldr	r3, [r7, #24]
 8003a6c:	3302      	adds	r3, #2
 8003a6e:	61bb      	str	r3, [r7, #24]
 8003a70:	e007      	b.n	8003a82 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003a72:	69fb      	ldr	r3, [r7, #28]
 8003a74:	781a      	ldrb	r2, [r3, #0]
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003a7c:	69fb      	ldr	r3, [r7, #28]
 8003a7e:	3301      	adds	r3, #1
 8003a80:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003a86:	b29b      	uxth	r3, r3
 8003a88:	3b01      	subs	r3, #1
 8003a8a:	b29a      	uxth	r2, r3
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003a94:	b29b      	uxth	r3, r3
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d1cb      	bne.n	8003a32 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003a9a:	683b      	ldr	r3, [r7, #0]
 8003a9c:	9300      	str	r3, [sp, #0]
 8003a9e:	697b      	ldr	r3, [r7, #20]
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	2140      	movs	r1, #64	; 0x40
 8003aa4:	68f8      	ldr	r0, [r7, #12]
 8003aa6:	f000 f814 	bl	8003ad2 <UART_WaitOnFlagUntilTimeout>
 8003aaa:	4603      	mov	r3, r0
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d005      	beq.n	8003abc <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	2220      	movs	r2, #32
 8003ab4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8003ab8:	2303      	movs	r3, #3
 8003aba:	e006      	b.n	8003aca <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	2220      	movs	r2, #32
 8003ac0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	e000      	b.n	8003aca <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003ac8:	2302      	movs	r3, #2
  }
}
 8003aca:	4618      	mov	r0, r3
 8003acc:	3720      	adds	r7, #32
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	bd80      	pop	{r7, pc}

08003ad2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003ad2:	b580      	push	{r7, lr}
 8003ad4:	b086      	sub	sp, #24
 8003ad6:	af00      	add	r7, sp, #0
 8003ad8:	60f8      	str	r0, [r7, #12]
 8003ada:	60b9      	str	r1, [r7, #8]
 8003adc:	603b      	str	r3, [r7, #0]
 8003ade:	4613      	mov	r3, r2
 8003ae0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ae2:	e03b      	b.n	8003b5c <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ae4:	6a3b      	ldr	r3, [r7, #32]
 8003ae6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003aea:	d037      	beq.n	8003b5c <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003aec:	f7fd fd9c 	bl	8001628 <HAL_GetTick>
 8003af0:	4602      	mov	r2, r0
 8003af2:	683b      	ldr	r3, [r7, #0]
 8003af4:	1ad3      	subs	r3, r2, r3
 8003af6:	6a3a      	ldr	r2, [r7, #32]
 8003af8:	429a      	cmp	r2, r3
 8003afa:	d302      	bcc.n	8003b02 <UART_WaitOnFlagUntilTimeout+0x30>
 8003afc:	6a3b      	ldr	r3, [r7, #32]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d101      	bne.n	8003b06 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003b02:	2303      	movs	r3, #3
 8003b04:	e03a      	b.n	8003b7c <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	68db      	ldr	r3, [r3, #12]
 8003b0c:	f003 0304 	and.w	r3, r3, #4
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d023      	beq.n	8003b5c <UART_WaitOnFlagUntilTimeout+0x8a>
 8003b14:	68bb      	ldr	r3, [r7, #8]
 8003b16:	2b80      	cmp	r3, #128	; 0x80
 8003b18:	d020      	beq.n	8003b5c <UART_WaitOnFlagUntilTimeout+0x8a>
 8003b1a:	68bb      	ldr	r3, [r7, #8]
 8003b1c:	2b40      	cmp	r3, #64	; 0x40
 8003b1e:	d01d      	beq.n	8003b5c <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f003 0308 	and.w	r3, r3, #8
 8003b2a:	2b08      	cmp	r3, #8
 8003b2c:	d116      	bne.n	8003b5c <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003b2e:	2300      	movs	r3, #0
 8003b30:	617b      	str	r3, [r7, #20]
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	617b      	str	r3, [r7, #20]
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	685b      	ldr	r3, [r3, #4]
 8003b40:	617b      	str	r3, [r7, #20]
 8003b42:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003b44:	68f8      	ldr	r0, [r7, #12]
 8003b46:	f000 f81d 	bl	8003b84 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	2208      	movs	r2, #8
 8003b4e:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	2200      	movs	r2, #0
 8003b54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8003b58:	2301      	movs	r3, #1
 8003b5a:	e00f      	b.n	8003b7c <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	681a      	ldr	r2, [r3, #0]
 8003b62:	68bb      	ldr	r3, [r7, #8]
 8003b64:	4013      	ands	r3, r2
 8003b66:	68ba      	ldr	r2, [r7, #8]
 8003b68:	429a      	cmp	r2, r3
 8003b6a:	bf0c      	ite	eq
 8003b6c:	2301      	moveq	r3, #1
 8003b6e:	2300      	movne	r3, #0
 8003b70:	b2db      	uxtb	r3, r3
 8003b72:	461a      	mov	r2, r3
 8003b74:	79fb      	ldrb	r3, [r7, #7]
 8003b76:	429a      	cmp	r2, r3
 8003b78:	d0b4      	beq.n	8003ae4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003b7a:	2300      	movs	r3, #0
}
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	3718      	adds	r7, #24
 8003b80:	46bd      	mov	sp, r7
 8003b82:	bd80      	pop	{r7, pc}

08003b84 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003b84:	b480      	push	{r7}
 8003b86:	b095      	sub	sp, #84	; 0x54
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	330c      	adds	r3, #12
 8003b92:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b96:	e853 3f00 	ldrex	r3, [r3]
 8003b9a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003b9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b9e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003ba2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	330c      	adds	r3, #12
 8003baa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003bac:	643a      	str	r2, [r7, #64]	; 0x40
 8003bae:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bb0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003bb2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003bb4:	e841 2300 	strex	r3, r2, [r1]
 8003bb8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003bba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d1e5      	bne.n	8003b8c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	3314      	adds	r3, #20
 8003bc6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bc8:	6a3b      	ldr	r3, [r7, #32]
 8003bca:	e853 3f00 	ldrex	r3, [r3]
 8003bce:	61fb      	str	r3, [r7, #28]
   return(result);
 8003bd0:	69fb      	ldr	r3, [r7, #28]
 8003bd2:	f023 0301 	bic.w	r3, r3, #1
 8003bd6:	64bb      	str	r3, [r7, #72]	; 0x48
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	3314      	adds	r3, #20
 8003bde:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003be0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003be2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003be4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003be6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003be8:	e841 2300 	strex	r3, r2, [r1]
 8003bec:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d1e5      	bne.n	8003bc0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bf8:	2b01      	cmp	r3, #1
 8003bfa:	d119      	bne.n	8003c30 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	330c      	adds	r3, #12
 8003c02:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	e853 3f00 	ldrex	r3, [r3]
 8003c0a:	60bb      	str	r3, [r7, #8]
   return(result);
 8003c0c:	68bb      	ldr	r3, [r7, #8]
 8003c0e:	f023 0310 	bic.w	r3, r3, #16
 8003c12:	647b      	str	r3, [r7, #68]	; 0x44
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	330c      	adds	r3, #12
 8003c1a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003c1c:	61ba      	str	r2, [r7, #24]
 8003c1e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c20:	6979      	ldr	r1, [r7, #20]
 8003c22:	69ba      	ldr	r2, [r7, #24]
 8003c24:	e841 2300 	strex	r3, r2, [r1]
 8003c28:	613b      	str	r3, [r7, #16]
   return(result);
 8003c2a:	693b      	ldr	r3, [r7, #16]
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d1e5      	bne.n	8003bfc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2220      	movs	r2, #32
 8003c34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003c3e:	bf00      	nop
 8003c40:	3754      	adds	r7, #84	; 0x54
 8003c42:	46bd      	mov	sp, r7
 8003c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c48:	4770      	bx	lr
	...

08003c4c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003c4c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003c50:	b0c0      	sub	sp, #256	; 0x100
 8003c52:	af00      	add	r7, sp, #0
 8003c54:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003c58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	691b      	ldr	r3, [r3, #16]
 8003c60:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003c64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c68:	68d9      	ldr	r1, [r3, #12]
 8003c6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c6e:	681a      	ldr	r2, [r3, #0]
 8003c70:	ea40 0301 	orr.w	r3, r0, r1
 8003c74:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003c76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c7a:	689a      	ldr	r2, [r3, #8]
 8003c7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c80:	691b      	ldr	r3, [r3, #16]
 8003c82:	431a      	orrs	r2, r3
 8003c84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c88:	695b      	ldr	r3, [r3, #20]
 8003c8a:	431a      	orrs	r2, r3
 8003c8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c90:	69db      	ldr	r3, [r3, #28]
 8003c92:	4313      	orrs	r3, r2
 8003c94:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003c98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	68db      	ldr	r3, [r3, #12]
 8003ca0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003ca4:	f021 010c 	bic.w	r1, r1, #12
 8003ca8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cac:	681a      	ldr	r2, [r3, #0]
 8003cae:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003cb2:	430b      	orrs	r3, r1
 8003cb4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003cb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	695b      	ldr	r3, [r3, #20]
 8003cbe:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003cc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cc6:	6999      	ldr	r1, [r3, #24]
 8003cc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ccc:	681a      	ldr	r2, [r3, #0]
 8003cce:	ea40 0301 	orr.w	r3, r0, r1
 8003cd2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003cd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cd8:	681a      	ldr	r2, [r3, #0]
 8003cda:	4b8f      	ldr	r3, [pc, #572]	; (8003f18 <UART_SetConfig+0x2cc>)
 8003cdc:	429a      	cmp	r2, r3
 8003cde:	d005      	beq.n	8003cec <UART_SetConfig+0xa0>
 8003ce0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ce4:	681a      	ldr	r2, [r3, #0]
 8003ce6:	4b8d      	ldr	r3, [pc, #564]	; (8003f1c <UART_SetConfig+0x2d0>)
 8003ce8:	429a      	cmp	r2, r3
 8003cea:	d104      	bne.n	8003cf6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003cec:	f7fe fe60 	bl	80029b0 <HAL_RCC_GetPCLK2Freq>
 8003cf0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003cf4:	e003      	b.n	8003cfe <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003cf6:	f7fe fe47 	bl	8002988 <HAL_RCC_GetPCLK1Freq>
 8003cfa:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003cfe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d02:	69db      	ldr	r3, [r3, #28]
 8003d04:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d08:	f040 810c 	bne.w	8003f24 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003d0c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003d10:	2200      	movs	r2, #0
 8003d12:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003d16:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003d1a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003d1e:	4622      	mov	r2, r4
 8003d20:	462b      	mov	r3, r5
 8003d22:	1891      	adds	r1, r2, r2
 8003d24:	65b9      	str	r1, [r7, #88]	; 0x58
 8003d26:	415b      	adcs	r3, r3
 8003d28:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003d2a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003d2e:	4621      	mov	r1, r4
 8003d30:	eb12 0801 	adds.w	r8, r2, r1
 8003d34:	4629      	mov	r1, r5
 8003d36:	eb43 0901 	adc.w	r9, r3, r1
 8003d3a:	f04f 0200 	mov.w	r2, #0
 8003d3e:	f04f 0300 	mov.w	r3, #0
 8003d42:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003d46:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003d4a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003d4e:	4690      	mov	r8, r2
 8003d50:	4699      	mov	r9, r3
 8003d52:	4623      	mov	r3, r4
 8003d54:	eb18 0303 	adds.w	r3, r8, r3
 8003d58:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003d5c:	462b      	mov	r3, r5
 8003d5e:	eb49 0303 	adc.w	r3, r9, r3
 8003d62:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003d66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d6a:	685b      	ldr	r3, [r3, #4]
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003d72:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003d76:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003d7a:	460b      	mov	r3, r1
 8003d7c:	18db      	adds	r3, r3, r3
 8003d7e:	653b      	str	r3, [r7, #80]	; 0x50
 8003d80:	4613      	mov	r3, r2
 8003d82:	eb42 0303 	adc.w	r3, r2, r3
 8003d86:	657b      	str	r3, [r7, #84]	; 0x54
 8003d88:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003d8c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003d90:	f7fc fa4a 	bl	8000228 <__aeabi_uldivmod>
 8003d94:	4602      	mov	r2, r0
 8003d96:	460b      	mov	r3, r1
 8003d98:	4b61      	ldr	r3, [pc, #388]	; (8003f20 <UART_SetConfig+0x2d4>)
 8003d9a:	fba3 2302 	umull	r2, r3, r3, r2
 8003d9e:	095b      	lsrs	r3, r3, #5
 8003da0:	011c      	lsls	r4, r3, #4
 8003da2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003da6:	2200      	movs	r2, #0
 8003da8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003dac:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003db0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003db4:	4642      	mov	r2, r8
 8003db6:	464b      	mov	r3, r9
 8003db8:	1891      	adds	r1, r2, r2
 8003dba:	64b9      	str	r1, [r7, #72]	; 0x48
 8003dbc:	415b      	adcs	r3, r3
 8003dbe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003dc0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003dc4:	4641      	mov	r1, r8
 8003dc6:	eb12 0a01 	adds.w	sl, r2, r1
 8003dca:	4649      	mov	r1, r9
 8003dcc:	eb43 0b01 	adc.w	fp, r3, r1
 8003dd0:	f04f 0200 	mov.w	r2, #0
 8003dd4:	f04f 0300 	mov.w	r3, #0
 8003dd8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003ddc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003de0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003de4:	4692      	mov	sl, r2
 8003de6:	469b      	mov	fp, r3
 8003de8:	4643      	mov	r3, r8
 8003dea:	eb1a 0303 	adds.w	r3, sl, r3
 8003dee:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003df2:	464b      	mov	r3, r9
 8003df4:	eb4b 0303 	adc.w	r3, fp, r3
 8003df8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003dfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e00:	685b      	ldr	r3, [r3, #4]
 8003e02:	2200      	movs	r2, #0
 8003e04:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003e08:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003e0c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003e10:	460b      	mov	r3, r1
 8003e12:	18db      	adds	r3, r3, r3
 8003e14:	643b      	str	r3, [r7, #64]	; 0x40
 8003e16:	4613      	mov	r3, r2
 8003e18:	eb42 0303 	adc.w	r3, r2, r3
 8003e1c:	647b      	str	r3, [r7, #68]	; 0x44
 8003e1e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003e22:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003e26:	f7fc f9ff 	bl	8000228 <__aeabi_uldivmod>
 8003e2a:	4602      	mov	r2, r0
 8003e2c:	460b      	mov	r3, r1
 8003e2e:	4611      	mov	r1, r2
 8003e30:	4b3b      	ldr	r3, [pc, #236]	; (8003f20 <UART_SetConfig+0x2d4>)
 8003e32:	fba3 2301 	umull	r2, r3, r3, r1
 8003e36:	095b      	lsrs	r3, r3, #5
 8003e38:	2264      	movs	r2, #100	; 0x64
 8003e3a:	fb02 f303 	mul.w	r3, r2, r3
 8003e3e:	1acb      	subs	r3, r1, r3
 8003e40:	00db      	lsls	r3, r3, #3
 8003e42:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003e46:	4b36      	ldr	r3, [pc, #216]	; (8003f20 <UART_SetConfig+0x2d4>)
 8003e48:	fba3 2302 	umull	r2, r3, r3, r2
 8003e4c:	095b      	lsrs	r3, r3, #5
 8003e4e:	005b      	lsls	r3, r3, #1
 8003e50:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003e54:	441c      	add	r4, r3
 8003e56:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003e60:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003e64:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003e68:	4642      	mov	r2, r8
 8003e6a:	464b      	mov	r3, r9
 8003e6c:	1891      	adds	r1, r2, r2
 8003e6e:	63b9      	str	r1, [r7, #56]	; 0x38
 8003e70:	415b      	adcs	r3, r3
 8003e72:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003e74:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003e78:	4641      	mov	r1, r8
 8003e7a:	1851      	adds	r1, r2, r1
 8003e7c:	6339      	str	r1, [r7, #48]	; 0x30
 8003e7e:	4649      	mov	r1, r9
 8003e80:	414b      	adcs	r3, r1
 8003e82:	637b      	str	r3, [r7, #52]	; 0x34
 8003e84:	f04f 0200 	mov.w	r2, #0
 8003e88:	f04f 0300 	mov.w	r3, #0
 8003e8c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003e90:	4659      	mov	r1, fp
 8003e92:	00cb      	lsls	r3, r1, #3
 8003e94:	4651      	mov	r1, sl
 8003e96:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003e9a:	4651      	mov	r1, sl
 8003e9c:	00ca      	lsls	r2, r1, #3
 8003e9e:	4610      	mov	r0, r2
 8003ea0:	4619      	mov	r1, r3
 8003ea2:	4603      	mov	r3, r0
 8003ea4:	4642      	mov	r2, r8
 8003ea6:	189b      	adds	r3, r3, r2
 8003ea8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003eac:	464b      	mov	r3, r9
 8003eae:	460a      	mov	r2, r1
 8003eb0:	eb42 0303 	adc.w	r3, r2, r3
 8003eb4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003eb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ebc:	685b      	ldr	r3, [r3, #4]
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003ec4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003ec8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003ecc:	460b      	mov	r3, r1
 8003ece:	18db      	adds	r3, r3, r3
 8003ed0:	62bb      	str	r3, [r7, #40]	; 0x28
 8003ed2:	4613      	mov	r3, r2
 8003ed4:	eb42 0303 	adc.w	r3, r2, r3
 8003ed8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003eda:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003ede:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003ee2:	f7fc f9a1 	bl	8000228 <__aeabi_uldivmod>
 8003ee6:	4602      	mov	r2, r0
 8003ee8:	460b      	mov	r3, r1
 8003eea:	4b0d      	ldr	r3, [pc, #52]	; (8003f20 <UART_SetConfig+0x2d4>)
 8003eec:	fba3 1302 	umull	r1, r3, r3, r2
 8003ef0:	095b      	lsrs	r3, r3, #5
 8003ef2:	2164      	movs	r1, #100	; 0x64
 8003ef4:	fb01 f303 	mul.w	r3, r1, r3
 8003ef8:	1ad3      	subs	r3, r2, r3
 8003efa:	00db      	lsls	r3, r3, #3
 8003efc:	3332      	adds	r3, #50	; 0x32
 8003efe:	4a08      	ldr	r2, [pc, #32]	; (8003f20 <UART_SetConfig+0x2d4>)
 8003f00:	fba2 2303 	umull	r2, r3, r2, r3
 8003f04:	095b      	lsrs	r3, r3, #5
 8003f06:	f003 0207 	and.w	r2, r3, #7
 8003f0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	4422      	add	r2, r4
 8003f12:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003f14:	e106      	b.n	8004124 <UART_SetConfig+0x4d8>
 8003f16:	bf00      	nop
 8003f18:	40011000 	.word	0x40011000
 8003f1c:	40011400 	.word	0x40011400
 8003f20:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003f24:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003f28:	2200      	movs	r2, #0
 8003f2a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003f2e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003f32:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003f36:	4642      	mov	r2, r8
 8003f38:	464b      	mov	r3, r9
 8003f3a:	1891      	adds	r1, r2, r2
 8003f3c:	6239      	str	r1, [r7, #32]
 8003f3e:	415b      	adcs	r3, r3
 8003f40:	627b      	str	r3, [r7, #36]	; 0x24
 8003f42:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003f46:	4641      	mov	r1, r8
 8003f48:	1854      	adds	r4, r2, r1
 8003f4a:	4649      	mov	r1, r9
 8003f4c:	eb43 0501 	adc.w	r5, r3, r1
 8003f50:	f04f 0200 	mov.w	r2, #0
 8003f54:	f04f 0300 	mov.w	r3, #0
 8003f58:	00eb      	lsls	r3, r5, #3
 8003f5a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003f5e:	00e2      	lsls	r2, r4, #3
 8003f60:	4614      	mov	r4, r2
 8003f62:	461d      	mov	r5, r3
 8003f64:	4643      	mov	r3, r8
 8003f66:	18e3      	adds	r3, r4, r3
 8003f68:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003f6c:	464b      	mov	r3, r9
 8003f6e:	eb45 0303 	adc.w	r3, r5, r3
 8003f72:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003f76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f7a:	685b      	ldr	r3, [r3, #4]
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003f82:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003f86:	f04f 0200 	mov.w	r2, #0
 8003f8a:	f04f 0300 	mov.w	r3, #0
 8003f8e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003f92:	4629      	mov	r1, r5
 8003f94:	008b      	lsls	r3, r1, #2
 8003f96:	4621      	mov	r1, r4
 8003f98:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003f9c:	4621      	mov	r1, r4
 8003f9e:	008a      	lsls	r2, r1, #2
 8003fa0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003fa4:	f7fc f940 	bl	8000228 <__aeabi_uldivmod>
 8003fa8:	4602      	mov	r2, r0
 8003faa:	460b      	mov	r3, r1
 8003fac:	4b60      	ldr	r3, [pc, #384]	; (8004130 <UART_SetConfig+0x4e4>)
 8003fae:	fba3 2302 	umull	r2, r3, r3, r2
 8003fb2:	095b      	lsrs	r3, r3, #5
 8003fb4:	011c      	lsls	r4, r3, #4
 8003fb6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003fba:	2200      	movs	r2, #0
 8003fbc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003fc0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003fc4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003fc8:	4642      	mov	r2, r8
 8003fca:	464b      	mov	r3, r9
 8003fcc:	1891      	adds	r1, r2, r2
 8003fce:	61b9      	str	r1, [r7, #24]
 8003fd0:	415b      	adcs	r3, r3
 8003fd2:	61fb      	str	r3, [r7, #28]
 8003fd4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003fd8:	4641      	mov	r1, r8
 8003fda:	1851      	adds	r1, r2, r1
 8003fdc:	6139      	str	r1, [r7, #16]
 8003fde:	4649      	mov	r1, r9
 8003fe0:	414b      	adcs	r3, r1
 8003fe2:	617b      	str	r3, [r7, #20]
 8003fe4:	f04f 0200 	mov.w	r2, #0
 8003fe8:	f04f 0300 	mov.w	r3, #0
 8003fec:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003ff0:	4659      	mov	r1, fp
 8003ff2:	00cb      	lsls	r3, r1, #3
 8003ff4:	4651      	mov	r1, sl
 8003ff6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003ffa:	4651      	mov	r1, sl
 8003ffc:	00ca      	lsls	r2, r1, #3
 8003ffe:	4610      	mov	r0, r2
 8004000:	4619      	mov	r1, r3
 8004002:	4603      	mov	r3, r0
 8004004:	4642      	mov	r2, r8
 8004006:	189b      	adds	r3, r3, r2
 8004008:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800400c:	464b      	mov	r3, r9
 800400e:	460a      	mov	r2, r1
 8004010:	eb42 0303 	adc.w	r3, r2, r3
 8004014:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004018:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800401c:	685b      	ldr	r3, [r3, #4]
 800401e:	2200      	movs	r2, #0
 8004020:	67bb      	str	r3, [r7, #120]	; 0x78
 8004022:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004024:	f04f 0200 	mov.w	r2, #0
 8004028:	f04f 0300 	mov.w	r3, #0
 800402c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004030:	4649      	mov	r1, r9
 8004032:	008b      	lsls	r3, r1, #2
 8004034:	4641      	mov	r1, r8
 8004036:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800403a:	4641      	mov	r1, r8
 800403c:	008a      	lsls	r2, r1, #2
 800403e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004042:	f7fc f8f1 	bl	8000228 <__aeabi_uldivmod>
 8004046:	4602      	mov	r2, r0
 8004048:	460b      	mov	r3, r1
 800404a:	4611      	mov	r1, r2
 800404c:	4b38      	ldr	r3, [pc, #224]	; (8004130 <UART_SetConfig+0x4e4>)
 800404e:	fba3 2301 	umull	r2, r3, r3, r1
 8004052:	095b      	lsrs	r3, r3, #5
 8004054:	2264      	movs	r2, #100	; 0x64
 8004056:	fb02 f303 	mul.w	r3, r2, r3
 800405a:	1acb      	subs	r3, r1, r3
 800405c:	011b      	lsls	r3, r3, #4
 800405e:	3332      	adds	r3, #50	; 0x32
 8004060:	4a33      	ldr	r2, [pc, #204]	; (8004130 <UART_SetConfig+0x4e4>)
 8004062:	fba2 2303 	umull	r2, r3, r2, r3
 8004066:	095b      	lsrs	r3, r3, #5
 8004068:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800406c:	441c      	add	r4, r3
 800406e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004072:	2200      	movs	r2, #0
 8004074:	673b      	str	r3, [r7, #112]	; 0x70
 8004076:	677a      	str	r2, [r7, #116]	; 0x74
 8004078:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800407c:	4642      	mov	r2, r8
 800407e:	464b      	mov	r3, r9
 8004080:	1891      	adds	r1, r2, r2
 8004082:	60b9      	str	r1, [r7, #8]
 8004084:	415b      	adcs	r3, r3
 8004086:	60fb      	str	r3, [r7, #12]
 8004088:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800408c:	4641      	mov	r1, r8
 800408e:	1851      	adds	r1, r2, r1
 8004090:	6039      	str	r1, [r7, #0]
 8004092:	4649      	mov	r1, r9
 8004094:	414b      	adcs	r3, r1
 8004096:	607b      	str	r3, [r7, #4]
 8004098:	f04f 0200 	mov.w	r2, #0
 800409c:	f04f 0300 	mov.w	r3, #0
 80040a0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80040a4:	4659      	mov	r1, fp
 80040a6:	00cb      	lsls	r3, r1, #3
 80040a8:	4651      	mov	r1, sl
 80040aa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80040ae:	4651      	mov	r1, sl
 80040b0:	00ca      	lsls	r2, r1, #3
 80040b2:	4610      	mov	r0, r2
 80040b4:	4619      	mov	r1, r3
 80040b6:	4603      	mov	r3, r0
 80040b8:	4642      	mov	r2, r8
 80040ba:	189b      	adds	r3, r3, r2
 80040bc:	66bb      	str	r3, [r7, #104]	; 0x68
 80040be:	464b      	mov	r3, r9
 80040c0:	460a      	mov	r2, r1
 80040c2:	eb42 0303 	adc.w	r3, r2, r3
 80040c6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80040c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040cc:	685b      	ldr	r3, [r3, #4]
 80040ce:	2200      	movs	r2, #0
 80040d0:	663b      	str	r3, [r7, #96]	; 0x60
 80040d2:	667a      	str	r2, [r7, #100]	; 0x64
 80040d4:	f04f 0200 	mov.w	r2, #0
 80040d8:	f04f 0300 	mov.w	r3, #0
 80040dc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80040e0:	4649      	mov	r1, r9
 80040e2:	008b      	lsls	r3, r1, #2
 80040e4:	4641      	mov	r1, r8
 80040e6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80040ea:	4641      	mov	r1, r8
 80040ec:	008a      	lsls	r2, r1, #2
 80040ee:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80040f2:	f7fc f899 	bl	8000228 <__aeabi_uldivmod>
 80040f6:	4602      	mov	r2, r0
 80040f8:	460b      	mov	r3, r1
 80040fa:	4b0d      	ldr	r3, [pc, #52]	; (8004130 <UART_SetConfig+0x4e4>)
 80040fc:	fba3 1302 	umull	r1, r3, r3, r2
 8004100:	095b      	lsrs	r3, r3, #5
 8004102:	2164      	movs	r1, #100	; 0x64
 8004104:	fb01 f303 	mul.w	r3, r1, r3
 8004108:	1ad3      	subs	r3, r2, r3
 800410a:	011b      	lsls	r3, r3, #4
 800410c:	3332      	adds	r3, #50	; 0x32
 800410e:	4a08      	ldr	r2, [pc, #32]	; (8004130 <UART_SetConfig+0x4e4>)
 8004110:	fba2 2303 	umull	r2, r3, r2, r3
 8004114:	095b      	lsrs	r3, r3, #5
 8004116:	f003 020f 	and.w	r2, r3, #15
 800411a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	4422      	add	r2, r4
 8004122:	609a      	str	r2, [r3, #8]
}
 8004124:	bf00      	nop
 8004126:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800412a:	46bd      	mov	sp, r7
 800412c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004130:	51eb851f 	.word	0x51eb851f

08004134 <memset>:
 8004134:	4402      	add	r2, r0
 8004136:	4603      	mov	r3, r0
 8004138:	4293      	cmp	r3, r2
 800413a:	d100      	bne.n	800413e <memset+0xa>
 800413c:	4770      	bx	lr
 800413e:	f803 1b01 	strb.w	r1, [r3], #1
 8004142:	e7f9      	b.n	8004138 <memset+0x4>

08004144 <__libc_init_array>:
 8004144:	b570      	push	{r4, r5, r6, lr}
 8004146:	4d0d      	ldr	r5, [pc, #52]	; (800417c <__libc_init_array+0x38>)
 8004148:	4c0d      	ldr	r4, [pc, #52]	; (8004180 <__libc_init_array+0x3c>)
 800414a:	1b64      	subs	r4, r4, r5
 800414c:	10a4      	asrs	r4, r4, #2
 800414e:	2600      	movs	r6, #0
 8004150:	42a6      	cmp	r6, r4
 8004152:	d109      	bne.n	8004168 <__libc_init_array+0x24>
 8004154:	4d0b      	ldr	r5, [pc, #44]	; (8004184 <__libc_init_array+0x40>)
 8004156:	4c0c      	ldr	r4, [pc, #48]	; (8004188 <__libc_init_array+0x44>)
 8004158:	f000 f818 	bl	800418c <_init>
 800415c:	1b64      	subs	r4, r4, r5
 800415e:	10a4      	asrs	r4, r4, #2
 8004160:	2600      	movs	r6, #0
 8004162:	42a6      	cmp	r6, r4
 8004164:	d105      	bne.n	8004172 <__libc_init_array+0x2e>
 8004166:	bd70      	pop	{r4, r5, r6, pc}
 8004168:	f855 3b04 	ldr.w	r3, [r5], #4
 800416c:	4798      	blx	r3
 800416e:	3601      	adds	r6, #1
 8004170:	e7ee      	b.n	8004150 <__libc_init_array+0xc>
 8004172:	f855 3b04 	ldr.w	r3, [r5], #4
 8004176:	4798      	blx	r3
 8004178:	3601      	adds	r6, #1
 800417a:	e7f2      	b.n	8004162 <__libc_init_array+0x1e>
 800417c:	08004f48 	.word	0x08004f48
 8004180:	08004f48 	.word	0x08004f48
 8004184:	08004f48 	.word	0x08004f48
 8004188:	08004f4c 	.word	0x08004f4c

0800418c <_init>:
 800418c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800418e:	bf00      	nop
 8004190:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004192:	bc08      	pop	{r3}
 8004194:	469e      	mov	lr, r3
 8004196:	4770      	bx	lr

08004198 <_fini>:
 8004198:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800419a:	bf00      	nop
 800419c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800419e:	bc08      	pop	{r3}
 80041a0:	469e      	mov	lr, r3
 80041a2:	4770      	bx	lr
